
PRIM-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cae8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800cc88  0800cc88  0000dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd38  0800cd38  0000e104  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd38  0800cd38  0000dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd40  0800cd40  0000e104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd40  0800cd40  0000dd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd44  0800cd44  0000dd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800cd48  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b48  20000104  0800ce4c  0000e104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014c4c  0800ce4c  0000ec4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f40a  00000000  00000000  0000e134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec2  00000000  00000000  0002d53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00032400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001652  00000000  00000000  000340e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c004  00000000  00000000  0003573a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f42  00000000  00000000  0005173e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fc43  00000000  00000000  00076680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001162c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079fc  00000000  00000000  00116308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011dd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc70 	.word	0x0800cc70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800cc70 	.word	0x0800cc70

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <i2c1_pisiRegister>:
void initMutex(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af04      	add	r7, sp, #16
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	460b      	mov	r3, r1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	4613      	mov	r3, r2
 80004f0:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	b299      	uxth	r1, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	230a      	movs	r3, #10
 8000502:	9302      	str	r3, [sp, #8]
 8000504:	2301      	movs	r3, #1
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	1d7b      	adds	r3, r7, #5
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	4804      	ldr	r0, [pc, #16]	@ (8000520 <i2c1_pisiRegister+0x40>)
 8000510:	f001 fa7e 	bl	8001a10 <HAL_I2C_Mem_Write>
 8000514:	4603      	mov	r3, r0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000120 	.word	0x20000120

08000524 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af04      	add	r7, sp, #16
 800052a:	603a      	str	r2, [r7, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	460b      	mov	r3, r1
 8000534:	71bb      	strb	r3, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800053a:	797b      	ldrb	r3, [r7, #5]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d906      	bls.n	800054e <i2c1_beriRegistre+0x2a>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b19      	cmp	r3, #25
 8000544:	d103      	bne.n	800054e <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800054c:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	b299      	uxth	r1, r3
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	b298      	uxth	r0, r3
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	b29b      	uxth	r3, r3
 8000560:	797a      	ldrb	r2, [r7, #5]
 8000562:	9202      	str	r2, [sp, #8]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4602      	mov	r2, r0
 800056e:	4803      	ldr	r0, [pc, #12]	@ (800057c <i2c1_beriRegistre+0x58>)
 8000570:	f001 fb48 	bl	8001c04 <HAL_I2C_Mem_Read>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000120 	.word	0x20000120

08000580 <initOrientation>:

void initOrientation() { // ne pozabit klicati te funkcije
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000584:	2227      	movs	r2, #39	@ 0x27
 8000586:	2120      	movs	r1, #32
 8000588:	2019      	movs	r0, #25
 800058a:	f7ff ffa9 	bl	80004e0 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 800058e:	2288      	movs	r2, #136	@ 0x88
 8000590:	2123      	movs	r1, #35	@ 0x23
 8000592:	2019      	movs	r0, #25
 8000594:	f7ff ffa4 	bl	80004e0 <i2c1_pisiRegister>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005ac:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <spi1_beriRegister+0x50>)
 80005ba:	f001 f8b1 	bl	8001720 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	f107 010e 	add.w	r1, r7, #14
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2302      	movs	r3, #2
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <spi1_beriRegister+0x54>)
 80005ce:	f005 f8df 	bl	8005790 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2108      	movs	r1, #8
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <spi1_beriRegister+0x50>)
 80005d8:	f001 f8a2 	bl	8001720 <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 80005dc:	89bb      	ldrh	r3, [r7, #12]
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b2db      	uxtb	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	20000204 	.word	0x20000204

080005f4 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	b21a      	sxth	r2, r3
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	b21b      	sxth	r3, r3
 800060e:	4313      	orrs	r3, r2
 8000610:	b21b      	sxth	r3, r3
 8000612:	b29b      	uxth	r3, r3
 8000614:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2108      	movs	r1, #8
 800061a:	4809      	ldr	r0, [pc, #36]	@ (8000640 <spi1_pisiRegister+0x4c>)
 800061c:	f001 f880 	bl	8001720 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000620:	f107 010e 	add.w	r1, r7, #14
 8000624:	2302      	movs	r3, #2
 8000626:	2202      	movs	r2, #2
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <spi1_pisiRegister+0x50>)
 800062a:	f004 fe54 	bl	80052d6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2108      	movs	r1, #8
 8000632:	4803      	ldr	r0, [pc, #12]	@ (8000640 <spi1_pisiRegister+0x4c>)
 8000634:	f001 f874 	bl	8001720 <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	20000204 	.word	0x20000204

08000648 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800065e:	b2db      	uxtb	r3, r3
 8000660:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	480c      	ldr	r0, [pc, #48]	@ (8000698 <spi1_beriRegistre+0x50>)
 8000668:	f001 f85a 	bl	8001720 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 800066c:	1df9      	adds	r1, r7, #7
 800066e:	230a      	movs	r3, #10
 8000670:	2201      	movs	r2, #1
 8000672:	480a      	ldr	r0, [pc, #40]	@ (800069c <spi1_beriRegistre+0x54>)
 8000674:	f004 fe2f 	bl	80052d6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	b29a      	uxth	r2, r3
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	6839      	ldr	r1, [r7, #0]
 8000680:	4806      	ldr	r0, [pc, #24]	@ (800069c <spi1_beriRegistre+0x54>)
 8000682:	f004 ff6c 	bl	800555e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2108      	movs	r1, #8
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <spi1_beriRegistre+0x50>)
 800068c:	f001 f848 	bl	8001720 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	20000204 	.word	0x20000204

080006a0 <initGyro>:

void initGyro() { // ne pozabit klicat te funkcije
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
    // preverimo ali smo "poklicali" pravi senzor
    uint8_t cip = spi1_beriRegister(0x0F);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f7ff ff78 	bl	800059c <spi1_beriRegister>
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2bd4      	cmp	r3, #212	@ 0xd4
 80006b4:	d004      	beq.n	80006c0 <initGyro+0x20>
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2bd3      	cmp	r3, #211	@ 0xd3
 80006ba:	d001      	beq.n	80006c0 <initGyro+0x20>
        for (;;);
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x0F); // zbudi ziroskop in omogoci osi
 80006c0:	210f      	movs	r1, #15
 80006c2:	2020      	movs	r0, #32
 80006c4:	f7ff ff96 	bl	80005f4 <spi1_pisiRegister>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <initMutex>:

void initMutex(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	mutexHandle = xSemaphoreCreateMutex();
 80006d4:	2001      	movs	r0, #1
 80006d6:	f007 fab1 	bl	8007c3c <xQueueCreateMutex>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <initMutex+0x20>)
 80006de:	6013      	str	r3, [r2, #0]
	if (mutexHandle == NULL) {
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <initMutex+0x20>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <initMutex+0x1c>
		Error_Handler();
 80006e8:	f000 fada 	bl	8000ca0 <Error_Handler>
	}
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000025c 	.word	0x2000025c

080006f4 <sendDataGyro>:

void sendDataGyro(void *pvParameters){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	while(1){
		int16_t meritev[4];
		meritev[0] = 0xaaab;
 80006fc:	f64a 23ab 	movw	r3, #43691	@ 0xaaab
 8000700:	813b      	strh	r3, [r7, #8]

		spi1_beriRegistre(0x28, (uint8_t*)&meritev[1], 6);
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	3302      	adds	r3, #2
 8000708:	2206      	movs	r2, #6
 800070a:	4619      	mov	r1, r3
 800070c:	2028      	movs	r0, #40	@ 0x28
 800070e:	f7ff ff9b 	bl	8000648 <spi1_beriRegistre>

		// POZOR: tukaj čakamo, dokler na PC-ju podatkov ne preberemo
		while(CDC_Transmit_FS((uint8_t*)&meritev, 8));
 8000712:	bf00      	nop
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2108      	movs	r1, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f00b fe0e 	bl	800c33c <CDC_Transmit_FS>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f6      	bne.n	8000714 <sendDataGyro+0x20>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	4803      	ldr	r0, [pc, #12]	@ (8000738 <sendDataGyro+0x44>)
 800072c:	f001 f811 	bl	8001752 <HAL_GPIO_TogglePin>
		vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for 500ms
 8000730:	20c8      	movs	r0, #200	@ 0xc8
 8000732:	f007 ff7f 	bl	8008634 <vTaskDelay>
	while(1){
 8000736:	e7e1      	b.n	80006fc <sendDataGyro+0x8>
 8000738:	40020c00 	.word	0x40020c00

0800073c <sendDataAccelerometer>:
	}
}

void sendDataAccelerometer(void *pvParameters){
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	while(1){
		int16_t meritev[4];
		meritev[0] = 0xaaac;
 8000744:	f64a 23ac 	movw	r3, #43692	@ 0xaaac
 8000748:	813b      	strh	r3, [r7, #8]

		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[1], 6);
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	1c9a      	adds	r2, r3, #2
 8000750:	2306      	movs	r3, #6
 8000752:	2128      	movs	r1, #40	@ 0x28
 8000754:	2019      	movs	r0, #25
 8000756:	f7ff fee5 	bl	8000524 <i2c1_beriRegistre>

		while(CDC_Transmit_FS((uint8_t*)&meritev, 8));
 800075a:	bf00      	nop
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	2108      	movs	r1, #8
 8000762:	4618      	mov	r0, r3
 8000764:	f00b fdea 	bl	800c33c <CDC_Transmit_FS>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f6      	bne.n	800075c <sendDataAccelerometer+0x20>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800076e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000772:	4803      	ldr	r0, [pc, #12]	@ (8000780 <sendDataAccelerometer+0x44>)
 8000774:	f000 ffed 	bl	8001752 <HAL_GPIO_TogglePin>
		vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for 500ms
 8000778:	20c8      	movs	r0, #200	@ 0xc8
 800077a:	f007 ff5b 	bl	8008634 <vTaskDelay>
	while(1){
 800077e:	e7e1      	b.n	8000744 <sendDataAccelerometer+0x8>
 8000780:	40020c00 	.word	0x40020c00

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fcfd 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f84f 	bl	8000830 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000792:	f000 f8b5 	bl	8000900 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 f997 	bl	8000ac8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800079a:	f000 f8d1 	bl	8000940 <MX_I2C1_Init>
  MX_I2S2_Init();
 800079e:	f000 f8ff 	bl	80009a0 <MX_I2S2_Init>
  MX_I2S3_Init();
 80007a2:	f000 f92b 	bl	80009fc <MX_I2S3_Init>
  MX_SPI1_Init();
 80007a6:	f000 f959 	bl	8000a5c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80007aa:	f00b fc69 	bl	800c080 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  initMutex();
 80007ae:	f7ff ff8f 	bl	80006d0 <initMutex>

  __HAL_I2C_ENABLE(&hi2c1);
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <main+0x90>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <main+0x90>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f042 0201 	orr.w	r2, r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
  initOrientation();
 80007c2:	f7ff fedd 	bl	8000580 <initOrientation>

  __HAL_SPI_ENABLE(&hspi1);
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <main+0x94>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <main+0x94>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007d4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 80007d6:	2201      	movs	r2, #1
 80007d8:	2108      	movs	r1, #8
 80007da:	4810      	ldr	r0, [pc, #64]	@ (800081c <main+0x98>)
 80007dc:	f000 ffa0 	bl	8001720 <HAL_GPIO_WritePin>
  initGyro();
 80007e0:	f7ff ff5e 	bl	80006a0 <initGyro>

  xTaskCreate(
 80007e4:	2300      	movs	r3, #0
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	2301      	movs	r3, #1
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	490b      	ldr	r1, [pc, #44]	@ (8000820 <main+0x9c>)
 80007f2:	480c      	ldr	r0, [pc, #48]	@ (8000824 <main+0xa0>)
 80007f4:	f007 fdb2 	bl	800835c <xTaskCreate>
		"sendData_Gyro",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  xTaskCreate(
 80007f8:	2300      	movs	r3, #0
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2300      	movs	r3, #0
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	4908      	ldr	r1, [pc, #32]	@ (8000828 <main+0xa4>)
 8000806:	4809      	ldr	r0, [pc, #36]	@ (800082c <main+0xa8>)
 8000808:	f007 fda8 	bl	800835c <xTaskCreate>
		"sendData_Accelerometer",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  vTaskStartScheduler();
 800080c:	f007 ff48 	bl	80086a0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <main+0x8c>
 8000814:	20000120 	.word	0x20000120
 8000818:	20000204 	.word	0x20000204
 800081c:	40021000 	.word	0x40021000
 8000820:	0800cc88 	.word	0x0800cc88
 8000824:	080006f5 	.word	0x080006f5
 8000828:	0800cc98 	.word	0x0800cc98
 800082c:	0800073d 	.word	0x0800073d

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	@ 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f00c f9dc 	bl	800cbfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <SystemClock_Config+0xc8>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a26      	ldr	r2, [pc, #152]	@ (80008f8 <SystemClock_Config+0xc8>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
 8000864:	4b24      	ldr	r3, [pc, #144]	@ (80008f8 <SystemClock_Config+0xc8>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <SystemClock_Config+0xcc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a20      	ldr	r2, [pc, #128]	@ (80008fc <SystemClock_Config+0xcc>)
 800087a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <SystemClock_Config+0xcc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008a4:	23c0      	movs	r3, #192	@ 0xc0
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008ac:	2308      	movs	r3, #8
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fe7d 	bl	80045b4 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c0:	f000 f9ee 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2302      	movs	r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2103      	movs	r1, #3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 f8df 	bl	8004aa4 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008ec:	f000 f9d8 	bl	8000ca0 <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3750      	adds	r7, #80	@ 0x50
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000916:	2301      	movs	r3, #1
 8000918:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800091a:	23c8      	movs	r3, #200	@ 0xc8
 800091c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800091e:	2305      	movs	r3, #5
 8000920:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4618      	mov	r0, r3
 800092a:	f004 faf9 	bl	8004f20 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000934:	f000 f9b4 	bl	8000ca0 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_I2C1_Init+0x54>)
 8000946:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <MX_I2C1_Init+0x58>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_I2C1_Init+0x54>)
 800094c:	4a13      	ldr	r2, [pc, #76]	@ (800099c <MX_I2C1_Init+0x5c>)
 800094e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_I2C1_Init+0x54>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_I2C1_Init+0x54>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_I2C1_Init+0x54>)
 8000960:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000964:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_I2C1_Init+0x54>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_I2C1_Init+0x54>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_I2C1_Init+0x54>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_I2C1_Init+0x54>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_I2C1_Init+0x54>)
 8000980:	f000 ff02 	bl	8001788 <HAL_I2C_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800098a:	f000 f989 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000120 	.word	0x20000120
 8000998:	40005400 	.word	0x40005400
 800099c:	00061a80 	.word	0x00061a80

080009a0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	@ (80009f4 <MX_I2S2_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009c6:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <MX_I2S2_Init+0x58>)
 80009c8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009d8:	2201      	movs	r2, #1
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_I2S2_Init+0x50>)
 80009de:	f001 fef7 	bl	80027d0 <HAL_I2S_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 f95a 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000174 	.word	0x20000174
 80009f4:	40003800 	.word	0x40003800
 80009f8:	00017700 	.word	0x00017700

080009fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a02:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <MX_I2S3_Init+0x58>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a06:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a0c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a20:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a24:	4a0c      	ldr	r2, [pc, #48]	@ (8000a58 <MX_I2S3_Init+0x5c>)
 8000a26:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_I2S3_Init+0x54>)
 8000a3c:	f001 fec8 	bl	80027d0 <HAL_I2S_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a46:	f000 f92b 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200001bc 	.word	0x200001bc
 8000a54:	40003c00 	.word	0x40003c00
 8000a58:	00017700 	.word	0x00017700

08000a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a62:	4a18      	ldr	r2, [pc, #96]	@ (8000ac4 <MX_SPI1_Init+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a90:	2218      	movs	r2, #24
 8000a92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000aa8:	220a      	movs	r2, #10
 8000aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_SPI1_Init+0x64>)
 8000aae:	f004 fb89 	bl	80051c4 <HAL_SPI_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ab8:	f000 f8f2 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000204 	.word	0x20000204
 8000ac4:	40013000 	.word	0x40013000

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	@ 0x30
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	4b61      	ldr	r3, [pc, #388]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a60      	ldr	r2, [pc, #384]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b5e      	ldr	r3, [pc, #376]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0310 	and.w	r3, r3, #16
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	4b5a      	ldr	r3, [pc, #360]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a59      	ldr	r2, [pc, #356]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b57      	ldr	r3, [pc, #348]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b53      	ldr	r3, [pc, #332]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a52      	ldr	r2, [pc, #328]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b50      	ldr	r3, [pc, #320]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b4c      	ldr	r3, [pc, #304]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b49      	ldr	r3, [pc, #292]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b45      	ldr	r3, [pc, #276]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a44      	ldr	r2, [pc, #272]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b42      	ldr	r3, [pc, #264]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c68 <MX_GPIO_Init+0x1a0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2108      	movs	r1, #8
 8000b8a:	4838      	ldr	r0, [pc, #224]	@ (8000c6c <MX_GPIO_Init+0x1a4>)
 8000b8c:	f000 fdc8 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	4836      	ldr	r0, [pc, #216]	@ (8000c70 <MX_GPIO_Init+0x1a8>)
 8000b96:	f000 fdc3 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ba0:	4834      	ldr	r0, [pc, #208]	@ (8000c74 <MX_GPIO_Init+0x1ac>)
 8000ba2:	f000 fdbd 	bl	8001720 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	482c      	ldr	r0, [pc, #176]	@ (8000c6c <MX_GPIO_Init+0x1a4>)
 8000bba:	f000 fc2d 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4825      	ldr	r0, [pc, #148]	@ (8000c6c <MX_GPIO_Init+0x1a4>)
 8000bd6:	f000 fc1f 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000bda:	2332      	movs	r3, #50	@ 0x32
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bde:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <MX_GPIO_Init+0x1a4>)
 8000bf0:	f000 fc12 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4819      	ldr	r0, [pc, #100]	@ (8000c70 <MX_GPIO_Init+0x1a8>)
 8000c0c:	f000 fc04 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c14:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4814      	ldr	r0, [pc, #80]	@ (8000c78 <MX_GPIO_Init+0x1b0>)
 8000c26:	f000 fbf7 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c2a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000c2e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <MX_GPIO_Init+0x1ac>)
 8000c44:	f000 fbe8 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	@ (8000c74 <MX_GPIO_Init+0x1ac>)
 8000c5c:	f000 fbdc 	bl	8001418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	3730      	adds	r7, #48	@ 0x30
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	40020000 	.word	0x40020000

08000c7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8e:	f000 fa9d 	bl	80011cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40000c00 	.word	0x40000c00

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <Error_Handler+0x8>

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	@ (8000d80 <HAL_I2C_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12c      	bne.n	8000d78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_I2C_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a17      	ldr	r2, [pc, #92]	@ (8000d84 <HAL_I2C_MspInit+0x88>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_I2C_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d3a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d40:	2312      	movs	r3, #18
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <HAL_I2C_MspInit+0x8c>)
 8000d58:	f000 fb5e 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_I2C_MspInit+0x88>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <HAL_I2C_MspInit+0x88>)
 8000d66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_I2C_MspInit+0x88>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	@ 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40005400 	.word	0x40005400
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020400 	.word	0x40020400

08000d8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08e      	sub	sp, #56	@ 0x38
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a59      	ldr	r2, [pc, #356]	@ (8000f10 <HAL_I2S_MspInit+0x184>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d15b      	bne.n	8000e66 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	4b58      	ldr	r3, [pc, #352]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a57      	ldr	r2, [pc, #348]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b55      	ldr	r3, [pc, #340]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	4b51      	ldr	r3, [pc, #324]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a50      	ldr	r2, [pc, #320]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	4b4a      	ldr	r3, [pc, #296]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a49      	ldr	r2, [pc, #292]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b47      	ldr	r3, [pc, #284]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e12:	2306      	movs	r3, #6
 8000e14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	483e      	ldr	r0, [pc, #248]	@ (8000f18 <HAL_I2S_MspInit+0x18c>)
 8000e1e:	f000 fafb 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e22:	2308      	movs	r3, #8
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e32:	2305      	movs	r3, #5
 8000e34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4836      	ldr	r0, [pc, #216]	@ (8000f18 <HAL_I2S_MspInit+0x18c>)
 8000e3e:	f000 faeb 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e54:	2305      	movs	r3, #5
 8000e56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	482f      	ldr	r0, [pc, #188]	@ (8000f1c <HAL_I2S_MspInit+0x190>)
 8000e60:	f000 fada 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e64:	e04f      	b.n	8000f06 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f20 <HAL_I2S_MspInit+0x194>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d14a      	bne.n	8000f06 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e94:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_I2S_MspInit+0x188>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <HAL_I2S_MspInit+0x198>)
 8000ee0:	f000 fa9a 	bl	8001418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ee4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <HAL_I2S_MspInit+0x18c>)
 8000f02:	f000 fa89 	bl	8001418 <HAL_GPIO_Init>
}
 8000f06:	bf00      	nop
 8000f08:	3738      	adds	r7, #56	@ 0x38
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40003800 	.word	0x40003800
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40003c00 	.word	0x40003c00
 8000f24:	40020000 	.word	0x40020000

08000f28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a19      	ldr	r2, [pc, #100]	@ (8000fac <HAL_SPI_MspInit+0x84>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12b      	bne.n	8000fa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a17      	ldr	r2, [pc, #92]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f82:	23e0      	movs	r3, #224	@ 0xe0
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f92:	2305      	movs	r3, #5
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <HAL_SPI_MspInit+0x8c>)
 8000f9e:	f000 fa3b 	bl	8001418 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	@ 0x38
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b33      	ldr	r3, [pc, #204]	@ (800109c <HAL_InitTick+0xe4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	4a32      	ldr	r2, [pc, #200]	@ (800109c <HAL_InitTick+0xe4>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	4b30      	ldr	r3, [pc, #192]	@ (800109c <HAL_InitTick+0xe4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe4:	f107 0210 	add.w	r2, r7, #16
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 ff64 	bl	8004ebc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ffe:	f003 ff49 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8001002:	6378      	str	r0, [r7, #52]	@ 0x34
 8001004:	e004      	b.n	8001010 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001006:	f003 ff45 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 800100a:	4603      	mov	r3, r0
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001012:	4a23      	ldr	r2, [pc, #140]	@ (80010a0 <HAL_InitTick+0xe8>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	0c9b      	lsrs	r3, r3, #18
 800101a:	3b01      	subs	r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <HAL_InitTick+0xec>)
 8001020:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <HAL_InitTick+0xf0>)
 8001022:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <HAL_InitTick+0xec>)
 8001026:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800102a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800102c:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <HAL_InitTick+0xec>)
 800102e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001030:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <HAL_InitTick+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <HAL_InitTick+0xec>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_InitTick+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001044:	4817      	ldr	r0, [pc, #92]	@ (80010a4 <HAL_InitTick+0xec>)
 8001046:	f004 fe8f 	bl	8005d68 <HAL_TIM_Base_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001050:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001054:	2b00      	cmp	r3, #0
 8001056:	d11b      	bne.n	8001090 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001058:	4812      	ldr	r0, [pc, #72]	@ (80010a4 <HAL_InitTick+0xec>)
 800105a:	f004 fedf 	bl	8005e1c <HAL_TIM_Base_Start_IT>
 800105e:	4603      	mov	r3, r0
 8001060:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001064:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001068:	2b00      	cmp	r3, #0
 800106a:	d111      	bne.n	8001090 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800106c:	2032      	movs	r0, #50	@ 0x32
 800106e:	f000 f9c5 	bl	80013fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d808      	bhi.n	800108a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	2032      	movs	r0, #50	@ 0x32
 800107e:	f000 f9a1 	bl	80013c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_InitTick+0xf4>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e002      	b.n	8001090 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001090:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001094:	4618      	mov	r0, r3
 8001096:	3738      	adds	r7, #56	@ 0x38
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	431bde83 	.word	0x431bde83
 80010a4:	20000260 	.word	0x20000260
 80010a8:	40000c00 	.word	0x40000c00
 80010ac:	20000004 	.word	0x20000004

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM5_IRQHandler+0x10>)
 80010ee:	f004 fef7 	bl	8005ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000260 	.word	0x20000260

080010fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <OTG_FS_IRQHandler+0x10>)
 8001102:	f002 f949 	bl	8003398 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20014548 	.word	0x20014548

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001138:	f7ff ffea 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	@ (8001180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f00b fd53 	bl	800cc0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fb0d 	bl	8000784 <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001178:	0800cd48 	.word	0x0800cd48
  ldr r2, =_sbss
 800117c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001180:	20014c4c 	.word	0x20014c4c

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f8fc 	bl	80013ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	200f      	movs	r0, #15
 80011b8:	f7ff fefe 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fd76 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	200002a8 	.word	0x200002a8

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200002a8 	.word	0x200002a8

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4907      	ldr	r1, [pc, #28]	@ (80012f0 <__NVIC_EnableIRQ+0x38>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	@ (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	@ (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	4313      	orrs	r3, r2
         );
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	@ 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff4c 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d6:	f7ff ff61 	bl	800129c <__NVIC_GetPriorityGrouping>
 80013da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff ffb1 	bl	8001348 <NVIC_EncodePriority>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff80 	bl	80012f4 <__NVIC_SetPriority>
}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff54 	bl	80012b8 <__NVIC_EnableIRQ>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	@ 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e159      	b.n	80016e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8148 	bne.w	80016e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a2 	beq.w	80016e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b57      	ldr	r3, [pc, #348]	@ (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	4a56      	ldr	r2, [pc, #344]	@ (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ae:	4b54      	ldr	r3, [pc, #336]	@ (8001700 <HAL_GPIO_Init+0x2e8>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a52      	ldr	r2, [pc, #328]	@ (8001704 <HAL_GPIO_Init+0x2ec>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	@ (8001708 <HAL_GPIO_Init+0x2f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x202>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	@ (800170c <HAL_GPIO_Init+0x2f4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x1fe>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	@ (8001710 <HAL_GPIO_Init+0x2f8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x1fa>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	@ (8001714 <HAL_GPIO_Init+0x2fc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x1f6>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	@ (8001718 <HAL_GPIO_Init+0x300>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x1f2>
 8001606:	2304      	movs	r3, #4
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160a:	2307      	movs	r3, #7
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x204>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	@ (8001704 <HAL_GPIO_Init+0x2ec>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b38      	ldr	r3, [pc, #224]	@ (800171c <HAL_GPIO_Init+0x304>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a2f      	ldr	r2, [pc, #188]	@ (800171c <HAL_GPIO_Init+0x304>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <HAL_GPIO_Init+0x304>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a24      	ldr	r2, [pc, #144]	@ (800171c <HAL_GPIO_Init+0x304>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <HAL_GPIO_Init+0x304>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1a      	ldr	r2, [pc, #104]	@ (800171c <HAL_GPIO_Init+0x304>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_GPIO_Init+0x304>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <HAL_GPIO_Init+0x304>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f aea2 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	041a      	lsls	r2, r3, #16
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43d9      	mvns	r1, r3
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	400b      	ands	r3, r1
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e12b      	b.n	80019f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff faa4 	bl	8000cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2224      	movs	r2, #36	@ 0x24
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017ec:	f003 fb52 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 80017f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a81      	ldr	r2, [pc, #516]	@ (80019fc <HAL_I2C_Init+0x274>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d807      	bhi.n	800180c <HAL_I2C_Init+0x84>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4a80      	ldr	r2, [pc, #512]	@ (8001a00 <HAL_I2C_Init+0x278>)
 8001800:	4293      	cmp	r3, r2
 8001802:	bf94      	ite	ls
 8001804:	2301      	movls	r3, #1
 8001806:	2300      	movhi	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e006      	b.n	800181a <HAL_I2C_Init+0x92>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a04 <HAL_I2C_Init+0x27c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	bf94      	ite	ls
 8001814:	2301      	movls	r3, #1
 8001816:	2300      	movhi	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0e7      	b.n	80019f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4a78      	ldr	r2, [pc, #480]	@ (8001a08 <HAL_I2C_Init+0x280>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a6a      	ldr	r2, [pc, #424]	@ (80019fc <HAL_I2C_Init+0x274>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d802      	bhi.n	800185c <HAL_I2C_Init+0xd4>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3301      	adds	r3, #1
 800185a:	e009      	b.n	8001870 <HAL_I2C_Init+0xe8>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	4a69      	ldr	r2, [pc, #420]	@ (8001a0c <HAL_I2C_Init+0x284>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	3301      	adds	r3, #1
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	430b      	orrs	r3, r1
 8001876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001882:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	495c      	ldr	r1, [pc, #368]	@ (80019fc <HAL_I2C_Init+0x274>)
 800188c:	428b      	cmp	r3, r1
 800188e:	d819      	bhi.n	80018c4 <HAL_I2C_Init+0x13c>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e59      	subs	r1, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fbb1 f3f3 	udiv	r3, r1, r3
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018a4:	400b      	ands	r3, r1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00a      	beq.n	80018c0 <HAL_I2C_Init+0x138>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1e59      	subs	r1, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018be:	e051      	b.n	8001964 <HAL_I2C_Init+0x1dc>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e04f      	b.n	8001964 <HAL_I2C_Init+0x1dc>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d111      	bne.n	80018f0 <HAL_I2C_Init+0x168>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e58      	subs	r0, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	440b      	add	r3, r1
 80018da:	fbb0 f3f3 	udiv	r3, r0, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	e012      	b.n	8001916 <HAL_I2C_Init+0x18e>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	0099      	lsls	r1, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_Init+0x196>
 800191a:	2301      	movs	r3, #1
 800191c:	e022      	b.n	8001964 <HAL_I2C_Init+0x1dc>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10e      	bne.n	8001944 <HAL_I2C_Init+0x1bc>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1e58      	subs	r0, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	440b      	add	r3, r1
 8001934:	fbb0 f3f3 	udiv	r3, r0, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001942:	e00f      	b.n	8001964 <HAL_I2C_Init+0x1dc>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1e58      	subs	r0, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	0099      	lsls	r1, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	fbb0 f3f3 	udiv	r3, r0, r3
 800195a:	3301      	adds	r3, #1
 800195c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	6809      	ldr	r1, [r1, #0]
 8001968:	4313      	orrs	r3, r2
 800196a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001992:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6911      	ldr	r1, [r2, #16]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68d2      	ldr	r2, [r2, #12]
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2220      	movs	r2, #32
 80019de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	000186a0 	.word	0x000186a0
 8001a00:	001e847f 	.word	0x001e847f
 8001a04:	003d08ff 	.word	0x003d08ff
 8001a08:	431bde83 	.word	0x431bde83
 8001a0c:	10624dd3 	.word	0x10624dd3

08001a10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	817b      	strh	r3, [r7, #10]
 8001a22:	460b      	mov	r3, r1
 8001a24:	813b      	strh	r3, [r7, #8]
 8001a26:	4613      	mov	r3, r2
 8001a28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a2a:	f7ff fbe3 	bl	80011f4 <HAL_GetTick>
 8001a2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	f040 80d9 	bne.w	8001bf0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2319      	movs	r3, #25
 8001a44:	2201      	movs	r2, #1
 8001a46:	496d      	ldr	r1, [pc, #436]	@ (8001bfc <HAL_I2C_Mem_Write+0x1ec>)
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 fc8b 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
 8001a56:	e0cc      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Mem_Write+0x56>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e0c5      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x1e2>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d007      	beq.n	8001a8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2221      	movs	r2, #33	@ 0x21
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2240      	movs	r2, #64	@ 0x40
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a3a      	ldr	r2, [r7, #32]
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a4d      	ldr	r2, [pc, #308]	@ (8001c00 <HAL_I2C_Mem_Write+0x1f0>)
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ace:	88f8      	ldrh	r0, [r7, #6]
 8001ad0:	893a      	ldrh	r2, [r7, #8]
 8001ad2:	8979      	ldrh	r1, [r7, #10]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4603      	mov	r3, r0
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fac2 	bl	8002068 <I2C_RequestMemoryWrite>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d052      	beq.n	8001b90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e081      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 fd50 	bl	8002598 <I2C_WaitOnTXEFlagUntilTimeout>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d107      	bne.n	8001b16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e06b      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d11b      	bne.n	8001b90 <HAL_I2C_Mem_Write+0x180>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d017      	beq.n	8001b90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1aa      	bne.n	8001aee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 fd43 	bl	8002628 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d107      	bne.n	8001bc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e016      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001bf0:	2302      	movs	r3, #2
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	00100002 	.word	0x00100002
 8001c00:	ffff0000 	.word	0xffff0000

08001c04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	817b      	strh	r3, [r7, #10]
 8001c16:	460b      	mov	r3, r1
 8001c18:	813b      	strh	r3, [r7, #8]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c1e:	f7ff fae9 	bl	80011f4 <HAL_GetTick>
 8001c22:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	f040 8214 	bne.w	800205a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2319      	movs	r3, #25
 8001c38:	2201      	movs	r2, #1
 8001c3a:	497b      	ldr	r1, [pc, #492]	@ (8001e28 <HAL_I2C_Mem_Read+0x224>)
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fb91 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e207      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Mem_Read+0x56>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e200      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d007      	beq.n	8001c80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2222      	movs	r2, #34	@ 0x22
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2240      	movs	r2, #64	@ 0x40
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001caa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a5b      	ldr	r2, [pc, #364]	@ (8001e2c <HAL_I2C_Mem_Read+0x228>)
 8001cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cc2:	88f8      	ldrh	r0, [r7, #6]
 8001cc4:	893a      	ldrh	r2, [r7, #8]
 8001cc6:	8979      	ldrh	r1, [r7, #10]
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fa5e 	bl	8002194 <I2C_RequestMemoryRead>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1bc      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d113      	bne.n	8001d12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	623b      	str	r3, [r7, #32]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e190      	b.n	8002034 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d11b      	bne.n	8001d52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e170      	b.n	8002034 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d11b      	bne.n	8001d92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	e150      	b.n	8002034 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001da8:	e144      	b.n	8002034 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	f200 80f1 	bhi.w	8001f96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d123      	bne.n	8001e04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fc79 	bl	80026b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e145      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e02:	e117      	b.n	8002034 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d14e      	bne.n	8001eaa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e12:	2200      	movs	r2, #0
 8001e14:	4906      	ldr	r1, [pc, #24]	@ (8001e30 <HAL_I2C_Mem_Read+0x22c>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 faa4 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e11a      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
 8001e26:	bf00      	nop
 8001e28:	00100002 	.word	0x00100002
 8001e2c:	ffff0000 	.word	0xffff0000
 8001e30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ea8:	e0c4      	b.n	8002034 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	496c      	ldr	r1, [pc, #432]	@ (8002064 <HAL_I2C_Mem_Read+0x460>)
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fa55 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0cb      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4955      	ldr	r1, [pc, #340]	@ (8002064 <HAL_I2C_Mem_Read+0x460>)
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 fa27 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e09d      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f94:	e04e      	b.n	8002034 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fb8c 	bl	80026b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e058      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d124      	bne.n	8002034 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002000:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	f47f aeb6 	bne.w	8001daa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	3728      	adds	r7, #40	@ 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	00010004 	.word	0x00010004

08002068 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	817b      	strh	r3, [r7, #10]
 800207a:	460b      	mov	r3, r1
 800207c:	813b      	strh	r3, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	2200      	movs	r2, #0
 800209a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f960 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020b8:	d103      	bne.n	80020c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e05f      	b.n	8002186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020c6:	897b      	ldrh	r3, [r7, #10]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	6a3a      	ldr	r2, [r7, #32]
 80020da:	492d      	ldr	r1, [pc, #180]	@ (8002190 <I2C_RequestMemoryWrite+0x128>)
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f9bb 	bl	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e04c      	b.n	8002186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	6a39      	ldr	r1, [r7, #32]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fa46 	bl	8002598 <I2C_WaitOnTXEFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	2b04      	cmp	r3, #4
 8002118:	d107      	bne.n	800212a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e02b      	b.n	8002186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002134:	893b      	ldrh	r3, [r7, #8]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	e021      	b.n	8002184 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002140:	893b      	ldrh	r3, [r7, #8]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	b29b      	uxth	r3, r3
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002150:	6a39      	ldr	r1, [r7, #32]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fa20 	bl	8002598 <I2C_WaitOnTXEFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00d      	beq.n	800217a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	2b04      	cmp	r3, #4
 8002164:	d107      	bne.n	8002176 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e005      	b.n	8002186 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800217a:	893b      	ldrh	r3, [r7, #8]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	00010002 	.word	0x00010002

08002194 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	817b      	strh	r3, [r7, #10]
 80021a6:	460b      	mov	r3, r1
 80021a8:	813b      	strh	r3, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f8c2 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00d      	beq.n	8002202 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f4:	d103      	bne.n	80021fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0aa      	b.n	8002358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002202:	897b      	ldrh	r3, [r7, #10]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	4952      	ldr	r1, [pc, #328]	@ (8002360 <I2C_RequestMemoryRead+0x1cc>)
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f91d 	bl	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e097      	b.n	8002358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800223e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002240:	6a39      	ldr	r1, [r7, #32]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f9a8 	bl	8002598 <I2C_WaitOnTXEFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00d      	beq.n	800226a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	2b04      	cmp	r3, #4
 8002254:	d107      	bne.n	8002266 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e076      	b.n	8002358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d105      	bne.n	800227c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002270:	893b      	ldrh	r3, [r7, #8]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	e021      	b.n	80022c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800227c:	893b      	ldrh	r3, [r7, #8]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	b29b      	uxth	r3, r3
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f982 	bl	8002598 <I2C_WaitOnTXEFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d107      	bne.n	80022b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e050      	b.n	8002358 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022b6:	893b      	ldrh	r3, [r7, #8]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c2:	6a39      	ldr	r1, [r7, #32]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f967 	bl	8002598 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e035      	b.n	8002358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2200      	movs	r2, #0
 8002304:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f82b 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00d      	beq.n	8002330 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002322:	d103      	bne.n	800232c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e013      	b.n	8002358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002330:	897b      	ldrh	r3, [r7, #10]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	6a3a      	ldr	r2, [r7, #32]
 8002344:	4906      	ldr	r1, [pc, #24]	@ (8002360 <I2C_RequestMemoryRead+0x1cc>)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f886 	bl	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	00010002 	.word	0x00010002

08002364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	e048      	b.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d044      	beq.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7fe ff39 	bl	80011f4 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d139      	bne.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	0c1b      	lsrs	r3, r3, #16
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d10d      	bne.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	43da      	mvns	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4013      	ands	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	e00c      	b.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	43da      	mvns	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4013      	ands	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d116      	bne.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e023      	b.n	8002450 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	0c1b      	lsrs	r3, r3, #16
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10d      	bne.n	800242e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	43da      	mvns	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	e00c      	b.n	8002448 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	43da      	mvns	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4013      	ands	r3, r2
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	429a      	cmp	r2, r3
 800244c:	d093      	beq.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002466:	e071      	b.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002476:	d123      	bne.n	80024c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002486:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f043 0204 	orr.w	r2, r3, #4
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e067      	b.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d041      	beq.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c8:	f7fe fe94 	bl	80011f4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d302      	bcc.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d136      	bne.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10c      	bne.n	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	e00b      	b.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	43da      	mvns	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4013      	ands	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f043 0220 	orr.w	r2, r3, #32
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e021      	b.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10c      	bne.n	8002570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	43da      	mvns	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e00b      	b.n	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4013      	ands	r3, r2
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f af6d 	bne.w	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a4:	e034      	b.n	8002610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f8e3 	bl	8002772 <I2C_IsAcknowledgeFailed>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e034      	b.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d028      	beq.n	8002610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7fe fe19 	bl	80011f4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11d      	bne.n	8002610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025de:	2b80      	cmp	r3, #128	@ 0x80
 80025e0:	d016      	beq.n	8002610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e007      	b.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261a:	2b80      	cmp	r3, #128	@ 0x80
 800261c:	d1c3      	bne.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002634:	e034      	b.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f89b 	bl	8002772 <I2C_IsAcknowledgeFailed>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e034      	b.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d028      	beq.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264e:	f7fe fdd1 	bl	80011f4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11d      	bne.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b04      	cmp	r3, #4
 8002670:	d016      	beq.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e007      	b.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d1c3      	bne.n	8002636 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026c4:	e049      	b.n	800275a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d119      	bne.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0210 	mvn.w	r2, #16
 80026dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e030      	b.n	800276a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002708:	f7fe fd74 	bl	80011f4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	d302      	bcc.n	800271e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11d      	bne.n	800275a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002728:	2b40      	cmp	r3, #64	@ 0x40
 800272a:	d016      	beq.n	800275a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f043 0220 	orr.w	r2, r3, #32
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e007      	b.n	800276a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002764:	2b40      	cmp	r3, #64	@ 0x40
 8002766:	d1ae      	bne.n	80026c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002788:	d11b      	bne.n	80027c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002792:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f043 0204 	orr.w	r2, r3, #4
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e128      	b.n	8002a34 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a90      	ldr	r2, [pc, #576]	@ (8002a3c <HAL_I2S_Init+0x26c>)
 80027fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fe fac5 	bl	8000d8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002818:	f023 030f 	bic.w	r3, r3, #15
 800281c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2202      	movs	r2, #2
 8002824:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d060      	beq.n	80028f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002836:	2310      	movs	r3, #16
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e001      	b.n	8002840 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b20      	cmp	r3, #32
 8002846:	d802      	bhi.n	800284e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800284e:	2001      	movs	r0, #1
 8002850:	f002 fc56 	bl	8005100 <HAL_RCCEx_GetPeriphCLKFreq>
 8002854:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800285e:	d125      	bne.n	80028ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d010      	beq.n	800288a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	3305      	adds	r3, #5
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	e01f      	b.n	80028ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	fbb2 f2f3 	udiv	r2, r2, r3
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	461a      	mov	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	3305      	adds	r3, #5
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	e00e      	b.n	80028ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	461a      	mov	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	3305      	adds	r3, #5
 80028c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002a40 <HAL_I2S_Init+0x270>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	085b      	lsrs	r3, r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e003      	b.n	80028f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028f0:	2302      	movs	r3, #2
 80028f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d902      	bls.n	8002904 <HAL_I2S_Init+0x134>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2bff      	cmp	r3, #255	@ 0xff
 8002902:	d907      	bls.n	8002914 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e08f      	b.n	8002a34 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	ea42 0103 	orr.w	r1, r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	430a      	orrs	r2, r1
 8002926:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002932:	f023 030f 	bic.w	r3, r3, #15
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6851      	ldr	r1, [r2, #4]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6892      	ldr	r2, [r2, #8]
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68d2      	ldr	r2, [r2, #12]
 8002944:	4311      	orrs	r1, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6992      	ldr	r2, [r2, #24]
 800294a:	430a      	orrs	r2, r1
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002956:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d161      	bne.n	8002a24 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a38      	ldr	r2, [pc, #224]	@ (8002a44 <HAL_I2S_Init+0x274>)
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a37      	ldr	r2, [pc, #220]	@ (8002a48 <HAL_I2S_Init+0x278>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_I2S_Init+0x1a4>
 8002970:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_I2S_Init+0x27c>)
 8002972:	e001      	b.n	8002978 <HAL_I2S_Init+0x1a8>
 8002974:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	4932      	ldr	r1, [pc, #200]	@ (8002a48 <HAL_I2S_Init+0x278>)
 8002980:	428a      	cmp	r2, r1
 8002982:	d101      	bne.n	8002988 <HAL_I2S_Init+0x1b8>
 8002984:	4a31      	ldr	r2, [pc, #196]	@ (8002a4c <HAL_I2S_Init+0x27c>)
 8002986:	e001      	b.n	800298c <HAL_I2S_Init+0x1bc>
 8002988:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800298c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002990:	f023 030f 	bic.w	r3, r3, #15
 8002994:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2b      	ldr	r2, [pc, #172]	@ (8002a48 <HAL_I2S_Init+0x278>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_I2S_Init+0x1d4>
 80029a0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <HAL_I2S_Init+0x27c>)
 80029a2:	e001      	b.n	80029a8 <HAL_I2S_Init+0x1d8>
 80029a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029a8:	2202      	movs	r2, #2
 80029aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a25      	ldr	r2, [pc, #148]	@ (8002a48 <HAL_I2S_Init+0x278>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_I2S_Init+0x1ea>
 80029b6:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <HAL_I2S_Init+0x27c>)
 80029b8:	e001      	b.n	80029be <HAL_I2S_Init+0x1ee>
 80029ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029ca:	d003      	beq.n	80029d4 <HAL_I2S_Init+0x204>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80029d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	e001      	b.n	80029e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029ea:	4313      	orrs	r3, r2
 80029ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029fe:	4313      	orrs	r3, r2
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a0c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <HAL_I2S_Init+0x278>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_I2S_Init+0x24c>
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_I2S_Init+0x27c>)
 8002a1a:	e001      	b.n	8002a20 <HAL_I2S_Init+0x250>
 8002a1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a20:	897a      	ldrh	r2, [r7, #10]
 8002a22:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	08002b47 	.word	0x08002b47
 8002a40:	cccccccd 	.word	0xcccccccd
 8002a44:	08002c5d 	.word	0x08002c5d
 8002a48:	40003800 	.word	0x40003800
 8002a4c:	40003400 	.word	0x40003400

08002a50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	1c9a      	adds	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10e      	bne.n	8002ae0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ad0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffb8 	bl	8002a50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	b292      	uxth	r2, r2
 8002afc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b02:	1c9a      	adds	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10e      	bne.n	8002b3e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff93 	bl	8002a64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b086      	sub	sp, #24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d13a      	bne.n	8002bd8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d109      	bne.n	8002b80 <I2S_IRQHandler+0x3a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b76:	2b40      	cmp	r3, #64	@ 0x40
 8002b78:	d102      	bne.n	8002b80 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffb4 	bl	8002ae8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b86:	2b40      	cmp	r3, #64	@ 0x40
 8002b88:	d126      	bne.n	8002bd8 <I2S_IRQHandler+0x92>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d11f      	bne.n	8002bd8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ba6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f043 0202 	orr.w	r2, r3, #2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ff50 	bl	8002a78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d136      	bne.n	8002c52 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d109      	bne.n	8002c02 <I2S_IRQHandler+0xbc>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf8:	2b80      	cmp	r3, #128	@ 0x80
 8002bfa:	d102      	bne.n	8002c02 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff45 	bl	8002a8c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d122      	bne.n	8002c52 <I2S_IRQHandler+0x10c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d11b      	bne.n	8002c52 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c28:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff13 	bl	8002a78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a92      	ldr	r2, [pc, #584]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c76:	4b92      	ldr	r3, [pc, #584]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c78:	e001      	b.n	8002c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a8b      	ldr	r2, [pc, #556]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c94:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c96:	e001      	b.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca8:	d004      	beq.n	8002cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 8099 	bne.w	8002de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d107      	bne.n	8002cce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f925 	bl	8002f18 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9c8 	bl	8003078 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cee:	2b40      	cmp	r3, #64	@ 0x40
 8002cf0:	d13a      	bne.n	8002d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d035      	beq.n	8002d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6e      	ldr	r2, [pc, #440]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d06:	4b6e      	ldr	r3, [pc, #440]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d08:	e001      	b.n	8002d0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4969      	ldr	r1, [pc, #420]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d16:	428b      	cmp	r3, r1
 8002d18:	d101      	bne.n	8002d1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d1a:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d1c:	e001      	b.n	8002d22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d26:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f043 0202 	orr.w	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe88 	bl	8002a78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	f040 80c3 	bne.w	8002efa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80bd 	beq.w	8002efa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a49      	ldr	r2, [pc, #292]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d9a:	4b49      	ldr	r3, [pc, #292]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d9c:	e001      	b.n	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4944      	ldr	r1, [pc, #272]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002daa:	428b      	cmp	r3, r1
 8002dac:	d101      	bne.n	8002db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002dae:	4b44      	ldr	r3, [pc, #272]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002db0:	e001      	b.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002db2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002db6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002dba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0204 	orr.w	r2, r3, #4
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fe4a 	bl	8002a78 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002de4:	e089      	b.n	8002efa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8be 	bl	8002f7c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f8fd 	bl	8003014 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e20:	2b40      	cmp	r3, #64	@ 0x40
 8002e22:	d12f      	bne.n	8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d02a      	beq.n	8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e3c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1e      	ldr	r2, [pc, #120]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e4a:	e001      	b.n	8002e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4919      	ldr	r1, [pc, #100]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e5c:	4b18      	ldr	r3, [pc, #96]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e5e:	e001      	b.n	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fdfa 	bl	8002a78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d136      	bne.n	8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d031      	beq.n	8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a07      	ldr	r2, [pc, #28]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002ea2:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ea4:	e001      	b.n	8002eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ea6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4902      	ldr	r1, [pc, #8]	@ (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eb2:	428b      	cmp	r3, r1
 8002eb4:	d106      	bne.n	8002ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002eb6:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eb8:	e006      	b.n	8002ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002eba:	bf00      	nop
 8002ebc:	40003800 	.word	0x40003800
 8002ec0:	40003400 	.word	0x40003400
 8002ec4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ec8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ecc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002edc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	f043 0204 	orr.w	r2, r3, #4
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fdc0 	bl	8002a78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ef8:	e000      	b.n	8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002efa:	bf00      	nop
}
 8002efc:	bf00      	nop
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	1c99      	adds	r1, r3, #2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6251      	str	r1, [r2, #36]	@ 0x24
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d113      	bne.n	8002f72 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ffc9 	bl	8002f04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	1c99      	adds	r1, r3, #2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6251      	str	r1, [r2, #36]	@ 0x24
 8002f8e:	8819      	ldrh	r1, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1d      	ldr	r2, [pc, #116]	@ (800300c <I2SEx_TxISR_I2SExt+0x90>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <I2SEx_TxISR_I2SExt+0x22>
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <I2SEx_TxISR_I2SExt+0x94>)
 8002f9c:	e001      	b.n	8002fa2 <I2SEx_TxISR_I2SExt+0x26>
 8002f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fa2:	460a      	mov	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d121      	bne.n	8003002 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a12      	ldr	r2, [pc, #72]	@ (800300c <I2SEx_TxISR_I2SExt+0x90>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d101      	bne.n	8002fcc <I2SEx_TxISR_I2SExt+0x50>
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <I2SEx_TxISR_I2SExt+0x94>)
 8002fca:	e001      	b.n	8002fd0 <I2SEx_TxISR_I2SExt+0x54>
 8002fcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	490d      	ldr	r1, [pc, #52]	@ (800300c <I2SEx_TxISR_I2SExt+0x90>)
 8002fd8:	428b      	cmp	r3, r1
 8002fda:	d101      	bne.n	8002fe0 <I2SEx_TxISR_I2SExt+0x64>
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <I2SEx_TxISR_I2SExt+0x94>)
 8002fde:	e001      	b.n	8002fe4 <I2SEx_TxISR_I2SExt+0x68>
 8002fe0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fe4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fe8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff81 	bl	8002f04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40003800 	.word	0x40003800
 8003010:	40003400 	.word	0x40003400

08003014 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68d8      	ldr	r0, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	1c99      	adds	r1, r3, #2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800302c:	b282      	uxth	r2, r0
 800302e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003056:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff4a 	bl	8002f04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a20      	ldr	r2, [pc, #128]	@ (8003108 <I2SEx_RxISR_I2SExt+0x90>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <I2SEx_RxISR_I2SExt+0x16>
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <I2SEx_RxISR_I2SExt+0x94>)
 800308c:	e001      	b.n	8003092 <I2SEx_RxISR_I2SExt+0x1a>
 800308e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003092:	68d8      	ldr	r0, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	1c99      	adds	r1, r3, #2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800309e:	b282      	uxth	r2, r0
 80030a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d121      	bne.n	80030fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <I2SEx_RxISR_I2SExt+0x90>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d101      	bne.n	80030c8 <I2SEx_RxISR_I2SExt+0x50>
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <I2SEx_RxISR_I2SExt+0x94>)
 80030c6:	e001      	b.n	80030cc <I2SEx_RxISR_I2SExt+0x54>
 80030c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	490d      	ldr	r1, [pc, #52]	@ (8003108 <I2SEx_RxISR_I2SExt+0x90>)
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d101      	bne.n	80030dc <I2SEx_RxISR_I2SExt+0x64>
 80030d8:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <I2SEx_RxISR_I2SExt+0x94>)
 80030da:	e001      	b.n	80030e0 <I2SEx_RxISR_I2SExt+0x68>
 80030dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff03 	bl	8002f04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40003800 	.word	0x40003800
 800310c:	40003400 	.word	0x40003400

08003110 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
 8003116:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e101      	b.n	8003326 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f009 fa45 	bl	800c5cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003150:	d102      	bne.n	8003158 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f003 f98e 	bl	800647e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7c1a      	ldrb	r2, [r3, #16]
 800316a:	f88d 2000 	strb.w	r2, [sp]
 800316e:	3304      	adds	r3, #4
 8003170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003172:	f003 f86d 	bl	8006250 <USB_CoreInit>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0ce      	b.n	8003326 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f003 f986 	bl	80064a0 <USB_SetCurrentMode>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0bf      	b.n	8003326 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e04a      	b.n	8003242 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3315      	adds	r3, #21
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	3314      	adds	r3, #20
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	b298      	uxth	r0, r3
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	332e      	adds	r3, #46	@ 0x2e
 80031e8:	4602      	mov	r2, r0
 80031ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3318      	adds	r3, #24
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	331c      	adds	r3, #28
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3320      	adds	r3, #32
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3324      	adds	r3, #36	@ 0x24
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	3301      	adds	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	791b      	ldrb	r3, [r3, #4]
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	429a      	cmp	r2, r3
 800324a:	d3af      	bcc.n	80031ac <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e044      	b.n	80032dc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	3301      	adds	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	791b      	ldrb	r3, [r3, #4]
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3b5      	bcc.n	8003252 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7c1a      	ldrb	r2, [r3, #16]
 80032ee:	f88d 2000 	strb.w	r2, [sp]
 80032f2:	3304      	adds	r3, #4
 80032f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f6:	f003 f91f 	bl	8006538 <USB_DevInit>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e00c      	b.n	8003326 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f004 f969 	bl	80075f6 <USB_DevDisconnect>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_PCD_Start+0x1c>
 8003346:	2302      	movs	r3, #2
 8003348:	e022      	b.n	8003390 <HAL_PCD_Start+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f003 f870 	bl	800645c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f004 f917 	bl	80075b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b08d      	sub	sp, #52	@ 0x34
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 f9d5 	bl	800775e <USB_GetMode>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 848c 	bne.w	8003cd4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f004 f939 	bl	8007638 <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8482 	beq.w	8003cd2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f004 f926 	bl	8007638 <USB_ReadInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d107      	bne.n	8003406 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f002 0202 	and.w	r2, r2, #2
 8003404:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f004 f914 	bl	8007638 <USB_ReadInterrupts>
 8003410:	4603      	mov	r3, r0
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b10      	cmp	r3, #16
 8003418:	d161      	bne.n	80034de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699a      	ldr	r2, [r3, #24]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0210 	bic.w	r2, r2, #16
 8003428:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	0c5b      	lsrs	r3, r3, #17
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	2b02      	cmp	r3, #2
 8003454:	d124      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d035      	beq.n	80034ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800346c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	6a38      	ldr	r0, [r7, #32]
 8003476:	f003 ff4b 	bl	8007310 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	441a      	add	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003498:	441a      	add	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	615a      	str	r2, [r3, #20]
 800349e:	e016      	b.n	80034ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	0c5b      	lsrs	r3, r3, #17
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d110      	bne.n	80034ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034b2:	2208      	movs	r2, #8
 80034b4:	4619      	mov	r1, r3
 80034b6:	6a38      	ldr	r0, [r7, #32]
 80034b8:	f003 ff2a 	bl	8007310 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c8:	441a      	add	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0210 	orr.w	r2, r2, #16
 80034dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 f8a8 	bl	8007638 <USB_ReadInterrupts>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034f2:	f040 80a7 	bne.w	8003644 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f004 f8ad 	bl	800765e <USB_ReadDevAllOutEpInterrupt>
 8003504:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003506:	e099      	b.n	800363c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 808e 	beq.w	8003630 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f004 f8d1 	bl	80076c6 <USB_ReadDevOutEPInterrupt>
 8003524:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353c:	461a      	mov	r2, r3
 800353e:	2301      	movs	r3, #1
 8003540:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003542:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fea3 	bl	8004290 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003560:	461a      	mov	r2, r3
 8003562:	2308      	movs	r3, #8
 8003564:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003566:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 ff79 	bl	8004460 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003584:	461a      	mov	r2, r3
 8003586:	2310      	movs	r3, #16
 8003588:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d030      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359c:	2b80      	cmp	r3, #128	@ 0x80
 800359e:	d109      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f009 f8fe 	bl	800c7e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	2302      	movs	r3, #2
 80035f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360c:	461a      	mov	r2, r3
 800360e:	2320      	movs	r3, #32
 8003610:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800362e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	3301      	adds	r3, #1
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	f47f af62 	bne.w	8003508 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fff5 	bl	8007638 <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003654:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003658:	f040 80db 	bne.w	8003812 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f004 f816 	bl	8007692 <USB_ReadDevAllInEpInterrupt>
 8003666:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800366c:	e0cd      	b.n	800380a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80c2 	beq.w	80037fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f004 f83c 	bl	8007702 <USB_ReadDevInEPInterrupt>
 800368a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d057      	beq.n	8003746 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	2201      	movs	r2, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036b6:	4013      	ands	r3, r2
 80036b8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c6:	461a      	mov	r2, r3
 80036c8:	2301      	movs	r3, #1
 80036ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	799b      	ldrb	r3, [r3, #6]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d132      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3320      	adds	r3, #32
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4403      	add	r3, r0
 80036f4:	331c      	adds	r3, #28
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4419      	add	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4403      	add	r3, r0
 8003708:	3320      	adds	r3, #32
 800370a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	2b00      	cmp	r3, #0
 8003710:	d113      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3324      	adds	r3, #36	@ 0x24
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003732:	461a      	mov	r2, r3
 8003734:	2101      	movs	r1, #1
 8003736:	f004 f843 	bl	80077c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f008 ffd2 	bl	800c6ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375c:	461a      	mov	r2, r3
 800375e:	2308      	movs	r3, #8
 8003760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	2310      	movs	r3, #16
 800377c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	2340      	movs	r3, #64	@ 0x40
 8003798:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d023      	beq.n	80037ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a6:	6a38      	ldr	r0, [r7, #32]
 80037a8:	f003 f82a 	bl	8006800 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3310      	adds	r3, #16
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	78db      	ldrb	r3, [r3, #3]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f009 f815 	bl	800c804 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e6:	461a      	mov	r2, r3
 80037e8:	2302      	movs	r3, #2
 80037ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fcbd 	bl	8004178 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	3301      	adds	r3, #1
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	f47f af2e 	bne.w	800366e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f003 ff0e 	bl	8007638 <USB_ReadInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003826:	d122      	bne.n	800386e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003842:	2b01      	cmp	r3, #1
 8003844:	d108      	bne.n	8003858 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800384e:	2100      	movs	r1, #0
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fea3 	bl	800459c <HAL_PCDEx_LPM_Callback>
 8003856:	e002      	b.n	800385e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f008 ffb3 	bl	800c7c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800386c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fee0 	bl	8007638 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003882:	d112      	bne.n	80038aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f008 ff6f 	bl	800c778 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80038a8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f003 fec2 	bl	8007638 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038be:	f040 80b7 	bne.w	8003a30 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2110      	movs	r1, #16
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 ff8f 	bl	8006800 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e6:	e046      	b.n	8003976 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f4:	461a      	mov	r2, r3
 80038f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390c:	0151      	lsls	r1, r2, #5
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	440a      	add	r2, r1
 8003912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003916:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800391a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800392e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800394a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800394e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800396a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800396e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	3301      	adds	r3, #1
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	791b      	ldrb	r3, [r3, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397e:	4293      	cmp	r3, r2
 8003980:	d3b2      	bcc.n	80038e8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003990:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003994:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7bdb      	ldrb	r3, [r3, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ae:	f043 030b 	orr.w	r3, r3, #11
 80039b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039c4:	f043 030b 	orr.w	r3, r3, #11
 80039c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ca:	e015      	b.n	80039f8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039de:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80039e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039f2:	f043 030b 	orr.w	r3, r3, #11
 80039f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f003 fed0 	bl	80077c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 fdff 	bl	8007638 <USB_ReadInterrupts>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a44:	d123      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fe95 	bl	800777a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 ff4c 	bl	80068f2 <USB_GetDevSpeed>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681c      	ldr	r4, [r3, #0]
 8003a66:	f001 fa09 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8003a6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a70:	461a      	mov	r2, r3
 8003a72:	4620      	mov	r0, r4
 8003a74:	f002 fc50 	bl	8006318 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f008 fe5e 	bl	800c73a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fdd0 	bl	8007638 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f008 fe3b 	bl	800c71e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f002 0208 	and.w	r2, r2, #8
 8003ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f003 fdbb 	bl	8007638 <USB_ReadInterrupts>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac8:	2b80      	cmp	r3, #128	@ 0x80
 8003aca:	d123      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8003adc:	e014      	b.n	8003b08 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fb0a 	bl	8004116 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	3301      	adds	r3, #1
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	791b      	ldrb	r3, [r3, #4]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d3e4      	bcc.n	8003ade <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fd8d 	bl	8007638 <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b28:	d13c      	bne.n	8003ba4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b2e:	e02b      	b.n	8003b88 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3318      	adds	r3, #24
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d115      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	da12      	bge.n	8003b82 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3317      	adds	r3, #23
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 faca 	bl	8004116 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	3301      	adds	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d3cd      	bcc.n	8003b30 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f003 fd45 	bl	8007638 <USB_ReadInterrupts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb8:	d156      	bne.n	8003c68 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bba:	2301      	movs	r3, #1
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbe:	e045      	b.n	8003c4c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d12e      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003be8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da2b      	bge.n	8003c46 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003bfa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d121      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c42:	6053      	str	r3, [r2, #4]
            break;
 8003c44:	e008      	b.n	8003c58 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	3301      	adds	r3, #1
 8003c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	791b      	ldrb	r3, [r3, #4]
 8003c50:	461a      	mov	r2, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d3b3      	bcc.n	8003bc0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 fce3 	bl	8007638 <USB_ReadInterrupts>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7c:	d10a      	bne.n	8003c94 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f008 fdd2 	bl	800c828 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f003 fccd 	bl	8007638 <USB_ReadInterrupts>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d115      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f008 fdc2 	bl	800c844 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	e000      	b.n	8003cd4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003cd2:	bf00      	nop
    }
  }
}
 8003cd4:	3734      	adds	r7, #52	@ 0x34
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd90      	pop	{r4, r7, pc}

08003cda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_PCD_SetAddress+0x1a>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e012      	b.n	8003d1a <HAL_PCD_SetAddress+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f003 fc2c 	bl	8007568 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	4608      	mov	r0, r1
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4603      	mov	r3, r0
 8003d32:	70fb      	strb	r3, [r7, #3]
 8003d34:	460b      	mov	r3, r1
 8003d36:	803b      	strh	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	da0f      	bge.n	8003d68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	3310      	adds	r3, #16
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	705a      	strb	r2, [r3, #1]
 8003d66:	e00f      	b.n	8003d88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d94:	883b      	ldrh	r3, [r7, #0]
 8003d96:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	78ba      	ldrb	r2, [r7, #2]
 8003da2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003db6:	78bb      	ldrb	r3, [r7, #2]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d102      	bne.n	8003dc2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_PCD_EP_Open+0xae>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e00e      	b.n	8003dee <HAL_PCD_EP_Open+0xcc>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68f9      	ldr	r1, [r7, #12]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f002 fdac 	bl	800693c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003dec:	7afb      	ldrb	r3, [r7, #11]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da0f      	bge.n	8003e2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 020f 	and.w	r2, r3, #15
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	3310      	adds	r3, #16
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3304      	adds	r3, #4
 8003e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	705a      	strb	r2, [r3, #1]
 8003e28:	e00f      	b.n	8003e4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	f003 020f 	and.w	r2, r3, #15
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_PCD_EP_Close+0x6e>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e00e      	b.n	8003e82 <HAL_PCD_EP_Close+0x8c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f002 fdea 	bl	8006a4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	460b      	mov	r3, r1
 8003e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	f003 020f 	and.w	r2, r3, #15
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	799b      	ldrb	r3, [r3, #6]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d102      	bne.n	8003ee6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	799b      	ldrb	r3, [r3, #6]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	f002 fe87 	bl	8006c04 <USB_EPStartXfer>

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f40:	7afb      	ldrb	r3, [r7, #11]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	3310      	adds	r3, #16
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f70:	7afb      	ldrb	r3, [r7, #11]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	799b      	ldrb	r3, [r3, #6]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d102      	bne.n	8003f8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	799b      	ldrb	r3, [r3, #6]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6979      	ldr	r1, [r7, #20]
 8003f96:	f002 fe35 	bl	8006c04 <USB_EPStartXfer>

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	7912      	ldrb	r2, [r2, #4]
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e04f      	b.n	8004062 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	da0f      	bge.n	8003fea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	3310      	adds	r3, #16
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4413      	add	r3, r2
 8003fde:	3304      	adds	r3, #4
 8003fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	705a      	strb	r2, [r3, #1]
 8003fe8:	e00d      	b.n	8004006 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_PCD_EP_SetStall+0x82>
 8004022:	2302      	movs	r3, #2
 8004024:	e01d      	b.n	8004062 <HAL_PCD_EP_SetStall+0xbe>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	4618      	mov	r0, r3
 8004036:	f003 f9c3 	bl	80073c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7999      	ldrb	r1, [r3, #6]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004052:	461a      	mov	r2, r3
 8004054:	f003 fbb4 	bl	80077c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	7912      	ldrb	r2, [r2, #4]
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e042      	b.n	800410e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408c:	2b00      	cmp	r3, #0
 800408e:	da0f      	bge.n	80040b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 020f 	and.w	r2, r3, #15
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	3310      	adds	r3, #16
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	705a      	strb	r2, [r3, #1]
 80040ae:	e00f      	b.n	80040d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f003 020f 	and.w	r2, r3, #15
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	3304      	adds	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_PCD_EP_ClrStall+0x86>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e00e      	b.n	800410e <HAL_PCD_EP_ClrStall+0xa4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	4618      	mov	r0, r3
 8004100:	f003 f9cc 	bl	800749c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004126:	2b00      	cmp	r3, #0
 8004128:	da0c      	bge.n	8004144 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	3310      	adds	r3, #16
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e00c      	b.n	800415e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	f003 020f 	and.w	r2, r3, #15
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	4618      	mov	r0, r3
 8004166:	f002 ffeb 	bl	8007140 <USB_EPStopXfer>
 800416a:	4603      	mov	r3, r0
 800416c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800416e:	7afb      	ldrb	r3, [r7, #11]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	@ 0x28
 800417c:	af02      	add	r7, sp, #8
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	3310      	adds	r3, #16
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	3304      	adds	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d901      	bls.n	80041b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e06b      	b.n	8004288 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d902      	bls.n	80041cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3303      	adds	r3, #3
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041d4:	e02a      	b.n	800422c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d902      	bls.n	80041f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3303      	adds	r3, #3
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68d9      	ldr	r1, [r3, #12]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4603      	mov	r3, r0
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f003 f840 	bl	8007294 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	441a      	add	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	429a      	cmp	r2, r3
 8004240:	d809      	bhi.n	8004256 <PCD_WriteEmptyTxFifo+0xde>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800424a:	429a      	cmp	r2, r3
 800424c:	d203      	bcs.n	8004256 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1bf      	bne.n	80041d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	429a      	cmp	r2, r3
 8004260:	d811      	bhi.n	8004286 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2201      	movs	r2, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	43db      	mvns	r3, r3
 800427c:	6939      	ldr	r1, [r7, #16]
 800427e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004282:	4013      	ands	r3, r2
 8004284:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	333c      	adds	r3, #60	@ 0x3c
 80042a8:	3304      	adds	r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	799b      	ldrb	r3, [r3, #6]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d17b      	bne.n	80043be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4a61      	ldr	r2, [pc, #388]	@ (8004458 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	f240 80b9 	bls.w	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80b3 	beq.w	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f2:	461a      	mov	r2, r3
 80042f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042f8:	6093      	str	r3, [r2, #8]
 80042fa:	e0a7      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	2320      	movs	r3, #32
 8004316:	6093      	str	r3, [r2, #8]
 8004318:	e098      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 8093 	bne.w	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4a4b      	ldr	r2, [pc, #300]	@ (8004458 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d90f      	bls.n	800434e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800434a:	6093      	str	r3, [r2, #8]
 800434c:	e07e      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	3304      	adds	r3, #4
 8004362:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1a      	ldr	r2, [r3, #32]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	0159      	lsls	r1, r3, #5
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	440b      	add	r3, r1
 8004370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d114      	bne.n	80043b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004398:	461a      	mov	r2, r3
 800439a:	2101      	movs	r1, #1
 800439c:	f003 fa10 	bl	80077c0 <USB_EP0_OutStart>
 80043a0:	e006      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	441a      	add	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f008 f97c 	bl	800c6b4 <HAL_PCD_DataOutStageCallback>
 80043bc:	e046      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4a26      	ldr	r2, [pc, #152]	@ (800445c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d124      	bne.n	8004410 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e2:	6093      	str	r3, [r2, #8]
 80043e4:	e032      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	2320      	movs	r3, #32
 8004400:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f008 f953 	bl	800c6b4 <HAL_PCD_DataOutStageCallback>
 800440e:	e01d      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d114      	bne.n	8004440 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004438:	461a      	mov	r2, r3
 800443a:	2100      	movs	r1, #0
 800443c:	f003 f9c0 	bl	80077c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f008 f934 	bl	800c6b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	4f54300a 	.word	0x4f54300a
 800445c:	4f54310a 	.word	0x4f54310a

08004460 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	333c      	adds	r3, #60	@ 0x3c
 8004478:	3304      	adds	r3, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a15      	ldr	r2, [pc, #84]	@ (80044e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d90e      	bls.n	80044b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ac:	461a      	mov	r2, r3
 80044ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f008 f8eb 	bl	800c690 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d90c      	bls.n	80044dc <PCD_EP_OutSetupPacket_int+0x7c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	799b      	ldrb	r3, [r3, #6]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d108      	bne.n	80044dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044d4:	461a      	mov	r2, r3
 80044d6:	2101      	movs	r1, #1
 80044d8:	f003 f972 	bl	80077c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	4f54300a 	.word	0x4f54300a

080044ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
 80044f8:	4613      	mov	r3, r2
 80044fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800450a:	883b      	ldrh	r3, [r7, #0]
 800450c:	0419      	lsls	r1, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	430a      	orrs	r2, r1
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28
 8004518:	e028      	b.n	800456c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	4413      	add	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e00d      	b.n	800454a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	3340      	adds	r3, #64	@ 0x40
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	3301      	adds	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
 800454a:	7bfa      	ldrb	r2, [r7, #15]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	3b01      	subs	r3, #1
 8004550:	429a      	cmp	r2, r3
 8004552:	d3ec      	bcc.n	800452e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004554:	883b      	ldrh	r3, [r7, #0]
 8004556:	0418      	lsls	r0, r3, #16
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6819      	ldr	r1, [r3, #0]
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	3b01      	subs	r3, #1
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	4302      	orrs	r2, r0
 8004564:	3340      	adds	r3, #64	@ 0x40
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e267      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d075      	beq.n	80046be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045d2:	4b88      	ldr	r3, [pc, #544]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d00c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045de:	4b85      	ldr	r3, [pc, #532]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d112      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ea:	4b82      	ldr	r3, [pc, #520]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f6:	d10b      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	4b7e      	ldr	r3, [pc, #504]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d05b      	beq.n	80046bc <HAL_RCC_OscConfig+0x108>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d157      	bne.n	80046bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e242      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004618:	d106      	bne.n	8004628 <HAL_RCC_OscConfig+0x74>
 800461a:	4b76      	ldr	r3, [pc, #472]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a75      	ldr	r2, [pc, #468]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e01d      	b.n	8004664 <HAL_RCC_OscConfig+0xb0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x98>
 8004632:	4b70      	ldr	r3, [pc, #448]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a6f      	ldr	r2, [pc, #444]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b6d      	ldr	r3, [pc, #436]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a6c      	ldr	r2, [pc, #432]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0xb0>
 800464c:	4b69      	ldr	r3, [pc, #420]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a68      	ldr	r2, [pc, #416]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b66      	ldr	r3, [pc, #408]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a65      	ldr	r2, [pc, #404]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 800465e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d013      	beq.n	8004694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fc fdc2 	bl	80011f4 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004674:	f7fc fdbe 	bl	80011f4 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	@ 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e207      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004686:	4b5b      	ldr	r3, [pc, #364]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0xc0>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fc fdae 	bl	80011f4 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800469c:	f7fc fdaa 	bl	80011f4 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	@ 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1f3      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ae:	4b51      	ldr	r3, [pc, #324]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0xe8>
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d063      	beq.n	8004792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ca:	4b4a      	ldr	r3, [pc, #296]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d6:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d11c      	bne.n	800471c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e2:	4b44      	ldr	r3, [pc, #272]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d116      	bne.n	800471c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ee:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_RCC_OscConfig+0x152>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e1c7      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004706:	4b3b      	ldr	r3, [pc, #236]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4937      	ldr	r1, [pc, #220]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471a:	e03a      	b.n	8004792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004724:	4b34      	ldr	r3, [pc, #208]	@ (80047f8 <HAL_RCC_OscConfig+0x244>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fc fd63 	bl	80011f4 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004732:	f7fc fd5f 	bl	80011f4 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e1a8      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004744:	4b2b      	ldr	r3, [pc, #172]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004750:	4b28      	ldr	r3, [pc, #160]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4925      	ldr	r1, [pc, #148]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]
 8004764:	e015      	b.n	8004792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004766:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <HAL_RCC_OscConfig+0x244>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fc fd42 	bl	80011f4 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004774:	f7fc fd3e 	bl	80011f4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e187      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004786:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d036      	beq.n	800480c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a6:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <HAL_RCC_OscConfig+0x248>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fc fd22 	bl	80011f4 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b4:	f7fc fd1e 	bl	80011f4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e167      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c6:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80047c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x200>
 80047d2:	e01b      	b.n	800480c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d4:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <HAL_RCC_OscConfig+0x248>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047da:	f7fc fd0b 	bl	80011f4 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e0:	e00e      	b.n	8004800 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fc fd07 	bl	80011f4 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d907      	bls.n	8004800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e150      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470000 	.word	0x42470000
 80047fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	4b88      	ldr	r3, [pc, #544]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ea      	bne.n	80047e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8097 	beq.w	8004948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4b81      	ldr	r3, [pc, #516]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	4a7c      	ldr	r2, [pc, #496]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	@ 0x40
 800483a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b77      	ldr	r3, [pc, #476]	@ (8004a28 <HAL_RCC_OscConfig+0x474>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d118      	bne.n	8004888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004856:	4b74      	ldr	r3, [pc, #464]	@ (8004a28 <HAL_RCC_OscConfig+0x474>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a73      	ldr	r2, [pc, #460]	@ (8004a28 <HAL_RCC_OscConfig+0x474>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7fc fcc7 	bl	80011f4 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486a:	f7fc fcc3 	bl	80011f4 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e10c      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a28 <HAL_RCC_OscConfig+0x474>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x2ea>
 8004890:	4b64      	ldr	r3, [pc, #400]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004894:	4a63      	ldr	r2, [pc, #396]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6713      	str	r3, [r2, #112]	@ 0x70
 800489c:	e01c      	b.n	80048d8 <HAL_RCC_OscConfig+0x324>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b05      	cmp	r3, #5
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x30c>
 80048a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048be:	e00b      	b.n	80048d8 <HAL_RCC_OscConfig+0x324>
 80048c0:	4b58      	ldr	r3, [pc, #352]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c4:	4a57      	ldr	r2, [pc, #348]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80048cc:	4b55      	ldr	r3, [pc, #340]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d0:	4a54      	ldr	r2, [pc, #336]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f023 0304 	bic.w	r3, r3, #4
 80048d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d015      	beq.n	800490c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fc fc88 	bl	80011f4 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fc fc84 	bl	80011f4 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e0cb      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fe:	4b49      	ldr	r3, [pc, #292]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ee      	beq.n	80048e8 <HAL_RCC_OscConfig+0x334>
 800490a:	e014      	b.n	8004936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490c:	f7fc fc72 	bl	80011f4 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fc fc6e 	bl	80011f4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0b5      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ee      	bne.n	8004914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d105      	bne.n	8004948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493c:	4b39      	ldr	r3, [pc, #228]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	4a38      	ldr	r2, [pc, #224]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004946:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80a1 	beq.w	8004a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004952:	4b34      	ldr	r3, [pc, #208]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b08      	cmp	r3, #8
 800495c:	d05c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d141      	bne.n	80049ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004966:	4b31      	ldr	r3, [pc, #196]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fc fc42 	bl	80011f4 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004974:	f7fc fc3e 	bl	80011f4 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e087      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	4b27      	ldr	r3, [pc, #156]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	019b      	lsls	r3, r3, #6
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	3b01      	subs	r3, #1
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	491b      	ldr	r1, [pc, #108]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049bc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c2:	f7fc fc17 	bl	80011f4 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fc fc13 	bl	80011f4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e05c      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049dc:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x416>
 80049e8:	e054      	b.n	8004a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ea:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fc fc00 	bl	80011f4 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fc fbfc 	bl	80011f4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e045      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x444>
 8004a16:	e03d      	b.n	8004a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e038      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <HAL_RCC_OscConfig+0x4ec>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d028      	beq.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d121      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d11a      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d111      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0cc      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b68      	ldr	r3, [pc, #416]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d90c      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b65      	ldr	r3, [pc, #404]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b63      	ldr	r3, [pc, #396]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0b8      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d020      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af8:	4b59      	ldr	r3, [pc, #356]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a58      	ldr	r2, [pc, #352]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b10:	4b53      	ldr	r3, [pc, #332]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4a52      	ldr	r2, [pc, #328]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1c:	4b50      	ldr	r3, [pc, #320]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	494d      	ldr	r1, [pc, #308]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d044      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d119      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b62:	4b3f      	ldr	r3, [pc, #252]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e06f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b72:	4b3b      	ldr	r3, [pc, #236]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e067      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b82:	4b37      	ldr	r3, [pc, #220]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 0203 	bic.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4934      	ldr	r1, [pc, #208]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b94:	f7fc fb2e 	bl	80011f4 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fc fb2a 	bl	80011f4 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e04f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 020c 	and.w	r2, r3, #12
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d1eb      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b25      	ldr	r3, [pc, #148]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d20c      	bcs.n	8004bec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b22      	ldr	r3, [pc, #136]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b20      	ldr	r3, [pc, #128]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e032      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf8:	4b19      	ldr	r3, [pc, #100]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4916      	ldr	r1, [pc, #88]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c16:	4b12      	ldr	r3, [pc, #72]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	490e      	ldr	r1, [pc, #56]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c2a:	f000 f821 	bl	8004c70 <HAL_RCC_GetSysClockFreq>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	490a      	ldr	r1, [pc, #40]	@ (8004c64 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	5ccb      	ldrb	r3, [r1, r3]
 8004c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c42:	4a09      	ldr	r2, [pc, #36]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c46:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fc f9b4 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40023c00 	.word	0x40023c00
 8004c60:	40023800 	.word	0x40023800
 8004c64:	0800cd20 	.word	0x0800cd20
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	20000004 	.word	0x20000004

08004c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c74:	b094      	sub	sp, #80	@ 0x50
 8004c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c88:	4b79      	ldr	r3, [pc, #484]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d00d      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	f200 80e1 	bhi.w	8004e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d003      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ca2:	e0db      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca4:	4b73      	ldr	r3, [pc, #460]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ca8:	e0db      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004caa:	4b73      	ldr	r3, [pc, #460]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cae:	e0d8      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cba:	4b6d      	ldr	r3, [pc, #436]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d063      	beq.n	8004d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	2200      	movs	r2, #0
 8004cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cda:	2300      	movs	r3, #0
 8004cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	f04f 0000 	mov.w	r0, #0
 8004cea:	f04f 0100 	mov.w	r1, #0
 8004cee:	0159      	lsls	r1, r3, #5
 8004cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf4:	0150      	lsls	r0, r2, #5
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	1a51      	subs	r1, r2, r1
 8004cfe:	6139      	str	r1, [r7, #16]
 8004d00:	4629      	mov	r1, r5
 8004d02:	eb63 0301 	sbc.w	r3, r3, r1
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d14:	4659      	mov	r1, fp
 8004d16:	018b      	lsls	r3, r1, #6
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d1e:	4651      	mov	r1, sl
 8004d20:	018a      	lsls	r2, r1, #6
 8004d22:	4651      	mov	r1, sl
 8004d24:	ebb2 0801 	subs.w	r8, r2, r1
 8004d28:	4659      	mov	r1, fp
 8004d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d42:	4690      	mov	r8, r2
 8004d44:	4699      	mov	r9, r3
 8004d46:	4623      	mov	r3, r4
 8004d48:	eb18 0303 	adds.w	r3, r8, r3
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	462b      	mov	r3, r5
 8004d50:	eb49 0303 	adc.w	r3, r9, r3
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d62:	4629      	mov	r1, r5
 8004d64:	024b      	lsls	r3, r1, #9
 8004d66:	4621      	mov	r1, r4
 8004d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	024a      	lsls	r2, r1, #9
 8004d70:	4610      	mov	r0, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d76:	2200      	movs	r2, #0
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d80:	f7fb fa36 	bl	80001f0 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4613      	mov	r3, r2
 8004d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d8c:	e058      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8e:	4b38      	ldr	r3, [pc, #224]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	099b      	lsrs	r3, r3, #6
 8004d94:	2200      	movs	r2, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	4611      	mov	r1, r2
 8004d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	2300      	movs	r3, #0
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004da8:	4642      	mov	r2, r8
 8004daa:	464b      	mov	r3, r9
 8004dac:	f04f 0000 	mov.w	r0, #0
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	0159      	lsls	r1, r3, #5
 8004db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dba:	0150      	lsls	r0, r2, #5
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004de0:	ebb2 040a 	subs.w	r4, r2, sl
 8004de4:	eb63 050b 	sbc.w	r5, r3, fp
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	00eb      	lsls	r3, r5, #3
 8004df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df6:	00e2      	lsls	r2, r4, #3
 8004df8:	4614      	mov	r4, r2
 8004dfa:	461d      	mov	r5, r3
 8004dfc:	4643      	mov	r3, r8
 8004dfe:	18e3      	adds	r3, r4, r3
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	464b      	mov	r3, r9
 8004e04:	eb45 0303 	adc.w	r3, r5, r3
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e16:	4629      	mov	r1, r5
 8004e18:	028b      	lsls	r3, r1, #10
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e20:	4621      	mov	r1, r4
 8004e22:	028a      	lsls	r2, r1, #10
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	61fa      	str	r2, [r7, #28]
 8004e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e34:	f7fb f9dc 	bl	80001f0 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e5a:	e002      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3750      	adds	r7, #80	@ 0x50
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	007a1200 	.word	0x007a1200

08004e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e80:	4b03      	ldr	r3, [pc, #12]	@ (8004e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000000 	.word	0x20000000

08004e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e98:	f7ff fff0 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0a9b      	lsrs	r3, r3, #10
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	@ (8004eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800cd30 	.word	0x0800cd30

08004ebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	220f      	movs	r2, #15
 8004eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ecc:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <HAL_RCC_GetClockConfig+0x5c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0203 	and.w	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f18 <HAL_RCC_GetClockConfig+0x5c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ef0:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	08db      	lsrs	r3, r3, #3
 8004ef6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004efe:	4b07      	ldr	r3, [pc, #28]	@ (8004f1c <HAL_RCC_GetClockConfig+0x60>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0207 	and.w	r2, r3, #7
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	601a      	str	r2, [r3, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40023c00 	.word	0x40023c00

08004f20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d038      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f48:	4b68      	ldr	r3, [pc, #416]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4e:	f7fc f951 	bl	80011f4 <HAL_GetTick>
 8004f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f56:	f7fc f94d 	bl	80011f4 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e0bd      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f68:	4b61      	ldr	r3, [pc, #388]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	071b      	lsls	r3, r3, #28
 8004f86:	495a      	ldr	r1, [pc, #360]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f8e:	4b57      	ldr	r3, [pc, #348]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f94:	f7fc f92e 	bl	80011f4 <HAL_GetTick>
 8004f98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f9c:	f7fc f92a 	bl	80011f4 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e09a      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fae:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8083 	beq.w	80050ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	4b48      	ldr	r3, [pc, #288]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	4a47      	ldr	r2, [pc, #284]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fd8:	4b45      	ldr	r3, [pc, #276]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fe4:	4b43      	ldr	r3, [pc, #268]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a42      	ldr	r2, [pc, #264]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fc f900 	bl	80011f4 <HAL_GetTick>
 8004ff4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff8:	f7fc f8fc 	bl	80011f4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e06c      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800500a:	4b3a      	ldr	r3, [pc, #232]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005016:	4b36      	ldr	r3, [pc, #216]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02f      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d028      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005034:	4b2e      	ldr	r3, [pc, #184]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800503e:	4b2e      	ldr	r3, [pc, #184]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005044:	4b2c      	ldr	r3, [pc, #176]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800504a:	4a29      	ldr	r2, [pc, #164]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005050:	4b27      	ldr	r3, [pc, #156]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d114      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800505c:	f7fc f8ca 	bl	80011f4 <HAL_GetTick>
 8005060:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005062:	e00a      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005064:	f7fc f8c6 	bl	80011f4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e034      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507a:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0ee      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005092:	d10d      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005094:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80050a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a8:	4911      	ldr	r1, [pc, #68]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
 80050ae:	e005      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80050b0:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4a0e      	ldr	r2, [pc, #56]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050ba:	6093      	str	r3, [r2, #8]
 80050bc:	4b0c      	ldr	r3, [pc, #48]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c8:	4909      	ldr	r1, [pc, #36]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	7d1a      	ldrb	r2, [r3, #20]
 80050de:	4b07      	ldr	r3, [pc, #28]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80050e0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	42470068 	.word	0x42470068
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40007000 	.word	0x40007000
 80050f8:	42470e40 	.word	0x42470e40
 80050fc:	424711e0 	.word	0x424711e0

08005100 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d141      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800511e:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005134:	d131      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005136:	4b20      	ldr	r3, [pc, #128]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005138:	617b      	str	r3, [r7, #20]
          break;
 800513a:	e031      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800513c:	4b1d      	ldr	r3, [pc, #116]	@ (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005148:	d109      	bne.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800514a:	4b1a      	ldr	r3, [pc, #104]	@ (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800514c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005154:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	e008      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800515e:	4b15      	ldr	r3, [pc, #84]	@ (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005168:	4a15      	ldr	r2, [pc, #84]	@ (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005170:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005184:	4b0b      	ldr	r3, [pc, #44]	@ (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800518a:	0f1b      	lsrs	r3, r3, #28
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	617b      	str	r3, [r7, #20]
          break;
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
          break;
 800519e:	bf00      	nop
        }
      }
      break;
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80051a2:	bf00      	nop
    }
  }
  return frequency;
 80051a4:	697b      	ldr	r3, [r7, #20]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00bb8000 	.word	0x00bb8000
 80051bc:	007a1200 	.word	0x007a1200
 80051c0:	00f42400 	.word	0x00f42400

080051c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e07b      	b.n	80052ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051e6:	d009      	beq.n	80051fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	61da      	str	r2, [r3, #28]
 80051ee:	e005      	b.n	80051fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fb fe86 	bl	8000f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005232:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005280:	ea42 0103 	orr.w	r1, r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	f003 0104 	and.w	r1, r3, #4
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	f003 0210 	and.w	r2, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b088      	sub	sp, #32
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e6:	f7fb ff85 	bl	80011f4 <HAL_GetTick>
 80052ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d001      	beq.n	8005300 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80052fc:	2302      	movs	r3, #2
 80052fe:	e12a      	b.n	8005556 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_SPI_Transmit+0x36>
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e122      	b.n	8005556 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_SPI_Transmit+0x48>
 800531a:	2302      	movs	r3, #2
 800531c:	e11b      	b.n	8005556 <HAL_SPI_Transmit+0x280>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2203      	movs	r2, #3
 800532a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800536c:	d10f      	bne.n	800538e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800537c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800538c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005398:	2b40      	cmp	r3, #64	@ 0x40
 800539a:	d007      	beq.n	80053ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053b4:	d152      	bne.n	800545c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_SPI_Transmit+0xee>
 80053be:	8b7b      	ldrh	r3, [r7, #26]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d145      	bne.n	8005450 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c8:	881a      	ldrh	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d4:	1c9a      	adds	r2, r3, #2
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053e8:	e032      	b.n	8005450 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d112      	bne.n	800541e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fc:	881a      	ldrh	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800541c:	e018      	b.n	8005450 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800541e:	f7fb fee9 	bl	80011f4 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d803      	bhi.n	8005436 <HAL_SPI_Transmit+0x160>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d102      	bne.n	800543c <HAL_SPI_Transmit+0x166>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e082      	b.n	8005556 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1c7      	bne.n	80053ea <HAL_SPI_Transmit+0x114>
 800545a:	e053      	b.n	8005504 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_SPI_Transmit+0x194>
 8005464:	8b7b      	ldrh	r3, [r7, #26]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d147      	bne.n	80054fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005490:	e033      	b.n	80054fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d113      	bne.n	80054c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	7812      	ldrb	r2, [r2, #0]
 80054ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054c6:	e018      	b.n	80054fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054c8:	f7fb fe94 	bl	80011f4 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d803      	bhi.n	80054e0 <HAL_SPI_Transmit+0x20a>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d102      	bne.n	80054e6 <HAL_SPI_Transmit+0x210>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e02d      	b.n	8005556 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1c6      	bne.n	8005492 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fbd9 	bl	8005cc0 <SPI_EndRxTxTransaction>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005554:	2300      	movs	r3, #0
  }
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b088      	sub	sp, #32
 8005562:	af02      	add	r7, sp, #8
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d001      	beq.n	800557e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800557a:	2302      	movs	r3, #2
 800557c:	e104      	b.n	8005788 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005586:	d112      	bne.n	80055ae <HAL_SPI_Receive+0x50>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10e      	bne.n	80055ae <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2204      	movs	r2, #4
 8005594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f8f3 	bl	8005790 <HAL_SPI_TransmitReceive>
 80055aa:	4603      	mov	r3, r0
 80055ac:	e0ec      	b.n	8005788 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ae:	f7fb fe21 	bl	80011f4 <HAL_GetTick>
 80055b2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_SPI_Receive+0x62>
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0e1      	b.n	8005788 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Receive+0x74>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e0da      	b.n	8005788 <HAL_SPI_Receive+0x22a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2204      	movs	r2, #4
 80055de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005620:	d10f      	bne.n	8005642 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005640:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564c:	2b40      	cmp	r3, #64	@ 0x40
 800564e:	d007      	beq.n	8005660 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d170      	bne.n	800574a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005668:	e035      	b.n	80056d6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d115      	bne.n	80056a4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f103 020c 	add.w	r2, r3, #12
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	7812      	ldrb	r2, [r2, #0]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056a2:	e018      	b.n	80056d6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a4:	f7fb fda6 	bl	80011f4 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d803      	bhi.n	80056bc <HAL_SPI_Receive+0x15e>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d102      	bne.n	80056c2 <HAL_SPI_Receive+0x164>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e058      	b.n	8005788 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1c4      	bne.n	800566a <HAL_SPI_Receive+0x10c>
 80056e0:	e038      	b.n	8005754 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d113      	bne.n	8005718 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fa:	b292      	uxth	r2, r2
 80056fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	1c9a      	adds	r2, r3, #2
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005716:	e018      	b.n	800574a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005718:	f7fb fd6c 	bl	80011f4 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d803      	bhi.n	8005730 <HAL_SPI_Receive+0x1d2>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d102      	bne.n	8005736 <HAL_SPI_Receive+0x1d8>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e01e      	b.n	8005788 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1c6      	bne.n	80056e2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fa4b 	bl	8005bf4 <SPI_EndRxTransaction>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005786:	2300      	movs	r3, #0
  }
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	@ 0x28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800579e:	2301      	movs	r3, #1
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057a2:	f7fb fd27 	bl	80011f4 <HAL_GetTick>
 80057a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80057b6:	887b      	ldrh	r3, [r7, #2]
 80057b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057ba:	7ffb      	ldrb	r3, [r7, #31]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d00c      	beq.n	80057da <HAL_SPI_TransmitReceive+0x4a>
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057c6:	d106      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x46>
 80057d0:	7ffb      	ldrb	r3, [r7, #31]
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d001      	beq.n	80057da <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
 80057d8:	e17f      	b.n	8005ada <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x5c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x5c>
 80057e6:	887b      	ldrh	r3, [r7, #2]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e174      	b.n	8005ada <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x6e>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e16d      	b.n	8005ada <HAL_SPI_TransmitReceive+0x34a>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b04      	cmp	r3, #4
 8005810:	d003      	beq.n	800581a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2205      	movs	r2, #5
 8005816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	887a      	ldrh	r2, [r7, #2]
 800582a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	887a      	ldrh	r2, [r7, #2]
 8005830:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	887a      	ldrh	r2, [r7, #2]
 800583c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	887a      	ldrh	r2, [r7, #2]
 8005842:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585a:	2b40      	cmp	r3, #64	@ 0x40
 800585c:	d007      	beq.n	800586e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800586c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005876:	d17e      	bne.n	8005976 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_SPI_TransmitReceive+0xf6>
 8005880:	8afb      	ldrh	r3, [r7, #22]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d16c      	bne.n	8005960 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	881a      	ldrh	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005896:	1c9a      	adds	r2, r3, #2
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058aa:	e059      	b.n	8005960 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d11b      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x162>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d016      	beq.n	80058f2 <HAL_SPI_TransmitReceive+0x162>
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d113      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	881a      	ldrh	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	1c9a      	adds	r2, r3, #2
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d119      	bne.n	8005934 <HAL_SPI_TransmitReceive+0x1a4>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d014      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005914:	b292      	uxth	r2, r2
 8005916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005930:	2301      	movs	r3, #1
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005934:	f7fb fc5e 	bl	80011f4 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005940:	429a      	cmp	r2, r3
 8005942:	d80d      	bhi.n	8005960 <HAL_SPI_TransmitReceive+0x1d0>
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d009      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0bc      	b.n	8005ada <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1a0      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x11c>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d19b      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x11c>
 8005974:	e082      	b.n	8005a7c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x1f4>
 800597e:	8afb      	ldrh	r3, [r7, #22]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d171      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059aa:	e05d      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d11c      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x264>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d017      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x264>
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d114      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d119      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x2a6>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d014      	beq.n	8005a36 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a32:	2301      	movs	r3, #1
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a36:	f7fb fbdd 	bl	80011f4 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d803      	bhi.n	8005a4e <HAL_SPI_TransmitReceive+0x2be>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d102      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x2c4>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d109      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e038      	b.n	8005ada <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d19c      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x21c>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d197      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f91d 	bl	8005cc0 <SPI_EndRxTxTransaction>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e01d      	b.n	8005ada <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	613b      	str	r3, [r7, #16]
 8005aba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
  }
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3728      	adds	r7, #40	@ 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005af4:	f7fb fb7e 	bl	80011f4 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	4413      	add	r3, r2
 8005b02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b04:	f7fb fb76 	bl	80011f4 <HAL_GetTick>
 8005b08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b0a:	4b39      	ldr	r3, [pc, #228]	@ (8005bf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	015b      	lsls	r3, r3, #5
 8005b10:	0d1b      	lsrs	r3, r3, #20
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b1a:	e054      	b.n	8005bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d050      	beq.n	8005bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b24:	f7fb fb66 	bl	80011f4 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d902      	bls.n	8005b3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d13d      	bne.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b52:	d111      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b5c:	d004      	beq.n	8005b68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b66:	d107      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b80:	d10f      	bne.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ba0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e017      	b.n	8005be6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	bf0c      	ite	eq
 8005bd6:	2301      	moveq	r3, #1
 8005bd8:	2300      	movne	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d19b      	bne.n	8005b1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000000 	.word	0x20000000

08005bf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c08:	d111      	bne.n	8005c2e <SPI_EndRxTransaction+0x3a>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c12:	d004      	beq.n	8005c1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1c:	d107      	bne.n	8005c2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c36:	d12a      	bne.n	8005c8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c40:	d012      	beq.n	8005c68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2180      	movs	r1, #128	@ 0x80
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff ff49 	bl	8005ae4 <SPI_WaitFlagStateUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d02d      	beq.n	8005cb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e026      	b.n	8005cb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2101      	movs	r1, #1
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff ff36 	bl	8005ae4 <SPI_WaitFlagStateUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01a      	beq.n	8005cb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c82:	f043 0220 	orr.w	r2, r3, #32
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e013      	b.n	8005cb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2101      	movs	r1, #1
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff ff23 	bl	8005ae4 <SPI_WaitFlagStateUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca8:	f043 0220 	orr.w	r2, r3, #32
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e000      	b.n	8005cb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f7ff ff04 	bl	8005ae4 <SPI_WaitFlagStateUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce6:	f043 0220 	orr.w	r2, r3, #32
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e032      	b.n	8005d58 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d60 <SPI_EndRxTxTransaction+0xa0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d64 <SPI_EndRxTxTransaction+0xa4>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	0d5b      	lsrs	r3, r3, #21
 8005cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d10:	d112      	bne.n	8005d38 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2180      	movs	r1, #128	@ 0x80
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff fee1 	bl	8005ae4 <SPI_WaitFlagStateUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d016      	beq.n	8005d56 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e00f      	b.n	8005d58 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4e:	2b80      	cmp	r3, #128	@ 0x80
 8005d50:	d0f2      	beq.n	8005d38 <SPI_EndRxTxTransaction+0x78>
 8005d52:	e000      	b.n	8005d56 <SPI_EndRxTxTransaction+0x96>
        break;
 8005d54:	bf00      	nop
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000000 	.word	0x20000000
 8005d64:	165e9f81 	.word	0x165e9f81

08005d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e041      	b.n	8005dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f839 	bl	8005e06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4619      	mov	r1, r3
 8005da6:	4610      	mov	r0, r2
 8005da8:	f000 f9b2 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d001      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e044      	b.n	8005ebe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1e      	ldr	r2, [pc, #120]	@ (8005ecc <HAL_TIM_Base_Start_IT+0xb0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5e:	d013      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a19      	ldr	r2, [pc, #100]	@ (8005ed4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a17      	ldr	r2, [pc, #92]	@ (8005ed8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <HAL_TIM_Base_Start_IT+0xc0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d111      	bne.n	8005eac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b06      	cmp	r3, #6
 8005e98:	d010      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0201 	orr.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eaa:	e007      	b.n	8005ebc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40014000 	.word	0x40014000

08005ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0202 	mvn.w	r2, #2
 8005f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f8d2 	bl	80060d4 <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8c4 	bl	80060c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f8d5 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d020      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01b      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0204 	mvn.w	r2, #4
 8005f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f8ac 	bl	80060d4 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f89e 	bl	80060c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f8af 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d020      	beq.n	8005fdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01b      	beq.n	8005fdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0208 	mvn.w	r2, #8
 8005fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f886 	bl	80060d4 <HAL_TIM_IC_CaptureCallback>
 8005fc8:	e005      	b.n	8005fd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f878 	bl	80060c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f889 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d020      	beq.n	8006028 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0210 	mvn.w	r2, #16
 8005ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f860 	bl	80060d4 <HAL_TIM_IC_CaptureCallback>
 8006014:	e005      	b.n	8006022 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f852 	bl	80060c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f863 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00c      	beq.n	800604c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0201 	mvn.w	r2, #1
 8006044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fa fe18 	bl	8000c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00c      	beq.n	8006070 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f8e6 	bl	800623c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00c      	beq.n	8006094 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f834 	bl	80060fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00c      	beq.n	80060b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d007      	beq.n	80060b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0220 	mvn.w	r2, #32
 80060b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f8b8 	bl	8006228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a3a      	ldr	r2, [pc, #232]	@ (800620c <TIM_Base_SetConfig+0xfc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00f      	beq.n	8006148 <TIM_Base_SetConfig+0x38>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612e:	d00b      	beq.n	8006148 <TIM_Base_SetConfig+0x38>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a37      	ldr	r2, [pc, #220]	@ (8006210 <TIM_Base_SetConfig+0x100>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_Base_SetConfig+0x38>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a36      	ldr	r2, [pc, #216]	@ (8006214 <TIM_Base_SetConfig+0x104>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0x38>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a35      	ldr	r2, [pc, #212]	@ (8006218 <TIM_Base_SetConfig+0x108>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d108      	bne.n	800615a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2b      	ldr	r2, [pc, #172]	@ (800620c <TIM_Base_SetConfig+0xfc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01b      	beq.n	800619a <TIM_Base_SetConfig+0x8a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006168:	d017      	beq.n	800619a <TIM_Base_SetConfig+0x8a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a28      	ldr	r2, [pc, #160]	@ (8006210 <TIM_Base_SetConfig+0x100>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <TIM_Base_SetConfig+0x8a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a27      	ldr	r2, [pc, #156]	@ (8006214 <TIM_Base_SetConfig+0x104>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00f      	beq.n	800619a <TIM_Base_SetConfig+0x8a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a26      	ldr	r2, [pc, #152]	@ (8006218 <TIM_Base_SetConfig+0x108>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00b      	beq.n	800619a <TIM_Base_SetConfig+0x8a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a25      	ldr	r2, [pc, #148]	@ (800621c <TIM_Base_SetConfig+0x10c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <TIM_Base_SetConfig+0x8a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a24      	ldr	r2, [pc, #144]	@ (8006220 <TIM_Base_SetConfig+0x110>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_Base_SetConfig+0x8a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a23      	ldr	r2, [pc, #140]	@ (8006224 <TIM_Base_SetConfig+0x114>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d108      	bne.n	80061ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a0e      	ldr	r2, [pc, #56]	@ (800620c <TIM_Base_SetConfig+0xfc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d103      	bne.n	80061e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d105      	bne.n	80061fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f023 0201 	bic.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	611a      	str	r2, [r3, #16]
  }
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40000400 	.word	0x40000400
 8006214:	40000800 	.word	0x40000800
 8006218:	40000c00 	.word	0x40000c00
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800

08006228 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006250:	b084      	sub	sp, #16
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	f107 001c 	add.w	r0, r7, #28
 800625e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006262:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006266:	2b01      	cmp	r3, #1
 8006268:	d123      	bne.n	80062b2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800627e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006292:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fae8 	bl	800787c <USB_CoreReset>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
 80062b0:	e01b      	b.n	80062ea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 fadc 	bl	800787c <USB_CoreReset>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	639a      	str	r2, [r3, #56]	@ 0x38
 80062dc:	e005      	b.n	80062ea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062ea:	7fbb      	ldrb	r3, [r7, #30]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10b      	bne.n	8006308 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f043 0206 	orr.w	r2, r3, #6
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006314:	b004      	add	sp, #16
 8006316:	4770      	bx	lr

08006318 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d165      	bne.n	80063f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a41      	ldr	r2, [pc, #260]	@ (8006434 <USB_SetTurnaroundTime+0x11c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d906      	bls.n	8006342 <USB_SetTurnaroundTime+0x2a>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4a40      	ldr	r2, [pc, #256]	@ (8006438 <USB_SetTurnaroundTime+0x120>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d202      	bcs.n	8006342 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800633c:	230f      	movs	r3, #15
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e062      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4a3c      	ldr	r2, [pc, #240]	@ (8006438 <USB_SetTurnaroundTime+0x120>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d306      	bcc.n	8006358 <USB_SetTurnaroundTime+0x40>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4a3b      	ldr	r2, [pc, #236]	@ (800643c <USB_SetTurnaroundTime+0x124>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d202      	bcs.n	8006358 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006352:	230e      	movs	r3, #14
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e057      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4a38      	ldr	r2, [pc, #224]	@ (800643c <USB_SetTurnaroundTime+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d306      	bcc.n	800636e <USB_SetTurnaroundTime+0x56>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4a37      	ldr	r2, [pc, #220]	@ (8006440 <USB_SetTurnaroundTime+0x128>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d202      	bcs.n	800636e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006368:	230d      	movs	r3, #13
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e04c      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4a33      	ldr	r2, [pc, #204]	@ (8006440 <USB_SetTurnaroundTime+0x128>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d306      	bcc.n	8006384 <USB_SetTurnaroundTime+0x6c>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4a32      	ldr	r2, [pc, #200]	@ (8006444 <USB_SetTurnaroundTime+0x12c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d802      	bhi.n	8006384 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800637e:	230c      	movs	r3, #12
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e041      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4a2f      	ldr	r2, [pc, #188]	@ (8006444 <USB_SetTurnaroundTime+0x12c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d906      	bls.n	800639a <USB_SetTurnaroundTime+0x82>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4a2e      	ldr	r2, [pc, #184]	@ (8006448 <USB_SetTurnaroundTime+0x130>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d802      	bhi.n	800639a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006394:	230b      	movs	r3, #11
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e036      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4a2a      	ldr	r2, [pc, #168]	@ (8006448 <USB_SetTurnaroundTime+0x130>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d906      	bls.n	80063b0 <USB_SetTurnaroundTime+0x98>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4a29      	ldr	r2, [pc, #164]	@ (800644c <USB_SetTurnaroundTime+0x134>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d802      	bhi.n	80063b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80063aa:	230a      	movs	r3, #10
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	e02b      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4a26      	ldr	r2, [pc, #152]	@ (800644c <USB_SetTurnaroundTime+0x134>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d906      	bls.n	80063c6 <USB_SetTurnaroundTime+0xae>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4a25      	ldr	r2, [pc, #148]	@ (8006450 <USB_SetTurnaroundTime+0x138>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d202      	bcs.n	80063c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063c0:	2309      	movs	r3, #9
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	e020      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4a21      	ldr	r2, [pc, #132]	@ (8006450 <USB_SetTurnaroundTime+0x138>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d306      	bcc.n	80063dc <USB_SetTurnaroundTime+0xc4>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4a20      	ldr	r2, [pc, #128]	@ (8006454 <USB_SetTurnaroundTime+0x13c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d802      	bhi.n	80063dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063d6:	2308      	movs	r3, #8
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	e015      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <USB_SetTurnaroundTime+0x13c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d906      	bls.n	80063f2 <USB_SetTurnaroundTime+0xda>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <USB_SetTurnaroundTime+0x140>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d202      	bcs.n	80063f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063ec:	2307      	movs	r3, #7
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e00a      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063f2:	2306      	movs	r3, #6
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e007      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063fe:	2309      	movs	r3, #9
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e001      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006404:	2309      	movs	r3, #9
 8006406:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	029b      	lsls	r3, r3, #10
 800641c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006420:	431a      	orrs	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	00d8acbf 	.word	0x00d8acbf
 8006438:	00e4e1c0 	.word	0x00e4e1c0
 800643c:	00f42400 	.word	0x00f42400
 8006440:	01067380 	.word	0x01067380
 8006444:	011a499f 	.word	0x011a499f
 8006448:	01312cff 	.word	0x01312cff
 800644c:	014ca43f 	.word	0x014ca43f
 8006450:	016e3600 	.word	0x016e3600
 8006454:	01a6ab1f 	.word	0x01a6ab1f
 8006458:	01e84800 	.word	0x01e84800

0800645c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f043 0201 	orr.w	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d115      	bne.n	80064ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064ce:	200a      	movs	r0, #10
 80064d0:	f7fa fe9c 	bl	800120c <HAL_Delay>
      ms += 10U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	330a      	adds	r3, #10
 80064d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 f93f 	bl	800775e <USB_GetMode>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d01e      	beq.n	8006524 <USB_SetCurrentMode+0x84>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80064ea:	d9f0      	bls.n	80064ce <USB_SetCurrentMode+0x2e>
 80064ec:	e01a      	b.n	8006524 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d115      	bne.n	8006520 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006500:	200a      	movs	r0, #10
 8006502:	f7fa fe83 	bl	800120c <HAL_Delay>
      ms += 10U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	330a      	adds	r3, #10
 800650a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 f926 	bl	800775e <USB_GetMode>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <USB_SetCurrentMode+0x84>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2bc7      	cmp	r3, #199	@ 0xc7
 800651c:	d9f0      	bls.n	8006500 <USB_SetCurrentMode+0x60>
 800651e:	e001      	b.n	8006524 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e005      	b.n	8006530 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2bc8      	cmp	r3, #200	@ 0xc8
 8006528:	d101      	bne.n	800652e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006538:	b084      	sub	sp, #16
 800653a:	b580      	push	{r7, lr}
 800653c:	b086      	sub	sp, #24
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	e009      	b.n	800656c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3340      	adds	r3, #64	@ 0x40
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	2200      	movs	r2, #0
 8006564:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	3301      	adds	r3, #1
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b0e      	cmp	r3, #14
 8006570:	d9f2      	bls.n	8006558 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006572:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006576:	2b00      	cmp	r3, #0
 8006578:	d11c      	bne.n	80065b4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006588:	f043 0302 	orr.w	r3, r3, #2
 800658c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006592:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80065b2:	e00b      	b.n	80065cc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065d2:	461a      	mov	r2, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10d      	bne.n	80065fc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065e8:	2100      	movs	r1, #0
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f968 	bl	80068c0 <USB_SetDevSpeed>
 80065f0:	e008      	b.n	8006604 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065f2:	2101      	movs	r1, #1
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f963 	bl	80068c0 <USB_SetDevSpeed>
 80065fa:	e003      	b.n	8006604 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065fc:	2103      	movs	r1, #3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f95e 	bl	80068c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006604:	2110      	movs	r1, #16
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f8fa 	bl	8006800 <USB_FlushTxFifo>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f924 	bl	8006864 <USB_FlushRxFifo>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662c:	461a      	mov	r2, r3
 800662e:	2300      	movs	r3, #0
 8006630:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006638:	461a      	mov	r2, r3
 800663a:	2300      	movs	r3, #0
 800663c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006644:	461a      	mov	r2, r3
 8006646:	2300      	movs	r3, #0
 8006648:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	e043      	b.n	80066d8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006662:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006666:	d118      	bne.n	800669a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800667a:	461a      	mov	r2, r3
 800667c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e013      	b.n	80066ac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006690:	461a      	mov	r2, r3
 8006692:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	e008      	b.n	80066ac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a6:	461a      	mov	r2, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ca:	461a      	mov	r2, r3
 80066cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3301      	adds	r3, #1
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066dc:	461a      	mov	r2, r3
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d3b5      	bcc.n	8006650 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	e043      	b.n	8006772 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006700:	d118      	bne.n	8006734 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006714:	461a      	mov	r2, r3
 8006716:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	e013      	b.n	8006746 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672a:	461a      	mov	r2, r3
 800672c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e008      	b.n	8006746 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006740:	461a      	mov	r2, r3
 8006742:	2300      	movs	r3, #0
 8006744:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006752:	461a      	mov	r2, r3
 8006754:	2300      	movs	r3, #0
 8006756:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006764:	461a      	mov	r2, r3
 8006766:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800676a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3301      	adds	r3, #1
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006776:	461a      	mov	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4293      	cmp	r3, r2
 800677c:	d3b5      	bcc.n	80066ea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800678c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006790:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800679e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f043 0210 	orr.w	r2, r3, #16
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	4b10      	ldr	r3, [pc, #64]	@ (80067fc <USB_DevInit+0x2c4>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f043 0208 	orr.w	r2, r3, #8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067f8:	b004      	add	sp, #16
 80067fa:	4770      	bx	lr
 80067fc:	803c3800 	.word	0x803c3800

08006800 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3301      	adds	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800681a:	d901      	bls.n	8006820 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e01b      	b.n	8006858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	daf2      	bge.n	800680e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	019b      	lsls	r3, r3, #6
 8006830:	f043 0220 	orr.w	r2, r3, #32
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006844:	d901      	bls.n	800684a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e006      	b.n	8006858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b20      	cmp	r3, #32
 8006854:	d0f0      	beq.n	8006838 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800687c:	d901      	bls.n	8006882 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e018      	b.n	80068b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	daf2      	bge.n	8006870 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2210      	movs	r2, #16
 8006892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068a0:	d901      	bls.n	80068a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e006      	b.n	80068b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f003 0310 	and.w	r3, r3, #16
 80068ae:	2b10      	cmp	r3, #16
 80068b0:	d0f0      	beq.n	8006894 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068e0:	4313      	orrs	r3, r2
 80068e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b087      	sub	sp, #28
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0306 	and.w	r3, r3, #6
 800690a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d102      	bne.n	8006918 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]
 8006916:	e00a      	b.n	800692e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d002      	beq.n	8006924 <USB_GetDevSpeed+0x32>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b06      	cmp	r3, #6
 8006922:	d102      	bne.n	800692a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006924:	2302      	movs	r3, #2
 8006926:	75fb      	strb	r3, [r7, #23]
 8006928:	e001      	b.n	800692e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800692a:	230f      	movs	r3, #15
 800692c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006930:	4618      	mov	r0, r3
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d13a      	bne.n	80069ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	2101      	movs	r1, #1
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	b29b      	uxth	r3, r3
 8006970:	68f9      	ldr	r1, [r7, #12]
 8006972:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006976:	4313      	orrs	r3, r2
 8006978:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d155      	bne.n	8006a3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	791b      	ldrb	r3, [r3, #4]
 80069aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	059b      	lsls	r3, r3, #22
 80069b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069b4:	4313      	orrs	r3, r2
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	e036      	b.n	8006a3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	2101      	movs	r1, #1
 80069e0:	fa01 f303 	lsl.w	r3, r1, r3
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	68f9      	ldr	r1, [r7, #12]
 80069e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d11a      	bne.n	8006a3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	791b      	ldrb	r3, [r3, #4]
 8006a20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a22:	430b      	orrs	r3, r1
 8006a24:	4313      	orrs	r3, r2
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
	...

08006a4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d161      	bne.n	8006b2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a7e:	d11f      	bne.n	8006ac0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006abe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	2101      	movs	r1, #1
 8006af6:	fa01 f303 	lsl.w	r3, r1, r3
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	43db      	mvns	r3, r3
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b04:	4013      	ands	r3, r2
 8006b06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	0159      	lsls	r1, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	440b      	add	r3, r1
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b22:	4619      	mov	r1, r3
 8006b24:	4b35      	ldr	r3, [pc, #212]	@ (8006bfc <USB_DeactivateEndpoint+0x1b0>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]
 8006b2a:	e060      	b.n	8006bee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b42:	d11f      	bne.n	8006b84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	2101      	movs	r1, #1
 8006b96:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	2101      	movs	r1, #1
 8006bba:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbe:	041b      	lsls	r3, r3, #16
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bc8:	4013      	ands	r3, r2
 8006bca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	0159      	lsls	r1, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	440b      	add	r3, r1
 8006be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be6:	4619      	mov	r1, r3
 8006be8:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <USB_DeactivateEndpoint+0x1b4>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	ec337800 	.word	0xec337800
 8006c00:	eff37800 	.word	0xeff37800

08006c04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	@ 0x28
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	f040 817f 	bne.w	8006f24 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d132      	bne.n	8006c94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c48:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c4c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c8c:	0cdb      	lsrs	r3, r3, #19
 8006c8e:	04db      	lsls	r3, r3, #19
 8006c90:	6113      	str	r3, [r2, #16]
 8006c92:	e097      	b.n	8006dc4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cae:	0cdb      	lsrs	r3, r3, #19
 8006cb0:	04db      	lsls	r3, r3, #19
 8006cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cd2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006cd6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d11a      	bne.n	8006d14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d903      	bls.n	8006cf2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d10:	6113      	str	r3, [r2, #16]
 8006d12:	e044      	b.n	8006d9e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	1e5a      	subs	r2, r3, #1
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	8afb      	ldrh	r3, [r7, #22]
 8006d3a:	04d9      	lsls	r1, r3, #19
 8006d3c:	4ba4      	ldr	r3, [pc, #656]	@ (8006fd0 <USB_EPStartXfer+0x3cc>)
 8006d3e:	400b      	ands	r3, r1
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	0148      	lsls	r0, r1, #5
 8006d44:	69f9      	ldr	r1, [r7, #28]
 8006d46:	4401      	add	r1, r0
 8006d48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	791b      	ldrb	r3, [r3, #4]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d122      	bne.n	8006d9e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d72:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006d76:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	8afb      	ldrh	r3, [r7, #22]
 8006d88:	075b      	lsls	r3, r3, #29
 8006d8a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006d8e:	69b9      	ldr	r1, [r7, #24]
 8006d90:	0148      	lsls	r0, r1, #5
 8006d92:	69f9      	ldr	r1, [r7, #28]
 8006d94:	4401      	add	r1, r0
 8006d96:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db4:	69b9      	ldr	r1, [r7, #24]
 8006db6:	0148      	lsls	r0, r1, #5
 8006db8:	69f9      	ldr	r1, [r7, #28]
 8006dba:	4401      	add	r1, r0
 8006dbc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d14b      	bne.n	8006e62 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d009      	beq.n	8006de6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dde:	461a      	mov	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	791b      	ldrb	r3, [r3, #4]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d128      	bne.n	8006e40 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d110      	bne.n	8006e20 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	0151      	lsls	r1, r2, #5
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	440a      	add	r2, r1
 8006e14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e00f      	b.n	8006e40 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e3e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	e166      	b.n	8007130 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e80:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	791b      	ldrb	r3, [r3, #4]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d015      	beq.n	8006eb6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 814e 	beq.w	8007130 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eaa:	69f9      	ldr	r1, [r7, #28]
 8006eac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	634b      	str	r3, [r1, #52]	@ 0x34
 8006eb4:	e13c      	b.n	8007130 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d110      	bne.n	8006ee8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	0151      	lsls	r1, r2, #5
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	440a      	add	r2, r1
 8006edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ee0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e00f      	b.n	8006f08 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f06:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	68d9      	ldr	r1, [r3, #12]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	b298      	uxth	r0, r3
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f9b9 	bl	8007294 <USB_WritePacket>
 8006f22:	e105      	b.n	8007130 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f3e:	0cdb      	lsrs	r3, r3, #19
 8006f40:	04db      	lsls	r3, r3, #19
 8006f42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f66:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d132      	bne.n	8006fd4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	0148      	lsls	r0, r1, #5
 8006fa0:	69f9      	ldr	r1, [r7, #28]
 8006fa2:	4401      	add	r1, r0
 8006fa4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fca:	6113      	str	r3, [r2, #16]
 8006fcc:	e062      	b.n	8007094 <USB_EPStartXfer+0x490>
 8006fce:	bf00      	nop
 8006fd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d123      	bne.n	8007024 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe8:	691a      	ldr	r2, [r3, #16]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ff2:	69b9      	ldr	r1, [r7, #24]
 8006ff4:	0148      	lsls	r0, r1, #5
 8006ff6:	69f9      	ldr	r1, [r7, #28]
 8006ff8:	4401      	add	r1, r0
 8006ffa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ffe:	4313      	orrs	r3, r2
 8007000:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800701c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007020:	6113      	str	r3, [r2, #16]
 8007022:	e037      	b.n	8007094 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	4413      	add	r3, r2
 800702e:	1e5a      	subs	r2, r3, #1
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	8afa      	ldrh	r2, [r7, #22]
 8007040:	fb03 f202 	mul.w	r2, r3, r2
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007054:	691a      	ldr	r2, [r3, #16]
 8007056:	8afb      	ldrh	r3, [r7, #22]
 8007058:	04d9      	lsls	r1, r3, #19
 800705a:	4b38      	ldr	r3, [pc, #224]	@ (800713c <USB_EPStartXfer+0x538>)
 800705c:	400b      	ands	r3, r1
 800705e:	69b9      	ldr	r1, [r7, #24]
 8007060:	0148      	lsls	r0, r1, #5
 8007062:	69f9      	ldr	r1, [r7, #28]
 8007064:	4401      	add	r1, r0
 8007066:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800706a:	4313      	orrs	r3, r2
 800706c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007084:	69b9      	ldr	r1, [r7, #24]
 8007086:	0148      	lsls	r0, r1, #5
 8007088:	69f9      	ldr	r1, [r7, #28]
 800708a:	4401      	add	r1, r0
 800708c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007090:	4313      	orrs	r3, r2
 8007092:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d10d      	bne.n	80070b6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	68d9      	ldr	r1, [r3, #12]
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b2:	460a      	mov	r2, r1
 80070b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d128      	bne.n	8007110 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d110      	bne.n	80070f0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e00f      	b.n	8007110 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800710a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800710e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800712a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800712e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	1ff80000 	.word	0x1ff80000

08007140 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d14a      	bne.n	80071f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007172:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007176:	f040 8086 	bne.w	8007286 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	7812      	ldrb	r2, [r2, #0]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	440a      	add	r2, r1
 8007194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007198:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800719c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d902      	bls.n	80071d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	75fb      	strb	r3, [r7, #23]
          break;
 80071d6:	e056      	b.n	8007286 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071f0:	d0e7      	beq.n	80071c2 <USB_EPStopXfer+0x82>
 80071f2:	e048      	b.n	8007286 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800720c:	d13b      	bne.n	8007286 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	7812      	ldrb	r2, [r2, #0]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800722c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007230:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007250:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007254:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3301      	adds	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007262:	4293      	cmp	r3, r2
 8007264:	d902      	bls.n	800726c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
          break;
 800726a:	e00c      	b.n	8007286 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007284:	d0e7      	beq.n	8007256 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
}
 8007288:	4618      	mov	r0, r3
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	@ 0x24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4611      	mov	r1, r2
 80072a0:	461a      	mov	r2, r3
 80072a2:	460b      	mov	r3, r1
 80072a4:	71fb      	strb	r3, [r7, #7]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d123      	bne.n	8007302 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072ba:	88bb      	ldrh	r3, [r7, #4]
 80072bc:	3303      	adds	r3, #3
 80072be:	089b      	lsrs	r3, r3, #2
 80072c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072c2:	2300      	movs	r3, #0
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	e018      	b.n	80072fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	031a      	lsls	r2, r3, #12
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d4:	461a      	mov	r2, r3
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	3301      	adds	r3, #1
 80072e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	3301      	adds	r3, #1
 80072e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	3301      	adds	r3, #1
 80072ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3301      	adds	r3, #1
 80072f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	3301      	adds	r3, #1
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d3e2      	bcc.n	80072c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3724      	adds	r7, #36	@ 0x24
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007310:	b480      	push	{r7}
 8007312:	b08b      	sub	sp, #44	@ 0x2c
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	089b      	lsrs	r3, r3, #2
 800732a:	b29b      	uxth	r3, r3
 800732c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007336:	2300      	movs	r3, #0
 8007338:	623b      	str	r3, [r7, #32]
 800733a:	e014      	b.n	8007366 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	601a      	str	r2, [r3, #0]
    pDest++;
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	3301      	adds	r3, #1
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	3301      	adds	r3, #1
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	3301      	adds	r3, #1
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	3301      	adds	r3, #1
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	3301      	adds	r3, #1
 8007364:	623b      	str	r3, [r7, #32]
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	429a      	cmp	r2, r3
 800736c:	d3e6      	bcc.n	800733c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800736e:	8bfb      	ldrh	r3, [r7, #30]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01e      	beq.n	80073b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800737e:	461a      	mov	r2, r3
 8007380:	f107 0310 	add.w	r3, r7, #16
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	fa22 f303 	lsr.w	r3, r2, r3
 8007394:	b2da      	uxtb	r2, r3
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	701a      	strb	r2, [r3, #0]
      i++;
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	3301      	adds	r3, #1
 800739e:	623b      	str	r3, [r7, #32]
      pDest++;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	3301      	adds	r3, #1
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80073a6:	8bfb      	ldrh	r3, [r7, #30]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073ac:	8bfb      	ldrh	r3, [r7, #30]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1ea      	bne.n	8007388 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	372c      	adds	r7, #44	@ 0x2c
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d12c      	bne.n	8007436 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	db12      	blt.n	8007414 <USB_EPSetStall+0x54>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00f      	beq.n	8007414 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007412:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800742e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	e02b      	b.n	800748e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	db12      	blt.n	800746e <USB_EPSetStall+0xae>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00f      	beq.n	800746e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007468:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800746c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	440a      	add	r2, r1
 8007484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007488:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800748c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d128      	bne.n	800750a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	791b      	ldrb	r3, [r3, #4]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d003      	beq.n	80074e8 <USB_EPClearStall+0x4c>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	791b      	ldrb	r3, [r3, #4]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d138      	bne.n	800755a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	e027      	b.n	800755a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007524:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007528:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	791b      	ldrb	r3, [r3, #4]
 800752e:	2b03      	cmp	r3, #3
 8007530:	d003      	beq.n	800753a <USB_EPClearStall+0x9e>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	791b      	ldrb	r3, [r3, #4]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d10f      	bne.n	800755a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	440a      	add	r2, r1
 8007550:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007558:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007586:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800758a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800759c:	68f9      	ldr	r1, [r7, #12]
 800759e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075a2:	4313      	orrs	r3, r2
 80075a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075e2:	f023 0302 	bic.w	r3, r3, #2
 80075e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007610:	f023 0303 	bic.w	r3, r3, #3
 8007614:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007624:	f043 0302 	orr.w	r3, r3, #2
 8007628:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4013      	ands	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007650:	68fb      	ldr	r3, [r7, #12]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	4013      	ands	r3, r2
 8007680:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	0c1b      	lsrs	r3, r3, #16
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	4013      	ands	r3, r2
 80076b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	b29b      	uxth	r3, r3
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4013      	ands	r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076f4:	68bb      	ldr	r3, [r7, #8]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007702:	b480      	push	{r7}
 8007704:	b087      	sub	sp, #28
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007724:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	fa22 f303 	lsr.w	r3, r2, r3
 8007732:	01db      	lsls	r3, r3, #7
 8007734:	b2db      	uxtb	r3, r3
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	4013      	ands	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007750:	68bb      	ldr	r3, [r7, #8]
}
 8007752:	4618      	mov	r0, r3
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f003 0301 	and.w	r3, r3, #1
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007794:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007798:	f023 0307 	bic.w	r3, r3, #7
 800779c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	460b      	mov	r3, r1
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	333c      	adds	r3, #60	@ 0x3c
 80077d6:	3304      	adds	r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4a26      	ldr	r2, [pc, #152]	@ (8007878 <USB_EP0_OutStart+0xb8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d90a      	bls.n	80077fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077f4:	d101      	bne.n	80077fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e037      	b.n	800786a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007800:	461a      	mov	r2, r3
 8007802:	2300      	movs	r3, #0
 8007804:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007814:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007828:	f043 0318 	orr.w	r3, r3, #24
 800782c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800783c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007840:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007842:	7afb      	ldrb	r3, [r7, #11]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d10f      	bne.n	8007868 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007862:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007866:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	4f54300a 	.word	0x4f54300a

0800787c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3301      	adds	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007894:	d901      	bls.n	800789a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e01b      	b.n	80078d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	daf2      	bge.n	8007888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f043 0201 	orr.w	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3301      	adds	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078be:	d901      	bls.n	80078c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e006      	b.n	80078d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d0f0      	beq.n	80078b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f103 0208 	add.w	r2, r3, #8
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f04f 32ff 	mov.w	r2, #4294967295
 80078f6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f103 0208 	add.w	r2, r3, #8
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f103 0208 	add.w	r2, r3, #8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d103      	bne.n	8007958 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	e00c      	b.n	8007972 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3308      	adds	r3, #8
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	e002      	b.n	8007966 <vListInsert+0x2e>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	429a      	cmp	r2, r3
 8007970:	d2f6      	bcs.n	8007960 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6892      	ldr	r2, [r2, #8]
 80079c0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6852      	ldr	r2, [r2, #4]
 80079ca:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d103      	bne.n	80079de <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d05d      	beq.n	8007af2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d059      	beq.n	8007af2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a46:	2100      	movs	r1, #0
 8007a48:	fba3 2302 	umull	r2, r3, r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d000      	beq.n	8007a52 <xQueueGenericReset+0x52>
 8007a50:	2101      	movs	r1, #1
 8007a52:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d14c      	bne.n	8007af2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8007a58:	f002 f888 	bl	8009b6c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a64:	6939      	ldr	r1, [r7, #16]
 8007a66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	441a      	add	r2, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2200      	movs	r2, #0
 8007a76:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	6939      	ldr	r1, [r7, #16]
 8007a8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	441a      	add	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	22ff      	movs	r2, #255	@ 0xff
 8007a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	22ff      	movs	r2, #255	@ 0xff
 8007aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d114      	bne.n	8007ad8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01a      	beq.n	8007aec <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3310      	adds	r3, #16
 8007aba:	4618      	mov	r0, r3
 8007abc:	f001 f93c 	bl	8008d38 <xTaskRemoveFromEventList>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d012      	beq.n	8007aec <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007ac6:	4b16      	ldr	r3, [pc, #88]	@ (8007b20 <xQueueGenericReset+0x120>)
 8007ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	e009      	b.n	8007aec <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	3310      	adds	r3, #16
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff fefe 	bl	80078de <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	3324      	adds	r3, #36	@ 0x24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fef9 	bl	80078de <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007aec:	f002 f870 	bl	8009bd0 <vPortExitCritical>
 8007af0:	e001      	b.n	8007af6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10b      	bne.n	8007b14 <xQueueGenericReset+0x114>
        __asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	60bb      	str	r3, [r7, #8]
    }
 8007b0e:	bf00      	nop
 8007b10:	bf00      	nop
 8007b12:	e7fd      	b.n	8007b10 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007b14:	697b      	ldr	r3, [r7, #20]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08a      	sub	sp, #40	@ 0x28
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d02e      	beq.n	8007b9a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	fba3 2302 	umull	r2, r3, r3, r2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d000      	beq.n	8007b4c <xQueueGenericCreate+0x28>
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d123      	bne.n	8007b9a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007b5a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8007b5e:	d81c      	bhi.n	8007b9a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	3350      	adds	r3, #80	@ 0x50
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f002 f8e4 	bl	8009d3c <pvPortMalloc>
 8007b74:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01d      	beq.n	8007bb8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	3350      	adds	r3, #80	@ 0x50
 8007b84:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b86:	79fa      	ldrb	r2, [r7, #7]
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 f815 	bl	8007bc2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8007b98:	e00e      	b.n	8007bb8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <xQueueGenericCreate+0x94>
        __asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	613b      	str	r3, [r7, #16]
    }
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007bb8:	69fb      	ldr	r3, [r7, #28]
    }
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3720      	adds	r7, #32
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e002      	b.n	8007be4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	69b8      	ldr	r0, [r7, #24]
 8007bf4:	f7ff ff04 	bl	8007a00 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00e      	beq.n	8007c34 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f81c 	bl	8007c6c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c46:	2301      	movs	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6939      	ldr	r1, [r7, #16]
 8007c54:	6978      	ldr	r0, [r7, #20]
 8007c56:	f7ff ff65 	bl	8007b24 <xQueueGenericCreate>
 8007c5a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff ffd3 	bl	8007c08 <prvInitialiseMutex>

        return xNewQueue;
 8007c62:	68fb      	ldr	r3, [r7, #12]
    }
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08e      	sub	sp, #56	@ 0x38
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10b      	bne.n	8007ca0 <xQueueGenericSend+0x34>
        __asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8007c9a:	bf00      	nop
 8007c9c:	bf00      	nop
 8007c9e:	e7fd      	b.n	8007c9c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d103      	bne.n	8007cae <xQueueGenericSend+0x42>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <xQueueGenericSend+0x46>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <xQueueGenericSend+0x48>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <xQueueGenericSend+0x64>
        __asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d103      	bne.n	8007cde <xQueueGenericSend+0x72>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d101      	bne.n	8007ce2 <xQueueGenericSend+0x76>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e000      	b.n	8007ce4 <xQueueGenericSend+0x78>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10b      	bne.n	8007d00 <xQueueGenericSend+0x94>
        __asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	623b      	str	r3, [r7, #32]
    }
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	e7fd      	b.n	8007cfc <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d00:	f001 fa2e 	bl	8009160 <xTaskGetSchedulerState>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <xQueueGenericSend+0xa4>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <xQueueGenericSend+0xa8>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <xQueueGenericSend+0xaa>
 8007d14:	2300      	movs	r3, #0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <xQueueGenericSend+0xc6>
        __asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	61fb      	str	r3, [r7, #28]
    }
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007d32:	f001 ff1b 	bl	8009b6c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <xQueueGenericSend+0xdc>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d129      	bne.n	8007d9c <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d4e:	f000 f971 	bl	8008034 <prvCopyDataToQueue>
 8007d52:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d010      	beq.n	8007d7e <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5e:	3324      	adds	r3, #36	@ 0x24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 ffe9 	bl	8008d38 <xTaskRemoveFromEventList>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d013      	beq.n	8007d94 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e6c <xQueueGenericSend+0x200>)
 8007d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	e00a      	b.n	8007d94 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8007d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8007d84:	4b39      	ldr	r3, [pc, #228]	@ (8007e6c <xQueueGenericSend+0x200>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007d94:	f001 ff1c 	bl	8009bd0 <vPortExitCritical>
                return pdPASS;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e063      	b.n	8007e64 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d103      	bne.n	8007daa <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007da2:	f001 ff15 	bl	8009bd0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e05c      	b.n	8007e64 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007db0:	f107 0314 	add.w	r3, r7, #20
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 f897 	bl	8008ee8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007dbe:	f001 ff07 	bl	8009bd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007dc2:	f000 fcbf 	bl	8008744 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007dc6:	f001 fed1 	bl	8009b6c <vPortEnterCritical>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dd0:	b25b      	sxtb	r3, r3
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd6:	d103      	bne.n	8007de0 <xQueueGenericSend+0x174>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007de6:	b25b      	sxtb	r3, r3
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dec:	d103      	bne.n	8007df6 <xQueueGenericSend+0x18a>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007df6:	f001 feeb 	bl	8009bd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dfa:	1d3a      	adds	r2, r7, #4
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	4611      	mov	r1, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 f886 	bl	8008f14 <xTaskCheckForTimeOut>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d124      	bne.n	8007e58 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e10:	f000 fa08 	bl	8008224 <prvIsQueueFull>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d018      	beq.n	8007e4c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	3310      	adds	r3, #16
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 ff1c 	bl	8008c60 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8007e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e2a:	f000 f993 	bl	8008154 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8007e2e:	f000 fc97 	bl	8008760 <xTaskResumeAll>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f47f af7c 	bne.w	8007d32 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e6c <xQueueGenericSend+0x200>)
 8007e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	e772      	b.n	8007d32 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8007e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e4e:	f000 f981 	bl	8008154 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007e52:	f000 fc85 	bl	8008760 <xTaskResumeAll>
 8007e56:	e76c      	b.n	8007d32 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007e58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e5a:	f000 f97b 	bl	8008154 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007e5e:	f000 fc7f 	bl	8008760 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8007e62:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3738      	adds	r7, #56	@ 0x38
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	e000ed04 	.word	0xe000ed04

08007e70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08c      	sub	sp, #48	@ 0x30
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10b      	bne.n	8007ea2 <xQueueReceive+0x32>
        __asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	623b      	str	r3, [r7, #32]
    }
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	e7fd      	b.n	8007e9e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <xQueueReceive+0x40>
 8007ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <xQueueReceive+0x44>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <xQueueReceive+0x46>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <xQueueReceive+0x62>
        __asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	61fb      	str	r3, [r7, #28]
    }
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ed2:	f001 f945 	bl	8009160 <xTaskGetSchedulerState>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <xQueueReceive+0x72>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <xQueueReceive+0x76>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <xQueueReceive+0x78>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <xQueueReceive+0x94>
        __asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	61bb      	str	r3, [r7, #24]
    }
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007f04:	f001 fe32 	bl	8009b6c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01f      	beq.n	8007f54 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f18:	f000 f8f6 	bl	8008108 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	1e5a      	subs	r2, r3, #1
 8007f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f22:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00f      	beq.n	8007f4c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2e:	3310      	adds	r3, #16
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 ff01 	bl	8008d38 <xTaskRemoveFromEventList>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d007      	beq.n	8007f4c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8008030 <xQueueReceive+0x1c0>)
 8007f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007f4c:	f001 fe40 	bl	8009bd0 <vPortExitCritical>
                return pdPASS;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e069      	b.n	8008028 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007f5a:	f001 fe39 	bl	8009bd0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e062      	b.n	8008028 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007f68:	f107 0310 	add.w	r3, r7, #16
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 ffbb 	bl	8008ee8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007f72:	2301      	movs	r3, #1
 8007f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007f76:	f001 fe2b 	bl	8009bd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007f7a:	f000 fbe3 	bl	8008744 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007f7e:	f001 fdf5 	bl	8009b6c <vPortEnterCritical>
 8007f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f88:	b25b      	sxtb	r3, r3
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d103      	bne.n	8007f98 <xQueueReceive+0x128>
 8007f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f9e:	b25b      	sxtb	r3, r3
 8007fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa4:	d103      	bne.n	8007fae <xQueueReceive+0x13e>
 8007fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fae:	f001 fe0f 	bl	8009bd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fb2:	1d3a      	adds	r2, r7, #4
 8007fb4:	f107 0310 	add.w	r3, r7, #16
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 ffaa 	bl	8008f14 <xTaskCheckForTimeOut>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d123      	bne.n	800800e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fc8:	f000 f916 	bl	80081f8 <prvIsQueueEmpty>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d017      	beq.n	8008002 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	3324      	adds	r3, #36	@ 0x24
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fe40 	bl	8008c60 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe2:	f000 f8b7 	bl	8008154 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007fe6:	f000 fbbb 	bl	8008760 <xTaskResumeAll>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d189      	bne.n	8007f04 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8008030 <xQueueReceive+0x1c0>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	e780      	b.n	8007f04 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008004:	f000 f8a6 	bl	8008154 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008008:	f000 fbaa 	bl	8008760 <xTaskResumeAll>
 800800c:	e77a      	b.n	8007f04 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800800e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008010:	f000 f8a0 	bl	8008154 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008014:	f000 fba4 	bl	8008760 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800801a:	f000 f8ed 	bl	80081f8 <prvIsQueueEmpty>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	f43f af6f 	beq.w	8007f04 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8008026:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008028:	4618      	mov	r0, r3
 800802a:	3730      	adds	r7, #48	@ 0x30
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	e000ed04 	.word	0xe000ed04

08008034 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10d      	bne.n	800806e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d14d      	bne.n	80080f6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	4618      	mov	r0, r3
 8008060:	f001 f89c 	bl	800919c <xTaskPriorityDisinherit>
 8008064:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	609a      	str	r2, [r3, #8]
 800806c:	e043      	b.n	80080f6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d119      	bne.n	80080a8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6858      	ldr	r0, [r3, #4]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807c:	461a      	mov	r2, r3
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	f004 fde8 	bl	800cc54 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808c:	441a      	add	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	429a      	cmp	r2, r3
 800809c:	d32b      	bcc.n	80080f6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	e026      	b.n	80080f6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68d8      	ldr	r0, [r3, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b0:	461a      	mov	r2, r3
 80080b2:	68b9      	ldr	r1, [r7, #8]
 80080b4:	f004 fdce 	bl	800cc54 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c0:	425b      	negs	r3, r3
 80080c2:	441a      	add	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d207      	bcs.n	80080e4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080dc:	425b      	negs	r3, r3
 80080de:	441a      	add	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d105      	bne.n	80080f6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80080fe:	697b      	ldr	r3, [r7, #20]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d018      	beq.n	800814c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	441a      	add	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	d303      	bcc.n	800813c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68d9      	ldr	r1, [r3, #12]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008144:	461a      	mov	r2, r3
 8008146:	6838      	ldr	r0, [r7, #0]
 8008148:	f004 fd84 	bl	800cc54 <memcpy>
    }
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800815c:	f001 fd06 	bl	8009b6c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008166:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008168:	e011      	b.n	800818e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	d012      	beq.n	8008198 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3324      	adds	r3, #36	@ 0x24
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fdde 	bl	8008d38 <xTaskRemoveFromEventList>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008182:	f000 ff2f 	bl	8008fe4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	3b01      	subs	r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800818e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008192:	2b00      	cmp	r3, #0
 8008194:	dce9      	bgt.n	800816a <prvUnlockQueue+0x16>
 8008196:	e000      	b.n	800819a <prvUnlockQueue+0x46>
                    break;
 8008198:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	22ff      	movs	r2, #255	@ 0xff
 800819e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80081a2:	f001 fd15 	bl	8009bd0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80081a6:	f001 fce1 	bl	8009b6c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081b0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80081b2:	e011      	b.n	80081d8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d012      	beq.n	80081e2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3310      	adds	r3, #16
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fdb9 	bl	8008d38 <xTaskRemoveFromEventList>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80081cc:	f000 ff0a 	bl	8008fe4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80081d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	dce9      	bgt.n	80081b4 <prvUnlockQueue+0x60>
 80081e0:	e000      	b.n	80081e4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80081e2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	22ff      	movs	r2, #255	@ 0xff
 80081e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80081ec:	f001 fcf0 	bl	8009bd0 <vPortExitCritical>
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008200:	f001 fcb4 	bl	8009b6c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	e001      	b.n	8008216 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008216:	f001 fcdb 	bl	8009bd0 <vPortExitCritical>

    return xReturn;
 800821a:	68fb      	ldr	r3, [r7, #12]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800822c:	f001 fc9e 	bl	8009b6c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008238:	429a      	cmp	r2, r3
 800823a:	d102      	bne.n	8008242 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e001      	b.n	8008246 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008246:	f001 fcc3 	bl	8009bd0 <vPortExitCritical>

    return xReturn;
 800824a:	68fb      	ldr	r3, [r7, #12]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10b      	bne.n	8008280 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	60fb      	str	r3, [r7, #12]
    }
 800827a:	bf00      	nop
 800827c:	bf00      	nop
 800827e:	e7fd      	b.n	800827c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d024      	beq.n	80082d0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008286:	2300      	movs	r3, #0
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e01e      	b.n	80082ca <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800828c:	4a18      	ldr	r2, [pc, #96]	@ (80082f0 <vQueueAddToRegistry+0x9c>)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	4413      	add	r3, r2
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	429a      	cmp	r2, r3
 800829a:	d105      	bne.n	80082a8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	4a13      	ldr	r2, [pc, #76]	@ (80082f0 <vQueueAddToRegistry+0x9c>)
 80082a2:	4413      	add	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
                    break;
 80082a6:	e013      	b.n	80082d0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <vQueueAddToRegistry+0x70>
 80082ae:	4a10      	ldr	r2, [pc, #64]	@ (80082f0 <vQueueAddToRegistry+0x9c>)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d104      	bne.n	80082c4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	4a0c      	ldr	r2, [pc, #48]	@ (80082f0 <vQueueAddToRegistry+0x9c>)
 80082c0:	4413      	add	r3, r2
 80082c2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	3301      	adds	r3, #1
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b07      	cmp	r3, #7
 80082ce:	d9dd      	bls.n	800828c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d005      	beq.n	80082e2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	200002ac 	.word	0x200002ac

080082f4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008304:	f001 fc32 	bl	8009b6c <vPortEnterCritical>
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800830e:	b25b      	sxtb	r3, r3
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008314:	d103      	bne.n	800831e <vQueueWaitForMessageRestricted+0x2a>
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008324:	b25b      	sxtb	r3, r3
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d103      	bne.n	8008334 <vQueueWaitForMessageRestricted+0x40>
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008334:	f001 fc4c 	bl	8009bd0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d106      	bne.n	800834e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	3324      	adds	r3, #36	@ 0x24
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fcaf 	bl	8008cac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800834e:	6978      	ldr	r0, [r7, #20]
 8008350:	f7ff ff00 	bl	8008154 <prvUnlockQueue>
    }
 8008354:	bf00      	nop
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800835c:	b580      	push	{r7, lr}
 800835e:	b08c      	sub	sp, #48	@ 0x30
 8008360:	af04      	add	r7, sp, #16
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800836c:	88fb      	ldrh	r3, [r7, #6]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4618      	mov	r0, r3
 8008372:	f001 fce3 	bl	8009d3c <pvPortMalloc>
 8008376:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d013      	beq.n	80083a6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800837e:	2058      	movs	r0, #88	@ 0x58
 8008380:	f001 fcdc 	bl	8009d3c <pvPortMalloc>
 8008384:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800838c:	2258      	movs	r2, #88	@ 0x58
 800838e:	2100      	movs	r1, #0
 8008390:	69f8      	ldr	r0, [r7, #28]
 8008392:	f004 fc33 	bl	800cbfc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	631a      	str	r2, [r3, #48]	@ 0x30
 800839c:	e005      	b.n	80083aa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800839e:	6978      	ldr	r0, [r7, #20]
 80083a0:	f001 fd88 	bl	8009eb4 <vPortFree>
 80083a4:	e001      	b.n	80083aa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d013      	beq.n	80083d8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083b0:	88fa      	ldrh	r2, [r7, #6]
 80083b2:	2300      	movs	r3, #0
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	9302      	str	r3, [sp, #8]
 80083ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68b9      	ldr	r1, [r7, #8]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 f80e 	bl	80083e8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80083cc:	69f8      	ldr	r0, [r7, #28]
 80083ce:	f000 f89b 	bl	8008508 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80083d2:	2301      	movs	r3, #1
 80083d4:	61bb      	str	r3, [r7, #24]
 80083d6:	e002      	b.n	80083de <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295
 80083dc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80083de:	69bb      	ldr	r3, [r7, #24]
    }
 80083e0:	4618      	mov	r0, r3
 80083e2:	3720      	adds	r7, #32
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	461a      	mov	r2, r3
 8008400:	21a5      	movs	r1, #165	@ 0xa5
 8008402:	f004 fbfb 	bl	800cbfc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008410:	3b01      	subs	r3, #1
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	f023 0307 	bic.w	r3, r3, #7
 800841e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	617b      	str	r3, [r7, #20]
    }
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01e      	beq.n	8008486 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008448:	2300      	movs	r3, #0
 800844a:	61fb      	str	r3, [r7, #28]
 800844c:	e012      	b.n	8008474 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	7819      	ldrb	r1, [r3, #0]
 8008456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	4413      	add	r3, r2
 800845c:	3334      	adds	r3, #52	@ 0x34
 800845e:	460a      	mov	r2, r1
 8008460:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	4413      	add	r3, r2
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d006      	beq.n	800847c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	3301      	adds	r3, #1
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	2b09      	cmp	r3, #9
 8008478:	d9e9      	bls.n	800844e <prvInitialiseNewTask+0x66>
 800847a:	e000      	b.n	800847e <prvInitialiseNewTask+0x96>
            {
                break;
 800847c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008488:	2b04      	cmp	r3, #4
 800848a:	d90b      	bls.n	80084a4 <prvInitialiseNewTask+0xbc>
        __asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	613b      	str	r3, [r7, #16]
    }
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	e7fd      	b.n	80084a0 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d901      	bls.n	80084ae <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084aa:	2304      	movs	r3, #4
 80084ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084b8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	3304      	adds	r3, #4
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff fa2d 	bl	800791e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	3318      	adds	r3, #24
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff fa28 	bl	800791e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084d2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d6:	f1c3 0205 	rsb	r2, r3, #5
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	69b8      	ldr	r0, [r7, #24]
 80084ea:	f001 fa09 	bl	8009900 <pxPortInitialiseStack>
 80084ee:	4602      	mov	r2, r0
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008500:	bf00      	nop
 8008502:	3720      	adds	r7, #32
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008510:	f001 fb2c 	bl	8009b6c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008514:	4b40      	ldr	r3, [pc, #256]	@ (8008618 <prvAddNewTaskToReadyList+0x110>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	4a3f      	ldr	r2, [pc, #252]	@ (8008618 <prvAddNewTaskToReadyList+0x110>)
 800851c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800851e:	4b3f      	ldr	r3, [pc, #252]	@ (800861c <prvAddNewTaskToReadyList+0x114>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8008526:	4a3d      	ldr	r2, [pc, #244]	@ (800861c <prvAddNewTaskToReadyList+0x114>)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800852c:	4b3a      	ldr	r3, [pc, #232]	@ (8008618 <prvAddNewTaskToReadyList+0x110>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d110      	bne.n	8008556 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008534:	f000 fd7a 	bl	800902c <prvInitialiseTaskLists>
 8008538:	e00d      	b.n	8008556 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800853a:	4b39      	ldr	r3, [pc, #228]	@ (8008620 <prvAddNewTaskToReadyList+0x118>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008542:	4b36      	ldr	r3, [pc, #216]	@ (800861c <prvAddNewTaskToReadyList+0x114>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d802      	bhi.n	8008556 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008550:	4a32      	ldr	r2, [pc, #200]	@ (800861c <prvAddNewTaskToReadyList+0x114>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8008556:	4b33      	ldr	r3, [pc, #204]	@ (8008624 <prvAddNewTaskToReadyList+0x11c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	4a31      	ldr	r2, [pc, #196]	@ (8008624 <prvAddNewTaskToReadyList+0x11c>)
 800855e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008560:	4b30      	ldr	r3, [pc, #192]	@ (8008624 <prvAddNewTaskToReadyList+0x11c>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856c:	2201      	movs	r2, #1
 800856e:	409a      	lsls	r2, r3
 8008570:	4b2d      	ldr	r3, [pc, #180]	@ (8008628 <prvAddNewTaskToReadyList+0x120>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4313      	orrs	r3, r2
 8008576:	4a2c      	ldr	r2, [pc, #176]	@ (8008628 <prvAddNewTaskToReadyList+0x120>)
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857e:	492b      	ldr	r1, [pc, #172]	@ (800862c <prvAddNewTaskToReadyList+0x124>)
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	440b      	add	r3, r1
 800858a:	3304      	adds	r3, #4
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	609a      	str	r2, [r3, #8]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	3204      	adds	r2, #4
 80085a6:	605a      	str	r2, [r3, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	1d1a      	adds	r2, r3, #4
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	609a      	str	r2, [r3, #8]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4a1b      	ldr	r2, [pc, #108]	@ (800862c <prvAddNewTaskToReadyList+0x124>)
 80085be:	441a      	add	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	615a      	str	r2, [r3, #20]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c8:	4918      	ldr	r1, [pc, #96]	@ (800862c <prvAddNewTaskToReadyList+0x124>)
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	440b      	add	r3, r1
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	1c59      	adds	r1, r3, #1
 80085d8:	4814      	ldr	r0, [pc, #80]	@ (800862c <prvAddNewTaskToReadyList+0x124>)
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4403      	add	r3, r0
 80085e4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80085e6:	f001 faf3 	bl	8009bd0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80085ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <prvAddNewTaskToReadyList+0x118>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00e      	beq.n	8008610 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085f2:	4b0a      	ldr	r3, [pc, #40]	@ (800861c <prvAddNewTaskToReadyList+0x114>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d207      	bcs.n	8008610 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008600:	4b0b      	ldr	r3, [pc, #44]	@ (8008630 <prvAddNewTaskToReadyList+0x128>)
 8008602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008610:	bf00      	nop
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200003c4 	.word	0x200003c4
 800861c:	200002ec 	.word	0x200002ec
 8008620:	200003d0 	.word	0x200003d0
 8008624:	200003e0 	.word	0x200003e0
 8008628:	200003cc 	.word	0x200003cc
 800862c:	200002f0 	.word	0x200002f0
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d018      	beq.n	8008678 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8008646:	4b14      	ldr	r3, [pc, #80]	@ (8008698 <vTaskDelay+0x64>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <vTaskDelay+0x32>
        __asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	60bb      	str	r3, [r7, #8]
    }
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	e7fd      	b.n	8008662 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8008666:	f000 f86d 	bl	8008744 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800866a:	2100      	movs	r1, #0
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fe3b 	bl	80092e8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8008672:	f000 f875 	bl	8008760 <xTaskResumeAll>
 8008676:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d107      	bne.n	800868e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 800867e:	4b07      	ldr	r3, [pc, #28]	@ (800869c <vTaskDelay+0x68>)
 8008680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200003ec 	.word	0x200003ec
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80086a6:	4b20      	ldr	r3, [pc, #128]	@ (8008728 <vTaskStartScheduler+0x88>)
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	2300      	movs	r3, #0
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	2300      	movs	r3, #0
 80086b0:	2282      	movs	r2, #130	@ 0x82
 80086b2:	491e      	ldr	r1, [pc, #120]	@ (800872c <vTaskStartScheduler+0x8c>)
 80086b4:	481e      	ldr	r0, [pc, #120]	@ (8008730 <vTaskStartScheduler+0x90>)
 80086b6:	f7ff fe51 	bl	800835c <xTaskCreate>
 80086ba:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d102      	bne.n	80086c8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80086c2:	f000 fe91 	bl	80093e8 <xTimerCreateTimerTask>
 80086c6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d116      	bne.n	80086fc <vTaskStartScheduler+0x5c>
        __asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60bb      	str	r3, [r7, #8]
    }
 80086e0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80086e2:	4b14      	ldr	r3, [pc, #80]	@ (8008734 <vTaskStartScheduler+0x94>)
 80086e4:	f04f 32ff 	mov.w	r2, #4294967295
 80086e8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80086ea:	4b13      	ldr	r3, [pc, #76]	@ (8008738 <vTaskStartScheduler+0x98>)
 80086ec:	2201      	movs	r2, #1
 80086ee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086f0:	4b12      	ldr	r3, [pc, #72]	@ (800873c <vTaskStartScheduler+0x9c>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80086f6:	f001 f995 	bl	8009a24 <xPortStartScheduler>
 80086fa:	e00f      	b.n	800871c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008702:	d10b      	bne.n	800871c <vTaskStartScheduler+0x7c>
        __asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	607b      	str	r3, [r7, #4]
    }
 8008716:	bf00      	nop
 8008718:	bf00      	nop
 800871a:	e7fd      	b.n	8008718 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800871c:	4b08      	ldr	r3, [pc, #32]	@ (8008740 <vTaskStartScheduler+0xa0>)
 800871e:	681b      	ldr	r3, [r3, #0]
}
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	200003e8 	.word	0x200003e8
 800872c:	0800ccb0 	.word	0x0800ccb0
 8008730:	08008ffd 	.word	0x08008ffd
 8008734:	200003e4 	.word	0x200003e4
 8008738:	200003d0 	.word	0x200003d0
 800873c:	200003c8 	.word	0x200003c8
 8008740:	2000000c 	.word	0x2000000c

08008744 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008748:	4b04      	ldr	r3, [pc, #16]	@ (800875c <vTaskSuspendAll+0x18>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3301      	adds	r3, #1
 800874e:	4a03      	ldr	r2, [pc, #12]	@ (800875c <vTaskSuspendAll+0x18>)
 8008750:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008752:	bf00      	nop
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	200003ec 	.word	0x200003ec

08008760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800876e:	4b71      	ldr	r3, [pc, #452]	@ (8008934 <xTaskResumeAll+0x1d4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10b      	bne.n	800878e <xTaskResumeAll+0x2e>
        __asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	607b      	str	r3, [r7, #4]
    }
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800878e:	f001 f9ed 	bl	8009b6c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008792:	4b68      	ldr	r3, [pc, #416]	@ (8008934 <xTaskResumeAll+0x1d4>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3b01      	subs	r3, #1
 8008798:	4a66      	ldr	r2, [pc, #408]	@ (8008934 <xTaskResumeAll+0x1d4>)
 800879a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800879c:	4b65      	ldr	r3, [pc, #404]	@ (8008934 <xTaskResumeAll+0x1d4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 80c0 	bne.w	8008926 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087a6:	4b64      	ldr	r3, [pc, #400]	@ (8008938 <xTaskResumeAll+0x1d8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 80bb 	beq.w	8008926 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087b0:	e08a      	b.n	80088c8 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b2:	4b62      	ldr	r3, [pc, #392]	@ (800893c <xTaskResumeAll+0x1dc>)
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087be:	613b      	str	r3, [r7, #16]
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	6a12      	ldr	r2, [r2, #32]
 80087c8:	609a      	str	r2, [r3, #8]
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	69d2      	ldr	r2, [r2, #28]
 80087d2:	605a      	str	r2, [r3, #4]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	3318      	adds	r3, #24
 80087dc:	429a      	cmp	r2, r3
 80087de:	d103      	bne.n	80087e8 <xTaskResumeAll+0x88>
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	6a1a      	ldr	r2, [r3, #32]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	605a      	str	r2, [r3, #4]
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	2200      	movs	r2, #0
 80087ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	1e5a      	subs	r2, r3, #1
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	68d2      	ldr	r2, [r2, #12]
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	6892      	ldr	r2, [r2, #8]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	3304      	adds	r3, #4
 800881a:	429a      	cmp	r2, r3
 800881c:	d103      	bne.n	8008826 <xTaskResumeAll+0xc6>
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	605a      	str	r2, [r3, #4]
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	2200      	movs	r2, #0
 800882a:	615a      	str	r2, [r3, #20]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	1e5a      	subs	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883a:	2201      	movs	r2, #1
 800883c:	409a      	lsls	r2, r3
 800883e:	4b40      	ldr	r3, [pc, #256]	@ (8008940 <xTaskResumeAll+0x1e0>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4313      	orrs	r3, r2
 8008844:	4a3e      	ldr	r2, [pc, #248]	@ (8008940 <xTaskResumeAll+0x1e0>)
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884c:	493d      	ldr	r1, [pc, #244]	@ (8008944 <xTaskResumeAll+0x1e4>)
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	3304      	adds	r3, #4
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	60bb      	str	r3, [r7, #8]
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	609a      	str	r2, [r3, #8]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	60da      	str	r2, [r3, #12]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	69fa      	ldr	r2, [r7, #28]
 8008872:	3204      	adds	r2, #4
 8008874:	605a      	str	r2, [r3, #4]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	1d1a      	adds	r2, r3, #4
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	609a      	str	r2, [r3, #8]
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4a2e      	ldr	r2, [pc, #184]	@ (8008944 <xTaskResumeAll+0x1e4>)
 800888c:	441a      	add	r2, r3
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	615a      	str	r2, [r3, #20]
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008896:	492b      	ldr	r1, [pc, #172]	@ (8008944 <xTaskResumeAll+0x1e4>)
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	1c59      	adds	r1, r3, #1
 80088a6:	4827      	ldr	r0, [pc, #156]	@ (8008944 <xTaskResumeAll+0x1e4>)
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4403      	add	r3, r0
 80088b2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b8:	4b23      	ldr	r3, [pc, #140]	@ (8008948 <xTaskResumeAll+0x1e8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	429a      	cmp	r2, r3
 80088c0:	d302      	bcc.n	80088c8 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80088c2:	4b22      	ldr	r3, [pc, #136]	@ (800894c <xTaskResumeAll+0x1ec>)
 80088c4:	2201      	movs	r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088c8:	4b1c      	ldr	r3, [pc, #112]	@ (800893c <xTaskResumeAll+0x1dc>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f47f af70 	bne.w	80087b2 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80088d8:	f000 fc26 	bl	8009128 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008950 <xTaskResumeAll+0x1f0>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d010      	beq.n	800890a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80088e8:	f000 f846 	bl	8008978 <xTaskIncrementTick>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80088f2:	4b16      	ldr	r3, [pc, #88]	@ (800894c <xTaskResumeAll+0x1ec>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1f1      	bne.n	80088e8 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8008904:	4b12      	ldr	r3, [pc, #72]	@ (8008950 <xTaskResumeAll+0x1f0>)
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800890a:	4b10      	ldr	r3, [pc, #64]	@ (800894c <xTaskResumeAll+0x1ec>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8008912:	2301      	movs	r3, #1
 8008914:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008916:	4b0f      	ldr	r3, [pc, #60]	@ (8008954 <xTaskResumeAll+0x1f4>)
 8008918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008926:	f001 f953 	bl	8009bd0 <vPortExitCritical>

    return xAlreadyYielded;
 800892a:	69bb      	ldr	r3, [r7, #24]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	200003ec 	.word	0x200003ec
 8008938:	200003c4 	.word	0x200003c4
 800893c:	20000384 	.word	0x20000384
 8008940:	200003cc 	.word	0x200003cc
 8008944:	200002f0 	.word	0x200002f0
 8008948:	200002ec 	.word	0x200002ec
 800894c:	200003d8 	.word	0x200003d8
 8008950:	200003d4 	.word	0x200003d4
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800895e:	4b05      	ldr	r3, [pc, #20]	@ (8008974 <xTaskGetTickCount+0x1c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8008964:	687b      	ldr	r3, [r7, #4]
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	200003c8 	.word	0x200003c8

08008978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	@ 0x28
 800897c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008982:	4b7e      	ldr	r3, [pc, #504]	@ (8008b7c <xTaskIncrementTick+0x204>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 80ed 	bne.w	8008b66 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800898c:	4b7c      	ldr	r3, [pc, #496]	@ (8008b80 <xTaskIncrementTick+0x208>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3301      	adds	r3, #1
 8008992:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008994:	4a7a      	ldr	r2, [pc, #488]	@ (8008b80 <xTaskIncrementTick+0x208>)
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d121      	bne.n	80089e4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80089a0:	4b78      	ldr	r3, [pc, #480]	@ (8008b84 <xTaskIncrementTick+0x20c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00b      	beq.n	80089c2 <xTaskIncrementTick+0x4a>
        __asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	607b      	str	r3, [r7, #4]
    }
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <xTaskIncrementTick+0x46>
 80089c2:	4b70      	ldr	r3, [pc, #448]	@ (8008b84 <xTaskIncrementTick+0x20c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	61fb      	str	r3, [r7, #28]
 80089c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008b88 <xTaskIncrementTick+0x210>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a6d      	ldr	r2, [pc, #436]	@ (8008b84 <xTaskIncrementTick+0x20c>)
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	4a6d      	ldr	r2, [pc, #436]	@ (8008b88 <xTaskIncrementTick+0x210>)
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	4b6d      	ldr	r3, [pc, #436]	@ (8008b8c <xTaskIncrementTick+0x214>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3301      	adds	r3, #1
 80089dc:	4a6b      	ldr	r2, [pc, #428]	@ (8008b8c <xTaskIncrementTick+0x214>)
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	f000 fba2 	bl	8009128 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80089e4:	4b6a      	ldr	r3, [pc, #424]	@ (8008b90 <xTaskIncrementTick+0x218>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6a3a      	ldr	r2, [r7, #32]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	f0c0 80a6 	bcc.w	8008b3c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089f0:	4b64      	ldr	r3, [pc, #400]	@ (8008b84 <xTaskIncrementTick+0x20c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d104      	bne.n	8008a04 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089fa:	4b65      	ldr	r3, [pc, #404]	@ (8008b90 <xTaskIncrementTick+0x218>)
 80089fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008a00:	601a      	str	r2, [r3, #0]
                    break;
 8008a02:	e09b      	b.n	8008b3c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a04:	4b5f      	ldr	r3, [pc, #380]	@ (8008b84 <xTaskIncrementTick+0x20c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8008a14:	6a3a      	ldr	r2, [r7, #32]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d203      	bcs.n	8008a24 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008a1c:	4a5c      	ldr	r2, [pc, #368]	@ (8008b90 <xTaskIncrementTick+0x218>)
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008a22:	e08b      	b.n	8008b3c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	68d2      	ldr	r2, [r2, #12]
 8008a32:	609a      	str	r2, [r3, #8]
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	6892      	ldr	r2, [r2, #8]
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	3304      	adds	r3, #4
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d103      	bne.n	8008a52 <xTaskIncrementTick+0xda>
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	2200      	movs	r2, #0
 8008a56:	615a      	str	r2, [r3, #20]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	1e5a      	subs	r2, r3, #1
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01e      	beq.n	8008aa8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	6a12      	ldr	r2, [r2, #32]
 8008a78:	609a      	str	r2, [r3, #8]
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	69d2      	ldr	r2, [r2, #28]
 8008a82:	605a      	str	r2, [r3, #4]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	3318      	adds	r3, #24
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d103      	bne.n	8008a98 <xTaskIncrementTick+0x120>
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	6a1a      	ldr	r2, [r3, #32]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	605a      	str	r2, [r3, #4]
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	1e5a      	subs	r2, r3, #1
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aac:	2201      	movs	r2, #1
 8008aae:	409a      	lsls	r2, r3
 8008ab0:	4b38      	ldr	r3, [pc, #224]	@ (8008b94 <xTaskIncrementTick+0x21c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	4a37      	ldr	r2, [pc, #220]	@ (8008b94 <xTaskIncrementTick+0x21c>)
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008abe:	4936      	ldr	r1, [pc, #216]	@ (8008b98 <xTaskIncrementTick+0x220>)
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	440b      	add	r3, r1
 8008aca:	3304      	adds	r3, #4
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60bb      	str	r3, [r7, #8]
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	609a      	str	r2, [r3, #8]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	60da      	str	r2, [r3, #12]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	3204      	adds	r2, #4
 8008ae6:	605a      	str	r2, [r3, #4]
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	609a      	str	r2, [r3, #8]
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4a26      	ldr	r2, [pc, #152]	@ (8008b98 <xTaskIncrementTick+0x220>)
 8008afe:	441a      	add	r2, r3
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	615a      	str	r2, [r3, #20]
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b08:	4923      	ldr	r1, [pc, #140]	@ (8008b98 <xTaskIncrementTick+0x220>)
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	1c59      	adds	r1, r3, #1
 8008b18:	481f      	ldr	r0, [pc, #124]	@ (8008b98 <xTaskIncrementTick+0x220>)
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4403      	add	r3, r0
 8008b24:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8008b9c <xTaskIncrementTick+0x224>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b30:	429a      	cmp	r2, r3
 8008b32:	f67f af5d 	bls.w	80089f0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3a:	e759      	b.n	80089f0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b3c:	4b17      	ldr	r3, [pc, #92]	@ (8008b9c <xTaskIncrementTick+0x224>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b42:	4915      	ldr	r1, [pc, #84]	@ (8008b98 <xTaskIncrementTick+0x220>)
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d901      	bls.n	8008b58 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008b58:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <xTaskIncrementTick+0x228>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b64:	e004      	b.n	8008b70 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008b66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba4 <xTaskIncrementTick+0x22c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8008ba4 <xTaskIncrementTick+0x22c>)
 8008b6e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3728      	adds	r7, #40	@ 0x28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200003ec 	.word	0x200003ec
 8008b80:	200003c8 	.word	0x200003c8
 8008b84:	2000037c 	.word	0x2000037c
 8008b88:	20000380 	.word	0x20000380
 8008b8c:	200003dc 	.word	0x200003dc
 8008b90:	200003e4 	.word	0x200003e4
 8008b94:	200003cc 	.word	0x200003cc
 8008b98:	200002f0 	.word	0x200002f0
 8008b9c:	200002ec 	.word	0x200002ec
 8008ba0:	200003d8 	.word	0x200003d8
 8008ba4:	200003d4 	.word	0x200003d4

08008ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bae:	4b27      	ldr	r3, [pc, #156]	@ (8008c4c <vTaskSwitchContext+0xa4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008bb6:	4b26      	ldr	r3, [pc, #152]	@ (8008c50 <vTaskSwitchContext+0xa8>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008bbc:	e040      	b.n	8008c40 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8008bbe:	4b24      	ldr	r3, [pc, #144]	@ (8008c50 <vTaskSwitchContext+0xa8>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc4:	4b23      	ldr	r3, [pc, #140]	@ (8008c54 <vTaskSwitchContext+0xac>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	fab3 f383 	clz	r3, r3
 8008bd0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	f1c3 031f 	rsb	r3, r3, #31
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	491f      	ldr	r1, [pc, #124]	@ (8008c58 <vTaskSwitchContext+0xb0>)
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	440b      	add	r3, r1
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10b      	bne.n	8008c06 <vTaskSwitchContext+0x5e>
        __asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
    }
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <vTaskSwitchContext+0x5a>
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4a11      	ldr	r2, [pc, #68]	@ (8008c58 <vTaskSwitchContext+0xb0>)
 8008c12:	4413      	add	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	605a      	str	r2, [r3, #4]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	3308      	adds	r3, #8
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d104      	bne.n	8008c36 <vTaskSwitchContext+0x8e>
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	605a      	str	r2, [r3, #4]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	4a07      	ldr	r2, [pc, #28]	@ (8008c5c <vTaskSwitchContext+0xb4>)
 8008c3e:	6013      	str	r3, [r2, #0]
}
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	200003ec 	.word	0x200003ec
 8008c50:	200003d8 	.word	0x200003d8
 8008c54:	200003cc 	.word	0x200003cc
 8008c58:	200002f0 	.word	0x200002f0
 8008c5c:	200002ec 	.word	0x200002ec

08008c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10b      	bne.n	8008c88 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60fb      	str	r3, [r7, #12]
    }
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c88:	4b07      	ldr	r3, [pc, #28]	@ (8008ca8 <vTaskPlaceOnEventList+0x48>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3318      	adds	r3, #24
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fe fe51 	bl	8007938 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c96:	2101      	movs	r1, #1
 8008c98:	6838      	ldr	r0, [r7, #0]
 8008c9a:	f000 fb25 	bl	80092e8 <prvAddCurrentTaskToDelayedList>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	200002ec 	.word	0x200002ec

08008cac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10b      	bne.n	8008cd6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	613b      	str	r3, [r7, #16]
    }
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	617b      	str	r3, [r7, #20]
 8008cdc:	4b15      	ldr	r3, [pc, #84]	@ (8008d34 <vTaskPlaceOnEventListRestricted+0x88>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	61da      	str	r2, [r3, #28]
 8008ce4:	4b13      	ldr	r3, [pc, #76]	@ (8008d34 <vTaskPlaceOnEventListRestricted+0x88>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	6892      	ldr	r2, [r2, #8]
 8008cec:	621a      	str	r2, [r3, #32]
 8008cee:	4b11      	ldr	r3, [pc, #68]	@ (8008d34 <vTaskPlaceOnEventListRestricted+0x88>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	3218      	adds	r2, #24
 8008cf8:	605a      	str	r2, [r3, #4]
 8008cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8008d34 <vTaskPlaceOnEventListRestricted+0x88>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f103 0218 	add.w	r2, r3, #24
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	609a      	str	r2, [r3, #8]
 8008d06:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <vTaskPlaceOnEventListRestricted+0x88>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8008d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d22:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	f000 fade 	bl	80092e8 <prvAddCurrentTaskToDelayedList>
    }
 8008d2c:	bf00      	nop
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	200002ec 	.word	0x200002ec

08008d38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b08b      	sub	sp, #44	@ 0x2c
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	60fb      	str	r3, [r7, #12]
    }
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e7fd      	b.n	8008d62 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	6a3a      	ldr	r2, [r7, #32]
 8008d72:	6a12      	ldr	r2, [r2, #32]
 8008d74:	609a      	str	r2, [r3, #8]
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	6a3a      	ldr	r2, [r7, #32]
 8008d7c:	69d2      	ldr	r2, [r2, #28]
 8008d7e:	605a      	str	r2, [r3, #4]
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	3318      	adds	r3, #24
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d103      	bne.n	8008d94 <xTaskRemoveFromEventList+0x5c>
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	6a1a      	ldr	r2, [r3, #32]
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	605a      	str	r2, [r3, #4]
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	2200      	movs	r2, #0
 8008d98:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	1e5a      	subs	r2, r3, #1
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008da4:	4b4a      	ldr	r3, [pc, #296]	@ (8008ed0 <xTaskRemoveFromEventList+0x198>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d15e      	bne.n	8008e6a <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	6a3a      	ldr	r2, [r7, #32]
 8008db8:	68d2      	ldr	r2, [r2, #12]
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	6a3a      	ldr	r2, [r7, #32]
 8008dc2:	6892      	ldr	r2, [r2, #8]
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d103      	bne.n	8008dda <xTaskRemoveFromEventList+0xa2>
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	615a      	str	r2, [r3, #20]
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	1e5a      	subs	r2, r3, #1
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dee:	2201      	movs	r2, #1
 8008df0:	409a      	lsls	r2, r3
 8008df2:	4b38      	ldr	r3, [pc, #224]	@ (8008ed4 <xTaskRemoveFromEventList+0x19c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	4a36      	ldr	r2, [pc, #216]	@ (8008ed4 <xTaskRemoveFromEventList+0x19c>)
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e00:	4935      	ldr	r1, [pc, #212]	@ (8008ed8 <xTaskRemoveFromEventList+0x1a0>)
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	609a      	str	r2, [r3, #8]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	60da      	str	r2, [r3, #12]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	6a3a      	ldr	r2, [r7, #32]
 8008e26:	3204      	adds	r2, #4
 8008e28:	605a      	str	r2, [r3, #4]
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	1d1a      	adds	r2, r3, #4
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	609a      	str	r2, [r3, #8]
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4a26      	ldr	r2, [pc, #152]	@ (8008ed8 <xTaskRemoveFromEventList+0x1a0>)
 8008e40:	441a      	add	r2, r3
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	615a      	str	r2, [r3, #20]
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4a:	4923      	ldr	r1, [pc, #140]	@ (8008ed8 <xTaskRemoveFromEventList+0x1a0>)
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	1c59      	adds	r1, r3, #1
 8008e5a:	481f      	ldr	r0, [pc, #124]	@ (8008ed8 <xTaskRemoveFromEventList+0x1a0>)
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4403      	add	r3, r0
 8008e66:	6019      	str	r1, [r3, #0]
 8008e68:	e01b      	b.n	8008ea2 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8008edc <xTaskRemoveFromEventList+0x1a4>)
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	61bb      	str	r3, [r7, #24]
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	61da      	str	r2, [r3, #28]
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	621a      	str	r2, [r3, #32]
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	6a3a      	ldr	r2, [r7, #32]
 8008e84:	3218      	adds	r2, #24
 8008e86:	605a      	str	r2, [r3, #4]
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	f103 0218 	add.w	r2, r3, #24
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	609a      	str	r2, [r3, #8]
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	4a11      	ldr	r2, [pc, #68]	@ (8008edc <xTaskRemoveFromEventList+0x1a4>)
 8008e96:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e98:	4b10      	ldr	r3, [pc, #64]	@ (8008edc <xTaskRemoveFromEventList+0x1a4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8008edc <xTaskRemoveFromEventList+0x1a4>)
 8008ea0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee0 <xTaskRemoveFromEventList+0x1a8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d905      	bls.n	8008ebc <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee4 <xTaskRemoveFromEventList+0x1ac>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	e001      	b.n	8008ec0 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	372c      	adds	r7, #44	@ 0x2c
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	200003ec 	.word	0x200003ec
 8008ed4:	200003cc 	.word	0x200003cc
 8008ed8:	200002f0 	.word	0x200002f0
 8008edc:	20000384 	.word	0x20000384
 8008ee0:	200002ec 	.word	0x200002ec
 8008ee4:	200003d8 	.word	0x200003d8

08008ee8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ef0:	4b06      	ldr	r3, [pc, #24]	@ (8008f0c <vTaskInternalSetTimeOutState+0x24>)
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008ef8:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <vTaskInternalSetTimeOutState+0x28>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	605a      	str	r2, [r3, #4]
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	200003dc 	.word	0x200003dc
 8008f10:	200003c8 	.word	0x200003c8

08008f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b088      	sub	sp, #32
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	613b      	str	r3, [r7, #16]
    }
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	e7fd      	b.n	8008f38 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10b      	bne.n	8008f5a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	60fb      	str	r3, [r7, #12]
    }
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	e7fd      	b.n	8008f56 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8008f5a:	f000 fe07 	bl	8009b6c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8008fdc <xTaskCheckForTimeOut+0xc8>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f76:	d102      	bne.n	8008f7e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	e026      	b.n	8008fcc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	4b17      	ldr	r3, [pc, #92]	@ (8008fe0 <xTaskCheckForTimeOut+0xcc>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d00a      	beq.n	8008fa0 <xTaskCheckForTimeOut+0x8c>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d305      	bcc.n	8008fa0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008f94:	2301      	movs	r3, #1
 8008f96:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	e015      	b.n	8008fcc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d20b      	bcs.n	8008fc2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	1ad2      	subs	r2, r2, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff ff96 	bl	8008ee8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	61fb      	str	r3, [r7, #28]
 8008fc0:	e004      	b.n	8008fcc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8008fcc:	f000 fe00 	bl	8009bd0 <vPortExitCritical>

    return xReturn;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3720      	adds	r7, #32
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	200003c8 	.word	0x200003c8
 8008fe0:	200003dc 	.word	0x200003dc

08008fe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008fe8:	4b03      	ldr	r3, [pc, #12]	@ (8008ff8 <vTaskMissedYield+0x14>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	601a      	str	r2, [r3, #0]
}
 8008fee:	bf00      	nop
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	200003d8 	.word	0x200003d8

08008ffc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009004:	f000 f852 	bl	80090ac <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009008:	4b06      	ldr	r3, [pc, #24]	@ (8009024 <prvIdleTask+0x28>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d9f9      	bls.n	8009004 <prvIdleTask+0x8>
            {
                taskYIELD();
 8009010:	4b05      	ldr	r3, [pc, #20]	@ (8009028 <prvIdleTask+0x2c>)
 8009012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009020:	e7f0      	b.n	8009004 <prvIdleTask+0x8>
 8009022:	bf00      	nop
 8009024:	200002f0 	.word	0x200002f0
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009032:	2300      	movs	r3, #0
 8009034:	607b      	str	r3, [r7, #4]
 8009036:	e00c      	b.n	8009052 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4a12      	ldr	r2, [pc, #72]	@ (800908c <prvInitialiseTaskLists+0x60>)
 8009044:	4413      	add	r3, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fc49 	bl	80078de <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3301      	adds	r3, #1
 8009050:	607b      	str	r3, [r7, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b04      	cmp	r3, #4
 8009056:	d9ef      	bls.n	8009038 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009058:	480d      	ldr	r0, [pc, #52]	@ (8009090 <prvInitialiseTaskLists+0x64>)
 800905a:	f7fe fc40 	bl	80078de <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800905e:	480d      	ldr	r0, [pc, #52]	@ (8009094 <prvInitialiseTaskLists+0x68>)
 8009060:	f7fe fc3d 	bl	80078de <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009064:	480c      	ldr	r0, [pc, #48]	@ (8009098 <prvInitialiseTaskLists+0x6c>)
 8009066:	f7fe fc3a 	bl	80078de <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800906a:	480c      	ldr	r0, [pc, #48]	@ (800909c <prvInitialiseTaskLists+0x70>)
 800906c:	f7fe fc37 	bl	80078de <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8009070:	480b      	ldr	r0, [pc, #44]	@ (80090a0 <prvInitialiseTaskLists+0x74>)
 8009072:	f7fe fc34 	bl	80078de <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009076:	4b0b      	ldr	r3, [pc, #44]	@ (80090a4 <prvInitialiseTaskLists+0x78>)
 8009078:	4a05      	ldr	r2, [pc, #20]	@ (8009090 <prvInitialiseTaskLists+0x64>)
 800907a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800907c:	4b0a      	ldr	r3, [pc, #40]	@ (80090a8 <prvInitialiseTaskLists+0x7c>)
 800907e:	4a05      	ldr	r2, [pc, #20]	@ (8009094 <prvInitialiseTaskLists+0x68>)
 8009080:	601a      	str	r2, [r3, #0]
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	200002f0 	.word	0x200002f0
 8009090:	20000354 	.word	0x20000354
 8009094:	20000368 	.word	0x20000368
 8009098:	20000384 	.word	0x20000384
 800909c:	20000398 	.word	0x20000398
 80090a0:	200003b0 	.word	0x200003b0
 80090a4:	2000037c 	.word	0x2000037c
 80090a8:	20000380 	.word	0x20000380

080090ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090b2:	e019      	b.n	80090e8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80090b4:	f000 fd5a 	bl	8009b6c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b8:	4b10      	ldr	r3, [pc, #64]	@ (80090fc <prvCheckTasksWaitingTermination+0x50>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe fc70 	bl	80079aa <uxListRemove>
                --uxCurrentNumberOfTasks;
 80090ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009100 <prvCheckTasksWaitingTermination+0x54>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	4a0b      	ldr	r2, [pc, #44]	@ (8009100 <prvCheckTasksWaitingTermination+0x54>)
 80090d2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80090d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009104 <prvCheckTasksWaitingTermination+0x58>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3b01      	subs	r3, #1
 80090da:	4a0a      	ldr	r2, [pc, #40]	@ (8009104 <prvCheckTasksWaitingTermination+0x58>)
 80090dc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80090de:	f000 fd77 	bl	8009bd0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f810 	bl	8009108 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090e8:	4b06      	ldr	r3, [pc, #24]	@ (8009104 <prvCheckTasksWaitingTermination+0x58>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e1      	bne.n	80090b4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	20000398 	.word	0x20000398
 8009100:	200003c4 	.word	0x200003c4
 8009104:	200003ac 	.word	0x200003ac

08009108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fecd 	bl	8009eb4 <vPortFree>
            vPortFree( pxTCB );
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 feca 	bl	8009eb4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800912c:	4b0a      	ldr	r3, [pc, #40]	@ (8009158 <prvResetNextTaskUnblockTime+0x30>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d104      	bne.n	8009140 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009136:	4b09      	ldr	r3, [pc, #36]	@ (800915c <prvResetNextTaskUnblockTime+0x34>)
 8009138:	f04f 32ff 	mov.w	r2, #4294967295
 800913c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800913e:	e005      	b.n	800914c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009140:	4b05      	ldr	r3, [pc, #20]	@ (8009158 <prvResetNextTaskUnblockTime+0x30>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a04      	ldr	r2, [pc, #16]	@ (800915c <prvResetNextTaskUnblockTime+0x34>)
 800914a:	6013      	str	r3, [r2, #0]
}
 800914c:	bf00      	nop
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	2000037c 	.word	0x2000037c
 800915c:	200003e4 	.word	0x200003e4

08009160 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009166:	4b0b      	ldr	r3, [pc, #44]	@ (8009194 <xTaskGetSchedulerState+0x34>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d102      	bne.n	8009174 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800916e:	2301      	movs	r3, #1
 8009170:	607b      	str	r3, [r7, #4]
 8009172:	e008      	b.n	8009186 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009174:	4b08      	ldr	r3, [pc, #32]	@ (8009198 <xTaskGetSchedulerState+0x38>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800917c:	2302      	movs	r3, #2
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	e001      	b.n	8009186 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009182:	2300      	movs	r3, #0
 8009184:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009186:	687b      	ldr	r3, [r7, #4]
    }
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	200003d0 	.word	0x200003d0
 8009198:	200003ec 	.word	0x200003ec

0800919c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80091a8:	2300      	movs	r3, #0
 80091aa:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 808e 	beq.w	80092d0 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80091b4:	4b49      	ldr	r3, [pc, #292]	@ (80092dc <xTaskPriorityDisinherit+0x140>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d00b      	beq.n	80091d6 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	613b      	str	r3, [r7, #16]
    }
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	e7fd      	b.n	80091d2 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10b      	bne.n	80091f6 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	60fb      	str	r3, [r7, #12]
    }
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	e7fd      	b.n	80091f2 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091fa:	1e5a      	subs	r2, r3, #1
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009208:	429a      	cmp	r2, r3
 800920a:	d061      	beq.n	80092d0 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d15d      	bne.n	80092d0 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	3304      	adds	r3, #4
 8009218:	4618      	mov	r0, r3
 800921a:	f7fe fbc6 	bl	80079aa <uxListRemove>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009228:	2201      	movs	r2, #1
 800922a:	fa02 f303 	lsl.w	r3, r2, r3
 800922e:	43da      	mvns	r2, r3
 8009230:	4b2b      	ldr	r3, [pc, #172]	@ (80092e0 <xTaskPriorityDisinherit+0x144>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4013      	ands	r3, r2
 8009236:	4a2a      	ldr	r2, [pc, #168]	@ (80092e0 <xTaskPriorityDisinherit+0x144>)
 8009238:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	f1c3 0205 	rsb	r2, r3, #5
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009252:	2201      	movs	r2, #1
 8009254:	409a      	lsls	r2, r3
 8009256:	4b22      	ldr	r3, [pc, #136]	@ (80092e0 <xTaskPriorityDisinherit+0x144>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4313      	orrs	r3, r2
 800925c:	4a20      	ldr	r2, [pc, #128]	@ (80092e0 <xTaskPriorityDisinherit+0x144>)
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009264:	491f      	ldr	r1, [pc, #124]	@ (80092e4 <xTaskPriorityDisinherit+0x148>)
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	3304      	adds	r3, #4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	617b      	str	r3, [r7, #20]
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	609a      	str	r2, [r3, #8]
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	60da      	str	r2, [r3, #12]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	3204      	adds	r2, #4
 800928c:	605a      	str	r2, [r3, #4]
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	1d1a      	adds	r2, r3, #4
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	609a      	str	r2, [r3, #8]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4a10      	ldr	r2, [pc, #64]	@ (80092e4 <xTaskPriorityDisinherit+0x148>)
 80092a4:	441a      	add	r2, r3
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	615a      	str	r2, [r3, #20]
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ae:	490d      	ldr	r1, [pc, #52]	@ (80092e4 <xTaskPriorityDisinherit+0x148>)
 80092b0:	4613      	mov	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	1c59      	adds	r1, r3, #1
 80092be:	4809      	ldr	r0, [pc, #36]	@ (80092e4 <xTaskPriorityDisinherit+0x148>)
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4403      	add	r3, r0
 80092ca:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80092d0:	69fb      	ldr	r3, [r7, #28]
    }
 80092d2:	4618      	mov	r0, r3
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	200002ec 	.word	0x200002ec
 80092e0:	200003cc 	.word	0x200003cc
 80092e4:	200002f0 	.word	0x200002f0

080092e8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80092f2:	4b36      	ldr	r3, [pc, #216]	@ (80093cc <prvAddCurrentTaskToDelayedList+0xe4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092f8:	4b35      	ldr	r3, [pc, #212]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fb53 	bl	80079aa <uxListRemove>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10b      	bne.n	8009322 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800930a:	4b31      	ldr	r3, [pc, #196]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009310:	2201      	movs	r2, #1
 8009312:	fa02 f303 	lsl.w	r3, r2, r3
 8009316:	43da      	mvns	r2, r3
 8009318:	4b2e      	ldr	r3, [pc, #184]	@ (80093d4 <prvAddCurrentTaskToDelayedList+0xec>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4013      	ands	r3, r2
 800931e:	4a2d      	ldr	r2, [pc, #180]	@ (80093d4 <prvAddCurrentTaskToDelayedList+0xec>)
 8009320:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d124      	bne.n	8009374 <prvAddCurrentTaskToDelayedList+0x8c>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d021      	beq.n	8009374 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009330:	4b29      	ldr	r3, [pc, #164]	@ (80093d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	4b26      	ldr	r3, [pc, #152]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	609a      	str	r2, [r3, #8]
 800933e:	4b24      	ldr	r3, [pc, #144]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	6892      	ldr	r2, [r2, #8]
 8009346:	60da      	str	r2, [r3, #12]
 8009348:	4b21      	ldr	r3, [pc, #132]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	3204      	adds	r2, #4
 8009352:	605a      	str	r2, [r3, #4]
 8009354:	4b1e      	ldr	r3, [pc, #120]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	1d1a      	adds	r2, r3, #4
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	609a      	str	r2, [r3, #8]
 800935e:	4b1c      	ldr	r3, [pc, #112]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1d      	ldr	r2, [pc, #116]	@ (80093d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009364:	615a      	str	r2, [r3, #20]
 8009366:	4b1c      	ldr	r3, [pc, #112]	@ (80093d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3301      	adds	r3, #1
 800936c:	4a1a      	ldr	r2, [pc, #104]	@ (80093d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009372:	e026      	b.n	80093c2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800937c:	4b14      	ldr	r3, [pc, #80]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	429a      	cmp	r2, r3
 800938a:	d209      	bcs.n	80093a0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800938c:	4b13      	ldr	r3, [pc, #76]	@ (80093dc <prvAddCurrentTaskToDelayedList+0xf4>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4b0f      	ldr	r3, [pc, #60]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3304      	adds	r3, #4
 8009396:	4619      	mov	r1, r3
 8009398:	4610      	mov	r0, r2
 800939a:	f7fe facd 	bl	8007938 <vListInsert>
}
 800939e:	e010      	b.n	80093c2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093a0:	4b0f      	ldr	r3, [pc, #60]	@ (80093e0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	4b0a      	ldr	r3, [pc, #40]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3304      	adds	r3, #4
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	f7fe fac3 	bl	8007938 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80093b2:	4b0c      	ldr	r3, [pc, #48]	@ (80093e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d202      	bcs.n	80093c2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80093bc:	4a09      	ldr	r2, [pc, #36]	@ (80093e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6013      	str	r3, [r2, #0]
}
 80093c2:	bf00      	nop
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200003c8 	.word	0x200003c8
 80093d0:	200002ec 	.word	0x200002ec
 80093d4:	200003cc 	.word	0x200003cc
 80093d8:	200003b0 	.word	0x200003b0
 80093dc:	20000380 	.word	0x20000380
 80093e0:	2000037c 	.word	0x2000037c
 80093e4:	200003e4 	.word	0x200003e4

080093e8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80093f2:	f000 fa4f 	bl	8009894 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80093f6:	4b12      	ldr	r3, [pc, #72]	@ (8009440 <xTimerCreateTimerTask+0x58>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80093fe:	4b11      	ldr	r3, [pc, #68]	@ (8009444 <xTimerCreateTimerTask+0x5c>)
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	2302      	movs	r3, #2
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	2300      	movs	r3, #0
 8009408:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800940c:	490e      	ldr	r1, [pc, #56]	@ (8009448 <xTimerCreateTimerTask+0x60>)
 800940e:	480f      	ldr	r0, [pc, #60]	@ (800944c <xTimerCreateTimerTask+0x64>)
 8009410:	f7fe ffa4 	bl	800835c <xTaskCreate>
 8009414:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10b      	bne.n	8009434 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	603b      	str	r3, [r7, #0]
    }
 800942e:	bf00      	nop
 8009430:	bf00      	nop
 8009432:	e7fd      	b.n	8009430 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8009434:	687b      	ldr	r3, [r7, #4]
    }
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000420 	.word	0x20000420
 8009444:	20000424 	.word	0x20000424
 8009448:	0800ccb8 	.word	0x0800ccb8
 800944c:	080094f5 	.word	0x080094f5

08009450 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800945c:	e008      	b.n	8009470 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	4413      	add	r3, r2
 8009466:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	18d1      	adds	r1, r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f8df 	bl	8009640 <prvInsertTimerInActiveList>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1ea      	bne.n	800945e <prvReloadTimer+0xe>
        }
    }
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949e:	4b14      	ldr	r3, [pc, #80]	@ (80094f0 <prvProcessExpiredTimer+0x5c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3304      	adds	r3, #4
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe fa7c 	bl	80079aa <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094b8:	f003 0304 	and.w	r3, r3, #4
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff ffc3 	bl	8009450 <prvReloadTimer>
 80094ca:	e008      	b.n	80094de <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094d2:	f023 0301 	bic.w	r3, r3, #1
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	4798      	blx	r3
    }
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	20000418 	.word	0x20000418

080094f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094fc:	f107 0308 	add.w	r3, r7, #8
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f859 	bl	80095b8 <prvGetNextExpireTime>
 8009506:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	4619      	mov	r1, r3
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 f805 	bl	800951c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8009512:	f000 f8d7 	bl	80096c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009516:	bf00      	nop
 8009518:	e7f0      	b.n	80094fc <prvTimerTask+0x8>
	...

0800951c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8009526:	f7ff f90d 	bl	8008744 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800952a:	f107 0308 	add.w	r3, r7, #8
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f866 	bl	8009600 <prvSampleTimeNow>
 8009534:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d130      	bne.n	800959e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <prvProcessTimerOrBlockTask+0x3c>
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	429a      	cmp	r2, r3
 8009548:	d806      	bhi.n	8009558 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800954a:	f7ff f909 	bl	8008760 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff ff9f 	bl	8009494 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8009556:	e024      	b.n	80095a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800955e:	4b13      	ldr	r3, [pc, #76]	@ (80095ac <prvProcessTimerOrBlockTask+0x90>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <prvProcessTimerOrBlockTask+0x50>
 8009568:	2301      	movs	r3, #1
 800956a:	e000      	b.n	800956e <prvProcessTimerOrBlockTask+0x52>
 800956c:	2300      	movs	r3, #0
 800956e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009570:	4b0f      	ldr	r3, [pc, #60]	@ (80095b0 <prvProcessTimerOrBlockTask+0x94>)
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4619      	mov	r1, r3
 800957e:	f7fe feb9 	bl	80082f4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8009582:	f7ff f8ed 	bl	8008760 <xTaskResumeAll>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800958c:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <prvProcessTimerOrBlockTask+0x98>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	f3bf 8f6f 	isb	sy
    }
 800959c:	e001      	b.n	80095a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800959e:	f7ff f8df 	bl	8008760 <xTaskResumeAll>
    }
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	2000041c 	.word	0x2000041c
 80095b0:	20000420 	.word	0x20000420
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095c0:	4b0e      	ldr	r3, [pc, #56]	@ (80095fc <prvGetNextExpireTime+0x44>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <prvGetNextExpireTime+0x16>
 80095ca:	2201      	movs	r2, #1
 80095cc:	e000      	b.n	80095d0 <prvGetNextExpireTime+0x18>
 80095ce:	2200      	movs	r2, #0
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d105      	bne.n	80095e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095dc:	4b07      	ldr	r3, [pc, #28]	@ (80095fc <prvGetNextExpireTime+0x44>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	e001      	b.n	80095ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80095ec:	68fb      	ldr	r3, [r7, #12]
    }
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	20000418 	.word	0x20000418

08009600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009608:	f7ff f9a6 	bl	8008958 <xTaskGetTickCount>
 800960c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800960e:	4b0b      	ldr	r3, [pc, #44]	@ (800963c <prvSampleTimeNow+0x3c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d205      	bcs.n	8009624 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009618:	f000 f916 	bl	8009848 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	e002      	b.n	800962a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800962a:	4a04      	ldr	r2, [pc, #16]	@ (800963c <prvSampleTimeNow+0x3c>)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009630:	68fb      	ldr	r3, [r7, #12]
    }
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000428 	.word	0x20000428

08009640 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	429a      	cmp	r2, r3
 8009664:	d812      	bhi.n	800968c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	1ad2      	subs	r2, r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	429a      	cmp	r2, r3
 8009672:	d302      	bcc.n	800967a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8009674:	2301      	movs	r3, #1
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e01b      	b.n	80096b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800967a:	4b10      	ldr	r3, [pc, #64]	@ (80096bc <prvInsertTimerInActiveList+0x7c>)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3304      	adds	r3, #4
 8009682:	4619      	mov	r1, r3
 8009684:	4610      	mov	r0, r2
 8009686:	f7fe f957 	bl	8007938 <vListInsert>
 800968a:	e012      	b.n	80096b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d206      	bcs.n	80096a2 <prvInsertTimerInActiveList+0x62>
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d302      	bcc.n	80096a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800969c:	2301      	movs	r3, #1
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	e007      	b.n	80096b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096a2:	4b07      	ldr	r3, [pc, #28]	@ (80096c0 <prvInsertTimerInActiveList+0x80>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3304      	adds	r3, #4
 80096aa:	4619      	mov	r1, r3
 80096ac:	4610      	mov	r0, r2
 80096ae:	f7fe f943 	bl	8007938 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80096b2:	697b      	ldr	r3, [r7, #20]
    }
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	2000041c 	.word	0x2000041c
 80096c0:	20000418 	.word	0x20000418

080096c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096ca:	e0a9      	b.n	8009820 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f2c0 80a6 	blt.w	8009820 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe f960 	bl	80079aa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff ff87 	bl	8009600 <prvSampleTimeNow>
 80096f2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	f200 808e 	bhi.w	800981a <prvProcessReceivedCommands+0x156>
 80096fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009704 <prvProcessReceivedCommands+0x40>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	08009729 	.word	0x08009729
 8009708:	08009729 	.word	0x08009729
 800970c:	08009791 	.word	0x08009791
 8009710:	080097a5 	.word	0x080097a5
 8009714:	080097f1 	.word	0x080097f1
 8009718:	08009729 	.word	0x08009729
 800971c:	08009729 	.word	0x08009729
 8009720:	08009791 	.word	0x08009791
 8009724:	080097a5 	.word	0x080097a5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	18d1      	adds	r1, r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	69f8      	ldr	r0, [r7, #28]
 8009748:	f7ff ff7a 	bl	8009640 <prvInsertTimerInActiveList>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d065      	beq.n	800981e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d009      	beq.n	8009774 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	4413      	add	r3, r2
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	4619      	mov	r1, r3
 800976c:	69f8      	ldr	r0, [r7, #28]
 800976e:	f7ff fe6f 	bl	8009450 <prvReloadTimer>
 8009772:	e008      	b.n	8009786 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800977a:	f023 0301 	bic.w	r3, r3, #1
 800977e:	b2da      	uxtb	r2, r3
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	69f8      	ldr	r0, [r7, #28]
 800978c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800978e:	e046      	b.n	800981e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009796:	f023 0301 	bic.w	r3, r3, #1
 800979a:	b2da      	uxtb	r2, r3
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80097a2:	e03d      	b.n	8009820 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10b      	bne.n	80097dc <prvProcessReceivedCommands+0x118>
        __asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	617b      	str	r3, [r7, #20]
    }
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	699a      	ldr	r2, [r3, #24]
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	18d1      	adds	r1, r2, r3
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	69f8      	ldr	r0, [r7, #28]
 80097ea:	f7ff ff29 	bl	8009640 <prvInsertTimerInActiveList>
                        break;
 80097ee:	e017      	b.n	8009820 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d103      	bne.n	8009806 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 80097fe:	69f8      	ldr	r0, [r7, #28]
 8009800:	f000 fb58 	bl	8009eb4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8009804:	e00c      	b.n	8009820 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800980c:	f023 0301 	bic.w	r3, r3, #1
 8009810:	b2da      	uxtb	r2, r3
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8009818:	e002      	b.n	8009820 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800981a:	bf00      	nop
 800981c:	e000      	b.n	8009820 <prvProcessReceivedCommands+0x15c>
                        break;
 800981e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009820:	4b08      	ldr	r3, [pc, #32]	@ (8009844 <prvProcessReceivedCommands+0x180>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f107 0108 	add.w	r1, r7, #8
 8009828:	2200      	movs	r2, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe fb20 	bl	8007e70 <xQueueReceive>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	f47f af4a 	bne.w	80096cc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8009838:	bf00      	nop
 800983a:	bf00      	nop
 800983c:	3720      	adds	r7, #32
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20000420 	.word	0x20000420

08009848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800984e:	e009      	b.n	8009864 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009850:	4b0e      	ldr	r3, [pc, #56]	@ (800988c <prvSwitchTimerLists+0x44>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800985a:	f04f 31ff 	mov.w	r1, #4294967295
 800985e:	6838      	ldr	r0, [r7, #0]
 8009860:	f7ff fe18 	bl	8009494 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009864:	4b09      	ldr	r3, [pc, #36]	@ (800988c <prvSwitchTimerLists+0x44>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f0      	bne.n	8009850 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800986e:	4b07      	ldr	r3, [pc, #28]	@ (800988c <prvSwitchTimerLists+0x44>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8009874:	4b06      	ldr	r3, [pc, #24]	@ (8009890 <prvSwitchTimerLists+0x48>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a04      	ldr	r2, [pc, #16]	@ (800988c <prvSwitchTimerLists+0x44>)
 800987a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800987c:	4a04      	ldr	r2, [pc, #16]	@ (8009890 <prvSwitchTimerLists+0x48>)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6013      	str	r3, [r2, #0]
    }
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000418 	.word	0x20000418
 8009890:	2000041c 	.word	0x2000041c

08009894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8009898:	f000 f968 	bl	8009b6c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800989c:	4b12      	ldr	r3, [pc, #72]	@ (80098e8 <prvCheckForValidListAndQueue+0x54>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d11d      	bne.n	80098e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80098a4:	4811      	ldr	r0, [pc, #68]	@ (80098ec <prvCheckForValidListAndQueue+0x58>)
 80098a6:	f7fe f81a 	bl	80078de <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80098aa:	4811      	ldr	r0, [pc, #68]	@ (80098f0 <prvCheckForValidListAndQueue+0x5c>)
 80098ac:	f7fe f817 	bl	80078de <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80098b0:	4b10      	ldr	r3, [pc, #64]	@ (80098f4 <prvCheckForValidListAndQueue+0x60>)
 80098b2:	4a0e      	ldr	r2, [pc, #56]	@ (80098ec <prvCheckForValidListAndQueue+0x58>)
 80098b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80098b6:	4b10      	ldr	r3, [pc, #64]	@ (80098f8 <prvCheckForValidListAndQueue+0x64>)
 80098b8:	4a0d      	ldr	r2, [pc, #52]	@ (80098f0 <prvCheckForValidListAndQueue+0x5c>)
 80098ba:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80098bc:	2200      	movs	r2, #0
 80098be:	210c      	movs	r1, #12
 80098c0:	200a      	movs	r0, #10
 80098c2:	f7fe f92f 	bl	8007b24 <xQueueGenericCreate>
 80098c6:	4603      	mov	r3, r0
 80098c8:	4a07      	ldr	r2, [pc, #28]	@ (80098e8 <prvCheckForValidListAndQueue+0x54>)
 80098ca:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80098cc:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <prvCheckForValidListAndQueue+0x54>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d005      	beq.n	80098e0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098d4:	4b04      	ldr	r3, [pc, #16]	@ (80098e8 <prvCheckForValidListAndQueue+0x54>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4908      	ldr	r1, [pc, #32]	@ (80098fc <prvCheckForValidListAndQueue+0x68>)
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fcba 	bl	8008254 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80098e0:	f000 f976 	bl	8009bd0 <vPortExitCritical>
    }
 80098e4:	bf00      	nop
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000420 	.word	0x20000420
 80098ec:	200003f0 	.word	0x200003f0
 80098f0:	20000404 	.word	0x20000404
 80098f4:	20000418 	.word	0x20000418
 80098f8:	2000041c 	.word	0x2000041c
 80098fc:	0800ccc0 	.word	0x0800ccc0

08009900 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3b04      	subs	r3, #4
 8009910:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009918:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3b04      	subs	r3, #4
 800991e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f023 0201 	bic.w	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3b04      	subs	r3, #4
 800992e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009930:	4a0c      	ldr	r2, [pc, #48]	@ (8009964 <pxPortInitialiseStack+0x64>)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3b14      	subs	r3, #20
 800993a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3b04      	subs	r3, #4
 8009946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f06f 0202 	mvn.w	r2, #2
 800994e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3b20      	subs	r3, #32
 8009954:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8009956:	68fb      	ldr	r3, [r7, #12]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	08009969 	.word	0x08009969

08009968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8009972:	4b13      	ldr	r3, [pc, #76]	@ (80099c0 <prvTaskExitError+0x58>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d00b      	beq.n	8009994 <prvTaskExitError+0x2c>
        __asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60fb      	str	r3, [r7, #12]
    }
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	e7fd      	b.n	8009990 <prvTaskExitError+0x28>
        __asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	60bb      	str	r3, [r7, #8]
    }
 80099a6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80099a8:	bf00      	nop
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0fc      	beq.n	80099aa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	20000010 	.word	0x20000010
	...

080099d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80099d0:	4b07      	ldr	r3, [pc, #28]	@ (80099f0 <pxCurrentTCBConst2>)
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	6808      	ldr	r0, [r1, #0]
 80099d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	f380 8809 	msr	PSP, r0
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8811 	msr	BASEPRI, r0
 80099ea:	4770      	bx	lr
 80099ec:	f3af 8000 	nop.w

080099f0 <pxCurrentTCBConst2>:
 80099f0:	200002ec 	.word	0x200002ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop

080099f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80099f8:	4808      	ldr	r0, [pc, #32]	@ (8009a1c <prvPortStartFirstTask+0x24>)
 80099fa:	6800      	ldr	r0, [r0, #0]
 80099fc:	6800      	ldr	r0, [r0, #0]
 80099fe:	f380 8808 	msr	MSP, r0
 8009a02:	f04f 0000 	mov.w	r0, #0
 8009a06:	f380 8814 	msr	CONTROL, r0
 8009a0a:	b662      	cpsie	i
 8009a0c:	b661      	cpsie	f
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	df00      	svc	0
 8009a18:	bf00      	nop
 8009a1a:	0000      	.short	0x0000
 8009a1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop

08009a24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a2a:	4b47      	ldr	r3, [pc, #284]	@ (8009b48 <xPortStartScheduler+0x124>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a47      	ldr	r2, [pc, #284]	@ (8009b4c <xPortStartScheduler+0x128>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d10b      	bne.n	8009a4c <xPortStartScheduler+0x28>
        __asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	613b      	str	r3, [r7, #16]
    }
 8009a46:	bf00      	nop
 8009a48:	bf00      	nop
 8009a4a:	e7fd      	b.n	8009a48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8009b48 <xPortStartScheduler+0x124>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a3f      	ldr	r2, [pc, #252]	@ (8009b50 <xPortStartScheduler+0x12c>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d10b      	bne.n	8009a6e <xPortStartScheduler+0x4a>
        __asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	60fb      	str	r3, [r7, #12]
    }
 8009a68:	bf00      	nop
 8009a6a:	bf00      	nop
 8009a6c:	e7fd      	b.n	8009a6a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a6e:	4b39      	ldr	r3, [pc, #228]	@ (8009b54 <xPortStartScheduler+0x130>)
 8009a70:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	22ff      	movs	r2, #255	@ 0xff
 8009a7e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	4b31      	ldr	r3, [pc, #196]	@ (8009b58 <xPortStartScheduler+0x134>)
 8009a94:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a96:	4b31      	ldr	r3, [pc, #196]	@ (8009b5c <xPortStartScheduler+0x138>)
 8009a98:	2207      	movs	r2, #7
 8009a9a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a9c:	e009      	b.n	8009ab2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8009a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8009b5c <xPortStartScheduler+0x138>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8009b5c <xPortStartScheduler+0x138>)
 8009aa6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aba:	2b80      	cmp	r3, #128	@ 0x80
 8009abc:	d0ef      	beq.n	8009a9e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009abe:	4b27      	ldr	r3, [pc, #156]	@ (8009b5c <xPortStartScheduler+0x138>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f1c3 0307 	rsb	r3, r3, #7
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d00b      	beq.n	8009ae2 <xPortStartScheduler+0xbe>
        __asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	60bb      	str	r3, [r7, #8]
    }
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	e7fd      	b.n	8009ade <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b5c <xPortStartScheduler+0x138>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	021b      	lsls	r3, r3, #8
 8009ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8009b5c <xPortStartScheduler+0x138>)
 8009aea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009aec:	4b1b      	ldr	r3, [pc, #108]	@ (8009b5c <xPortStartScheduler+0x138>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009af4:	4a19      	ldr	r2, [pc, #100]	@ (8009b5c <xPortStartScheduler+0x138>)
 8009af6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009b00:	4b17      	ldr	r3, [pc, #92]	@ (8009b60 <xPortStartScheduler+0x13c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a16      	ldr	r2, [pc, #88]	@ (8009b60 <xPortStartScheduler+0x13c>)
 8009b06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b0a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009b0c:	4b14      	ldr	r3, [pc, #80]	@ (8009b60 <xPortStartScheduler+0x13c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a13      	ldr	r2, [pc, #76]	@ (8009b60 <xPortStartScheduler+0x13c>)
 8009b12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b16:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009b18:	f000 f8e0 	bl	8009cdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009b1c:	4b11      	ldr	r3, [pc, #68]	@ (8009b64 <xPortStartScheduler+0x140>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009b22:	f000 f8ff 	bl	8009d24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b26:	4b10      	ldr	r3, [pc, #64]	@ (8009b68 <xPortStartScheduler+0x144>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b68 <xPortStartScheduler+0x144>)
 8009b2c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009b30:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009b32:	f7ff ff61 	bl	80099f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009b36:	f7ff f837 	bl	8008ba8 <vTaskSwitchContext>
    prvTaskExitError();
 8009b3a:	f7ff ff15 	bl	8009968 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed00 	.word	0xe000ed00
 8009b4c:	410fc271 	.word	0x410fc271
 8009b50:	410fc270 	.word	0x410fc270
 8009b54:	e000e400 	.word	0xe000e400
 8009b58:	2000042c 	.word	0x2000042c
 8009b5c:	20000430 	.word	0x20000430
 8009b60:	e000ed20 	.word	0xe000ed20
 8009b64:	20000010 	.word	0x20000010
 8009b68:	e000ef34 	.word	0xe000ef34

08009b6c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
        __asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	607b      	str	r3, [r7, #4]
    }
 8009b84:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009b86:	4b10      	ldr	r3, [pc, #64]	@ (8009bc8 <vPortEnterCritical+0x5c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc8 <vPortEnterCritical+0x5c>)
 8009b8e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8009b90:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc8 <vPortEnterCritical+0x5c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d110      	bne.n	8009bba <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b98:	4b0c      	ldr	r3, [pc, #48]	@ (8009bcc <vPortEnterCritical+0x60>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00b      	beq.n	8009bba <vPortEnterCritical+0x4e>
        __asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	603b      	str	r3, [r7, #0]
    }
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop
 8009bb8:	e7fd      	b.n	8009bb6 <vPortEnterCritical+0x4a>
    }
}
 8009bba:	bf00      	nop
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	20000010 	.word	0x20000010
 8009bcc:	e000ed04 	.word	0xe000ed04

08009bd0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009bd6:	4b12      	ldr	r3, [pc, #72]	@ (8009c20 <vPortExitCritical+0x50>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <vPortExitCritical+0x26>
        __asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	607b      	str	r3, [r7, #4]
    }
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8009c20 <vPortExitCritical+0x50>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	4a08      	ldr	r2, [pc, #32]	@ (8009c20 <vPortExitCritical+0x50>)
 8009bfe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009c00:	4b07      	ldr	r3, [pc, #28]	@ (8009c20 <vPortExitCritical+0x50>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d105      	bne.n	8009c14 <vPortExitCritical+0x44>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009c12:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	20000010 	.word	0x20000010
	...

08009c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009c30:	f3ef 8009 	mrs	r0, PSP
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	4b15      	ldr	r3, [pc, #84]	@ (8009c90 <pxCurrentTCBConst>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	f01e 0f10 	tst.w	lr, #16
 8009c40:	bf08      	it	eq
 8009c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4a:	6010      	str	r0, [r2, #0]
 8009c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c54:	f380 8811 	msr	BASEPRI, r0
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f7fe ffa2 	bl	8008ba8 <vTaskSwitchContext>
 8009c64:	f04f 0000 	mov.w	r0, #0
 8009c68:	f380 8811 	msr	BASEPRI, r0
 8009c6c:	bc09      	pop	{r0, r3}
 8009c6e:	6819      	ldr	r1, [r3, #0]
 8009c70:	6808      	ldr	r0, [r1, #0]
 8009c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c76:	f01e 0f10 	tst.w	lr, #16
 8009c7a:	bf08      	it	eq
 8009c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c80:	f380 8809 	msr	PSP, r0
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w

08009c90 <pxCurrentTCBConst>:
 8009c90:	200002ec 	.word	0x200002ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop

08009c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
        __asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	607b      	str	r3, [r7, #4]
    }
 8009cb0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009cb2:	f7fe fe61 	bl	8008978 <xTaskIncrementTick>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cbc:	4b06      	ldr	r3, [pc, #24]	@ (8009cd8 <SysTick_Handler+0x40>)
 8009cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	f383 8811 	msr	BASEPRI, r3
    }
 8009cce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	e000ed04 	.word	0xe000ed04

08009cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8009d10 <vPortSetupTimerInterrupt+0x34>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d14 <vPortSetupTimerInterrupt+0x38>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cec:	4b0a      	ldr	r3, [pc, #40]	@ (8009d18 <vPortSetupTimerInterrupt+0x3c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8009d1c <vPortSetupTimerInterrupt+0x40>)
 8009cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf6:	099b      	lsrs	r3, r3, #6
 8009cf8:	4a09      	ldr	r2, [pc, #36]	@ (8009d20 <vPortSetupTimerInterrupt+0x44>)
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cfe:	4b04      	ldr	r3, [pc, #16]	@ (8009d10 <vPortSetupTimerInterrupt+0x34>)
 8009d00:	2207      	movs	r2, #7
 8009d02:	601a      	str	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	e000e010 	.word	0xe000e010
 8009d14:	e000e018 	.word	0xe000e018
 8009d18:	20000000 	.word	0x20000000
 8009d1c:	10624dd3 	.word	0x10624dd3
 8009d20:	e000e014 	.word	0xe000e014

08009d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009d24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d34 <vPortEnableVFP+0x10>
 8009d28:	6801      	ldr	r1, [r0, #0]
 8009d2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d2e:	6001      	str	r1, [r0, #0]
 8009d30:	4770      	bx	lr
 8009d32:	0000      	.short	0x0000
 8009d34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop

08009d3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	@ 0x28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8009d48:	f7fe fcfc 	bl	8008744 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009d4c:	4b54      	ldr	r3, [pc, #336]	@ (8009ea0 <pvPortMalloc+0x164>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009d54:	f000 f90c 	bl	8009f70 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d012      	beq.n	8009d84 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8009d5e:	2208      	movs	r2, #8
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f003 0307 	and.w	r3, r3, #7
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	3308      	adds	r3, #8
 8009d6a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	43db      	mvns	r3, r3
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d804      	bhi.n	8009d80 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	607b      	str	r3, [r7, #4]
 8009d7e:	e001      	b.n	8009d84 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	db71      	blt.n	8009e6e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d06e      	beq.n	8009e6e <pvPortMalloc+0x132>
 8009d90:	4b44      	ldr	r3, [pc, #272]	@ (8009ea4 <pvPortMalloc+0x168>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d869      	bhi.n	8009e6e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009d9a:	4b43      	ldr	r3, [pc, #268]	@ (8009ea8 <pvPortMalloc+0x16c>)
 8009d9c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009d9e:	4b42      	ldr	r3, [pc, #264]	@ (8009ea8 <pvPortMalloc+0x16c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009da4:	e004      	b.n	8009db0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d903      	bls.n	8009dc2 <pvPortMalloc+0x86>
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f1      	bne.n	8009da6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009dc2:	4b37      	ldr	r3, [pc, #220]	@ (8009ea0 <pvPortMalloc+0x164>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d050      	beq.n	8009e6e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2208      	movs	r2, #8
 8009dd2:	4413      	add	r3, r2
 8009dd4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	1ad2      	subs	r2, r2, r3
 8009de6:	2308      	movs	r3, #8
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d920      	bls.n	8009e30 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4413      	add	r3, r2
 8009df4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f003 0307 	and.w	r3, r3, #7
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <pvPortMalloc+0xdc>
        __asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	613b      	str	r3, [r7, #16]
    }
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	e7fd      	b.n	8009e14 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e2a:	6978      	ldr	r0, [r7, #20]
 8009e2c:	f000 f8fc 	bl	800a028 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e30:	4b1c      	ldr	r3, [pc, #112]	@ (8009ea4 <pvPortMalloc+0x168>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ea4 <pvPortMalloc+0x168>)
 8009e3c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e3e:	4b19      	ldr	r3, [pc, #100]	@ (8009ea4 <pvPortMalloc+0x168>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b1a      	ldr	r3, [pc, #104]	@ (8009eac <pvPortMalloc+0x170>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d203      	bcs.n	8009e52 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e4a:	4b16      	ldr	r3, [pc, #88]	@ (8009ea4 <pvPortMalloc+0x168>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a17      	ldr	r2, [pc, #92]	@ (8009eac <pvPortMalloc+0x170>)
 8009e50:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009e64:	4b12      	ldr	r3, [pc, #72]	@ (8009eb0 <pvPortMalloc+0x174>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	4a11      	ldr	r2, [pc, #68]	@ (8009eb0 <pvPortMalloc+0x174>)
 8009e6c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009e6e:	f7fe fc77 	bl	8008760 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	f003 0307 	and.w	r3, r3, #7
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <pvPortMalloc+0x158>
        __asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	60fb      	str	r3, [r7, #12]
    }
 8009e8e:	bf00      	nop
 8009e90:	bf00      	nop
 8009e92:	e7fd      	b.n	8009e90 <pvPortMalloc+0x154>
    return pvReturn;
 8009e94:	69fb      	ldr	r3, [r7, #28]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3728      	adds	r7, #40	@ 0x28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	2001303c 	.word	0x2001303c
 8009ea4:	20013040 	.word	0x20013040
 8009ea8:	20013034 	.word	0x20013034
 8009eac:	20013044 	.word	0x20013044
 8009eb0:	20013048 	.word	0x20013048

08009eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d04b      	beq.n	8009f5e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8009ec6:	2308      	movs	r3, #8
 8009ec8:	425b      	negs	r3, r3
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4413      	add	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	db0b      	blt.n	8009ef4 <vPortFree+0x40>
        __asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60fb      	str	r3, [r7, #12]
    }
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	e7fd      	b.n	8009ef0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <vPortFree+0x60>
        __asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	60bb      	str	r3, [r7, #8]
    }
 8009f0e:	bf00      	nop
 8009f10:	bf00      	nop
 8009f12:	e7fd      	b.n	8009f10 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	0fdb      	lsrs	r3, r3, #31
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01c      	beq.n	8009f5e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d118      	bne.n	8009f5e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8009f38:	f7fe fc04 	bl	8008744 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	4b09      	ldr	r3, [pc, #36]	@ (8009f68 <vPortFree+0xb4>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4413      	add	r3, r2
 8009f46:	4a08      	ldr	r2, [pc, #32]	@ (8009f68 <vPortFree+0xb4>)
 8009f48:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f4a:	6938      	ldr	r0, [r7, #16]
 8009f4c:	f000 f86c 	bl	800a028 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009f50:	4b06      	ldr	r3, [pc, #24]	@ (8009f6c <vPortFree+0xb8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3301      	adds	r3, #1
 8009f56:	4a05      	ldr	r2, [pc, #20]	@ (8009f6c <vPortFree+0xb8>)
 8009f58:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009f5a:	f7fe fc01 	bl	8008760 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009f5e:	bf00      	nop
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20013040 	.word	0x20013040
 8009f6c:	2001304c 	.word	0x2001304c

08009f70 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f76:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8009f7a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009f7c:	4b25      	ldr	r3, [pc, #148]	@ (800a014 <prvHeapInit+0xa4>)
 8009f7e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00c      	beq.n	8009fa4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3307      	adds	r3, #7
 8009f8e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f023 0307 	bic.w	r3, r3, #7
 8009f96:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	4a1d      	ldr	r2, [pc, #116]	@ (800a014 <prvHeapInit+0xa4>)
 8009fa0:	4413      	add	r3, r2
 8009fa2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fa8:	4a1b      	ldr	r2, [pc, #108]	@ (800a018 <prvHeapInit+0xa8>)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009fae:	4b1a      	ldr	r3, [pc, #104]	@ (800a018 <prvHeapInit+0xa8>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	4413      	add	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8009fbc:	2208      	movs	r2, #8
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1a9b      	subs	r3, r3, r2
 8009fc2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f023 0307 	bic.w	r3, r3, #7
 8009fca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4a13      	ldr	r2, [pc, #76]	@ (800a01c <prvHeapInit+0xac>)
 8009fd0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009fd2:	4b12      	ldr	r3, [pc, #72]	@ (800a01c <prvHeapInit+0xac>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8009fda:	4b10      	ldr	r3, [pc, #64]	@ (800a01c <prvHeapInit+0xac>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	1ad2      	subs	r2, r2, r3
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800a01c <prvHeapInit+0xac>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	4a08      	ldr	r2, [pc, #32]	@ (800a020 <prvHeapInit+0xb0>)
 8009ffe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	4a07      	ldr	r2, [pc, #28]	@ (800a024 <prvHeapInit+0xb4>)
 800a006:	6013      	str	r3, [r2, #0]
}
 800a008:	bf00      	nop
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	20000434 	.word	0x20000434
 800a018:	20013034 	.word	0x20013034
 800a01c:	2001303c 	.word	0x2001303c
 800a020:	20013044 	.word	0x20013044
 800a024:	20013040 	.word	0x20013040

0800a028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a030:	4b28      	ldr	r3, [pc, #160]	@ (800a0d4 <prvInsertBlockIntoFreeList+0xac>)
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	e002      	b.n	800a03c <prvInsertBlockIntoFreeList+0x14>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	429a      	cmp	r2, r3
 800a044:	d8f7      	bhi.n	800a036 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	4413      	add	r3, r2
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	429a      	cmp	r2, r3
 800a056:	d108      	bne.n	800a06a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	441a      	add	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	441a      	add	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d118      	bne.n	800a0b0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	4b15      	ldr	r3, [pc, #84]	@ (800a0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	429a      	cmp	r2, r3
 800a088:	d00d      	beq.n	800a0a6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	441a      	add	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	e008      	b.n	800a0b8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	e003      	b.n	800a0b8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d002      	beq.n	800a0c6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20013034 	.word	0x20013034
 800a0d8:	2001303c 	.word	0x2001303c

0800a0dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a0ec:	f002 fd42 	bl	800cb74 <USBD_static_malloc>
 800a0f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d109      	bne.n	800a10c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	32b0      	adds	r2, #176	@ 0xb0
 800a102:	2100      	movs	r1, #0
 800a104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a108:	2302      	movs	r3, #2
 800a10a:	e0d4      	b.n	800a2b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a10c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a110:	2100      	movs	r1, #0
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f002 fd72 	bl	800cbfc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	32b0      	adds	r2, #176	@ 0xb0
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	32b0      	adds	r2, #176	@ 0xb0
 800a132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	7c1b      	ldrb	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d138      	bne.n	800a1b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a144:	4b5e      	ldr	r3, [pc, #376]	@ (800a2c0 <USBD_CDC_Init+0x1e4>)
 800a146:	7819      	ldrb	r1, [r3, #0]
 800a148:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a14c:	2202      	movs	r2, #2
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f002 fbed 	bl	800c92e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a154:	4b5a      	ldr	r3, [pc, #360]	@ (800a2c0 <USBD_CDC_Init+0x1e4>)
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	f003 020f 	and.w	r2, r3, #15
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	440b      	add	r3, r1
 800a168:	3324      	adds	r3, #36	@ 0x24
 800a16a:	2201      	movs	r2, #1
 800a16c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a16e:	4b55      	ldr	r3, [pc, #340]	@ (800a2c4 <USBD_CDC_Init+0x1e8>)
 800a170:	7819      	ldrb	r1, [r3, #0]
 800a172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a176:	2202      	movs	r2, #2
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f002 fbd8 	bl	800c92e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a17e:	4b51      	ldr	r3, [pc, #324]	@ (800a2c4 <USBD_CDC_Init+0x1e8>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	f003 020f 	and.w	r2, r3, #15
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	440b      	add	r3, r1
 800a192:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a196:	2201      	movs	r2, #1
 800a198:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a19a:	4b4b      	ldr	r3, [pc, #300]	@ (800a2c8 <USBD_CDC_Init+0x1ec>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f003 020f 	and.w	r2, r3, #15
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	3326      	adds	r3, #38	@ 0x26
 800a1b0:	2210      	movs	r2, #16
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	e035      	b.n	800a222 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a1b6:	4b42      	ldr	r3, [pc, #264]	@ (800a2c0 <USBD_CDC_Init+0x1e4>)
 800a1b8:	7819      	ldrb	r1, [r3, #0]
 800a1ba:	2340      	movs	r3, #64	@ 0x40
 800a1bc:	2202      	movs	r2, #2
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f002 fbb5 	bl	800c92e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a1c4:	4b3e      	ldr	r3, [pc, #248]	@ (800a2c0 <USBD_CDC_Init+0x1e4>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	f003 020f 	and.w	r2, r3, #15
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	440b      	add	r3, r1
 800a1d8:	3324      	adds	r3, #36	@ 0x24
 800a1da:	2201      	movs	r2, #1
 800a1dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a1de:	4b39      	ldr	r3, [pc, #228]	@ (800a2c4 <USBD_CDC_Init+0x1e8>)
 800a1e0:	7819      	ldrb	r1, [r3, #0]
 800a1e2:	2340      	movs	r3, #64	@ 0x40
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f002 fba1 	bl	800c92e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a1ec:	4b35      	ldr	r3, [pc, #212]	@ (800a2c4 <USBD_CDC_Init+0x1e8>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f003 020f 	and.w	r2, r3, #15
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a204:	2201      	movs	r2, #1
 800a206:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a208:	4b2f      	ldr	r3, [pc, #188]	@ (800a2c8 <USBD_CDC_Init+0x1ec>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	f003 020f 	and.w	r2, r3, #15
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	440b      	add	r3, r1
 800a21c:	3326      	adds	r3, #38	@ 0x26
 800a21e:	2210      	movs	r2, #16
 800a220:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a222:	4b29      	ldr	r3, [pc, #164]	@ (800a2c8 <USBD_CDC_Init+0x1ec>)
 800a224:	7819      	ldrb	r1, [r3, #0]
 800a226:	2308      	movs	r3, #8
 800a228:	2203      	movs	r2, #3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f002 fb7f 	bl	800c92e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a230:	4b25      	ldr	r3, [pc, #148]	@ (800a2c8 <USBD_CDC_Init+0x1ec>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	f003 020f 	and.w	r2, r3, #15
 800a238:	6879      	ldr	r1, [r7, #4]
 800a23a:	4613      	mov	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	440b      	add	r3, r1
 800a244:	3324      	adds	r3, #36	@ 0x24
 800a246:	2201      	movs	r2, #1
 800a248:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	33b0      	adds	r3, #176	@ 0xb0
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a280:	2302      	movs	r3, #2
 800a282:	e018      	b.n	800a2b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7c1b      	ldrb	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10a      	bne.n	800a2a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a28c:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c4 <USBD_CDC_Init+0x1e8>)
 800a28e:	7819      	ldrb	r1, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a296:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f002 fc36 	bl	800cb0c <USBD_LL_PrepareReceive>
 800a2a0:	e008      	b.n	800a2b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2a2:	4b08      	ldr	r3, [pc, #32]	@ (800a2c4 <USBD_CDC_Init+0x1e8>)
 800a2a4:	7819      	ldrb	r1, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2ac:	2340      	movs	r3, #64	@ 0x40
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f002 fc2c 	bl	800cb0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	2000009b 	.word	0x2000009b
 800a2c4:	2000009c 	.word	0x2000009c
 800a2c8:	2000009d 	.word	0x2000009d

0800a2cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a2d8:	4b3a      	ldr	r3, [pc, #232]	@ (800a3c4 <USBD_CDC_DeInit+0xf8>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f002 fb4b 	bl	800c97a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a2e4:	4b37      	ldr	r3, [pc, #220]	@ (800a3c4 <USBD_CDC_DeInit+0xf8>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	f003 020f 	and.w	r2, r3, #15
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	440b      	add	r3, r1
 800a2f8:	3324      	adds	r3, #36	@ 0x24
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a2fe:	4b32      	ldr	r3, [pc, #200]	@ (800a3c8 <USBD_CDC_DeInit+0xfc>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	4619      	mov	r1, r3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f002 fb38 	bl	800c97a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a30a:	4b2f      	ldr	r3, [pc, #188]	@ (800a3c8 <USBD_CDC_DeInit+0xfc>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	f003 020f 	and.w	r2, r3, #15
 800a312:	6879      	ldr	r1, [r7, #4]
 800a314:	4613      	mov	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	440b      	add	r3, r1
 800a31e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a322:	2200      	movs	r2, #0
 800a324:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a326:	4b29      	ldr	r3, [pc, #164]	@ (800a3cc <USBD_CDC_DeInit+0x100>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f002 fb24 	bl	800c97a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a332:	4b26      	ldr	r3, [pc, #152]	@ (800a3cc <USBD_CDC_DeInit+0x100>)
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	f003 020f 	and.w	r2, r3, #15
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	4613      	mov	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	440b      	add	r3, r1
 800a346:	3324      	adds	r3, #36	@ 0x24
 800a348:	2200      	movs	r2, #0
 800a34a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a34c:	4b1f      	ldr	r3, [pc, #124]	@ (800a3cc <USBD_CDC_DeInit+0x100>)
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	f003 020f 	and.w	r2, r3, #15
 800a354:	6879      	ldr	r1, [r7, #4]
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	440b      	add	r3, r1
 800a360:	3326      	adds	r3, #38	@ 0x26
 800a362:	2200      	movs	r2, #0
 800a364:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	32b0      	adds	r2, #176	@ 0xb0
 800a370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d01f      	beq.n	800a3b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	33b0      	adds	r3, #176	@ 0xb0
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	32b0      	adds	r2, #176	@ 0xb0
 800a396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f002 fbf8 	bl	800cb90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	32b0      	adds	r2, #176	@ 0xb0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	2000009b 	.word	0x2000009b
 800a3c8:	2000009c 	.word	0x2000009c
 800a3cc:	2000009d 	.word	0x2000009d

0800a3d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	32b0      	adds	r2, #176	@ 0xb0
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e0bf      	b.n	800a580 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d050      	beq.n	800a4ae <USBD_CDC_Setup+0xde>
 800a40c:	2b20      	cmp	r3, #32
 800a40e:	f040 80af 	bne.w	800a570 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	88db      	ldrh	r3, [r3, #6]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d03a      	beq.n	800a490 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	b25b      	sxtb	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	da1b      	bge.n	800a45c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	33b0      	adds	r3, #176	@ 0xb0
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a43a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	88d2      	ldrh	r2, [r2, #6]
 800a440:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	88db      	ldrh	r3, [r3, #6]
 800a446:	2b07      	cmp	r3, #7
 800a448:	bf28      	it	cs
 800a44a:	2307      	movcs	r3, #7
 800a44c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	89fa      	ldrh	r2, [r7, #14]
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 fd93 	bl	800bf80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a45a:	e090      	b.n	800a57e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	785a      	ldrb	r2, [r3, #1]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	88db      	ldrh	r3, [r3, #6]
 800a46a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a46c:	d803      	bhi.n	800a476 <USBD_CDC_Setup+0xa6>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	88db      	ldrh	r3, [r3, #6]
 800a472:	b2da      	uxtb	r2, r3
 800a474:	e000      	b.n	800a478 <USBD_CDC_Setup+0xa8>
 800a476:	2240      	movs	r2, #64	@ 0x40
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a47e:	6939      	ldr	r1, [r7, #16]
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a486:	461a      	mov	r2, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fda5 	bl	800bfd8 <USBD_CtlPrepareRx>
      break;
 800a48e:	e076      	b.n	800a57e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	33b0      	adds	r3, #176	@ 0xb0
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	7850      	ldrb	r0, [r2, #1]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	4798      	blx	r3
      break;
 800a4ac:	e067      	b.n	800a57e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	785b      	ldrb	r3, [r3, #1]
 800a4b2:	2b0b      	cmp	r3, #11
 800a4b4:	d851      	bhi.n	800a55a <USBD_CDC_Setup+0x18a>
 800a4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4bc <USBD_CDC_Setup+0xec>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a4ed 	.word	0x0800a4ed
 800a4c0:	0800a569 	.word	0x0800a569
 800a4c4:	0800a55b 	.word	0x0800a55b
 800a4c8:	0800a55b 	.word	0x0800a55b
 800a4cc:	0800a55b 	.word	0x0800a55b
 800a4d0:	0800a55b 	.word	0x0800a55b
 800a4d4:	0800a55b 	.word	0x0800a55b
 800a4d8:	0800a55b 	.word	0x0800a55b
 800a4dc:	0800a55b 	.word	0x0800a55b
 800a4e0:	0800a55b 	.word	0x0800a55b
 800a4e4:	0800a517 	.word	0x0800a517
 800a4e8:	0800a541 	.word	0x0800a541
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d107      	bne.n	800a508 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a4f8:	f107 030a 	add.w	r3, r7, #10
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f001 fd3d 	bl	800bf80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a506:	e032      	b.n	800a56e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f001 fcbb 	bl	800be86 <USBD_CtlError>
            ret = USBD_FAIL;
 800a510:	2303      	movs	r3, #3
 800a512:	75fb      	strb	r3, [r7, #23]
          break;
 800a514:	e02b      	b.n	800a56e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d107      	bne.n	800a532 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a522:	f107 030d 	add.w	r3, r7, #13
 800a526:	2201      	movs	r2, #1
 800a528:	4619      	mov	r1, r3
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 fd28 	bl	800bf80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a530:	e01d      	b.n	800a56e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f001 fca6 	bl	800be86 <USBD_CtlError>
            ret = USBD_FAIL;
 800a53a:	2303      	movs	r3, #3
 800a53c:	75fb      	strb	r3, [r7, #23]
          break;
 800a53e:	e016      	b.n	800a56e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d00f      	beq.n	800a56c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f001 fc99 	bl	800be86 <USBD_CtlError>
            ret = USBD_FAIL;
 800a554:	2303      	movs	r3, #3
 800a556:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a558:	e008      	b.n	800a56c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fc92 	bl	800be86 <USBD_CtlError>
          ret = USBD_FAIL;
 800a562:	2303      	movs	r3, #3
 800a564:	75fb      	strb	r3, [r7, #23]
          break;
 800a566:	e002      	b.n	800a56e <USBD_CDC_Setup+0x19e>
          break;
 800a568:	bf00      	nop
 800a56a:	e008      	b.n	800a57e <USBD_CDC_Setup+0x1ae>
          break;
 800a56c:	bf00      	nop
      }
      break;
 800a56e:	e006      	b.n	800a57e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 fc87 	bl	800be86 <USBD_CtlError>
      ret = USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	75fb      	strb	r3, [r7, #23]
      break;
 800a57c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	460b      	mov	r3, r1
 800a592:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a59a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	32b0      	adds	r2, #176	@ 0xb0
 800a5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e065      	b.n	800a67e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	32b0      	adds	r2, #176	@ 0xb0
 800a5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	f003 020f 	and.w	r2, r3, #15
 800a5c8:	6879      	ldr	r1, [r7, #4]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	440b      	add	r3, r1
 800a5d4:	3318      	adds	r3, #24
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d02f      	beq.n	800a63c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	f003 020f 	and.w	r2, r3, #15
 800a5e2:	6879      	ldr	r1, [r7, #4]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	440b      	add	r3, r1
 800a5ee:	3318      	adds	r3, #24
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	78fb      	ldrb	r3, [r7, #3]
 800a5f4:	f003 010f 	and.w	r1, r3, #15
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	440b      	add	r3, r1
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4403      	add	r3, r0
 800a604:	331c      	adds	r3, #28
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	fbb2 f1f3 	udiv	r1, r2, r3
 800a60c:	fb01 f303 	mul.w	r3, r1, r3
 800a610:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a612:	2b00      	cmp	r3, #0
 800a614:	d112      	bne.n	800a63c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a616:	78fb      	ldrb	r3, [r7, #3]
 800a618:	f003 020f 	and.w	r2, r3, #15
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	440b      	add	r3, r1
 800a628:	3318      	adds	r3, #24
 800a62a:	2200      	movs	r2, #0
 800a62c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a62e:	78f9      	ldrb	r1, [r7, #3]
 800a630:	2300      	movs	r3, #0
 800a632:	2200      	movs	r2, #0
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f002 fa48 	bl	800caca <USBD_LL_Transmit>
 800a63a:	e01f      	b.n	800a67c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	33b0      	adds	r3, #176	@ 0xb0
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d010      	beq.n	800a67c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	33b0      	adds	r3, #176	@ 0xb0
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a678:	78fa      	ldrb	r2, [r7, #3]
 800a67a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	32b0      	adds	r2, #176	@ 0xb0
 800a69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	32b0      	adds	r2, #176	@ 0xb0
 800a6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e01a      	b.n	800a6ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6b8:	78fb      	ldrb	r3, [r7, #3]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f002 fa46 	bl	800cb4e <USBD_LL_GetRxDataSize>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	33b0      	adds	r3, #176	@ 0xb0
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	32b0      	adds	r2, #176	@ 0xb0
 800a708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a714:	2303      	movs	r3, #3
 800a716:	e024      	b.n	800a762 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	33b0      	adds	r3, #176	@ 0xb0
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d019      	beq.n	800a760 <USBD_CDC_EP0_RxReady+0x6a>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a732:	2bff      	cmp	r3, #255	@ 0xff
 800a734:	d014      	beq.n	800a760 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	33b0      	adds	r3, #176	@ 0xb0
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a74e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a756:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	22ff      	movs	r2, #255	@ 0xff
 800a75c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a774:	2182      	movs	r1, #130	@ 0x82
 800a776:	4818      	ldr	r0, [pc, #96]	@ (800a7d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a778:	f000 fd4f 	bl	800b21a <USBD_GetEpDesc>
 800a77c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a77e:	2101      	movs	r1, #1
 800a780:	4815      	ldr	r0, [pc, #84]	@ (800a7d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a782:	f000 fd4a 	bl	800b21a <USBD_GetEpDesc>
 800a786:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a788:	2181      	movs	r1, #129	@ 0x81
 800a78a:	4813      	ldr	r0, [pc, #76]	@ (800a7d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a78c:	f000 fd45 	bl	800b21a <USBD_GetEpDesc>
 800a790:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2210      	movs	r2, #16
 800a79c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d006      	beq.n	800a7b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7ac:	711a      	strb	r2, [r3, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d006      	beq.n	800a7c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7c0:	711a      	strb	r2, [r3, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2243      	movs	r2, #67	@ 0x43
 800a7ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7cc:	4b02      	ldr	r3, [pc, #8]	@ (800a7d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000058 	.word	0x20000058

0800a7dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7e4:	2182      	movs	r1, #130	@ 0x82
 800a7e6:	4818      	ldr	r0, [pc, #96]	@ (800a848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7e8:	f000 fd17 	bl	800b21a <USBD_GetEpDesc>
 800a7ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	4815      	ldr	r0, [pc, #84]	@ (800a848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7f2:	f000 fd12 	bl	800b21a <USBD_GetEpDesc>
 800a7f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7f8:	2181      	movs	r1, #129	@ 0x81
 800a7fa:	4813      	ldr	r0, [pc, #76]	@ (800a848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7fc:	f000 fd0d 	bl	800b21a <USBD_GetEpDesc>
 800a800:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	2210      	movs	r2, #16
 800a80c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d006      	beq.n	800a822 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	2200      	movs	r2, #0
 800a818:	711a      	strb	r2, [r3, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f042 0202 	orr.w	r2, r2, #2
 800a820:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d006      	beq.n	800a836 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	711a      	strb	r2, [r3, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f042 0202 	orr.w	r2, r2, #2
 800a834:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2243      	movs	r2, #67	@ 0x43
 800a83a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a83c:	4b02      	ldr	r3, [pc, #8]	@ (800a848 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20000058 	.word	0x20000058

0800a84c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a854:	2182      	movs	r1, #130	@ 0x82
 800a856:	4818      	ldr	r0, [pc, #96]	@ (800a8b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a858:	f000 fcdf 	bl	800b21a <USBD_GetEpDesc>
 800a85c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a85e:	2101      	movs	r1, #1
 800a860:	4815      	ldr	r0, [pc, #84]	@ (800a8b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a862:	f000 fcda 	bl	800b21a <USBD_GetEpDesc>
 800a866:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a868:	2181      	movs	r1, #129	@ 0x81
 800a86a:	4813      	ldr	r0, [pc, #76]	@ (800a8b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a86c:	f000 fcd5 	bl	800b21a <USBD_GetEpDesc>
 800a870:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2210      	movs	r2, #16
 800a87c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d006      	beq.n	800a892 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	2200      	movs	r2, #0
 800a888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a88c:	711a      	strb	r2, [r3, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d006      	beq.n	800a8a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8a0:	711a      	strb	r2, [r3, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2243      	movs	r2, #67	@ 0x43
 800a8aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a8ac:	4b02      	ldr	r3, [pc, #8]	@ (800a8b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3718      	adds	r7, #24
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000058 	.word	0x20000058

0800a8bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	220a      	movs	r2, #10
 800a8c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a8ca:	4b03      	ldr	r3, [pc, #12]	@ (800a8d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	20000014 	.word	0x20000014

0800a8dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e009      	b.n	800a904 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	33b0      	adds	r3, #176	@ 0xb0
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	32b0      	adds	r2, #176	@ 0xb0
 800a926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a932:	2303      	movs	r3, #3
 800a934:	e008      	b.n	800a948 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	371c      	adds	r7, #28
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	32b0      	adds	r2, #176	@ 0xb0
 800a968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a96c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a974:	2303      	movs	r3, #3
 800a976:	e004      	b.n	800a982 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	32b0      	adds	r2, #176	@ 0xb0
 800a9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e025      	b.n	800aa02 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d11f      	bne.n	800aa00 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a9c8:	4b10      	ldr	r3, [pc, #64]	@ (800aa0c <USBD_CDC_TransmitPacket+0x7c>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f003 020f 	and.w	r2, r3, #15
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4403      	add	r3, r0
 800a9e2:	3318      	adds	r3, #24
 800a9e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a9e6:	4b09      	ldr	r3, [pc, #36]	@ (800aa0c <USBD_CDC_TransmitPacket+0x7c>)
 800a9e8:	7819      	ldrb	r1, [r3, #0]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f002 f867 	bl	800caca <USBD_LL_Transmit>

    ret = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	2000009b 	.word	0x2000009b

0800aa10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	32b0      	adds	r2, #176	@ 0xb0
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	32b0      	adds	r2, #176	@ 0xb0
 800aa32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e018      	b.n	800aa70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	7c1b      	ldrb	r3, [r3, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10a      	bne.n	800aa5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa46:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <USBD_CDC_ReceivePacket+0x68>)
 800aa48:	7819      	ldrb	r1, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f002 f859 	bl	800cb0c <USBD_LL_PrepareReceive>
 800aa5a:	e008      	b.n	800aa6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa5c:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <USBD_CDC_ReceivePacket+0x68>)
 800aa5e:	7819      	ldrb	r1, [r3, #0]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa66:	2340      	movs	r3, #64	@ 0x40
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f002 f84f 	bl	800cb0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	2000009c 	.word	0x2000009c

0800aa7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e01f      	b.n	800aad4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	79fa      	ldrb	r2, [r7, #7]
 800aac6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f001 fec9 	bl	800c860 <USBD_LL_Init>
 800aace:	4603      	mov	r3, r0
 800aad0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e025      	b.n	800ab40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	32ae      	adds	r2, #174	@ 0xae
 800ab06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00f      	beq.n	800ab30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	32ae      	adds	r2, #174	@ 0xae
 800ab1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab20:	f107 020e 	add.w	r2, r7, #14
 800ab24:	4610      	mov	r0, r2
 800ab26:	4798      	blx	r3
 800ab28:	4602      	mov	r2, r0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab36:	1c5a      	adds	r2, r3, #1
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 fed1 	bl	800c8f8 <USBD_LL_Start>
 800ab56:	4603      	mov	r3, r0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b084      	sub	sp, #16
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab82:	2300      	movs	r3, #0
 800ab84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d009      	beq.n	800aba4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	78fa      	ldrb	r2, [r7, #3]
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	4798      	blx	r3
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	460b      	mov	r3, r1
 800abb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	78fa      	ldrb	r2, [r7, #3]
 800abc8:	4611      	mov	r1, r2
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	4798      	blx	r3
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800abd4:	2303      	movs	r3, #3
 800abd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f001 f90c 	bl	800be12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ac08:	461a      	mov	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac16:	f003 031f 	and.w	r3, r3, #31
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d01a      	beq.n	800ac54 <USBD_LL_SetupStage+0x72>
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d822      	bhi.n	800ac68 <USBD_LL_SetupStage+0x86>
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <USBD_LL_SetupStage+0x4a>
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d00a      	beq.n	800ac40 <USBD_LL_SetupStage+0x5e>
 800ac2a:	e01d      	b.n	800ac68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fb63 	bl	800b300 <USBD_StdDevReq>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac3e:	e020      	b.n	800ac82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fbcb 	bl	800b3e4 <USBD_StdItfReq>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73fb      	strb	r3, [r7, #15]
      break;
 800ac52:	e016      	b.n	800ac82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fc2d 	bl	800b4bc <USBD_StdEPReq>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73fb      	strb	r3, [r7, #15]
      break;
 800ac66:	e00c      	b.n	800ac82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	4619      	mov	r1, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f001 fe9e 	bl	800c9b8 <USBD_LL_StallEP>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac80:	bf00      	nop
  }

  return ret;
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	460b      	mov	r3, r1
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ac9e:	7afb      	ldrb	r3, [r7, #11]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d16e      	bne.n	800ad82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800acaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	f040 8098 	bne.w	800ade8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	689a      	ldr	r2, [r3, #8]
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d913      	bls.n	800acec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	1ad2      	subs	r2, r2, r3
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	4293      	cmp	r3, r2
 800acdc:	bf28      	it	cs
 800acde:	4613      	movcs	r3, r2
 800ace0:	461a      	mov	r2, r3
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f001 f994 	bl	800c012 <USBD_CtlContinueRx>
 800acea:	e07d      	b.n	800ade8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800acf2:	f003 031f 	and.w	r3, r3, #31
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d014      	beq.n	800ad24 <USBD_LL_DataOutStage+0x98>
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d81d      	bhi.n	800ad3a <USBD_LL_DataOutStage+0xae>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <USBD_LL_DataOutStage+0x7c>
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d003      	beq.n	800ad0e <USBD_LL_DataOutStage+0x82>
 800ad06:	e018      	b.n	800ad3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	75bb      	strb	r3, [r7, #22]
            break;
 800ad0c:	e018      	b.n	800ad40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	4619      	mov	r1, r3
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 fa64 	bl	800b1e6 <USBD_CoreFindIF>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	75bb      	strb	r3, [r7, #22]
            break;
 800ad22:	e00d      	b.n	800ad40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 fa66 	bl	800b200 <USBD_CoreFindEP>
 800ad34:	4603      	mov	r3, r0
 800ad36:	75bb      	strb	r3, [r7, #22]
            break;
 800ad38:	e002      	b.n	800ad40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	75bb      	strb	r3, [r7, #22]
            break;
 800ad3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad40:	7dbb      	ldrb	r3, [r7, #22]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d119      	bne.n	800ad7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	2b03      	cmp	r3, #3
 800ad50:	d113      	bne.n	800ad7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ad52:	7dba      	ldrb	r2, [r7, #22]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	32ae      	adds	r2, #174	@ 0xae
 800ad58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00b      	beq.n	800ad7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ad62:	7dba      	ldrb	r2, [r7, #22]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ad6a:	7dba      	ldrb	r2, [r7, #22]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	32ae      	adds	r2, #174	@ 0xae
 800ad70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f001 f95a 	bl	800c034 <USBD_CtlSendStatus>
 800ad80:	e032      	b.n	800ade8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ad82:	7afb      	ldrb	r3, [r7, #11]
 800ad84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f000 fa37 	bl	800b200 <USBD_CoreFindEP>
 800ad92:	4603      	mov	r3, r0
 800ad94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad96:	7dbb      	ldrb	r3, [r7, #22]
 800ad98:	2bff      	cmp	r3, #255	@ 0xff
 800ad9a:	d025      	beq.n	800ade8 <USBD_LL_DataOutStage+0x15c>
 800ad9c:	7dbb      	ldrb	r3, [r7, #22]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d122      	bne.n	800ade8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d117      	bne.n	800adde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800adae:	7dba      	ldrb	r2, [r7, #22]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	32ae      	adds	r2, #174	@ 0xae
 800adb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00f      	beq.n	800adde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800adbe:	7dba      	ldrb	r2, [r7, #22]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800adc6:	7dba      	ldrb	r2, [r7, #22]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	32ae      	adds	r2, #174	@ 0xae
 800adcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	7afa      	ldrb	r2, [r7, #11]
 800add4:	4611      	mov	r1, r2
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	4798      	blx	r3
 800adda:	4603      	mov	r3, r0
 800addc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800adde:	7dfb      	ldrb	r3, [r7, #23]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
 800ade6:	e000      	b.n	800adea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b086      	sub	sp, #24
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	60f8      	str	r0, [r7, #12]
 800adfa:	460b      	mov	r3, r1
 800adfc:	607a      	str	r2, [r7, #4]
 800adfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ae00:	7afb      	ldrb	r3, [r7, #11]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d16f      	bne.n	800aee6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3314      	adds	r3, #20
 800ae0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d15a      	bne.n	800aecc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	689a      	ldr	r2, [r3, #8]
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d914      	bls.n	800ae4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	689a      	ldr	r2, [r3, #8]
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	461a      	mov	r2, r3
 800ae36:	6879      	ldr	r1, [r7, #4]
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f001 f8bc 	bl	800bfb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae3e:	2300      	movs	r3, #0
 800ae40:	2200      	movs	r2, #0
 800ae42:	2100      	movs	r1, #0
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f001 fe61 	bl	800cb0c <USBD_LL_PrepareReceive>
 800ae4a:	e03f      	b.n	800aecc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d11c      	bne.n	800ae92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d316      	bcc.n	800ae92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d20f      	bcs.n	800ae92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae72:	2200      	movs	r2, #0
 800ae74:	2100      	movs	r1, #0
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f001 f89d 	bl	800bfb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae84:	2300      	movs	r3, #0
 800ae86:	2200      	movs	r2, #0
 800ae88:	2100      	movs	r1, #0
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f001 fe3e 	bl	800cb0c <USBD_LL_PrepareReceive>
 800ae90:	e01c      	b.n	800aecc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d10f      	bne.n	800aebe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d009      	beq.n	800aebe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aebe:	2180      	movs	r1, #128	@ 0x80
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f001 fd79 	bl	800c9b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f001 f8c7 	bl	800c05a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d03a      	beq.n	800af4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7ff fe42 	bl	800ab60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aee4:	e032      	b.n	800af4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aee6:	7afb      	ldrb	r3, [r7, #11]
 800aee8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	4619      	mov	r1, r3
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 f985 	bl	800b200 <USBD_CoreFindEP>
 800aef6:	4603      	mov	r3, r0
 800aef8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	2bff      	cmp	r3, #255	@ 0xff
 800aefe:	d025      	beq.n	800af4c <USBD_LL_DataInStage+0x15a>
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d122      	bne.n	800af4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b03      	cmp	r3, #3
 800af10:	d11c      	bne.n	800af4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af12:	7dfa      	ldrb	r2, [r7, #23]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	32ae      	adds	r2, #174	@ 0xae
 800af18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d014      	beq.n	800af4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af22:	7dfa      	ldrb	r2, [r7, #23]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af2a:	7dfa      	ldrb	r2, [r7, #23]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	32ae      	adds	r2, #174	@ 0xae
 800af30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	7afa      	ldrb	r2, [r7, #11]
 800af38:	4611      	mov	r1, r2
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	4798      	blx	r3
 800af3e:	4603      	mov	r3, r0
 800af40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800af42:	7dbb      	ldrb	r3, [r7, #22]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800af48:	7dbb      	ldrb	r3, [r7, #22]
 800af4a:	e000      	b.n	800af4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d014      	beq.n	800afbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00e      	beq.n	800afbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6852      	ldr	r2, [r2, #4]
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	4611      	mov	r1, r2
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800afb8:	2303      	movs	r3, #3
 800afba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afbc:	2340      	movs	r3, #64	@ 0x40
 800afbe:	2200      	movs	r2, #0
 800afc0:	2100      	movs	r1, #0
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 fcb3 	bl	800c92e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2240      	movs	r2, #64	@ 0x40
 800afd4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afd8:	2340      	movs	r3, #64	@ 0x40
 800afda:	2200      	movs	r2, #0
 800afdc:	2180      	movs	r1, #128	@ 0x80
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 fca5 	bl	800c92e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2240      	movs	r2, #64	@ 0x40
 800afee:	621a      	str	r2, [r3, #32]

  return ret;
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	78fa      	ldrb	r2, [r7, #3]
 800b00a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	d006      	beq.n	800b03c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b034:	b2da      	uxtb	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2204      	movs	r2, #4
 800b040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b052:	b480      	push	{r7}
 800b054:	b083      	sub	sp, #12
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b04      	cmp	r3, #4
 800b064:	d106      	bne.n	800b074 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b03      	cmp	r3, #3
 800b094:	d110      	bne.n	800b0b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00b      	beq.n	800b0b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d005      	beq.n	800b0b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0b2:	69db      	ldr	r3, [r3, #28]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	32ae      	adds	r2, #174	@ 0xae
 800b0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e01c      	b.n	800b11e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d115      	bne.n	800b11c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	32ae      	adds	r2, #174	@ 0xae
 800b0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00b      	beq.n	800b11c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	32ae      	adds	r2, #174	@ 0xae
 800b10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	78fa      	ldrb	r2, [r7, #3]
 800b116:	4611      	mov	r1, r2
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b082      	sub	sp, #8
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	460b      	mov	r3, r1
 800b130:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	32ae      	adds	r2, #174	@ 0xae
 800b13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b144:	2303      	movs	r3, #3
 800b146:	e01c      	b.n	800b182 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b03      	cmp	r3, #3
 800b152:	d115      	bne.n	800b180 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	32ae      	adds	r2, #174	@ 0xae
 800b15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00b      	beq.n	800b180 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	32ae      	adds	r2, #174	@ 0xae
 800b172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b178:	78fa      	ldrb	r2, [r7, #3]
 800b17a:	4611      	mov	r1, r2
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b083      	sub	sp, #12
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00e      	beq.n	800b1dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	6852      	ldr	r2, [r2, #4]
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	4798      	blx	r3
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b1f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b20c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b20e:	4618      	mov	r0, r3
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b086      	sub	sp, #24
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	885b      	ldrh	r3, [r3, #2]
 800b236:	b29b      	uxth	r3, r3
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	7812      	ldrb	r2, [r2, #0]
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d91f      	bls.n	800b280 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b246:	e013      	b.n	800b270 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b248:	f107 030a 	add.w	r3, r7, #10
 800b24c:	4619      	mov	r1, r3
 800b24e:	6978      	ldr	r0, [r7, #20]
 800b250:	f000 f81b 	bl	800b28a <USBD_GetNextDesc>
 800b254:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	785b      	ldrb	r3, [r3, #1]
 800b25a:	2b05      	cmp	r3, #5
 800b25c:	d108      	bne.n	800b270 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	789b      	ldrb	r3, [r3, #2]
 800b266:	78fa      	ldrb	r2, [r7, #3]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d008      	beq.n	800b27e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	885b      	ldrh	r3, [r3, #2]
 800b274:	b29a      	uxth	r2, r3
 800b276:	897b      	ldrh	r3, [r7, #10]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d8e5      	bhi.n	800b248 <USBD_GetEpDesc+0x2e>
 800b27c:	e000      	b.n	800b280 <USBD_GetEpDesc+0x66>
          break;
 800b27e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b280:	693b      	ldr	r3, [r7, #16]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b085      	sub	sp, #20
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	7812      	ldrb	r2, [r2, #0]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b087      	sub	sp, #28
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b2e0:	8a3b      	ldrh	r3, [r7, #16]
 800b2e2:	021b      	lsls	r3, r3, #8
 800b2e4:	b21a      	sxth	r2, r3
 800b2e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	b21b      	sxth	r3, r3
 800b2ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b2f0:	89fb      	ldrh	r3, [r7, #14]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
	...

0800b300 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b316:	2b40      	cmp	r3, #64	@ 0x40
 800b318:	d005      	beq.n	800b326 <USBD_StdDevReq+0x26>
 800b31a:	2b40      	cmp	r3, #64	@ 0x40
 800b31c:	d857      	bhi.n	800b3ce <USBD_StdDevReq+0xce>
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00f      	beq.n	800b342 <USBD_StdDevReq+0x42>
 800b322:	2b20      	cmp	r3, #32
 800b324:	d153      	bne.n	800b3ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	32ae      	adds	r2, #174	@ 0xae
 800b330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	4798      	blx	r3
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
      break;
 800b340:	e04a      	b.n	800b3d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	785b      	ldrb	r3, [r3, #1]
 800b346:	2b09      	cmp	r3, #9
 800b348:	d83b      	bhi.n	800b3c2 <USBD_StdDevReq+0xc2>
 800b34a:	a201      	add	r2, pc, #4	@ (adr r2, 800b350 <USBD_StdDevReq+0x50>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b3a5 	.word	0x0800b3a5
 800b354:	0800b3b9 	.word	0x0800b3b9
 800b358:	0800b3c3 	.word	0x0800b3c3
 800b35c:	0800b3af 	.word	0x0800b3af
 800b360:	0800b3c3 	.word	0x0800b3c3
 800b364:	0800b383 	.word	0x0800b383
 800b368:	0800b379 	.word	0x0800b379
 800b36c:	0800b3c3 	.word	0x0800b3c3
 800b370:	0800b39b 	.word	0x0800b39b
 800b374:	0800b38d 	.word	0x0800b38d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fa3c 	bl	800b7f8 <USBD_GetDescriptor>
          break;
 800b380:	e024      	b.n	800b3cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fba1 	bl	800bacc <USBD_SetAddress>
          break;
 800b38a:	e01f      	b.n	800b3cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fbe0 	bl	800bb54 <USBD_SetConfig>
 800b394:	4603      	mov	r3, r0
 800b396:	73fb      	strb	r3, [r7, #15]
          break;
 800b398:	e018      	b.n	800b3cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fc83 	bl	800bca8 <USBD_GetConfig>
          break;
 800b3a2:	e013      	b.n	800b3cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fcb4 	bl	800bd14 <USBD_GetStatus>
          break;
 800b3ac:	e00e      	b.n	800b3cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fce3 	bl	800bd7c <USBD_SetFeature>
          break;
 800b3b6:	e009      	b.n	800b3cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fd07 	bl	800bdce <USBD_ClrFeature>
          break;
 800b3c0:	e004      	b.n	800b3cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fd5e 	bl	800be86 <USBD_CtlError>
          break;
 800b3ca:	bf00      	nop
      }
      break;
 800b3cc:	e004      	b.n	800b3d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fd58 	bl	800be86 <USBD_CtlError>
      break;
 800b3d6:	bf00      	nop
  }

  return ret;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop

0800b3e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3fa:	2b40      	cmp	r3, #64	@ 0x40
 800b3fc:	d005      	beq.n	800b40a <USBD_StdItfReq+0x26>
 800b3fe:	2b40      	cmp	r3, #64	@ 0x40
 800b400:	d852      	bhi.n	800b4a8 <USBD_StdItfReq+0xc4>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <USBD_StdItfReq+0x26>
 800b406:	2b20      	cmp	r3, #32
 800b408:	d14e      	bne.n	800b4a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b410:	b2db      	uxtb	r3, r3
 800b412:	3b01      	subs	r3, #1
 800b414:	2b02      	cmp	r3, #2
 800b416:	d840      	bhi.n	800b49a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	889b      	ldrh	r3, [r3, #4]
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d836      	bhi.n	800b490 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	889b      	ldrh	r3, [r3, #4]
 800b426:	b2db      	uxtb	r3, r3
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7ff fedb 	bl	800b1e6 <USBD_CoreFindIF>
 800b430:	4603      	mov	r3, r0
 800b432:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b434:	7bbb      	ldrb	r3, [r7, #14]
 800b436:	2bff      	cmp	r3, #255	@ 0xff
 800b438:	d01d      	beq.n	800b476 <USBD_StdItfReq+0x92>
 800b43a:	7bbb      	ldrb	r3, [r7, #14]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d11a      	bne.n	800b476 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b440:	7bba      	ldrb	r2, [r7, #14]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	32ae      	adds	r2, #174	@ 0xae
 800b446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00f      	beq.n	800b470 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b450:	7bba      	ldrb	r2, [r7, #14]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b458:	7bba      	ldrb	r2, [r7, #14]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	32ae      	adds	r2, #174	@ 0xae
 800b45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	4798      	blx	r3
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b46e:	e004      	b.n	800b47a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b470:	2303      	movs	r3, #3
 800b472:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b474:	e001      	b.n	800b47a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b476:	2303      	movs	r3, #3
 800b478:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	88db      	ldrh	r3, [r3, #6]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d110      	bne.n	800b4a4 <USBD_StdItfReq+0xc0>
 800b482:	7bfb      	ldrb	r3, [r7, #15]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10d      	bne.n	800b4a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 fdd3 	bl	800c034 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b48e:	e009      	b.n	800b4a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fcf7 	bl	800be86 <USBD_CtlError>
          break;
 800b498:	e004      	b.n	800b4a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b49a:	6839      	ldr	r1, [r7, #0]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fcf2 	bl	800be86 <USBD_CtlError>
          break;
 800b4a2:	e000      	b.n	800b4a6 <USBD_StdItfReq+0xc2>
          break;
 800b4a4:	bf00      	nop
      }
      break;
 800b4a6:	e004      	b.n	800b4b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fceb 	bl	800be86 <USBD_CtlError>
      break;
 800b4b0:	bf00      	nop
  }

  return ret;
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	889b      	ldrh	r3, [r3, #4]
 800b4ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b4d8:	2b40      	cmp	r3, #64	@ 0x40
 800b4da:	d007      	beq.n	800b4ec <USBD_StdEPReq+0x30>
 800b4dc:	2b40      	cmp	r3, #64	@ 0x40
 800b4de:	f200 817f 	bhi.w	800b7e0 <USBD_StdEPReq+0x324>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d02a      	beq.n	800b53c <USBD_StdEPReq+0x80>
 800b4e6:	2b20      	cmp	r3, #32
 800b4e8:	f040 817a 	bne.w	800b7e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b4ec:	7bbb      	ldrb	r3, [r7, #14]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff fe85 	bl	800b200 <USBD_CoreFindEP>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4fa:	7b7b      	ldrb	r3, [r7, #13]
 800b4fc:	2bff      	cmp	r3, #255	@ 0xff
 800b4fe:	f000 8174 	beq.w	800b7ea <USBD_StdEPReq+0x32e>
 800b502:	7b7b      	ldrb	r3, [r7, #13]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f040 8170 	bne.w	800b7ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b50a:	7b7a      	ldrb	r2, [r7, #13]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b512:	7b7a      	ldrb	r2, [r7, #13]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	32ae      	adds	r2, #174	@ 0xae
 800b518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 8163 	beq.w	800b7ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b524:	7b7a      	ldrb	r2, [r7, #13]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	32ae      	adds	r2, #174	@ 0xae
 800b52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	4798      	blx	r3
 800b536:	4603      	mov	r3, r0
 800b538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b53a:	e156      	b.n	800b7ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	2b03      	cmp	r3, #3
 800b542:	d008      	beq.n	800b556 <USBD_StdEPReq+0x9a>
 800b544:	2b03      	cmp	r3, #3
 800b546:	f300 8145 	bgt.w	800b7d4 <USBD_StdEPReq+0x318>
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 809b 	beq.w	800b686 <USBD_StdEPReq+0x1ca>
 800b550:	2b01      	cmp	r3, #1
 800b552:	d03c      	beq.n	800b5ce <USBD_StdEPReq+0x112>
 800b554:	e13e      	b.n	800b7d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d002      	beq.n	800b568 <USBD_StdEPReq+0xac>
 800b562:	2b03      	cmp	r3, #3
 800b564:	d016      	beq.n	800b594 <USBD_StdEPReq+0xd8>
 800b566:	e02c      	b.n	800b5c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00d      	beq.n	800b58a <USBD_StdEPReq+0xce>
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	2b80      	cmp	r3, #128	@ 0x80
 800b572:	d00a      	beq.n	800b58a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f001 fa1d 	bl	800c9b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b57e:	2180      	movs	r1, #128	@ 0x80
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 fa19 	bl	800c9b8 <USBD_LL_StallEP>
 800b586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b588:	e020      	b.n	800b5cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fc7a 	bl	800be86 <USBD_CtlError>
              break;
 800b592:	e01b      	b.n	800b5cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	885b      	ldrh	r3, [r3, #2]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10e      	bne.n	800b5ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00b      	beq.n	800b5ba <USBD_StdEPReq+0xfe>
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	2b80      	cmp	r3, #128	@ 0x80
 800b5a6:	d008      	beq.n	800b5ba <USBD_StdEPReq+0xfe>
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	88db      	ldrh	r3, [r3, #6]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d104      	bne.n	800b5ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5b0:	7bbb      	ldrb	r3, [r7, #14]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 f9ff 	bl	800c9b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fd3a 	bl	800c034 <USBD_CtlSendStatus>

              break;
 800b5c0:	e004      	b.n	800b5cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fc5e 	bl	800be86 <USBD_CtlError>
              break;
 800b5ca:	bf00      	nop
          }
          break;
 800b5cc:	e107      	b.n	800b7de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d002      	beq.n	800b5e0 <USBD_StdEPReq+0x124>
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d016      	beq.n	800b60c <USBD_StdEPReq+0x150>
 800b5de:	e04b      	b.n	800b678 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00d      	beq.n	800b602 <USBD_StdEPReq+0x146>
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
 800b5e8:	2b80      	cmp	r3, #128	@ 0x80
 800b5ea:	d00a      	beq.n	800b602 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5ec:	7bbb      	ldrb	r3, [r7, #14]
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f001 f9e1 	bl	800c9b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5f6:	2180      	movs	r1, #128	@ 0x80
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 f9dd 	bl	800c9b8 <USBD_LL_StallEP>
 800b5fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b600:	e040      	b.n	800b684 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fc3e 	bl	800be86 <USBD_CtlError>
              break;
 800b60a:	e03b      	b.n	800b684 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	885b      	ldrh	r3, [r3, #2]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d136      	bne.n	800b682 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d004      	beq.n	800b628 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f001 f9e7 	bl	800c9f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fd03 	bl	800c034 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff fde4 	bl	800b200 <USBD_CoreFindEP>
 800b638:	4603      	mov	r3, r0
 800b63a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b63c:	7b7b      	ldrb	r3, [r7, #13]
 800b63e:	2bff      	cmp	r3, #255	@ 0xff
 800b640:	d01f      	beq.n	800b682 <USBD_StdEPReq+0x1c6>
 800b642:	7b7b      	ldrb	r3, [r7, #13]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d11c      	bne.n	800b682 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b648:	7b7a      	ldrb	r2, [r7, #13]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b650:	7b7a      	ldrb	r2, [r7, #13]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	32ae      	adds	r2, #174	@ 0xae
 800b656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d010      	beq.n	800b682 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b660:	7b7a      	ldrb	r2, [r7, #13]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	32ae      	adds	r2, #174	@ 0xae
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	4798      	blx	r3
 800b672:	4603      	mov	r3, r0
 800b674:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b676:	e004      	b.n	800b682 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fc03 	bl	800be86 <USBD_CtlError>
              break;
 800b680:	e000      	b.n	800b684 <USBD_StdEPReq+0x1c8>
              break;
 800b682:	bf00      	nop
          }
          break;
 800b684:	e0ab      	b.n	800b7de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d002      	beq.n	800b698 <USBD_StdEPReq+0x1dc>
 800b692:	2b03      	cmp	r3, #3
 800b694:	d032      	beq.n	800b6fc <USBD_StdEPReq+0x240>
 800b696:	e097      	b.n	800b7c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b698:	7bbb      	ldrb	r3, [r7, #14]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d007      	beq.n	800b6ae <USBD_StdEPReq+0x1f2>
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	2b80      	cmp	r3, #128	@ 0x80
 800b6a2:	d004      	beq.n	800b6ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fbed 	bl	800be86 <USBD_CtlError>
                break;
 800b6ac:	e091      	b.n	800b7d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	da0b      	bge.n	800b6ce <USBD_StdEPReq+0x212>
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	3310      	adds	r3, #16
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	e00b      	b.n	800b6e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fc43 	bl	800bf80 <USBD_CtlSendData>
              break;
 800b6fa:	e06a      	b.n	800b7d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b700:	2b00      	cmp	r3, #0
 800b702:	da11      	bge.n	800b728 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	f003 020f 	and.w	r2, r3, #15
 800b70a:	6879      	ldr	r1, [r7, #4]
 800b70c:	4613      	mov	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4413      	add	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	440b      	add	r3, r1
 800b716:	3324      	adds	r3, #36	@ 0x24
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d117      	bne.n	800b74e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fbb0 	bl	800be86 <USBD_CtlError>
                  break;
 800b726:	e054      	b.n	800b7d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	f003 020f 	and.w	r2, r3, #15
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	4613      	mov	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	440b      	add	r3, r1
 800b73a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d104      	bne.n	800b74e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fb9d 	bl	800be86 <USBD_CtlError>
                  break;
 800b74c:	e041      	b.n	800b7d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b74e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b752:	2b00      	cmp	r3, #0
 800b754:	da0b      	bge.n	800b76e <USBD_StdEPReq+0x2b2>
 800b756:	7bbb      	ldrb	r3, [r7, #14]
 800b758:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b75c:	4613      	mov	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	3310      	adds	r3, #16
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	4413      	add	r3, r2
 800b76a:	3304      	adds	r3, #4
 800b76c:	e00b      	b.n	800b786 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b774:	4613      	mov	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4413      	add	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	4413      	add	r3, r2
 800b784:	3304      	adds	r3, #4
 800b786:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b788:	7bbb      	ldrb	r3, [r7, #14]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <USBD_StdEPReq+0x2d8>
 800b78e:	7bbb      	ldrb	r3, [r7, #14]
 800b790:	2b80      	cmp	r3, #128	@ 0x80
 800b792:	d103      	bne.n	800b79c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2200      	movs	r2, #0
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	e00e      	b.n	800b7ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b79c:	7bbb      	ldrb	r3, [r7, #14]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 f947 	bl	800ca34 <USBD_LL_IsStallEP>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	e002      	b.n	800b7ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fbdd 	bl	800bf80 <USBD_CtlSendData>
              break;
 800b7c6:	e004      	b.n	800b7d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fb5b 	bl	800be86 <USBD_CtlError>
              break;
 800b7d0:	bf00      	nop
          }
          break;
 800b7d2:	e004      	b.n	800b7de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fb55 	bl	800be86 <USBD_CtlError>
          break;
 800b7dc:	bf00      	nop
      }
      break;
 800b7de:	e005      	b.n	800b7ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fb4f 	bl	800be86 <USBD_CtlError>
      break;
 800b7e8:	e000      	b.n	800b7ec <USBD_StdEPReq+0x330>
      break;
 800b7ea:	bf00      	nop
  }

  return ret;
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
	...

0800b7f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b806:	2300      	movs	r3, #0
 800b808:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	885b      	ldrh	r3, [r3, #2]
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	b29b      	uxth	r3, r3
 800b816:	3b01      	subs	r3, #1
 800b818:	2b06      	cmp	r3, #6
 800b81a:	f200 8128 	bhi.w	800ba6e <USBD_GetDescriptor+0x276>
 800b81e:	a201      	add	r2, pc, #4	@ (adr r2, 800b824 <USBD_GetDescriptor+0x2c>)
 800b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b824:	0800b841 	.word	0x0800b841
 800b828:	0800b859 	.word	0x0800b859
 800b82c:	0800b899 	.word	0x0800b899
 800b830:	0800ba6f 	.word	0x0800ba6f
 800b834:	0800ba6f 	.word	0x0800ba6f
 800b838:	0800ba0f 	.word	0x0800ba0f
 800b83c:	0800ba3b 	.word	0x0800ba3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	7c12      	ldrb	r2, [r2, #16]
 800b84c:	f107 0108 	add.w	r1, r7, #8
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	60f8      	str	r0, [r7, #12]
      break;
 800b856:	e112      	b.n	800ba7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	7c1b      	ldrb	r3, [r3, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10d      	bne.n	800b87c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b868:	f107 0208 	add.w	r2, r7, #8
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
 800b870:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3301      	adds	r3, #1
 800b876:	2202      	movs	r2, #2
 800b878:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b87a:	e100      	b.n	800ba7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b884:	f107 0208 	add.w	r2, r7, #8
 800b888:	4610      	mov	r0, r2
 800b88a:	4798      	blx	r3
 800b88c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3301      	adds	r3, #1
 800b892:	2202      	movs	r2, #2
 800b894:	701a      	strb	r2, [r3, #0]
      break;
 800b896:	e0f2      	b.n	800ba7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	885b      	ldrh	r3, [r3, #2]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b05      	cmp	r3, #5
 800b8a0:	f200 80ac 	bhi.w	800b9fc <USBD_GetDescriptor+0x204>
 800b8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b8ac <USBD_GetDescriptor+0xb4>)
 800b8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8aa:	bf00      	nop
 800b8ac:	0800b8c5 	.word	0x0800b8c5
 800b8b0:	0800b8f9 	.word	0x0800b8f9
 800b8b4:	0800b92d 	.word	0x0800b92d
 800b8b8:	0800b961 	.word	0x0800b961
 800b8bc:	0800b995 	.word	0x0800b995
 800b8c0:	0800b9c9 	.word	0x0800b9c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00b      	beq.n	800b8e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	7c12      	ldrb	r2, [r2, #16]
 800b8dc:	f107 0108 	add.w	r1, r7, #8
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	4798      	blx	r3
 800b8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8e6:	e091      	b.n	800ba0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 facb 	bl	800be86 <USBD_CtlError>
            err++;
 800b8f0:	7afb      	ldrb	r3, [r7, #11]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8f6:	e089      	b.n	800ba0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	7c12      	ldrb	r2, [r2, #16]
 800b910:	f107 0108 	add.w	r1, r7, #8
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
 800b918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b91a:	e077      	b.n	800ba0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fab1 	bl	800be86 <USBD_CtlError>
            err++;
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	3301      	adds	r3, #1
 800b928:	72fb      	strb	r3, [r7, #11]
          break;
 800b92a:	e06f      	b.n	800ba0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	7c12      	ldrb	r2, [r2, #16]
 800b944:	f107 0108 	add.w	r1, r7, #8
 800b948:	4610      	mov	r0, r2
 800b94a:	4798      	blx	r3
 800b94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94e:	e05d      	b.n	800ba0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa97 	bl	800be86 <USBD_CtlError>
            err++;
 800b958:	7afb      	ldrb	r3, [r7, #11]
 800b95a:	3301      	adds	r3, #1
 800b95c:	72fb      	strb	r3, [r7, #11]
          break;
 800b95e:	e055      	b.n	800ba0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	7c12      	ldrb	r2, [r2, #16]
 800b978:	f107 0108 	add.w	r1, r7, #8
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b982:	e043      	b.n	800ba0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa7d 	bl	800be86 <USBD_CtlError>
            err++;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	3301      	adds	r3, #1
 800b990:	72fb      	strb	r3, [r7, #11]
          break;
 800b992:	e03b      	b.n	800ba0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00b      	beq.n	800b9b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	7c12      	ldrb	r2, [r2, #16]
 800b9ac:	f107 0108 	add.w	r1, r7, #8
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3
 800b9b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9b6:	e029      	b.n	800ba0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fa63 	bl	800be86 <USBD_CtlError>
            err++;
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9c6:	e021      	b.n	800ba0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00b      	beq.n	800b9ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	7c12      	ldrb	r2, [r2, #16]
 800b9e0:	f107 0108 	add.w	r1, r7, #8
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	4798      	blx	r3
 800b9e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9ea:	e00f      	b.n	800ba0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fa49 	bl	800be86 <USBD_CtlError>
            err++;
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9fa:	e007      	b.n	800ba0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fa41 	bl	800be86 <USBD_CtlError>
          err++;
 800ba04:	7afb      	ldrb	r3, [r7, #11]
 800ba06:	3301      	adds	r3, #1
 800ba08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba0a:	bf00      	nop
      }
      break;
 800ba0c:	e037      	b.n	800ba7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	7c1b      	ldrb	r3, [r3, #16]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d109      	bne.n	800ba2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba1e:	f107 0208 	add.w	r2, r7, #8
 800ba22:	4610      	mov	r0, r2
 800ba24:	4798      	blx	r3
 800ba26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba28:	e029      	b.n	800ba7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fa2a 	bl	800be86 <USBD_CtlError>
        err++;
 800ba32:	7afb      	ldrb	r3, [r7, #11]
 800ba34:	3301      	adds	r3, #1
 800ba36:	72fb      	strb	r3, [r7, #11]
      break;
 800ba38:	e021      	b.n	800ba7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	7c1b      	ldrb	r3, [r3, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10d      	bne.n	800ba5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4a:	f107 0208 	add.w	r2, r7, #8
 800ba4e:	4610      	mov	r0, r2
 800ba50:	4798      	blx	r3
 800ba52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	3301      	adds	r3, #1
 800ba58:	2207      	movs	r2, #7
 800ba5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba5c:	e00f      	b.n	800ba7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fa10 	bl	800be86 <USBD_CtlError>
        err++;
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba6c:	e007      	b.n	800ba7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fa08 	bl	800be86 <USBD_CtlError>
      err++;
 800ba76:	7afb      	ldrb	r3, [r7, #11]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba7c:	bf00      	nop
  }

  if (err != 0U)
 800ba7e:	7afb      	ldrb	r3, [r7, #11]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d11e      	bne.n	800bac2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	88db      	ldrh	r3, [r3, #6]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d016      	beq.n	800baba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ba8c:	893b      	ldrh	r3, [r7, #8]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00e      	beq.n	800bab0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	88da      	ldrh	r2, [r3, #6]
 800ba96:	893b      	ldrh	r3, [r7, #8]
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	bf28      	it	cs
 800ba9c:	4613      	movcs	r3, r2
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800baa2:	893b      	ldrh	r3, [r7, #8]
 800baa4:	461a      	mov	r2, r3
 800baa6:	68f9      	ldr	r1, [r7, #12]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fa69 	bl	800bf80 <USBD_CtlSendData>
 800baae:	e009      	b.n	800bac4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f9e7 	bl	800be86 <USBD_CtlError>
 800bab8:	e004      	b.n	800bac4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 faba 	bl	800c034 <USBD_CtlSendStatus>
 800bac0:	e000      	b.n	800bac4 <USBD_GetDescriptor+0x2cc>
    return;
 800bac2:	bf00      	nop
  }
}
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop

0800bacc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	889b      	ldrh	r3, [r3, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d131      	bne.n	800bb42 <USBD_SetAddress+0x76>
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	88db      	ldrh	r3, [r3, #6]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d12d      	bne.n	800bb42 <USBD_SetAddress+0x76>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	885b      	ldrh	r3, [r3, #2]
 800baea:	2b7f      	cmp	r3, #127	@ 0x7f
 800baec:	d829      	bhi.n	800bb42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	885b      	ldrh	r3, [r3, #2]
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b03      	cmp	r3, #3
 800bb04:	d104      	bne.n	800bb10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f9bc 	bl	800be86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0e:	e01d      	b.n	800bb4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	7bfa      	ldrb	r2, [r7, #15]
 800bb14:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 ffb5 	bl	800ca8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fa86 	bl	800c034 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d004      	beq.n	800bb38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2202      	movs	r2, #2
 800bb32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb36:	e009      	b.n	800bb4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb40:	e004      	b.n	800bb4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f99e 	bl	800be86 <USBD_CtlError>
  }
}
 800bb4a:	bf00      	nop
 800bb4c:	bf00      	nop
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	885b      	ldrh	r3, [r3, #2]
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	4b4e      	ldr	r3, [pc, #312]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bb6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb6c:	4b4d      	ldr	r3, [pc, #308]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d905      	bls.n	800bb80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f985 	bl	800be86 <USBD_CtlError>
    return USBD_FAIL;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e08c      	b.n	800bc9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d002      	beq.n	800bb92 <USBD_SetConfig+0x3e>
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	d029      	beq.n	800bbe4 <USBD_SetConfig+0x90>
 800bb90:	e075      	b.n	800bc7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb92:	4b44      	ldr	r3, [pc, #272]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d020      	beq.n	800bbdc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bb9a:	4b42      	ldr	r3, [pc, #264]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bba4:	4b3f      	ldr	r3, [pc, #252]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7fe ffe3 	bl	800ab76 <USBD_SetClassConfig>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d008      	beq.n	800bbcc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f962 	bl	800be86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbca:	e065      	b.n	800bc98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fa31 	bl	800c034 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2203      	movs	r2, #3
 800bbd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bbda:	e05d      	b.n	800bc98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fa29 	bl	800c034 <USBD_CtlSendStatus>
      break;
 800bbe2:	e059      	b.n	800bc98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bbe4:	4b2f      	ldr	r3, [pc, #188]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d112      	bne.n	800bc12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bbf4:	4b2b      	ldr	r3, [pc, #172]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbfe:	4b29      	ldr	r3, [pc, #164]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7fe ffd2 	bl	800abae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fa12 	bl	800c034 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc10:	e042      	b.n	800bc98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc12:	4b24      	ldr	r3, [pc, #144]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d02a      	beq.n	800bc76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	4619      	mov	r1, r3
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7fe ffc0 	bl	800abae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc2e:	4b1d      	ldr	r3, [pc, #116]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc38:	4b1a      	ldr	r3, [pc, #104]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7fe ff99 	bl	800ab76 <USBD_SetClassConfig>
 800bc44:	4603      	mov	r3, r0
 800bc46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00f      	beq.n	800bc6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc4e:	6839      	ldr	r1, [r7, #0]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 f918 	bl	800be86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7fe ffa5 	bl	800abae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc6c:	e014      	b.n	800bc98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f9e0 	bl	800c034 <USBD_CtlSendStatus>
      break;
 800bc74:	e010      	b.n	800bc98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f9dc 	bl	800c034 <USBD_CtlSendStatus>
      break;
 800bc7c:	e00c      	b.n	800bc98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f900 	bl	800be86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc86:	4b07      	ldr	r3, [pc, #28]	@ (800bca4 <USBD_SetConfig+0x150>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7fe ff8e 	bl	800abae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc92:	2303      	movs	r3, #3
 800bc94:	73fb      	strb	r3, [r7, #15]
      break;
 800bc96:	bf00      	nop
  }

  return ret;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	20013050 	.word	0x20013050

0800bca8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	88db      	ldrh	r3, [r3, #6]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d004      	beq.n	800bcc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 f8e2 	bl	800be86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcc2:	e023      	b.n	800bd0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	dc02      	bgt.n	800bcd6 <USBD_GetConfig+0x2e>
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dc03      	bgt.n	800bcdc <USBD_GetConfig+0x34>
 800bcd4:	e015      	b.n	800bd02 <USBD_GetConfig+0x5a>
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d00b      	beq.n	800bcf2 <USBD_GetConfig+0x4a>
 800bcda:	e012      	b.n	800bd02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3308      	adds	r3, #8
 800bce6:	2201      	movs	r2, #1
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f948 	bl	800bf80 <USBD_CtlSendData>
        break;
 800bcf0:	e00c      	b.n	800bd0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f940 	bl	800bf80 <USBD_CtlSendData>
        break;
 800bd00:	e004      	b.n	800bd0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f8be 	bl	800be86 <USBD_CtlError>
        break;
 800bd0a:	bf00      	nop
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	3b01      	subs	r3, #1
 800bd28:	2b02      	cmp	r3, #2
 800bd2a:	d81e      	bhi.n	800bd6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	88db      	ldrh	r3, [r3, #6]
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d004      	beq.n	800bd3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f8a5 	bl	800be86 <USBD_CtlError>
        break;
 800bd3c:	e01a      	b.n	800bd74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d005      	beq.n	800bd5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	f043 0202 	orr.w	r2, r3, #2
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	330c      	adds	r3, #12
 800bd5e:	2202      	movs	r2, #2
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f90c 	bl	800bf80 <USBD_CtlSendData>
      break;
 800bd68:	e004      	b.n	800bd74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd6a:	6839      	ldr	r1, [r7, #0]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 f88a 	bl	800be86 <USBD_CtlError>
      break;
 800bd72:	bf00      	nop
  }
}
 800bd74:	bf00      	nop
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	885b      	ldrh	r3, [r3, #2]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d107      	bne.n	800bd9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f94c 	bl	800c034 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bd9c:	e013      	b.n	800bdc6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	885b      	ldrh	r3, [r3, #2]
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d10b      	bne.n	800bdbe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	889b      	ldrh	r3, [r3, #4]
 800bdaa:	0a1b      	lsrs	r3, r3, #8
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f93c 	bl	800c034 <USBD_CtlSendStatus>
}
 800bdbc:	e003      	b.n	800bdc6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f860 	bl	800be86 <USBD_CtlError>
}
 800bdc6:	bf00      	nop
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	3b01      	subs	r3, #1
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d80b      	bhi.n	800bdfe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	885b      	ldrh	r3, [r3, #2]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d10c      	bne.n	800be08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f91c 	bl	800c034 <USBD_CtlSendStatus>
      }
      break;
 800bdfc:	e004      	b.n	800be08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f840 	bl	800be86 <USBD_CtlError>
      break;
 800be06:	e000      	b.n	800be0a <USBD_ClrFeature+0x3c>
      break;
 800be08:	bf00      	nop
  }
}
 800be0a:	bf00      	nop
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	781a      	ldrb	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3301      	adds	r3, #1
 800be2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	781a      	ldrb	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3301      	adds	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff fa40 	bl	800b2c2 <SWAPBYTE>
 800be42:	4603      	mov	r3, r0
 800be44:	461a      	mov	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3301      	adds	r3, #1
 800be54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f7ff fa33 	bl	800b2c2 <SWAPBYTE>
 800be5c:	4603      	mov	r3, r0
 800be5e:	461a      	mov	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3301      	adds	r3, #1
 800be68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3301      	adds	r3, #1
 800be6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f7ff fa26 	bl	800b2c2 <SWAPBYTE>
 800be76:	4603      	mov	r3, r0
 800be78:	461a      	mov	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	80da      	strh	r2, [r3, #6]
}
 800be7e:	bf00      	nop
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be90:	2180      	movs	r1, #128	@ 0x80
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fd90 	bl	800c9b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be98:	2100      	movs	r1, #0
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fd8c 	bl	800c9b8 <USBD_LL_StallEP>
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800beb4:	2300      	movs	r3, #0
 800beb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d042      	beq.n	800bf44 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bec2:	6938      	ldr	r0, [r7, #16]
 800bec4:	f000 f842 	bl	800bf4c <USBD_GetLen>
 800bec8:	4603      	mov	r3, r0
 800beca:	3301      	adds	r3, #1
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bed2:	d808      	bhi.n	800bee6 <USBD_GetString+0x3e>
 800bed4:	6938      	ldr	r0, [r7, #16]
 800bed6:	f000 f839 	bl	800bf4c <USBD_GetLen>
 800beda:	4603      	mov	r3, r0
 800bedc:	3301      	adds	r3, #1
 800bede:	b29b      	uxth	r3, r3
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	e001      	b.n	800beea <USBD_GetString+0x42>
 800bee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	4413      	add	r3, r2
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	7812      	ldrb	r2, [r2, #0]
 800bef8:	701a      	strb	r2, [r3, #0]
  idx++;
 800befa:	7dfb      	ldrb	r3, [r7, #23]
 800befc:	3301      	adds	r3, #1
 800befe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	4413      	add	r3, r2
 800bf06:	2203      	movs	r2, #3
 800bf08:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf10:	e013      	b.n	800bf3a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	4413      	add	r3, r2
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	7812      	ldrb	r2, [r2, #0]
 800bf1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	3301      	adds	r3, #1
 800bf22:	613b      	str	r3, [r7, #16]
    idx++;
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	3301      	adds	r3, #1
 800bf28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	4413      	add	r3, r2
 800bf30:	2200      	movs	r2, #0
 800bf32:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf34:	7dfb      	ldrb	r3, [r7, #23]
 800bf36:	3301      	adds	r3, #1
 800bf38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1e7      	bne.n	800bf12 <USBD_GetString+0x6a>
 800bf42:	e000      	b.n	800bf46 <USBD_GetString+0x9e>
    return;
 800bf44:	bf00      	nop
  }
}
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf5c:	e005      	b.n	800bf6a <USBD_GetLen+0x1e>
  {
    len++;
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	3301      	adds	r3, #1
 800bf62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	3301      	adds	r3, #1
 800bf68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1f5      	bne.n	800bf5e <USBD_GetLen+0x12>
  }

  return len;
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 fd8f 	bl	800caca <USBD_LL_Transmit>

  return USBD_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b084      	sub	sp, #16
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	60f8      	str	r0, [r7, #12]
 800bfbe:	60b9      	str	r1, [r7, #8]
 800bfc0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 fd7e 	bl	800caca <USBD_LL_Transmit>

  return USBD_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2203      	movs	r2, #3
 800bfe8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	2100      	movs	r1, #0
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f000 fd82 	bl	800cb0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b084      	sub	sp, #16
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	2100      	movs	r1, #0
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 fd71 	bl	800cb0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2204      	movs	r2, #4
 800c040:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c044:	2300      	movs	r3, #0
 800c046:	2200      	movs	r2, #0
 800c048:	2100      	movs	r1, #0
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fd3d 	bl	800caca <USBD_LL_Transmit>

  return USBD_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2205      	movs	r2, #5
 800c066:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c06a:	2300      	movs	r3, #0
 800c06c:	2200      	movs	r2, #0
 800c06e:	2100      	movs	r1, #0
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fd4b 	bl	800cb0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c084:	2200      	movs	r2, #0
 800c086:	4912      	ldr	r1, [pc, #72]	@ (800c0d0 <MX_USB_DEVICE_Init+0x50>)
 800c088:	4812      	ldr	r0, [pc, #72]	@ (800c0d4 <MX_USB_DEVICE_Init+0x54>)
 800c08a:	f7fe fcf7 	bl	800aa7c <USBD_Init>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d001      	beq.n	800c098 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c094:	f7f4 fe04 	bl	8000ca0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c098:	490f      	ldr	r1, [pc, #60]	@ (800c0d8 <MX_USB_DEVICE_Init+0x58>)
 800c09a:	480e      	ldr	r0, [pc, #56]	@ (800c0d4 <MX_USB_DEVICE_Init+0x54>)
 800c09c:	f7fe fd1e 	bl	800aadc <USBD_RegisterClass>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d001      	beq.n	800c0aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c0a6:	f7f4 fdfb 	bl	8000ca0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c0aa:	490c      	ldr	r1, [pc, #48]	@ (800c0dc <MX_USB_DEVICE_Init+0x5c>)
 800c0ac:	4809      	ldr	r0, [pc, #36]	@ (800c0d4 <MX_USB_DEVICE_Init+0x54>)
 800c0ae:	f7fe fc15 	bl	800a8dc <USBD_CDC_RegisterInterface>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c0b8:	f7f4 fdf2 	bl	8000ca0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c0bc:	4805      	ldr	r0, [pc, #20]	@ (800c0d4 <MX_USB_DEVICE_Init+0x54>)
 800c0be:	f7fe fd43 	bl	800ab48 <USBD_Start>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c0c8:	f7f4 fdea 	bl	8000ca0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c0cc:	bf00      	nop
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	200000b4 	.word	0x200000b4
 800c0d4:	20013054 	.word	0x20013054
 800c0d8:	20000020 	.word	0x20000020
 800c0dc:	200000a0 	.word	0x200000a0

0800c0e0 <parse_packet>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
int8_t parse_packet(uint8_t *buffer, uint16_t packet_length, SensorData *data) {
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	607a      	str	r2, [r7, #4]
 800c0ec:	817b      	strh	r3, [r7, #10]
    // Ensure the packet is large enough
    if (packet_length < 8) { // Minimum size: danger(1) + proximity(4) + roadTypeLength(1) + quality(4)
 800c0ee:	897b      	ldrh	r3, [r7, #10]
 800c0f0:	2b07      	cmp	r3, #7
 800c0f2:	d801      	bhi.n	800c0f8 <parse_packet+0x18>
        return 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e050      	b.n	800c19a <parse_packet+0xba>
    }

    // Step 1: Extract fields
    uint8_t *ptr = buffer + 3;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3303      	adds	r3, #3
 800c0fc:	617b      	str	r3, [r7, #20]
    data->danger = *ptr; // 1 byte
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	b25a      	sxtb	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	701a      	strb	r2, [r3, #0]
    ptr += 1;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	3301      	adds	r3, #1
 800c10c:	617b      	str	r3, [r7, #20]

    data->dangerProximity = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	061a      	lsls	r2, r3, #24
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	3301      	adds	r3, #1
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	041b      	lsls	r3, r3, #16
 800c11c:	431a      	orrs	r2, r3
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	3302      	adds	r3, #2
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	021b      	lsls	r3, r3, #8
 800c126:	4313      	orrs	r3, r2
 800c128:	697a      	ldr	r2, [r7, #20]
 800c12a:	3203      	adds	r2, #3
 800c12c:	7812      	ldrb	r2, [r2, #0]
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	605a      	str	r2, [r3, #4]
    ptr += 4;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	3304      	adds	r3, #4
 800c138:	617b      	str	r3, [r7, #20]

    uint8_t roadTypeLength = *ptr; // 1 byte
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	74fb      	strb	r3, [r7, #19]
    ptr += 1;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	3301      	adds	r3, #1
 800c144:	617b      	str	r3, [r7, #20]

    // Ensure the roadType string fits within the buffer
    if (roadTypeLength >= sizeof(data->roadType)) {
 800c146:	7cfb      	ldrb	r3, [r7, #19]
 800c148:	2b04      	cmp	r3, #4
 800c14a:	d901      	bls.n	800c150 <parse_packet+0x70>
        return 0; // String too long
 800c14c:	2300      	movs	r3, #0
 800c14e:	e024      	b.n	800c19a <parse_packet+0xba>
    }

    // Copy roadType string
    memcpy(data->roadType, ptr, roadTypeLength);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3308      	adds	r3, #8
 800c154:	7cfa      	ldrb	r2, [r7, #19]
 800c156:	6979      	ldr	r1, [r7, #20]
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 fd7b 	bl	800cc54 <memcpy>
    data->roadType[roadTypeLength] = '\0'; // Null-terminate
 800c15e:	7cfb      	ldrb	r3, [r7, #19]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	4413      	add	r3, r2
 800c164:	2200      	movs	r2, #0
 800c166:	721a      	strb	r2, [r3, #8]
    ptr += roadTypeLength;
 800c168:	7cfb      	ldrb	r3, [r7, #19]
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	4413      	add	r3, r2
 800c16e:	617b      	str	r3, [r7, #20]

    // Extract roadQuality
    data->roadQuality = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	061a      	lsls	r2, r3, #24
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	3301      	adds	r3, #1
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	041b      	lsls	r3, r3, #16
 800c17e:	431a      	orrs	r2, r3
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	3302      	adds	r3, #2
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	021b      	lsls	r3, r3, #8
 800c188:	4313      	orrs	r3, r2
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	3203      	adds	r2, #3
 800c18e:	7812      	ldrb	r2, [r2, #0]
 800c190:	4313      	orrs	r3, r2
 800c192:	461a      	mov	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	611a      	str	r2, [r3, #16]

    return 1;
 800c198:	2301      	movs	r3, #1
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	4905      	ldr	r1, [pc, #20]	@ (800c1c0 <CDC_Init_FS+0x1c>)
 800c1ac:	4805      	ldr	r0, [pc, #20]	@ (800c1c4 <CDC_Init_FS+0x20>)
 800c1ae:	f7fe fbaf 	bl	800a910 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c1b2:	4905      	ldr	r1, [pc, #20]	@ (800c1c8 <CDC_Init_FS+0x24>)
 800c1b4:	4803      	ldr	r0, [pc, #12]	@ (800c1c4 <CDC_Init_FS+0x20>)
 800c1b6:	f7fe fbcd 	bl	800a954 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c1ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20013b30 	.word	0x20013b30
 800c1c4:	20013054 	.word	0x20013054
 800c1c8:	20013330 	.word	0x20013330

0800c1cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c1d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	6039      	str	r1, [r7, #0]
 800c1e6:	71fb      	strb	r3, [r7, #7]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	2b23      	cmp	r3, #35	@ 0x23
 800c1f0:	d84a      	bhi.n	800c288 <CDC_Control_FS+0xac>
 800c1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f8 <CDC_Control_FS+0x1c>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c289 	.word	0x0800c289
 800c1fc:	0800c289 	.word	0x0800c289
 800c200:	0800c289 	.word	0x0800c289
 800c204:	0800c289 	.word	0x0800c289
 800c208:	0800c289 	.word	0x0800c289
 800c20c:	0800c289 	.word	0x0800c289
 800c210:	0800c289 	.word	0x0800c289
 800c214:	0800c289 	.word	0x0800c289
 800c218:	0800c289 	.word	0x0800c289
 800c21c:	0800c289 	.word	0x0800c289
 800c220:	0800c289 	.word	0x0800c289
 800c224:	0800c289 	.word	0x0800c289
 800c228:	0800c289 	.word	0x0800c289
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c289 	.word	0x0800c289
 800c234:	0800c289 	.word	0x0800c289
 800c238:	0800c289 	.word	0x0800c289
 800c23c:	0800c289 	.word	0x0800c289
 800c240:	0800c289 	.word	0x0800c289
 800c244:	0800c289 	.word	0x0800c289
 800c248:	0800c289 	.word	0x0800c289
 800c24c:	0800c289 	.word	0x0800c289
 800c250:	0800c289 	.word	0x0800c289
 800c254:	0800c289 	.word	0x0800c289
 800c258:	0800c289 	.word	0x0800c289
 800c25c:	0800c289 	.word	0x0800c289
 800c260:	0800c289 	.word	0x0800c289
 800c264:	0800c289 	.word	0x0800c289
 800c268:	0800c289 	.word	0x0800c289
 800c26c:	0800c289 	.word	0x0800c289
 800c270:	0800c289 	.word	0x0800c289
 800c274:	0800c289 	.word	0x0800c289
 800c278:	0800c289 	.word	0x0800c289
 800c27c:	0800c289 	.word	0x0800c289
 800c280:	0800c289 	.word	0x0800c289
 800c284:	0800c289 	.word	0x0800c289
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c288:	bf00      	nop
  }

  return (USBD_OK);
 800c28a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c298:	b5b0      	push	{r4, r5, r7, lr}
 800c29a:	b08e      	sub	sp, #56	@ 0x38
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SensorData data;
	if(!parse_packet(Buf, *Len, &data)){
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff ff16 	bl	800c0e0 <parse_packet>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d119      	bne.n	800c2ee <CDC_Receive_FS+0x56>
		uint8_t error_response[] = "Invalid packet format";
 800c2ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c328 <CDC_Receive_FS+0x90>)
 800c2bc:	f107 040c 	add.w	r4, r7, #12
 800c2c0:	461d      	mov	r5, r3
 800c2c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c2ca:	6020      	str	r0, [r4, #0]
 800c2cc:	3404      	adds	r4, #4
 800c2ce:	8021      	strh	r1, [r4, #0]
		CDC_Transmit_FS(error_response, strlen((char*)error_response));
 800c2d0:	f107 030c 	add.w	r3, r7, #12
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7f3 ff83 	bl	80001e0 <strlen>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	f107 030c 	add.w	r3, r7, #12
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 f829 	bl	800c33c <CDC_Transmit_FS>
		return USBD_FAIL;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	e017      	b.n	800c31e <CDC_Receive_FS+0x86>
	}

	recivedData = data;
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c32c <CDC_Receive_FS+0x94>)
 800c2f0:	461d      	mov	r5, r3
 800c2f2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800c2f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	602b      	str	r3, [r5, #0]
	isDefined = 1;
 800c2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c330 <CDC_Receive_FS+0x98>)
 800c300:	2201      	movs	r2, #1
 800c302:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c304:	6879      	ldr	r1, [r7, #4]
 800c306:	480b      	ldr	r0, [pc, #44]	@ (800c334 <CDC_Receive_FS+0x9c>)
 800c308:	f7fe fb24 	bl	800a954 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c30c:	4809      	ldr	r0, [pc, #36]	@ (800c334 <CDC_Receive_FS+0x9c>)
 800c30e:	f7fe fb7f 	bl	800aa10 <USBD_CDC_ReceivePacket>

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800c312:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c316:	4808      	ldr	r0, [pc, #32]	@ (800c338 <CDC_Receive_FS+0xa0>)
 800c318:	f7f5 fa1b 	bl	8001752 <HAL_GPIO_TogglePin>
	return (USBD_OK);
 800c31c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3738      	adds	r7, #56	@ 0x38
 800c322:	46bd      	mov	sp, r7
 800c324:	bdb0      	pop	{r4, r5, r7, pc}
 800c326:	bf00      	nop
 800c328:	0800ccc8 	.word	0x0800ccc8
 800c32c:	20014334 	.word	0x20014334
 800c330:	20014330 	.word	0x20014330
 800c334:	20013054 	.word	0x20013054
 800c338:	40020c00 	.word	0x40020c00

0800c33c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c34c:	4b0d      	ldr	r3, [pc, #52]	@ (800c384 <CDC_Transmit_FS+0x48>)
 800c34e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c352:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c35e:	2301      	movs	r3, #1
 800c360:	e00b      	b.n	800c37a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c362:	887b      	ldrh	r3, [r7, #2]
 800c364:	461a      	mov	r2, r3
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	4806      	ldr	r0, [pc, #24]	@ (800c384 <CDC_Transmit_FS+0x48>)
 800c36a:	f7fe fad1 	bl	800a910 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c36e:	4805      	ldr	r0, [pc, #20]	@ (800c384 <CDC_Transmit_FS+0x48>)
 800c370:	f7fe fb0e 	bl	800a990 <USBD_CDC_TransmitPacket>
 800c374:	4603      	mov	r3, r0
 800c376:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c378:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	20013054 	.word	0x20013054

0800c388 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c388:	b480      	push	{r7}
 800c38a:	b087      	sub	sp, #28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c39a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	371c      	adds	r7, #28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
	...

0800c3ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	6039      	str	r1, [r7, #0]
 800c3b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2212      	movs	r2, #18
 800c3bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c3be:	4b03      	ldr	r3, [pc, #12]	@ (800c3cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	200000d0 	.word	0x200000d0

0800c3d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	6039      	str	r1, [r7, #0]
 800c3da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2204      	movs	r2, #4
 800c3e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3e2:	4b03      	ldr	r3, [pc, #12]	@ (800c3f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	200000e4 	.word	0x200000e4

0800c3f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	6039      	str	r1, [r7, #0]
 800c3fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c400:	79fb      	ldrb	r3, [r7, #7]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d105      	bne.n	800c412 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	4907      	ldr	r1, [pc, #28]	@ (800c428 <USBD_FS_ProductStrDescriptor+0x34>)
 800c40a:	4808      	ldr	r0, [pc, #32]	@ (800c42c <USBD_FS_ProductStrDescriptor+0x38>)
 800c40c:	f7ff fd4c 	bl	800bea8 <USBD_GetString>
 800c410:	e004      	b.n	800c41c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	4904      	ldr	r1, [pc, #16]	@ (800c428 <USBD_FS_ProductStrDescriptor+0x34>)
 800c416:	4805      	ldr	r0, [pc, #20]	@ (800c42c <USBD_FS_ProductStrDescriptor+0x38>)
 800c418:	f7ff fd46 	bl	800bea8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c41c:	4b02      	ldr	r3, [pc, #8]	@ (800c428 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20014348 	.word	0x20014348
 800c42c:	0800cce0 	.word	0x0800cce0

0800c430 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	4603      	mov	r3, r0
 800c438:	6039      	str	r1, [r7, #0]
 800c43a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c43c:	683a      	ldr	r2, [r7, #0]
 800c43e:	4904      	ldr	r1, [pc, #16]	@ (800c450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c440:	4804      	ldr	r0, [pc, #16]	@ (800c454 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c442:	f7ff fd31 	bl	800bea8 <USBD_GetString>
  return USBD_StrDesc;
 800c446:	4b02      	ldr	r3, [pc, #8]	@ (800c450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	20014348 	.word	0x20014348
 800c454:	0800ccf0 	.word	0x0800ccf0

0800c458 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	4603      	mov	r3, r0
 800c460:	6039      	str	r1, [r7, #0]
 800c462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	221a      	movs	r2, #26
 800c468:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c46a:	f000 f843 	bl	800c4f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c46e:	4b02      	ldr	r3, [pc, #8]	@ (800c478 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	200000e8 	.word	0x200000e8

0800c47c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	4603      	mov	r3, r0
 800c484:	6039      	str	r1, [r7, #0]
 800c486:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d105      	bne.n	800c49a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	4907      	ldr	r1, [pc, #28]	@ (800c4b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c492:	4808      	ldr	r0, [pc, #32]	@ (800c4b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c494:	f7ff fd08 	bl	800bea8 <USBD_GetString>
 800c498:	e004      	b.n	800c4a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	4904      	ldr	r1, [pc, #16]	@ (800c4b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c49e:	4805      	ldr	r0, [pc, #20]	@ (800c4b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4a0:	f7ff fd02 	bl	800bea8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4a4:	4b02      	ldr	r3, [pc, #8]	@ (800c4b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20014348 	.word	0x20014348
 800c4b4:	0800cd04 	.word	0x0800cd04

0800c4b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	4603      	mov	r3, r0
 800c4c0:	6039      	str	r1, [r7, #0]
 800c4c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d105      	bne.n	800c4d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	4907      	ldr	r1, [pc, #28]	@ (800c4ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4ce:	4808      	ldr	r0, [pc, #32]	@ (800c4f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4d0:	f7ff fcea 	bl	800bea8 <USBD_GetString>
 800c4d4:	e004      	b.n	800c4e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	4904      	ldr	r1, [pc, #16]	@ (800c4ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4da:	4805      	ldr	r0, [pc, #20]	@ (800c4f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4dc:	f7ff fce4 	bl	800bea8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4e0:	4b02      	ldr	r3, [pc, #8]	@ (800c4ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20014348 	.word	0x20014348
 800c4f0:	0800cd10 	.word	0x0800cd10

0800c4f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c538 <Get_SerialNum+0x44>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c500:	4b0e      	ldr	r3, [pc, #56]	@ (800c53c <Get_SerialNum+0x48>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c506:	4b0e      	ldr	r3, [pc, #56]	@ (800c540 <Get_SerialNum+0x4c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4413      	add	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d009      	beq.n	800c52e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c51a:	2208      	movs	r2, #8
 800c51c:	4909      	ldr	r1, [pc, #36]	@ (800c544 <Get_SerialNum+0x50>)
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f000 f814 	bl	800c54c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c524:	2204      	movs	r2, #4
 800c526:	4908      	ldr	r1, [pc, #32]	@ (800c548 <Get_SerialNum+0x54>)
 800c528:	68b8      	ldr	r0, [r7, #8]
 800c52a:	f000 f80f 	bl	800c54c <IntToUnicode>
  }
}
 800c52e:	bf00      	nop
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	1fff7a10 	.word	0x1fff7a10
 800c53c:	1fff7a14 	.word	0x1fff7a14
 800c540:	1fff7a18 	.word	0x1fff7a18
 800c544:	200000ea 	.word	0x200000ea
 800c548:	200000fa 	.word	0x200000fa

0800c54c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b087      	sub	sp, #28
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c55e:	2300      	movs	r3, #0
 800c560:	75fb      	strb	r3, [r7, #23]
 800c562:	e027      	b.n	800c5b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	0f1b      	lsrs	r3, r3, #28
 800c568:	2b09      	cmp	r3, #9
 800c56a:	d80b      	bhi.n	800c584 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	0f1b      	lsrs	r3, r3, #28
 800c570:	b2da      	uxtb	r2, r3
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	4619      	mov	r1, r3
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	440b      	add	r3, r1
 800c57c:	3230      	adds	r2, #48	@ 0x30
 800c57e:	b2d2      	uxtb	r2, r2
 800c580:	701a      	strb	r2, [r3, #0]
 800c582:	e00a      	b.n	800c59a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	0f1b      	lsrs	r3, r3, #28
 800c588:	b2da      	uxtb	r2, r3
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	005b      	lsls	r3, r3, #1
 800c58e:	4619      	mov	r1, r3
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	440b      	add	r3, r1
 800c594:	3237      	adds	r2, #55	@ 0x37
 800c596:	b2d2      	uxtb	r2, r2
 800c598:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	011b      	lsls	r3, r3, #4
 800c59e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	75fb      	strb	r3, [r7, #23]
 800c5b4:	7dfa      	ldrb	r2, [r7, #23]
 800c5b6:	79fb      	ldrb	r3, [r7, #7]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d3d3      	bcc.n	800c564 <IntToUnicode+0x18>
  }
}
 800c5bc:	bf00      	nop
 800c5be:	bf00      	nop
 800c5c0:	371c      	adds	r7, #28
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
	...

0800c5cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08a      	sub	sp, #40	@ 0x28
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5d4:	f107 0314 	add.w	r3, r7, #20
 800c5d8:	2200      	movs	r2, #0
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	605a      	str	r2, [r3, #4]
 800c5de:	609a      	str	r2, [r3, #8]
 800c5e0:	60da      	str	r2, [r3, #12]
 800c5e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5ec:	d147      	bne.n	800c67e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	613b      	str	r3, [r7, #16]
 800c5f2:	4b25      	ldr	r3, [pc, #148]	@ (800c688 <HAL_PCD_MspInit+0xbc>)
 800c5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5f6:	4a24      	ldr	r2, [pc, #144]	@ (800c688 <HAL_PCD_MspInit+0xbc>)
 800c5f8:	f043 0301 	orr.w	r3, r3, #1
 800c5fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c5fe:	4b22      	ldr	r3, [pc, #136]	@ (800c688 <HAL_PCD_MspInit+0xbc>)
 800c600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	613b      	str	r3, [r7, #16]
 800c608:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c60a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c60e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c610:	2300      	movs	r3, #0
 800c612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c614:	2300      	movs	r3, #0
 800c616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c618:	f107 0314 	add.w	r3, r7, #20
 800c61c:	4619      	mov	r1, r3
 800c61e:	481b      	ldr	r0, [pc, #108]	@ (800c68c <HAL_PCD_MspInit+0xc0>)
 800c620:	f7f4 fefa 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c624:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c62a:	2302      	movs	r3, #2
 800c62c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c62e:	2300      	movs	r3, #0
 800c630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c632:	2303      	movs	r3, #3
 800c634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c636:	230a      	movs	r3, #10
 800c638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c63a:	f107 0314 	add.w	r3, r7, #20
 800c63e:	4619      	mov	r1, r3
 800c640:	4812      	ldr	r0, [pc, #72]	@ (800c68c <HAL_PCD_MspInit+0xc0>)
 800c642:	f7f4 fee9 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c646:	4b10      	ldr	r3, [pc, #64]	@ (800c688 <HAL_PCD_MspInit+0xbc>)
 800c648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c64a:	4a0f      	ldr	r2, [pc, #60]	@ (800c688 <HAL_PCD_MspInit+0xbc>)
 800c64c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c650:	6353      	str	r3, [r2, #52]	@ 0x34
 800c652:	2300      	movs	r3, #0
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	4b0c      	ldr	r3, [pc, #48]	@ (800c688 <HAL_PCD_MspInit+0xbc>)
 800c658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c65a:	4a0b      	ldr	r2, [pc, #44]	@ (800c688 <HAL_PCD_MspInit+0xbc>)
 800c65c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c660:	6453      	str	r3, [r2, #68]	@ 0x44
 800c662:	4b09      	ldr	r3, [pc, #36]	@ (800c688 <HAL_PCD_MspInit+0xbc>)
 800c664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c66a:	60fb      	str	r3, [r7, #12]
 800c66c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c66e:	2200      	movs	r2, #0
 800c670:	2100      	movs	r1, #0
 800c672:	2043      	movs	r0, #67	@ 0x43
 800c674:	f7f4 fea6 	bl	80013c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c678:	2043      	movs	r0, #67	@ 0x43
 800c67a:	f7f4 febf 	bl	80013fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c67e:	bf00      	nop
 800c680:	3728      	adds	r7, #40	@ 0x28
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	40023800 	.word	0x40023800
 800c68c:	40020000 	.word	0x40020000

0800c690 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	4610      	mov	r0, r2
 800c6a8:	f7fe fa9b 	bl	800abe2 <USBD_LL_SetupStage>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c6c6:	78fa      	ldrb	r2, [r7, #3]
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	4413      	add	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	440b      	add	r3, r1
 800c6d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f7fe fad5 	bl	800ac8c <USBD_LL_DataOutStage>
}
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	4613      	mov	r3, r2
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	4413      	add	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	440b      	add	r3, r1
 800c70a:	3320      	adds	r3, #32
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	78fb      	ldrb	r3, [r7, #3]
 800c710:	4619      	mov	r1, r3
 800c712:	f7fe fb6e 	bl	800adf2 <USBD_LL_DataInStage>
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7fe fca8 	bl	800b082 <USBD_LL_SOF>
}
 800c732:	bf00      	nop
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c742:	2301      	movs	r3, #1
 800c744:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	79db      	ldrb	r3, [r3, #7]
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d001      	beq.n	800c752 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c74e:	f7f4 faa7 	bl	8000ca0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c758:	7bfa      	ldrb	r2, [r7, #15]
 800c75a:	4611      	mov	r1, r2
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7fe fc4c 	bl	800affa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe fbf4 	bl	800af56 <USBD_LL_Reset>
}
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c786:	4618      	mov	r0, r3
 800c788:	f7fe fc47 	bl	800b01a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	6812      	ldr	r2, [r2, #0]
 800c79a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c79e:	f043 0301 	orr.w	r3, r3, #1
 800c7a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	7adb      	ldrb	r3, [r3, #11]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d005      	beq.n	800c7b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c7ac:	4b04      	ldr	r3, [pc, #16]	@ (800c7c0 <HAL_PCD_SuspendCallback+0x48>)
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	4a03      	ldr	r2, [pc, #12]	@ (800c7c0 <HAL_PCD_SuspendCallback+0x48>)
 800c7b2:	f043 0306 	orr.w	r3, r3, #6
 800c7b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	e000ed00 	.word	0xe000ed00

0800c7c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fc3d 	bl	800b052 <USBD_LL_Resume>
}
 800c7d8:	bf00      	nop
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7f2:	78fa      	ldrb	r2, [r7, #3]
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe fc95 	bl	800b126 <USBD_LL_IsoOUTIncomplete>
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c816:	78fa      	ldrb	r2, [r7, #3]
 800c818:	4611      	mov	r1, r2
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe fc51 	bl	800b0c2 <USBD_LL_IsoINIncomplete>
}
 800c820:	bf00      	nop
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c836:	4618      	mov	r0, r3
 800c838:	f7fe fca7 	bl	800b18a <USBD_LL_DevConnected>
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fca4 	bl	800b1a0 <USBD_LL_DevDisconnected>
}
 800c858:	bf00      	nop
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d13c      	bne.n	800c8ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c870:	4a20      	ldr	r2, [pc, #128]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a1e      	ldr	r2, [pc, #120]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c87c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c880:	4b1c      	ldr	r3, [pc, #112]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c882:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c886:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c888:	4b1a      	ldr	r3, [pc, #104]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c88a:	2204      	movs	r2, #4
 800c88c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c88e:	4b19      	ldr	r3, [pc, #100]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c890:	2202      	movs	r2, #2
 800c892:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c894:	4b17      	ldr	r3, [pc, #92]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c896:	2200      	movs	r2, #0
 800c898:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c89a:	4b16      	ldr	r3, [pc, #88]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c89c:	2202      	movs	r2, #2
 800c89e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c8a0:	4b14      	ldr	r3, [pc, #80]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c8a6:	4b13      	ldr	r3, [pc, #76]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c8ac:	4b11      	ldr	r3, [pc, #68]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c8b2:	4b10      	ldr	r3, [pc, #64]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c8be:	480d      	ldr	r0, [pc, #52]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8c0:	f7f6 fc26 	bl	8003110 <HAL_PCD_Init>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c8ca:	f7f4 f9e9 	bl	8000ca0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c8ce:	2180      	movs	r1, #128	@ 0x80
 800c8d0:	4808      	ldr	r0, [pc, #32]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8d2:	f7f7 fe52 	bl	800457a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c8d6:	2240      	movs	r2, #64	@ 0x40
 800c8d8:	2100      	movs	r1, #0
 800c8da:	4806      	ldr	r0, [pc, #24]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8dc:	f7f7 fe06 	bl	80044ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c8e0:	2280      	movs	r2, #128	@ 0x80
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	4803      	ldr	r0, [pc, #12]	@ (800c8f4 <USBD_LL_Init+0x94>)
 800c8e6:	f7f7 fe01 	bl	80044ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	20014548 	.word	0x20014548

0800c8f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c90e:	4618      	mov	r0, r3
 800c910:	f7f6 fd0d 	bl	800332e <HAL_PCD_Start>
 800c914:	4603      	mov	r3, r0
 800c916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f942 	bl	800cba4 <USBD_Get_USB_Status>
 800c920:	4603      	mov	r3, r0
 800c922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c924:	7bbb      	ldrb	r3, [r7, #14]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	4608      	mov	r0, r1
 800c938:	4611      	mov	r1, r2
 800c93a:	461a      	mov	r2, r3
 800c93c:	4603      	mov	r3, r0
 800c93e:	70fb      	strb	r3, [r7, #3]
 800c940:	460b      	mov	r3, r1
 800c942:	70bb      	strb	r3, [r7, #2]
 800c944:	4613      	mov	r3, r2
 800c946:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c956:	78bb      	ldrb	r3, [r7, #2]
 800c958:	883a      	ldrh	r2, [r7, #0]
 800c95a:	78f9      	ldrb	r1, [r7, #3]
 800c95c:	f7f7 f9e1 	bl	8003d22 <HAL_PCD_EP_Open>
 800c960:	4603      	mov	r3, r0
 800c962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	4618      	mov	r0, r3
 800c968:	f000 f91c 	bl	800cba4 <USBD_Get_USB_Status>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c970:	7bbb      	ldrb	r3, [r7, #14]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	460b      	mov	r3, r1
 800c984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c994:	78fa      	ldrb	r2, [r7, #3]
 800c996:	4611      	mov	r1, r2
 800c998:	4618      	mov	r0, r3
 800c99a:	f7f7 fa2c 	bl	8003df6 <HAL_PCD_EP_Close>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 f8fd 	bl	800cba4 <USBD_Get_USB_Status>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9d2:	78fa      	ldrb	r2, [r7, #3]
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7f7 fae4 	bl	8003fa4 <HAL_PCD_EP_SetStall>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 f8de 	bl	800cba4 <USBD_Get_USB_Status>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b084      	sub	sp, #16
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	460b      	mov	r3, r1
 800ca00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca06:	2300      	movs	r3, #0
 800ca08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca10:	78fa      	ldrb	r2, [r7, #3]
 800ca12:	4611      	mov	r1, r2
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7f7 fb28 	bl	800406a <HAL_PCD_EP_ClrStall>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca1e:	7bfb      	ldrb	r3, [r7, #15]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 f8bf 	bl	800cba4 <USBD_Get_USB_Status>
 800ca26:	4603      	mov	r3, r0
 800ca28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	da0b      	bge.n	800ca68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca50:	78fb      	ldrb	r3, [r7, #3]
 800ca52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca56:	68f9      	ldr	r1, [r7, #12]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	00db      	lsls	r3, r3, #3
 800ca5c:	4413      	add	r3, r2
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	440b      	add	r3, r1
 800ca62:	3316      	adds	r3, #22
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	e00b      	b.n	800ca80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca68:	78fb      	ldrb	r3, [r7, #3]
 800ca6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	4613      	mov	r3, r2
 800ca72:	00db      	lsls	r3, r3, #3
 800ca74:	4413      	add	r3, r2
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	440b      	add	r3, r1
 800ca7a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ca7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	460b      	mov	r3, r1
 800ca96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800caa6:	78fa      	ldrb	r2, [r7, #3]
 800caa8:	4611      	mov	r1, r2
 800caaa:	4618      	mov	r0, r3
 800caac:	f7f7 f915 	bl	8003cda <HAL_PCD_SetAddress>
 800cab0:	4603      	mov	r3, r0
 800cab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 f874 	bl	800cba4 <USBD_Get_USB_Status>
 800cabc:	4603      	mov	r3, r0
 800cabe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b086      	sub	sp, #24
 800cace:	af00      	add	r7, sp, #0
 800cad0:	60f8      	str	r0, [r7, #12]
 800cad2:	607a      	str	r2, [r7, #4]
 800cad4:	603b      	str	r3, [r7, #0]
 800cad6:	460b      	mov	r3, r1
 800cad8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cae8:	7af9      	ldrb	r1, [r7, #11]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	f7f7 fa1f 	bl	8003f30 <HAL_PCD_EP_Transmit>
 800caf2:	4603      	mov	r3, r0
 800caf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 f853 	bl	800cba4 <USBD_Get_USB_Status>
 800cafe:	4603      	mov	r3, r0
 800cb00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb02:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	607a      	str	r2, [r7, #4]
 800cb16:	603b      	str	r3, [r7, #0]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb20:	2300      	movs	r3, #0
 800cb22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cb2a:	7af9      	ldrb	r1, [r7, #11]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	f7f7 f9ab 	bl	8003e8a <HAL_PCD_EP_Receive>
 800cb34:	4603      	mov	r3, r0
 800cb36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 f832 	bl	800cba4 <USBD_Get_USB_Status>
 800cb40:	4603      	mov	r3, r0
 800cb42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb44:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3718      	adds	r7, #24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b082      	sub	sp, #8
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	460b      	mov	r3, r1
 800cb58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb60:	78fa      	ldrb	r2, [r7, #3]
 800cb62:	4611      	mov	r1, r2
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7f7 f9cb 	bl	8003f00 <HAL_PCD_EP_GetRxCount>
 800cb6a:	4603      	mov	r3, r0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb7c:	4b03      	ldr	r3, [pc, #12]	@ (800cb8c <USBD_static_malloc+0x18>)
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	20014a2c 	.word	0x20014a2c

0800cb90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]

}
 800cb98:	bf00      	nop
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	2b03      	cmp	r3, #3
 800cbb6:	d817      	bhi.n	800cbe8 <USBD_Get_USB_Status+0x44>
 800cbb8:	a201      	add	r2, pc, #4	@ (adr r2, 800cbc0 <USBD_Get_USB_Status+0x1c>)
 800cbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbbe:	bf00      	nop
 800cbc0:	0800cbd1 	.word	0x0800cbd1
 800cbc4:	0800cbd7 	.word	0x0800cbd7
 800cbc8:	0800cbdd 	.word	0x0800cbdd
 800cbcc:	0800cbe3 	.word	0x0800cbe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd4:	e00b      	b.n	800cbee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbda:	e008      	b.n	800cbee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe0:	e005      	b.n	800cbee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe6:	e002      	b.n	800cbee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	73fb      	strb	r3, [r7, #15]
    break;
 800cbec:	bf00      	nop
  }
  return usb_status;
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3714      	adds	r7, #20
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <memset>:
 800cbfc:	4402      	add	r2, r0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d100      	bne.n	800cc06 <memset+0xa>
 800cc04:	4770      	bx	lr
 800cc06:	f803 1b01 	strb.w	r1, [r3], #1
 800cc0a:	e7f9      	b.n	800cc00 <memset+0x4>

0800cc0c <__libc_init_array>:
 800cc0c:	b570      	push	{r4, r5, r6, lr}
 800cc0e:	4d0d      	ldr	r5, [pc, #52]	@ (800cc44 <__libc_init_array+0x38>)
 800cc10:	4c0d      	ldr	r4, [pc, #52]	@ (800cc48 <__libc_init_array+0x3c>)
 800cc12:	1b64      	subs	r4, r4, r5
 800cc14:	10a4      	asrs	r4, r4, #2
 800cc16:	2600      	movs	r6, #0
 800cc18:	42a6      	cmp	r6, r4
 800cc1a:	d109      	bne.n	800cc30 <__libc_init_array+0x24>
 800cc1c:	4d0b      	ldr	r5, [pc, #44]	@ (800cc4c <__libc_init_array+0x40>)
 800cc1e:	4c0c      	ldr	r4, [pc, #48]	@ (800cc50 <__libc_init_array+0x44>)
 800cc20:	f000 f826 	bl	800cc70 <_init>
 800cc24:	1b64      	subs	r4, r4, r5
 800cc26:	10a4      	asrs	r4, r4, #2
 800cc28:	2600      	movs	r6, #0
 800cc2a:	42a6      	cmp	r6, r4
 800cc2c:	d105      	bne.n	800cc3a <__libc_init_array+0x2e>
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc34:	4798      	blx	r3
 800cc36:	3601      	adds	r6, #1
 800cc38:	e7ee      	b.n	800cc18 <__libc_init_array+0xc>
 800cc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc3e:	4798      	blx	r3
 800cc40:	3601      	adds	r6, #1
 800cc42:	e7f2      	b.n	800cc2a <__libc_init_array+0x1e>
 800cc44:	0800cd40 	.word	0x0800cd40
 800cc48:	0800cd40 	.word	0x0800cd40
 800cc4c:	0800cd40 	.word	0x0800cd40
 800cc50:	0800cd44 	.word	0x0800cd44

0800cc54 <memcpy>:
 800cc54:	440a      	add	r2, r1
 800cc56:	4291      	cmp	r1, r2
 800cc58:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc5c:	d100      	bne.n	800cc60 <memcpy+0xc>
 800cc5e:	4770      	bx	lr
 800cc60:	b510      	push	{r4, lr}
 800cc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc6a:	4291      	cmp	r1, r2
 800cc6c:	d1f9      	bne.n	800cc62 <memcpy+0xe>
 800cc6e:	bd10      	pop	{r4, pc}

0800cc70 <_init>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	bf00      	nop
 800cc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc76:	bc08      	pop	{r3}
 800cc78:	469e      	mov	lr, r3
 800cc7a:	4770      	bx	lr

0800cc7c <_fini>:
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7e:	bf00      	nop
 800cc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc82:	bc08      	pop	{r3}
 800cc84:	469e      	mov	lr, r3
 800cc86:	4770      	bx	lr
