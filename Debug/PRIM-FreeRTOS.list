
PRIM-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da18  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800dbb8  0800dbb8  0000ebb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc7c  0800dc7c  0000f104  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc7c  0800dc7c  0000ec7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc84  0800dc84  0000f104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc84  0800dc84  0000ec84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc88  0800dc88  0000ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800dc8c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b90  20000104  0800dd90  0000f104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014c94  0800dd90  0000fc94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc7d  00000000  00000000  0000f134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f11  00000000  00000000  0002edb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  00033cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000167e  00000000  00000000  000359e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfa4  00000000  00000000  00037066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025160  00000000  00000000  0005300a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fc61  00000000  00000000  0007816a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117dcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b04  00000000  00000000  00117e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011f914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dba0 	.word	0x0800dba0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800dba0 	.word	0x0800dba0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <i2c1_pisiRegister>:
void initMutex(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af04      	add	r7, sp, #16
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	460b      	mov	r3, r1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	4613      	mov	r3, r2
 80004f0:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	b299      	uxth	r1, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	230a      	movs	r3, #10
 8000502:	9302      	str	r3, [sp, #8]
 8000504:	2301      	movs	r3, #1
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	1d7b      	adds	r3, r7, #5
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	4804      	ldr	r0, [pc, #16]	@ (8000520 <i2c1_pisiRegister+0x40>)
 8000510:	f001 fc78 	bl	8001e04 <HAL_I2C_Mem_Write>
 8000514:	4603      	mov	r3, r0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000120 	.word	0x20000120

08000524 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af04      	add	r7, sp, #16
 800052a:	603a      	str	r2, [r7, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	460b      	mov	r3, r1
 8000534:	71bb      	strb	r3, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800053a:	797b      	ldrb	r3, [r7, #5]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d906      	bls.n	800054e <i2c1_beriRegistre+0x2a>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b19      	cmp	r3, #25
 8000544:	d103      	bne.n	800054e <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800054c:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	b299      	uxth	r1, r3
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	b298      	uxth	r0, r3
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	b29b      	uxth	r3, r3
 8000560:	797a      	ldrb	r2, [r7, #5]
 8000562:	9202      	str	r2, [sp, #8]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4602      	mov	r2, r0
 800056e:	4803      	ldr	r0, [pc, #12]	@ (800057c <i2c1_beriRegistre+0x58>)
 8000570:	f001 fd42 	bl	8001ff8 <HAL_I2C_Mem_Read>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000120 	.word	0x20000120

08000580 <initOrientation>:

void initOrientation() { // ne pozabit klicati te funkcije
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000584:	2227      	movs	r2, #39	@ 0x27
 8000586:	2120      	movs	r1, #32
 8000588:	2019      	movs	r0, #25
 800058a:	f7ff ffa9 	bl	80004e0 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 800058e:	2288      	movs	r2, #136	@ 0x88
 8000590:	2123      	movs	r1, #35	@ 0x23
 8000592:	2019      	movs	r0, #25
 8000594:	f7ff ffa4 	bl	80004e0 <i2c1_pisiRegister>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005ac:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <spi1_beriRegister+0x50>)
 80005ba:	f001 faab 	bl	8001b14 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	f107 010e 	add.w	r1, r7, #14
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2302      	movs	r3, #2
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <spi1_beriRegister+0x54>)
 80005ce:	f005 fad9 	bl	8005b84 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2108      	movs	r1, #8
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <spi1_beriRegister+0x50>)
 80005d8:	f001 fa9c 	bl	8001b14 <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 80005dc:	89bb      	ldrh	r3, [r7, #12]
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b2db      	uxtb	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	20000204 	.word	0x20000204

080005f4 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	b21a      	sxth	r2, r3
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	b21b      	sxth	r3, r3
 800060e:	4313      	orrs	r3, r2
 8000610:	b21b      	sxth	r3, r3
 8000612:	b29b      	uxth	r3, r3
 8000614:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2108      	movs	r1, #8
 800061a:	4809      	ldr	r0, [pc, #36]	@ (8000640 <spi1_pisiRegister+0x4c>)
 800061c:	f001 fa7a 	bl	8001b14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000620:	f107 010e 	add.w	r1, r7, #14
 8000624:	2302      	movs	r3, #2
 8000626:	2202      	movs	r2, #2
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <spi1_pisiRegister+0x50>)
 800062a:	f005 f84e 	bl	80056ca <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2108      	movs	r1, #8
 8000632:	4803      	ldr	r0, [pc, #12]	@ (8000640 <spi1_pisiRegister+0x4c>)
 8000634:	f001 fa6e 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	20000204 	.word	0x20000204

08000648 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800065e:	b2db      	uxtb	r3, r3
 8000660:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	480c      	ldr	r0, [pc, #48]	@ (8000698 <spi1_beriRegistre+0x50>)
 8000668:	f001 fa54 	bl	8001b14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 800066c:	1df9      	adds	r1, r7, #7
 800066e:	230a      	movs	r3, #10
 8000670:	2201      	movs	r2, #1
 8000672:	480a      	ldr	r0, [pc, #40]	@ (800069c <spi1_beriRegistre+0x54>)
 8000674:	f005 f829 	bl	80056ca <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	b29a      	uxth	r2, r3
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	6839      	ldr	r1, [r7, #0]
 8000680:	4806      	ldr	r0, [pc, #24]	@ (800069c <spi1_beriRegistre+0x54>)
 8000682:	f005 f966 	bl	8005952 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2108      	movs	r1, #8
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <spi1_beriRegistre+0x50>)
 800068c:	f001 fa42 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	20000204 	.word	0x20000204

080006a0 <initGyro>:

void initGyro() { // ne pozabit klicat te funkcije
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
    // preverimo ali smo "poklicali" pravi senzor
    uint8_t cip = spi1_beriRegister(0x0F);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f7ff ff78 	bl	800059c <spi1_beriRegister>
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2bd4      	cmp	r3, #212	@ 0xd4
 80006b4:	d004      	beq.n	80006c0 <initGyro+0x20>
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2bd3      	cmp	r3, #211	@ 0xd3
 80006ba:	d001      	beq.n	80006c0 <initGyro+0x20>
        for (;;);
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x0F); // zbudi ziroskop in omogoci osi
 80006c0:	210f      	movs	r1, #15
 80006c2:	2020      	movs	r0, #32
 80006c4:	f7ff ff96 	bl	80005f4 <spi1_pisiRegister>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <initMutex>:

void initMutex(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	mutexHandle = xSemaphoreCreateMutex();
 80006d4:	2001      	movs	r0, #1
 80006d6:	f008 fa49 	bl	8008b6c <xQueueCreateMutex>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <initMutex+0x20>)
 80006de:	6013      	str	r3, [r2, #0]
	if (mutexHandle == NULL) {
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <initMutex+0x20>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <initMutex+0x1c>
		Error_Handler();
 80006e8:	f000 fc78 	bl	8000fdc <Error_Handler>
	}
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200002a4 	.word	0x200002a4

080006f4 <sendDataGyro>:

void sendDataGyro(void *pvParameters){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	while(1){
		int16_t meritev[4];
		meritev[0] = 0xaaab;
 80006fc:	f64a 23ab 	movw	r3, #43691	@ 0xaaab
 8000700:	813b      	strh	r3, [r7, #8]

		spi1_beriRegistre(0x28, (uint8_t*)&meritev[1], 6);
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	3302      	adds	r3, #2
 8000708:	2206      	movs	r2, #6
 800070a:	4619      	mov	r1, r3
 800070c:	2028      	movs	r0, #40	@ 0x28
 800070e:	f7ff ff9b 	bl	8000648 <spi1_beriRegistre>

		// POZOR: tukaj �?akamo, dokler na PC-ju podatkov ne preberemo
		while(CDC_Transmit_FS((uint8_t*)&meritev, 8));
 8000712:	bf00      	nop
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2108      	movs	r1, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f00c fda6 	bl	800d26c <CDC_Transmit_FS>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f6      	bne.n	8000714 <sendDataGyro+0x20>
//		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for 500ms
 8000726:	20c8      	movs	r0, #200	@ 0xc8
 8000728:	f008 ff1c 	bl	8009564 <vTaskDelay>
	while(1){
 800072c:	e7e6      	b.n	80006fc <sendDataGyro+0x8>

0800072e <sendDataAccelerometer>:
	}
}

void sendDataAccelerometer(void *pvParameters){
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	while(1){
		int16_t meritev[4];
		meritev[0] = 0xaaac;
 8000736:	f64a 23ac 	movw	r3, #43692	@ 0xaaac
 800073a:	813b      	strh	r3, [r7, #8]

		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[1], 6);
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	1c9a      	adds	r2, r3, #2
 8000742:	2306      	movs	r3, #6
 8000744:	2128      	movs	r1, #40	@ 0x28
 8000746:	2019      	movs	r0, #25
 8000748:	f7ff feec 	bl	8000524 <i2c1_beriRegistre>

		while(CDC_Transmit_FS((uint8_t*)&meritev, 8));
 800074c:	bf00      	nop
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2108      	movs	r1, #8
 8000754:	4618      	mov	r0, r3
 8000756:	f00c fd89 	bl	800d26c <CDC_Transmit_FS>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f6      	bne.n	800074e <sendDataAccelerometer+0x20>
//		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for 500ms
 8000760:	20c8      	movs	r0, #200	@ 0xc8
 8000762:	f008 feff 	bl	8009564 <vTaskDelay>
	while(1){
 8000766:	e7e6      	b.n	8000736 <sendDataAccelerometer+0x8>

08000768 <update_pwm_brightness>:
	}
}

void update_pwm_brightness(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t brightness_level) {
 8000768:	b480      	push	{r7}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	4613      	mov	r3, r2
 8000774:	71fb      	strb	r3, [r7, #7]
    uint32_t ccr_value = (brightness_level * (999 + 1)) / 100;
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	617b      	str	r3, [r7, #20]

    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <update_pwm_brightness+0x2a>
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000790:	e013      	b.n	80007ba <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d104      	bne.n	80007a2 <update_pwm_brightness+0x3a>
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80007a0:	e00b      	b.n	80007ba <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	2b08      	cmp	r3, #8
 80007a6:	d104      	bne.n	80007b2 <update_pwm_brightness+0x4a>
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80007b0:	e003      	b.n	80007ba <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007ba:	bf00      	nop
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <checkDir>:

void checkDir(uint8_t value, int8_t *dir, int8_t max, int8_t min){
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	4611      	mov	r1, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	460b      	mov	r3, r1
 80007d8:	71bb      	strb	r3, [r7, #6]
 80007da:	4613      	mov	r3, r2
 80007dc:	717b      	strb	r3, [r7, #5]
	if(value >= max)
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	db03      	blt.n	80007f0 <checkDir+0x2a>
		dir = -1;
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	603b      	str	r3, [r7, #0]
	else if(value <= min)
		dir = 1;
}
 80007ee:	e006      	b.n	80007fe <checkDir+0x38>
	else if(value <= min)
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	dc01      	bgt.n	80007fe <checkDir+0x38>
		dir = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <GPIO_control>:

void GPIO_control(void *pvParameters){
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	GPIOControlParams *params = (GPIOControlParams *)pvParameters;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	613b      	str	r3, [r7, #16]

	int8_t dir_status = params->dir_status;
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	f993 3000 	ldrsb.w	r3, [r3]
 800081e:	73fb      	strb	r3, [r7, #15]
	int8_t dir_RoadType = params->dir_RoadType;
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000826:	73bb      	strb	r3, [r7, #14]
	uint8_t status = params->status;
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	75fb      	strb	r3, [r7, #23]
	uint8_t roadType = params->roadType;
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	75bb      	strb	r3, [r7, #22]

	while(1){
		if(isDefined){
 8000834:	4b43      	ldr	r3, [pc, #268]	@ (8000944 <GPIO_control+0x138>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d07d      	beq.n	8000938 <GPIO_control+0x12c>
			if(recivedData.danger)
 800083c:	4b42      	ldr	r3, [pc, #264]	@ (8000948 <GPIO_control+0x13c>)
 800083e:	f993 3000 	ldrsb.w	r3, [r3]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <GPIO_control+0x48>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800084c:	483f      	ldr	r0, [pc, #252]	@ (800094c <GPIO_control+0x140>)
 800084e:	f001 f961 	bl	8001b14 <HAL_GPIO_WritePin>
 8000852:	e005      	b.n	8000860 <GPIO_control+0x54>
			else
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085a:	483c      	ldr	r0, [pc, #240]	@ (800094c <GPIO_control+0x140>)
 800085c:	f001 f95a 	bl	8001b14 <HAL_GPIO_WritePin>

			update_pwm_brightness(&htim4, TIM_CHANNEL_2, status);
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	461a      	mov	r2, r3
 8000864:	2104      	movs	r1, #4
 8000866:	483a      	ldr	r0, [pc, #232]	@ (8000950 <GPIO_control+0x144>)
 8000868:	f7ff ff7e 	bl	8000768 <update_pwm_brightness>

			if(recivedData.roadType[0] == 'A'){
 800086c:	4b36      	ldr	r3, [pc, #216]	@ (8000948 <GPIO_control+0x13c>)
 800086e:	7a1b      	ldrb	r3, [r3, #8]
 8000870:	2b41      	cmp	r3, #65	@ 0x41
 8000872:	d10b      	bne.n	800088c <GPIO_control+0x80>
				update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	4835      	ldr	r0, [pc, #212]	@ (8000950 <GPIO_control+0x144>)
 800087a:	f7ff ff75 	bl	8000768 <update_pwm_brightness>
				update_pwm_brightness(&htim4, TIM_CHANNEL_4, roadType);
 800087e:	7dbb      	ldrb	r3, [r7, #22]
 8000880:	461a      	mov	r2, r3
 8000882:	210c      	movs	r1, #12
 8000884:	4832      	ldr	r0, [pc, #200]	@ (8000950 <GPIO_control+0x144>)
 8000886:	f7ff ff6f 	bl	8000768 <update_pwm_brightness>
 800088a:	e00a      	b.n	80008a2 <GPIO_control+0x96>
			}
			else{
				update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	210c      	movs	r1, #12
 8000890:	482f      	ldr	r0, [pc, #188]	@ (8000950 <GPIO_control+0x144>)
 8000892:	f7ff ff69 	bl	8000768 <update_pwm_brightness>
				update_pwm_brightness(&htim4, TIM_CHANNEL_1, roadType);
 8000896:	7dbb      	ldrb	r3, [r7, #22]
 8000898:	461a      	mov	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	482c      	ldr	r0, [pc, #176]	@ (8000950 <GPIO_control+0x144>)
 800089e:	f7ff ff63 	bl	8000768 <update_pwm_brightness>
			}

			status += recivedData.danger ? 10 * (recivedData.dangerProximity / 20) * dir_status :  10 * dir_status;
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <GPIO_control+0x13c>)
 80008a4:	f993 3000 	ldrsb.w	r3, [r3]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d014      	beq.n	80008d6 <GPIO_control+0xca>
 80008ac:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <GPIO_control+0x13c>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a28      	ldr	r2, [pc, #160]	@ (8000954 <GPIO_control+0x148>)
 80008b2:	fb82 1203 	smull	r1, r2, r2, r3
 80008b6:	10d2      	asrs	r2, r2, #3
 80008b8:	17db      	asrs	r3, r3, #31
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	fb12 f303 	smulbb	r3, r2, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	e007      	b.n	80008e6 <GPIO_control+0xda>
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	7dfa      	ldrb	r2, [r7, #23]
 80008e8:	4413      	add	r3, r2
 80008ea:	75fb      	strb	r3, [r7, #23]
			roadType += 10 * ((100 - recivedData.roadQuality) / 20) * dir_RoadType;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <GPIO_control+0x13c>)
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80008f4:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <GPIO_control+0x14c>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	fb12 f303 	smulbb	r3, r2, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	4413      	add	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	7dbb      	ldrb	r3, [r7, #22]
 8000916:	4413      	add	r3, r2
 8000918:	75bb      	strb	r3, [r7, #22]

			checkDir(status, &dir_status, 100, 0);
 800091a:	f107 010f 	add.w	r1, r7, #15
 800091e:	7df8      	ldrb	r0, [r7, #23]
 8000920:	2300      	movs	r3, #0
 8000922:	2264      	movs	r2, #100	@ 0x64
 8000924:	f7ff ff4f 	bl	80007c6 <checkDir>
			checkDir(roadType, &dir_RoadType, 100, 0);
 8000928:	f107 010e 	add.w	r1, r7, #14
 800092c:	7db8      	ldrb	r0, [r7, #22]
 800092e:	2300      	movs	r3, #0
 8000930:	2264      	movs	r2, #100	@ 0x64
 8000932:	f7ff ff48 	bl	80007c6 <checkDir>
 8000936:	e77d      	b.n	8000834 <GPIO_control+0x28>
		}
		else{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000938:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <GPIO_control+0x140>)
 800093e:	f001 f902 	bl	8001b46 <HAL_GPIO_TogglePin>
		if(isDefined){
 8000942:	e777      	b.n	8000834 <GPIO_control+0x28>
 8000944:	20014378 	.word	0x20014378
 8000948:	2001437c 	.word	0x2001437c
 800094c:	40020c00 	.word	0x40020c00
 8000950:	2000025c 	.word	0x2000025c
 8000954:	66666667 	.word	0x66666667
 8000958:	cccccccd 	.word	0xcccccccd

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 fe0b 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f875 	bl	8000a54 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800096a:	f000 f8db 	bl	8000b24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f000 fa49 	bl	8000e04 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000972:	f000 f8f7 	bl	8000b64 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000976:	f000 f925 	bl	8000bc4 <MX_I2S2_Init>
  MX_I2S3_Init();
 800097a:	f000 f951 	bl	8000c20 <MX_I2S3_Init>
  MX_SPI1_Init();
 800097e:	f000 f97f 	bl	8000c80 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000982:	f00c fb15 	bl	800cfb0 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000986:	f000 f9b1 	bl	8000cec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  GPIOControlParams gpioParams = {
 800098a:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <main+0xcc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	607b      	str	r3, [r7, #4]
      .dir_RoadType = 1,
      .status = 0,
      .roadType = 0
  };

  initMutex();
 8000990:	f7ff fe9e 	bl	80006d0 <initMutex>

  __HAL_I2C_ENABLE(&hi2c1);
 8000994:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <main+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <main+0xd0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0201 	orr.w	r2, r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
  initOrientation();
 80009a4:	f7ff fdec 	bl	8000580 <initOrientation>

  __HAL_SPI_ENABLE(&hspi1);
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <main+0xd4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <main+0xd4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009b6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 80009b8:	2201      	movs	r2, #1
 80009ba:	2108      	movs	r1, #8
 80009bc:	481d      	ldr	r0, [pc, #116]	@ (8000a34 <main+0xd8>)
 80009be:	f001 f8a9 	bl	8001b14 <HAL_GPIO_WritePin>
  initGyro();
 80009c2:	f7ff fe6d 	bl	80006a0 <initGyro>

  // zazenemo casovnik
  HAL_TIM_Base_Start(&htim4);
 80009c6:	481c      	ldr	r0, [pc, #112]	@ (8000a38 <main+0xdc>)
 80009c8:	f005 fc18 	bl	80061fc <HAL_TIM_Base_Start>

  // zazenemo PWM - neinvertirani izhodi
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80009cc:	2100      	movs	r1, #0
 80009ce:	481a      	ldr	r0, [pc, #104]	@ (8000a38 <main+0xdc>)
 80009d0:	f005 fd2a 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80009d4:	2104      	movs	r1, #4
 80009d6:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <main+0xdc>)
 80009d8:	f005 fd26 	bl	8006428 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80009dc:	210c      	movs	r1, #12
 80009de:	4816      	ldr	r0, [pc, #88]	@ (8000a38 <main+0xdc>)
 80009e0:	f005 fd22 	bl	8006428 <HAL_TIM_PWM_Start>

  xTaskCreate(
 80009e4:	2300      	movs	r3, #0
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	2301      	movs	r3, #1
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2300      	movs	r3, #0
 80009ee:	2280      	movs	r2, #128	@ 0x80
 80009f0:	4912      	ldr	r1, [pc, #72]	@ (8000a3c <main+0xe0>)
 80009f2:	4813      	ldr	r0, [pc, #76]	@ (8000a40 <main+0xe4>)
 80009f4:	f008 fc4a 	bl	800928c <xTaskCreate>
		"sendData_Gyro",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  xTaskCreate(
 80009f8:	2300      	movs	r3, #0
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2300      	movs	r3, #0
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	490f      	ldr	r1, [pc, #60]	@ (8000a44 <main+0xe8>)
 8000a06:	4810      	ldr	r0, [pc, #64]	@ (8000a48 <main+0xec>)
 8000a08:	f008 fc40 	bl	800928c <xTaskCreate>
		"sendData_Accelerometer",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  xTaskCreate(
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	9201      	str	r2, [sp, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	9200      	str	r2, [sp, #0]
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	490c      	ldr	r1, [pc, #48]	@ (8000a4c <main+0xf0>)
 8000a1a:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <main+0xf4>)
 8000a1c:	f008 fc36 	bl	800928c <xTaskCreate>
		"GPIO_control",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		(void *)&gpioParams,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  vTaskStartScheduler();
 8000a20:	f008 fdd6 	bl	80095d0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <main+0xc8>
 8000a28:	0800dbf0 	.word	0x0800dbf0
 8000a2c:	20000120 	.word	0x20000120
 8000a30:	20000204 	.word	0x20000204
 8000a34:	40021000 	.word	0x40021000
 8000a38:	2000025c 	.word	0x2000025c
 8000a3c:	0800dbb8 	.word	0x0800dbb8
 8000a40:	080006f5 	.word	0x080006f5
 8000a44:	0800dbc8 	.word	0x0800dbc8
 8000a48:	0800072f 	.word	0x0800072f
 8000a4c:	0800dbe0 	.word	0x0800dbe0
 8000a50:	0800080d 	.word	0x0800080d

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	@ 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	@ 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00d f862 	bl	800db2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <SystemClock_Config+0xc8>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a26      	ldr	r2, [pc, #152]	@ (8000b1c <SystemClock_Config+0xc8>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <SystemClock_Config+0xc8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <SystemClock_Config+0xcc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a20      	ldr	r2, [pc, #128]	@ (8000b20 <SystemClock_Config+0xcc>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <SystemClock_Config+0xcc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ac8:	23c0      	movs	r3, #192	@ 0xc0
 8000aca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000acc:	2304      	movs	r3, #4
 8000ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 ff65 	bl	80049a8 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae4:	f000 fa7a 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2103      	movs	r1, #3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 f9c7 	bl	8004e98 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b10:	f000 fa64 	bl	8000fdc <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3750      	adds	r7, #80	@ 0x50
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b3e:	23c8      	movs	r3, #200	@ 0xc8
 8000b40:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000b42:	2305      	movs	r3, #5
 8000b44:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 fbe1 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000b58:	f000 fa40 	bl	8000fdc <Error_Handler>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b6a:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <MX_I2C1_Init+0x58>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b70:	4a13      	ldr	r2, [pc, #76]	@ (8000bc0 <MX_I2C1_Init+0x5c>)
 8000b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000b74:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b7a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b90:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_I2C1_Init+0x54>)
 8000ba4:	f000 ffea 	bl	8001b7c <HAL_I2C_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000bae:	f000 fa15 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000120 	.word	0x20000120
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	00061a80 	.word	0x00061a80

08000bc4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000bca:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <MX_I2S2_Init+0x54>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <MX_I2S2_Init+0x58>)
 8000bec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <MX_I2S2_Init+0x50>)
 8000c02:	f001 ffdf 	bl	8002bc4 <HAL_I2S_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000c0c:	f000 f9e6 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000174 	.word	0x20000174
 8000c18:	40003800 	.word	0x40003800
 8000c1c:	00017700 	.word	0x00017700

08000c20 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c26:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <MX_I2S3_Init+0x58>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c30:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c44:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c48:	4a0c      	ldr	r2, [pc, #48]	@ (8000c7c <MX_I2S3_Init+0x5c>)
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c60:	f001 ffb0 	bl	8002bc4 <HAL_I2S_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c6a:	f000 f9b7 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001bc 	.word	0x200001bc
 8000c78:	40003c00 	.word	0x40003c00
 8000c7c:	00017700 	.word	0x00017700

08000c80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c84:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000c86:	4a18      	ldr	r2, [pc, #96]	@ (8000ce8 <MX_SPI1_Init+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cb4:	2218      	movs	r2, #24
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cd2:	f004 fc71 	bl	80055b8 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cdc:	f000 f97e 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000204 	.word	0x20000204
 8000ce8:	40013000 	.word	0x40013000

08000cec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	@ 0x38
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d1c:	4b37      	ldr	r3, [pc, #220]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d1e:	4a38      	ldr	r2, [pc, #224]	@ (8000e00 <MX_TIM4_Init+0x114>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000d22:	4b36      	ldr	r3, [pc, #216]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d24:	2253      	movs	r2, #83	@ 0x53
 8000d26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b34      	ldr	r3, [pc, #208]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000d2e:	4b33      	ldr	r3, [pc, #204]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b31      	ldr	r3, [pc, #196]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d42:	482e      	ldr	r0, [pc, #184]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d44:	f005 fa0a 	bl	800615c <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d4e:	f000 f945 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4827      	ldr	r0, [pc, #156]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d60:	f005 fdc4 	bl	80068ec <HAL_TIM_ConfigClockSource>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d6a:	f000 f937 	bl	8000fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d6e:	4823      	ldr	r0, [pc, #140]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d70:	f005 fb00 	bl	8006374 <HAL_TIM_PWM_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d7a:	f000 f92f 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481b      	ldr	r0, [pc, #108]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000d8e:	f006 f975 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d98:	f000 f920 	bl	8000fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9c:	2360      	movs	r3, #96	@ 0x60
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	4619      	mov	r1, r3
 8000db2:	4812      	ldr	r0, [pc, #72]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000db4:	f005 fcd8 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000dbe:	f000 f90d 	bl	8000fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000dca:	f005 fccd 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000dd4:	f000 f902 	bl	8000fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	220c      	movs	r2, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4807      	ldr	r0, [pc, #28]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000de0:	f005 fcc2 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000dea:	f000 f8f7 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dee:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <MX_TIM4_Init+0x110>)
 8000df0:	f000 faa2 	bl	8001338 <HAL_TIM_MspPostInit>

}
 8000df4:	bf00      	nop
 8000df6:	3738      	adds	r7, #56	@ 0x38
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000025c 	.word	0x2000025c
 8000e00:	40000800 	.word	0x40000800

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	@ 0x30
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b61      	ldr	r3, [pc, #388]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a60      	ldr	r2, [pc, #384]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a59      	ldr	r2, [pc, #356]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b57      	ldr	r3, [pc, #348]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b53      	ldr	r3, [pc, #332]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a52      	ldr	r2, [pc, #328]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b50      	ldr	r3, [pc, #320]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a4b      	ldr	r2, [pc, #300]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b49      	ldr	r3, [pc, #292]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b45      	ldr	r3, [pc, #276]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a44      	ldr	r2, [pc, #272]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b42      	ldr	r3, [pc, #264]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a3d      	ldr	r2, [pc, #244]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4838      	ldr	r0, [pc, #224]	@ (8000fa8 <MX_GPIO_Init+0x1a4>)
 8000ec8:	f000 fe24 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4836      	ldr	r0, [pc, #216]	@ (8000fac <MX_GPIO_Init+0x1a8>)
 8000ed2:	f000 fe1f 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|Audio_RST_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f244 0110 	movw	r1, #16400	@ 0x4010
 8000edc:	4834      	ldr	r0, [pc, #208]	@ (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000ede:	f000 fe19 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	482c      	ldr	r0, [pc, #176]	@ (8000fa8 <MX_GPIO_Init+0x1a4>)
 8000ef6:	f000 fc89 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000efa:	2308      	movs	r3, #8
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4825      	ldr	r0, [pc, #148]	@ (8000fa8 <MX_GPIO_Init+0x1a4>)
 8000f12:	f000 fc7b 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000f16:	2332      	movs	r3, #50	@ 0x32
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f1a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481f      	ldr	r0, [pc, #124]	@ (8000fa8 <MX_GPIO_Init+0x1a4>)
 8000f2c:	f000 fc6e 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4819      	ldr	r0, [pc, #100]	@ (8000fac <MX_GPIO_Init+0x1a8>)
 8000f48:	f000 fc60 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_GPIO_Init+0x1b0>)
 8000f62:	f000 fc53 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|Audio_RST_Pin;
 8000f66:	f244 0310 	movw	r3, #16400	@ 0x4010
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000f80:	f000 fc44 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f84:	2320      	movs	r3, #32
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000f98:	f000 fc38 	bl	800180c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	@ 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020c00 	.word	0x40020c00
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fca:	f000 faf9 	bl	80015c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40000c00 	.word	0x40000c00

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <Error_Handler+0x8>

08000fe8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <HAL_MspInit+0x4c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <HAL_MspInit+0x4c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	6413      	str	r3, [r2, #64]	@ 0x40
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a19      	ldr	r2, [pc, #100]	@ (80010bc <HAL_I2C_MspInit+0x84>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d12c      	bne.n	80010b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_I2C_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <HAL_I2C_MspInit+0x88>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <HAL_I2C_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001076:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107c:	2312      	movs	r3, #18
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001080:	2301      	movs	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001088:	2304      	movs	r3, #4
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <HAL_I2C_MspInit+0x8c>)
 8001094:	f000 fbba 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_I2C_MspInit+0x88>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <HAL_I2C_MspInit+0x88>)
 80010a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <HAL_I2C_MspInit+0x88>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	@ 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40005400 	.word	0x40005400
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020400 	.word	0x40020400

080010c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	@ 0x38
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a59      	ldr	r2, [pc, #356]	@ (800124c <HAL_I2S_MspInit+0x184>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d15b      	bne.n	80011a2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	4b58      	ldr	r3, [pc, #352]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a57      	ldr	r2, [pc, #348]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	4b55      	ldr	r3, [pc, #340]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001102:	623b      	str	r3, [r7, #32]
 8001104:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	4b51      	ldr	r3, [pc, #324]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a50      	ldr	r2, [pc, #320]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b4e      	ldr	r3, [pc, #312]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b4a      	ldr	r3, [pc, #296]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a49      	ldr	r2, [pc, #292]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b47      	ldr	r3, [pc, #284]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800113e:	2304      	movs	r3, #4
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800114e:	2306      	movs	r3, #6
 8001150:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	483e      	ldr	r0, [pc, #248]	@ (8001254 <HAL_I2S_MspInit+0x18c>)
 800115a:	f000 fb57 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800115e:	2308      	movs	r3, #8
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116e:	2305      	movs	r3, #5
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	4836      	ldr	r0, [pc, #216]	@ (8001254 <HAL_I2S_MspInit+0x18c>)
 800117a:	f000 fb47 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800117e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001190:	2305      	movs	r3, #5
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	482f      	ldr	r0, [pc, #188]	@ (8001258 <HAL_I2S_MspInit+0x190>)
 800119c:	f000 fb36 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011a0:	e04f      	b.n	8001242 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a2d      	ldr	r2, [pc, #180]	@ (800125c <HAL_I2S_MspInit+0x194>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d14a      	bne.n	8001242 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	4a26      	ldr	r2, [pc, #152]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_I2S_MspInit+0x188>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001200:	2310      	movs	r3, #16
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001210:	2306      	movs	r3, #6
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	4811      	ldr	r0, [pc, #68]	@ (8001260 <HAL_I2S_MspInit+0x198>)
 800121c:	f000 faf6 	bl	800180c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001220:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001232:	2306      	movs	r3, #6
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <HAL_I2S_MspInit+0x18c>)
 800123e:	f000 fae5 	bl	800180c <HAL_GPIO_Init>
}
 8001242:	bf00      	nop
 8001244:	3738      	adds	r7, #56	@ 0x38
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40003800 	.word	0x40003800
 8001250:	40023800 	.word	0x40023800
 8001254:	40020800 	.word	0x40020800
 8001258:	40020400 	.word	0x40020400
 800125c:	40003c00 	.word	0x40003c00
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <HAL_SPI_MspInit+0x84>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12b      	bne.n	80012de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <HAL_SPI_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <HAL_SPI_MspInit+0x88>)
 8001290:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001294:	6453      	str	r3, [r2, #68]	@ 0x44
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_SPI_MspInit+0x88>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <HAL_SPI_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <HAL_SPI_MspInit+0x88>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <HAL_SPI_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012be:	23e0      	movs	r3, #224	@ 0xe0
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ce:	2305      	movs	r3, #5
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <HAL_SPI_MspInit+0x8c>)
 80012da:	f000 fa97 	bl	800180c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	@ 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40013000 	.word	0x40013000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_TIM_Base_MspInit+0x3c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10d      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_TIM_Base_MspInit+0x40>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <HAL_TIM_Base_MspInit+0x40>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HAL_TIM_Base_MspInit+0x40>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40000800 	.word	0x40000800
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <HAL_TIM_MspPostInit+0x68>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d11e      	bne.n	8001398 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_TIM_MspPostInit+0x6c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a10      	ldr	r2, [pc, #64]	@ (80013a4 <HAL_TIM_MspPostInit+0x6c>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <HAL_TIM_MspPostInit+0x6c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001376:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800137a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <HAL_TIM_MspPostInit+0x70>)
 8001394:	f000 fa3a 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40000800 	.word	0x40000800
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020c00 	.word	0x40020c00

080013ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	@ 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <HAL_InitTick+0xe4>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	4a32      	ldr	r2, [pc, #200]	@ (8001490 <HAL_InitTick+0xe4>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <HAL_InitTick+0xe4>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013d8:	f107 0210 	add.w	r2, r7, #16
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 ff64 	bl	80052b0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013f2:	f003 ff49 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 80013f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80013f8:	e004      	b.n	8001404 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013fa:	f003 ff45 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 80013fe:	4603      	mov	r3, r0
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001406:	4a23      	ldr	r2, [pc, #140]	@ (8001494 <HAL_InitTick+0xe8>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	3b01      	subs	r3, #1
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <HAL_InitTick+0xec>)
 8001414:	4a21      	ldr	r2, [pc, #132]	@ (800149c <HAL_InitTick+0xf0>)
 8001416:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <HAL_InitTick+0xec>)
 800141a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800141e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001420:	4a1d      	ldr	r2, [pc, #116]	@ (8001498 <HAL_InitTick+0xec>)
 8001422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001424:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <HAL_InitTick+0xec>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_InitTick+0xec>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_InitTick+0xec>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001438:	4817      	ldr	r0, [pc, #92]	@ (8001498 <HAL_InitTick+0xec>)
 800143a:	f004 fe8f 	bl	800615c <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001444:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001448:	2b00      	cmp	r3, #0
 800144a:	d11b      	bne.n	8001484 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800144c:	4812      	ldr	r0, [pc, #72]	@ (8001498 <HAL_InitTick+0xec>)
 800144e:	f004 ff2f 	bl	80062b0 <HAL_TIM_Base_Start_IT>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001460:	2032      	movs	r0, #50	@ 0x32
 8001462:	f000 f9c5 	bl	80017f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d808      	bhi.n	800147e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	2032      	movs	r0, #50	@ 0x32
 8001472:	f000 f9a1 	bl	80017b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_InitTick+0xf4>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e002      	b.n	8001484 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001488:	4618      	mov	r0, r3
 800148a:	3738      	adds	r7, #56	@ 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	431bde83 	.word	0x431bde83
 8001498:	200002a8 	.word	0x200002a8
 800149c:	40000c00 	.word	0x40000c00
 80014a0:	20000004 	.word	0x20000004

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <TIM5_IRQHandler+0x10>)
 80014e2:	f005 f851 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002a8 	.word	0x200002a8

080014f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <OTG_FS_IRQHandler+0x10>)
 80014f6:	f002 f949 	bl	800378c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20014590 	.word	0x20014590

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001560 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152c:	f7ff ffea 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	@ (8001564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	@ (8001568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	@ (8001574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f00c faf1 	bl	800db3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff f9ff 	bl	800095c <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800156c:	0800dc8c 	.word	0x0800dc8c
  ldr r2, =_sbss
 8001570:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001574:	20014c94 	.word	0x20014c94

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <HAL_Init+0x40>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800158a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <HAL_Init+0x40>)
 8001592:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	@ (80015bc <HAL_Init+0x40>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f8fc 	bl	80017a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f7ff fefe 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fd1a 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	200002f0 	.word	0x200002f0

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200002f0 	.word	0x200002f0

08001600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff ffee 	bl	80015e8 <HAL_GetTick>
 800160c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d005      	beq.n	8001626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_Delay+0x44>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001626:	bf00      	nop
 8001628:	f7ff ffde 	bl	80015e8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	429a      	cmp	r2, r3
 8001636:	d8f7      	bhi.n	8001628 <HAL_Delay+0x28>
  {
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008

08001648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167a:	4a04      	ldr	r2, [pc, #16]	@ (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	60d3      	str	r3, [r2, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f003 0307 	and.w	r3, r3, #7
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db0b      	blt.n	80016d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	4907      	ldr	r1, [pc, #28]	@ (80016e4 <__NVIC_EnableIRQ+0x38>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	2001      	movs	r0, #1
 80016ce:	fa00 f202 	lsl.w	r2, r0, r2
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	@ (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff4c 	bl	8001648 <__NVIC_SetPriorityGrouping>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ca:	f7ff ff61 	bl	8001690 <__NVIC_GetPriorityGrouping>
 80017ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	6978      	ldr	r0, [r7, #20]
 80017d6:	f7ff ffb1 	bl	800173c <NVIC_EncodePriority>
 80017da:	4602      	mov	r2, r0
 80017dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff80 	bl	80016e8 <__NVIC_SetPriority>
}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff54 	bl	80016ac <__NVIC_EnableIRQ>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	@ 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e159      	b.n	8001adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8148 	bne.w	8001ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b01      	cmp	r3, #1
 8001850:	d005      	beq.n	800185e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185a:	2b02      	cmp	r3, #2
 800185c:	d130      	bne.n	80018c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d017      	beq.n	80018fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d123      	bne.n	8001950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a2 	beq.w	8001ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <HAL_GPIO_Init+0x2e8>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a56      	ldr	r2, [pc, #344]	@ (8001af4 <HAL_GPIO_Init+0x2e8>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <HAL_GPIO_Init+0x2e8>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ae:	4a52      	ldr	r2, [pc, #328]	@ (8001af8 <HAL_GPIO_Init+0x2ec>)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a49      	ldr	r2, [pc, #292]	@ (8001afc <HAL_GPIO_Init+0x2f0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0x202>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a48      	ldr	r2, [pc, #288]	@ (8001b00 <HAL_GPIO_Init+0x2f4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x1fe>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a47      	ldr	r2, [pc, #284]	@ (8001b04 <HAL_GPIO_Init+0x2f8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a46      	ldr	r2, [pc, #280]	@ (8001b08 <HAL_GPIO_Init+0x2fc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x1f6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a45      	ldr	r2, [pc, #276]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x1f2>
 80019fa:	2304      	movs	r3, #4
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 80019fe:	2307      	movs	r3, #7
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	@ (8001af8 <HAL_GPIO_Init+0x2ec>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a2f      	ldr	r2, [pc, #188]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a24      	ldr	r2, [pc, #144]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b23      	ldr	r3, [pc, #140]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f aea2 	bls.w	8001828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40013c00 	.word	0x40013c00

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	619a      	str	r2, [r3, #24]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b58:	887a      	ldrh	r2, [r7, #2]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	041a      	lsls	r2, r3, #16
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	400b      	ands	r3, r1
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	619a      	str	r2, [r3, #24]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e12b      	b.n	8001de6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fa48 	bl	8001038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2224      	movs	r2, #36	@ 0x24
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be0:	f003 fb52 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 8001be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a81      	ldr	r2, [pc, #516]	@ (8001df0 <HAL_I2C_Init+0x274>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d807      	bhi.n	8001c00 <HAL_I2C_Init+0x84>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4a80      	ldr	r2, [pc, #512]	@ (8001df4 <HAL_I2C_Init+0x278>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	bf94      	ite	ls
 8001bf8:	2301      	movls	r3, #1
 8001bfa:	2300      	movhi	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e006      	b.n	8001c0e <HAL_I2C_Init+0x92>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a7d      	ldr	r2, [pc, #500]	@ (8001df8 <HAL_I2C_Init+0x27c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	bf94      	ite	ls
 8001c08:	2301      	movls	r3, #1
 8001c0a:	2300      	movhi	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0e7      	b.n	8001de6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a78      	ldr	r2, [pc, #480]	@ (8001dfc <HAL_I2C_Init+0x280>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	0c9b      	lsrs	r3, r3, #18
 8001c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a6a      	ldr	r2, [pc, #424]	@ (8001df0 <HAL_I2C_Init+0x274>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d802      	bhi.n	8001c50 <HAL_I2C_Init+0xd4>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	e009      	b.n	8001c64 <HAL_I2C_Init+0xe8>
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	4a69      	ldr	r2, [pc, #420]	@ (8001e00 <HAL_I2C_Init+0x284>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	099b      	lsrs	r3, r3, #6
 8001c62:	3301      	adds	r3, #1
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	495c      	ldr	r1, [pc, #368]	@ (8001df0 <HAL_I2C_Init+0x274>)
 8001c80:	428b      	cmp	r3, r1
 8001c82:	d819      	bhi.n	8001cb8 <HAL_I2C_Init+0x13c>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e59      	subs	r1, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c92:	1c59      	adds	r1, r3, #1
 8001c94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c98:	400b      	ands	r3, r1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_I2C_Init+0x138>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1e59      	subs	r1, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb2:	e051      	b.n	8001d58 <HAL_I2C_Init+0x1dc>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	e04f      	b.n	8001d58 <HAL_I2C_Init+0x1dc>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d111      	bne.n	8001ce4 <HAL_I2C_Init+0x168>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e58      	subs	r0, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	440b      	add	r3, r1
 8001cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	e012      	b.n	8001d0a <HAL_I2C_Init+0x18e>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e58      	subs	r0, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	0099      	lsls	r1, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_Init+0x196>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e022      	b.n	8001d58 <HAL_I2C_Init+0x1dc>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10e      	bne.n	8001d38 <HAL_I2C_Init+0x1bc>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e58      	subs	r0, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	440b      	add	r3, r1
 8001d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d36:	e00f      	b.n	8001d58 <HAL_I2C_Init+0x1dc>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	0099      	lsls	r1, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	6809      	ldr	r1, [r1, #0]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6911      	ldr	r1, [r2, #16]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68d2      	ldr	r2, [r2, #12]
 8001d92:	4311      	orrs	r1, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	000186a0 	.word	0x000186a0
 8001df4:	001e847f 	.word	0x001e847f
 8001df8:	003d08ff 	.word	0x003d08ff
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	10624dd3 	.word	0x10624dd3

08001e04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	461a      	mov	r2, r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	817b      	strh	r3, [r7, #10]
 8001e16:	460b      	mov	r3, r1
 8001e18:	813b      	strh	r3, [r7, #8]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e1e:	f7ff fbe3 	bl	80015e8 <HAL_GetTick>
 8001e22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	f040 80d9 	bne.w	8001fe4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2319      	movs	r3, #25
 8001e38:	2201      	movs	r2, #1
 8001e3a:	496d      	ldr	r1, [pc, #436]	@ (8001ff0 <HAL_I2C_Mem_Write+0x1ec>)
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fc8b 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e0cc      	b.n	8001fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_I2C_Mem_Write+0x56>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0c5      	b.n	8001fe6 <HAL_I2C_Mem_Write+0x1e2>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d007      	beq.n	8001e80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2221      	movs	r2, #33	@ 0x21
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2240      	movs	r2, #64	@ 0x40
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff4 <HAL_I2C_Mem_Write+0x1f0>)
 8001ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ec2:	88f8      	ldrh	r0, [r7, #6]
 8001ec4:	893a      	ldrh	r2, [r7, #8]
 8001ec6:	8979      	ldrh	r1, [r7, #10]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fac2 	bl	800245c <I2C_RequestMemoryWrite>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d052      	beq.n	8001f84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e081      	b.n	8001fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fd50 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00d      	beq.n	8001f0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d107      	bne.n	8001f0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06b      	b.n	8001fe6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11b      	bne.n	8001f84 <HAL_I2C_Mem_Write+0x180>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d017      	beq.n	8001f84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1aa      	bne.n	8001ee2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fd43 	bl	8002a1c <I2C_WaitOnBTFFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d107      	bne.n	8001fb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e016      	b.n	8001fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
  }
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	00100002 	.word	0x00100002
 8001ff4:	ffff0000 	.word	0xffff0000

08001ff8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	@ 0x30
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4603      	mov	r3, r0
 8002008:	817b      	strh	r3, [r7, #10]
 800200a:	460b      	mov	r3, r1
 800200c:	813b      	strh	r3, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002012:	f7ff fae9 	bl	80015e8 <HAL_GetTick>
 8002016:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b20      	cmp	r3, #32
 8002022:	f040 8214 	bne.w	800244e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2319      	movs	r3, #25
 800202c:	2201      	movs	r2, #1
 800202e:	497b      	ldr	r1, [pc, #492]	@ (800221c <HAL_I2C_Mem_Read+0x224>)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fb91 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
 800203e:	e207      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_I2C_Mem_Read+0x56>
 800204a:	2302      	movs	r3, #2
 800204c:	e200      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d007      	beq.n	8002074 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002082:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2222      	movs	r2, #34	@ 0x22
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2240      	movs	r2, #64	@ 0x40
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800209e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80020a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002220 <HAL_I2C_Mem_Read+0x228>)
 80020b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020b6:	88f8      	ldrh	r0, [r7, #6]
 80020b8:	893a      	ldrh	r2, [r7, #8]
 80020ba:	8979      	ldrh	r1, [r7, #10]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	4603      	mov	r3, r0
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 fa5e 	bl	8002588 <I2C_RequestMemoryRead>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e1bc      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d113      	bne.n	8002106 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	623b      	str	r3, [r7, #32]
 80020f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e190      	b.n	8002428 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210a:	2b01      	cmp	r3, #1
 800210c:	d11b      	bne.n	8002146 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800211c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e170      	b.n	8002428 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214a:	2b02      	cmp	r3, #2
 800214c:	d11b      	bne.n	8002186 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800215c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800216c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	e150      	b.n	8002428 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800219c:	e144      	b.n	8002428 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	f200 80f1 	bhi.w	800238a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d123      	bne.n	80021f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fc79 	bl	8002aac <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e145      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021f6:	e117      	b.n	8002428 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d14e      	bne.n	800229e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002206:	2200      	movs	r2, #0
 8002208:	4906      	ldr	r1, [pc, #24]	@ (8002224 <HAL_I2C_Mem_Read+0x22c>)
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 faa4 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e11a      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
 800221a:	bf00      	nop
 800221c:	00100002 	.word	0x00100002
 8002220:	ffff0000 	.word	0xffff0000
 8002224:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800229c:	e0c4      	b.n	8002428 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a4:	2200      	movs	r2, #0
 80022a6:	496c      	ldr	r1, [pc, #432]	@ (8002458 <HAL_I2C_Mem_Read+0x460>)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fa55 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0cb      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002300:	2200      	movs	r2, #0
 8002302:	4955      	ldr	r1, [pc, #340]	@ (8002458 <HAL_I2C_Mem_Read+0x460>)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fa27 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e09d      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002388:	e04e      	b.n	8002428 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800238c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fb8c 	bl	8002aac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e058      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d124      	bne.n	8002428 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d107      	bne.n	80023f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f aeb6 	bne.w	800219e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3728      	adds	r7, #40	@ 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	00010004 	.word	0x00010004

0800245c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4603      	mov	r3, r0
 800246c:	817b      	strh	r3, [r7, #10]
 800246e:	460b      	mov	r3, r1
 8002470:	813b      	strh	r3, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	2200      	movs	r2, #0
 800248e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f960 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00d      	beq.n	80024ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ac:	d103      	bne.n	80024b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e05f      	b.n	800257a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	492d      	ldr	r1, [pc, #180]	@ (8002584 <I2C_RequestMemoryWrite+0x128>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f9bb 	bl	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e04c      	b.n	800257a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	6a39      	ldr	r1, [r7, #32]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fa46 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00d      	beq.n	8002522 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	2b04      	cmp	r3, #4
 800250c:	d107      	bne.n	800251e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e02b      	b.n	800257a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002528:	893b      	ldrh	r3, [r7, #8]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	e021      	b.n	8002578 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002534:	893b      	ldrh	r3, [r7, #8]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	b29b      	uxth	r3, r3
 800253a:	b2da      	uxtb	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002544:	6a39      	ldr	r1, [r7, #32]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fa20 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b04      	cmp	r3, #4
 8002558:	d107      	bne.n	800256a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e005      	b.n	800257a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800256e:	893b      	ldrh	r3, [r7, #8]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	00010002 	.word	0x00010002

08002588 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8c2 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e8:	d103      	bne.n	80025f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0aa      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	4952      	ldr	r1, [pc, #328]	@ (8002754 <I2C_RequestMemoryRead+0x1cc>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f91d 	bl	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e097      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f9a8 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b04      	cmp	r3, #4
 8002648:	d107      	bne.n	800265a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e076      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002664:	893b      	ldrh	r3, [r7, #8]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e021      	b.n	80026b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002670:	893b      	ldrh	r3, [r7, #8]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f982 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e050      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026aa:	893b      	ldrh	r3, [r7, #8]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b6:	6a39      	ldr	r1, [r7, #32]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f967 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d107      	bne.n	80026dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e035      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f82b 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002716:	d103      	bne.n	8002720 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e013      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	4906      	ldr	r1, [pc, #24]	@ (8002754 <I2C_RequestMemoryRead+0x1cc>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f886 	bl	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	e048      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d044      	beq.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7fe ff39 	bl	80015e8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d139      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10d      	bne.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	43da      	mvns	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	e00c      	b.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d116      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e023      	b.n	8002844 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10d      	bne.n	8002822 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	43da      	mvns	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4013      	ands	r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	e00c      	b.n	800283c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	429a      	cmp	r2, r3
 8002840:	d093      	beq.n	800276a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285a:	e071      	b.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286a:	d123      	bne.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e067      	b.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d041      	beq.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028bc:	f7fe fe94 	bl	80015e8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d302      	bcc.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d136      	bne.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10c      	bne.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e00b      	b.n	800290e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e021      	b.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10c      	bne.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	43da      	mvns	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e00b      	b.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4013      	ands	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf14      	ite	ne
 8002976:	2301      	movne	r3, #1
 8002978:	2300      	moveq	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f af6d 	bne.w	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002998:	e034      	b.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f8e3 	bl	8002b66 <I2C_IsAcknowledgeFailed>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e034      	b.n	8002a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d028      	beq.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7fe fe19 	bl	80015e8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11d      	bne.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b80      	cmp	r3, #128	@ 0x80
 80029d4:	d016      	beq.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e007      	b.n	8002a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0e:	2b80      	cmp	r3, #128	@ 0x80
 8002a10:	d1c3      	bne.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a28:	e034      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f89b 	bl	8002b66 <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e034      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d028      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fdd1 	bl	80015e8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d016      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e007      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d1c3      	bne.n	8002a2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ab8:	e049      	b.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d119      	bne.n	8002afc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0210 	mvn.w	r2, #16
 8002ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e030      	b.n	8002b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afc:	f7fe fd74 	bl	80015e8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d302      	bcc.n	8002b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11d      	bne.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d016      	beq.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f043 0220 	orr.w	r2, r3, #32
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e007      	b.n	8002b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b58:	2b40      	cmp	r3, #64	@ 0x40
 8002b5a:	d1ae      	bne.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7c:	d11b      	bne.n	8002bb6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e128      	b.n	8002e28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a90      	ldr	r2, [pc, #576]	@ (8002e30 <HAL_I2S_Init+0x26c>)
 8002bee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe fa69 	bl	80010c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002c0c:	f023 030f 	bic.w	r3, r3, #15
 8002c10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2202      	movs	r2, #2
 8002c18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d060      	beq.n	8002ce4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002c2a:	2310      	movs	r3, #16
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e001      	b.n	8002c34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d802      	bhi.n	8002c42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f002 fc56 	bl	80054f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c48:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c52:	d125      	bne.n	8002ca0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	461a      	mov	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	3305      	adds	r3, #5
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e01f      	b.n	8002cbe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	3305      	adds	r3, #5
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e00e      	b.n	8002cbe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	3305      	adds	r3, #5
 8002cbc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4a5c      	ldr	r2, [pc, #368]	@ (8002e34 <HAL_I2S_Init+0x270>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	08db      	lsrs	r3, r3, #3
 8002cc8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e003      	b.n	8002cec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d902      	bls.n	8002cf8 <HAL_I2S_Init+0x134>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2bff      	cmp	r3, #255	@ 0xff
 8002cf6:	d907      	bls.n	8002d08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfc:	f043 0210 	orr.w	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e08f      	b.n	8002e28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	ea42 0103 	orr.w	r1, r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002d26:	f023 030f 	bic.w	r3, r3, #15
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6851      	ldr	r1, [r2, #4]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6892      	ldr	r2, [r2, #8]
 8002d32:	4311      	orrs	r1, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68d2      	ldr	r2, [r2, #12]
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6992      	ldr	r2, [r2, #24]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d161      	bne.n	8002e18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a38      	ldr	r2, [pc, #224]	@ (8002e38 <HAL_I2S_Init+0x274>)
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a37      	ldr	r2, [pc, #220]	@ (8002e3c <HAL_I2S_Init+0x278>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d101      	bne.n	8002d68 <HAL_I2S_Init+0x1a4>
 8002d64:	4b36      	ldr	r3, [pc, #216]	@ (8002e40 <HAL_I2S_Init+0x27c>)
 8002d66:	e001      	b.n	8002d6c <HAL_I2S_Init+0x1a8>
 8002d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	4932      	ldr	r1, [pc, #200]	@ (8002e3c <HAL_I2S_Init+0x278>)
 8002d74:	428a      	cmp	r2, r1
 8002d76:	d101      	bne.n	8002d7c <HAL_I2S_Init+0x1b8>
 8002d78:	4a31      	ldr	r2, [pc, #196]	@ (8002e40 <HAL_I2S_Init+0x27c>)
 8002d7a:	e001      	b.n	8002d80 <HAL_I2S_Init+0x1bc>
 8002d7c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002d80:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002d84:	f023 030f 	bic.w	r3, r3, #15
 8002d88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e3c <HAL_I2S_Init+0x278>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_I2S_Init+0x1d4>
 8002d94:	4b2a      	ldr	r3, [pc, #168]	@ (8002e40 <HAL_I2S_Init+0x27c>)
 8002d96:	e001      	b.n	8002d9c <HAL_I2S_Init+0x1d8>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a25      	ldr	r2, [pc, #148]	@ (8002e3c <HAL_I2S_Init+0x278>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_I2S_Init+0x1ea>
 8002daa:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <HAL_I2S_Init+0x27c>)
 8002dac:	e001      	b.n	8002db2 <HAL_I2S_Init+0x1ee>
 8002dae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dbe:	d003      	beq.n	8002dc8 <HAL_I2S_Init+0x204>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	e001      	b.n	8002dd4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	897b      	ldrh	r3, [r7, #10]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a0d      	ldr	r2, [pc, #52]	@ (8002e3c <HAL_I2S_Init+0x278>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_I2S_Init+0x24c>
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <HAL_I2S_Init+0x27c>)
 8002e0e:	e001      	b.n	8002e14 <HAL_I2S_Init+0x250>
 8002e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e14:	897a      	ldrh	r2, [r7, #10]
 8002e16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	08002f3b 	.word	0x08002f3b
 8002e34:	cccccccd 	.word	0xcccccccd
 8002e38:	08003051 	.word	0x08003051
 8002e3c:	40003800 	.word	0x40003800
 8002e40:	40003400 	.word	0x40003400

08002e44 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	1c9a      	adds	r2, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10e      	bne.n	8002ed4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ec4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ffb8 	bl	8002e44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	1c9a      	adds	r2, r3, #2
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10e      	bne.n	8002f32 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f22:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff93 	bl	8002e58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d13a      	bne.n	8002fcc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d109      	bne.n	8002f74 <I2S_IRQHandler+0x3a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6a:	2b40      	cmp	r3, #64	@ 0x40
 8002f6c:	d102      	bne.n	8002f74 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffb4 	bl	8002edc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7a:	2b40      	cmp	r3, #64	@ 0x40
 8002f7c:	d126      	bne.n	8002fcc <I2S_IRQHandler+0x92>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d11f      	bne.n	8002fcc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	f043 0202 	orr.w	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ff50 	bl	8002e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d136      	bne.n	8003046 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d109      	bne.n	8002ff6 <I2S_IRQHandler+0xbc>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fec:	2b80      	cmp	r3, #128	@ 0x80
 8002fee:	d102      	bne.n	8002ff6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff45 	bl	8002e80 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d122      	bne.n	8003046 <I2S_IRQHandler+0x10c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b20      	cmp	r3, #32
 800300c:	d11b      	bne.n	8003046 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800301c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	f043 0204 	orr.w	r2, r3, #4
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff13 	bl	8002e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a92      	ldr	r2, [pc, #584]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800306a:	4b92      	ldr	r3, [pc, #584]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800306c:	e001      	b.n	8003072 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800306e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a8b      	ldr	r2, [pc, #556]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003088:	4b8a      	ldr	r3, [pc, #552]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800308a:	e001      	b.n	8003090 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800308c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800309c:	d004      	beq.n	80030a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 8099 	bne.w	80031da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d107      	bne.n	80030c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f925 	bl	800330c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f9c8 	bl	800346c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b40      	cmp	r3, #64	@ 0x40
 80030e4:	d13a      	bne.n	800315c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d035      	beq.n	800315c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6e      	ldr	r2, [pc, #440]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80030fa:	4b6e      	ldr	r3, [pc, #440]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030fc:	e001      	b.n	8003102 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80030fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4969      	ldr	r1, [pc, #420]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800310a:	428b      	cmp	r3, r1
 800310c:	d101      	bne.n	8003112 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800310e:	4b69      	ldr	r3, [pc, #420]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003110:	e001      	b.n	8003116 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003116:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800311a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800312a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fe88 	bl	8002e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b08      	cmp	r3, #8
 8003164:	f040 80c3 	bne.w	80032ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80bd 	beq.w	80032ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003182:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a49      	ldr	r2, [pc, #292]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800318e:	4b49      	ldr	r3, [pc, #292]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003190:	e001      	b.n	8003196 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003192:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4944      	ldr	r1, [pc, #272]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800319e:	428b      	cmp	r3, r1
 80031a0:	d101      	bne.n	80031a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80031a2:	4b44      	ldr	r3, [pc, #272]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031a4:	e001      	b.n	80031aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80031a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fe4a 	bl	8002e6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031d8:	e089      	b.n	80032ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d107      	bne.n	80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8be 	bl	8003370 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f8fd 	bl	8003408 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003214:	2b40      	cmp	r3, #64	@ 0x40
 8003216:	d12f      	bne.n	8003278 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02a      	beq.n	8003278 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003230:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1e      	ldr	r2, [pc, #120]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800323c:	4b1d      	ldr	r3, [pc, #116]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800323e:	e001      	b.n	8003244 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4919      	ldr	r1, [pc, #100]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800324c:	428b      	cmp	r3, r1
 800324e:	d101      	bne.n	8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003250:	4b18      	ldr	r3, [pc, #96]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003252:	e001      	b.n	8003258 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003258:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800325c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff fdfa 	bl	8002e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b08      	cmp	r3, #8
 8003280:	d136      	bne.n	80032f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d031      	beq.n	80032f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a07      	ldr	r2, [pc, #28]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003296:	4b07      	ldr	r3, [pc, #28]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003298:	e001      	b.n	800329e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800329a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4902      	ldr	r1, [pc, #8]	@ (80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032a6:	428b      	cmp	r3, r1
 80032a8:	d106      	bne.n	80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80032aa:	4b02      	ldr	r3, [pc, #8]	@ (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032ac:	e006      	b.n	80032bc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80032ae:	bf00      	nop
 80032b0:	40003800 	.word	0x40003800
 80032b4:	40003400 	.word	0x40003400
 80032b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80032c0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff fdc0 	bl	8002e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032ec:	e000      	b.n	80032f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032ee:	bf00      	nop
}
 80032f0:	bf00      	nop
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	1c99      	adds	r1, r3, #2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6251      	str	r1, [r2, #36]	@ 0x24
 800331e:	881a      	ldrh	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d113      	bne.n	8003366 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800334c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ffc9 	bl	80032f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	1c99      	adds	r1, r3, #2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6251      	str	r1, [r2, #36]	@ 0x24
 8003382:	8819      	ldrh	r1, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <I2SEx_TxISR_I2SExt+0x90>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <I2SEx_TxISR_I2SExt+0x22>
 800338e:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <I2SEx_TxISR_I2SExt+0x94>)
 8003390:	e001      	b.n	8003396 <I2SEx_TxISR_I2SExt+0x26>
 8003392:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003396:	460a      	mov	r2, r1
 8003398:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d121      	bne.n	80033f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <I2SEx_TxISR_I2SExt+0x90>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <I2SEx_TxISR_I2SExt+0x50>
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <I2SEx_TxISR_I2SExt+0x94>)
 80033be:	e001      	b.n	80033c4 <I2SEx_TxISR_I2SExt+0x54>
 80033c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	490d      	ldr	r1, [pc, #52]	@ (8003400 <I2SEx_TxISR_I2SExt+0x90>)
 80033cc:	428b      	cmp	r3, r1
 80033ce:	d101      	bne.n	80033d4 <I2SEx_TxISR_I2SExt+0x64>
 80033d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <I2SEx_TxISR_I2SExt+0x94>)
 80033d2:	e001      	b.n	80033d8 <I2SEx_TxISR_I2SExt+0x68>
 80033d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff81 	bl	80032f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40003800 	.word	0x40003800
 8003404:	40003400 	.word	0x40003400

08003408 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68d8      	ldr	r0, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341a:	1c99      	adds	r1, r3, #2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003420:	b282      	uxth	r2, r0
 8003422:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d113      	bne.n	8003464 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800344a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ff4a 	bl	80032f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a20      	ldr	r2, [pc, #128]	@ (80034fc <I2SEx_RxISR_I2SExt+0x90>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <I2SEx_RxISR_I2SExt+0x16>
 800347e:	4b20      	ldr	r3, [pc, #128]	@ (8003500 <I2SEx_RxISR_I2SExt+0x94>)
 8003480:	e001      	b.n	8003486 <I2SEx_RxISR_I2SExt+0x1a>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003486:	68d8      	ldr	r0, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	1c99      	adds	r1, r3, #2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003492:	b282      	uxth	r2, r0
 8003494:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d121      	bne.n	80034f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a12      	ldr	r2, [pc, #72]	@ (80034fc <I2SEx_RxISR_I2SExt+0x90>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <I2SEx_RxISR_I2SExt+0x50>
 80034b8:	4b11      	ldr	r3, [pc, #68]	@ (8003500 <I2SEx_RxISR_I2SExt+0x94>)
 80034ba:	e001      	b.n	80034c0 <I2SEx_RxISR_I2SExt+0x54>
 80034bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	490d      	ldr	r1, [pc, #52]	@ (80034fc <I2SEx_RxISR_I2SExt+0x90>)
 80034c8:	428b      	cmp	r3, r1
 80034ca:	d101      	bne.n	80034d0 <I2SEx_RxISR_I2SExt+0x64>
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <I2SEx_RxISR_I2SExt+0x94>)
 80034ce:	e001      	b.n	80034d4 <I2SEx_RxISR_I2SExt+0x68>
 80034d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff03 	bl	80032f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40003800 	.word	0x40003800
 8003500:	40003400 	.word	0x40003400

08003504 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af02      	add	r7, sp, #8
 800350a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e101      	b.n	800371a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f009 ffe3 	bl	800d4fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003544:	d102      	bne.n	800354c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f003 ff2c 	bl	80073ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7c1a      	ldrb	r2, [r3, #16]
 800355e:	f88d 2000 	strb.w	r2, [sp]
 8003562:	3304      	adds	r3, #4
 8003564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003566:	f003 fe0b 	bl	8007180 <USB_CoreInit>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0ce      	b.n	800371a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f003 ff24 	bl	80073d0 <USB_SetCurrentMode>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0bf      	b.n	800371a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e04a      	b.n	8003636 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3315      	adds	r3, #21
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	3314      	adds	r3, #20
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	b298      	uxth	r0, r3
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	332e      	adds	r3, #46	@ 0x2e
 80035dc:	4602      	mov	r2, r0
 80035de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3318      	adds	r3, #24
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	331c      	adds	r3, #28
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3320      	adds	r3, #32
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3324      	adds	r3, #36	@ 0x24
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	3301      	adds	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	791b      	ldrb	r3, [r3, #4]
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	429a      	cmp	r2, r3
 800363e:	d3af      	bcc.n	80035a0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e044      	b.n	80036d0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	3301      	adds	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	791b      	ldrb	r3, [r3, #4]
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d3b5      	bcc.n	8003646 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7c1a      	ldrb	r2, [r3, #16]
 80036e2:	f88d 2000 	strb.w	r2, [sp]
 80036e6:	3304      	adds	r3, #4
 80036e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ea:	f003 febd 	bl	8007468 <USB_DevInit>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e00c      	b.n	800371a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f004 ff07 	bl	8008526 <USB_DevDisconnect>

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_PCD_Start+0x1c>
 800373a:	2302      	movs	r3, #2
 800373c:	e022      	b.n	8003784 <HAL_PCD_Start+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fe0e 	bl	800738c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f004 feb5 	bl	80084e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b08d      	sub	sp, #52	@ 0x34
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 ff73 	bl	800868e <USB_GetMode>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 848c 	bne.w	80040c8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 fed7 	bl	8008568 <USB_ReadInterrupts>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8482 	beq.w	80040c6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 fec4 	bl	8008568 <USB_ReadInterrupts>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d107      	bne.n	80037fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f002 0202 	and.w	r2, r2, #2
 80037f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 feb2 	bl	8008568 <USB_ReadInterrupts>
 8003804:	4603      	mov	r3, r0
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b10      	cmp	r3, #16
 800380c:	d161      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0210 	bic.w	r2, r2, #16
 800381c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f003 020f 	and.w	r2, r3, #15
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	3304      	adds	r3, #4
 800383c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	0c5b      	lsrs	r3, r3, #17
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	2b02      	cmp	r3, #2
 8003848:	d124      	bne.n	8003894 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d035      	beq.n	80038c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	6a38      	ldr	r0, [r7, #32]
 800386a:	f004 fce9 	bl	8008240 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387a:	441a      	add	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388c:	441a      	add	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	615a      	str	r2, [r3, #20]
 8003892:	e016      	b.n	80038c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	0c5b      	lsrs	r3, r3, #17
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	2b06      	cmp	r3, #6
 800389e:	d110      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038a6:	2208      	movs	r2, #8
 80038a8:	4619      	mov	r1, r3
 80038aa:	6a38      	ldr	r0, [r7, #32]
 80038ac:	f004 fcc8 	bl	8008240 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038bc:	441a      	add	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0210 	orr.w	r2, r2, #16
 80038d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f004 fe46 	bl	8008568 <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038e6:	f040 80a7 	bne.w	8003a38 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fe4b 	bl	800858e <USB_ReadDevAllOutEpInterrupt>
 80038f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80038fa:	e099      	b.n	8003a30 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 808e 	beq.w	8003a24 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f004 fe6f 	bl	80085f6 <USB_ReadDevOutEPInterrupt>
 8003918:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	2301      	movs	r3, #1
 8003934:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003936:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fea3 	bl	8004684 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00c      	beq.n	8003962 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003954:	461a      	mov	r2, r3
 8003956:	2308      	movs	r3, #8
 8003958:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800395a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 ff79 	bl	8004854 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	2310      	movs	r3, #16
 800397c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d030      	beq.n	80039ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003990:	2b80      	cmp	r3, #128	@ 0x80
 8003992:	d109      	bne.n	80039a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	3304      	adds	r3, #4
 80039bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	78db      	ldrb	r3, [r3, #3]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d108      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2200      	movs	r2, #0
 80039ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f009 fe9c 	bl	800d710 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e4:	461a      	mov	r2, r3
 80039e6:	2302      	movs	r3, #2
 80039e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a00:	461a      	mov	r2, r3
 8003a02:	2320      	movs	r3, #32
 8003a04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a22:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	3301      	adds	r3, #1
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f47f af62 	bne.w	80038fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f004 fd93 	bl	8008568 <USB_ReadInterrupts>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a4c:	f040 80db 	bne.w	8003c06 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f004 fdb4 	bl	80085c2 <USB_ReadDevAllInEpInterrupt>
 8003a5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a60:	e0cd      	b.n	8003bfe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80c2 	beq.w	8003bf2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f004 fdda 	bl	8008632 <USB_ReadDevInEPInterrupt>
 8003a7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d057      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	2201      	movs	r2, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69f9      	ldr	r1, [r7, #28]
 8003aa6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003aaa:	4013      	ands	r3, r2
 8003aac:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aba:	461a      	mov	r2, r3
 8003abc:	2301      	movs	r3, #1
 8003abe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	799b      	ldrb	r3, [r3, #6]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d132      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3320      	adds	r3, #32
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4403      	add	r3, r0
 8003ae8:	331c      	adds	r3, #28
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4419      	add	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4403      	add	r3, r0
 8003afc:	3320      	adds	r3, #32
 8003afe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d113      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x3a2>
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	3324      	adds	r3, #36	@ 0x24
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b26:	461a      	mov	r2, r3
 8003b28:	2101      	movs	r1, #1
 8003b2a:	f004 fde1 	bl	80086f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f009 fd70 	bl	800d61a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b50:	461a      	mov	r2, r3
 8003b52:	2308      	movs	r3, #8
 8003b54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2310      	movs	r3, #16
 8003b70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2340      	movs	r3, #64	@ 0x40
 8003b8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d023      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b9a:	6a38      	ldr	r0, [r7, #32]
 8003b9c:	f003 fdc8 	bl	8007730 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3310      	adds	r3, #16
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	78db      	ldrb	r3, [r3, #3]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d108      	bne.n	8003bce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f009 fdb3 	bl	800d734 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2302      	movs	r3, #2
 8003bde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fcbd 	bl	800456c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f af2e 	bne.w	8003a62 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f004 fcac 	bl	8008568 <USB_ReadInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c1a:	d122      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d108      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c42:	2100      	movs	r1, #0
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fea3 	bl	8004990 <HAL_PCDEx_LPM_Callback>
 8003c4a:	e002      	b.n	8003c52 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f009 fd51 	bl	800d6f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f004 fc7e 	bl	8008568 <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c76:	d112      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d102      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f009 fd0d 	bl	800d6a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c9c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 fc60 	bl	8008568 <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb2:	f040 80b7 	bne.w	8003e24 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2110      	movs	r1, #16
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f003 fd2d 	bl	8007730 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cda:	e046      	b.n	8003d6a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d22:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d62:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d66:	3301      	adds	r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	791b      	ldrb	r3, [r3, #4]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d3b2      	bcc.n	8003cdc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d84:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7bdb      	ldrb	r3, [r3, #15]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003da2:	f043 030b 	orr.w	r3, r3, #11
 8003da6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003db8:	f043 030b 	orr.w	r3, r3, #11
 8003dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dbe:	e015      	b.n	8003dec <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dd2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003dd6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de6:	f043 030b 	orr.w	r3, r3, #11
 8003dea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dfa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003dfe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f004 fc6e 	bl	80086f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f004 fb9d 	bl	8008568 <USB_ReadInterrupts>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e38:	d123      	bne.n	8003e82 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f004 fc33 	bl	80086aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f003 fcea 	bl	8007822 <USB_GetDevSpeed>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681c      	ldr	r4, [r3, #0]
 8003e5a:	f001 fa09 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 8003e5e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e64:	461a      	mov	r2, r3
 8003e66:	4620      	mov	r0, r4
 8003e68:	f003 f9ee 	bl	8007248 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f009 fbfc 	bl	800d66a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f004 fb6e 	bl	8008568 <USB_ReadInterrupts>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d10a      	bne.n	8003eac <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f009 fbd9 	bl	800d64e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f002 0208 	and.w	r2, r2, #8
 8003eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 fb59 	bl	8008568 <USB_ReadInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebc:	2b80      	cmp	r3, #128	@ 0x80
 8003ebe:	d123      	bne.n	8003f08 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ecc:	2301      	movs	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed0:	e014      	b.n	8003efc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fb0a 	bl	800450a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	791b      	ldrb	r3, [r3, #4]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d3e4      	bcc.n	8003ed2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f004 fb2b 	bl	8008568 <USB_ReadInterrupts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f1c:	d13c      	bne.n	8003f98 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f1e:	2301      	movs	r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f22:	e02b      	b.n	8003f7c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	3318      	adds	r3, #24
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d115      	bne.n	8003f76 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da12      	bge.n	8003f76 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3317      	adds	r3, #23
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 faca 	bl	800450a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	3301      	adds	r3, #1
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	791b      	ldrb	r3, [r3, #4]
 8003f80:	461a      	mov	r2, r3
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d3cd      	bcc.n	8003f24 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f004 fae3 	bl	8008568 <USB_ReadInterrupts>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fac:	d156      	bne.n	800405c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fae:	2301      	movs	r3, #1
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb2:	e045      	b.n	8004040 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d12e      	bne.n	800403a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da2b      	bge.n	800403a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003fee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d121      	bne.n	800403a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004036:	6053      	str	r3, [r2, #4]
            break;
 8004038:	e008      	b.n	800404c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	3301      	adds	r3, #1
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	791b      	ldrb	r3, [r3, #4]
 8004044:	461a      	mov	r2, r3
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	4293      	cmp	r3, r2
 800404a:	d3b3      	bcc.n	8003fb4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800405a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f004 fa81 	bl	8008568 <USB_ReadInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004070:	d10a      	bne.n	8004088 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f009 fb70 	bl	800d758 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004086:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f004 fa6b 	bl	8008568 <USB_ReadInterrupts>
 8004092:	4603      	mov	r3, r0
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d115      	bne.n	80040c8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f009 fb60 	bl	800d774 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]
 80040c4:	e000      	b.n	80040c8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80040c6:	bf00      	nop
    }
  }
}
 80040c8:	3734      	adds	r7, #52	@ 0x34
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd90      	pop	{r4, r7, pc}

080040ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_PCD_SetAddress+0x1a>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e012      	b.n	800410e <HAL_PCD_SetAddress+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f004 f9ca 	bl	8008498 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	4608      	mov	r0, r1
 8004120:	4611      	mov	r1, r2
 8004122:	461a      	mov	r2, r3
 8004124:	4603      	mov	r3, r0
 8004126:	70fb      	strb	r3, [r7, #3]
 8004128:	460b      	mov	r3, r1
 800412a:	803b      	strh	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da0f      	bge.n	800415c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	3310      	adds	r3, #16
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4413      	add	r3, r2
 8004150:	3304      	adds	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	705a      	strb	r2, [r3, #1]
 800415a:	e00f      	b.n	800417c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 020f 	and.w	r2, r3, #15
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	3304      	adds	r3, #4
 8004174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	b2da      	uxtb	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004188:	883b      	ldrh	r3, [r7, #0]
 800418a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	78ba      	ldrb	r2, [r7, #2]
 8004196:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d004      	beq.n	80041aa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041aa:	78bb      	ldrb	r3, [r7, #2]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d102      	bne.n	80041b6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_PCD_EP_Open+0xae>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e00e      	b.n	80041e2 <HAL_PCD_EP_Open+0xcc>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f003 fb4a 	bl	800786c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80041e0:	7afb      	ldrb	r3, [r7, #11]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	da0f      	bge.n	800421e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 020f 	and.w	r2, r3, #15
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	3310      	adds	r3, #16
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	3304      	adds	r3, #4
 8004214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	705a      	strb	r2, [r3, #1]
 800421c:	e00f      	b.n	800423e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	3304      	adds	r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_PCD_EP_Close+0x6e>
 8004254:	2302      	movs	r3, #2
 8004256:	e00e      	b.n	8004276 <HAL_PCD_EP_Close+0x8c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68f9      	ldr	r1, [r7, #12]
 8004266:	4618      	mov	r0, r3
 8004268:	f003 fb88 	bl	800797c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	460b      	mov	r3, r1
 800428c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428e:	7afb      	ldrb	r3, [r7, #11]
 8004290:	f003 020f 	and.w	r2, r3, #15
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	3304      	adds	r3, #4
 80042a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2200      	movs	r2, #0
 80042b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c0:	7afb      	ldrb	r3, [r7, #11]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	799b      	ldrb	r3, [r3, #6]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	799b      	ldrb	r3, [r3, #6]
 80042e2:	461a      	mov	r2, r3
 80042e4:	6979      	ldr	r1, [r7, #20]
 80042e6:	f003 fc25 	bl	8007b34 <USB_EPStartXfer>

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	f003 020f 	and.w	r2, r3, #15
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	460b      	mov	r3, r1
 8004332:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004334:	7afb      	ldrb	r3, [r7, #11]
 8004336:	f003 020f 	and.w	r2, r3, #15
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	3310      	adds	r3, #16
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	3304      	adds	r3, #4
 800434a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2201      	movs	r2, #1
 8004362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	b2da      	uxtb	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	799b      	ldrb	r3, [r3, #6]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	799b      	ldrb	r3, [r3, #6]
 8004386:	461a      	mov	r2, r3
 8004388:	6979      	ldr	r1, [r7, #20]
 800438a:	f003 fbd3 	bl	8007b34 <USB_EPStartXfer>

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	7912      	ldrb	r2, [r2, #4]
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e04f      	b.n	8004456 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da0f      	bge.n	80043de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	f003 020f 	and.w	r2, r3, #15
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	3310      	adds	r3, #16
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	3304      	adds	r3, #4
 80043d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	705a      	strb	r2, [r3, #1]
 80043dc:	e00d      	b.n	80043fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	b2da      	uxtb	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_PCD_EP_SetStall+0x82>
 8004416:	2302      	movs	r3, #2
 8004418:	e01d      	b.n	8004456 <HAL_PCD_EP_SetStall+0xbe>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68f9      	ldr	r1, [r7, #12]
 8004428:	4618      	mov	r0, r3
 800442a:	f003 ff61 	bl	80082f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7999      	ldrb	r1, [r3, #6]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004446:	461a      	mov	r2, r3
 8004448:	f004 f952 	bl	80086f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	460b      	mov	r3, r1
 8004468:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	7912      	ldrb	r2, [r2, #4]
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e042      	b.n	8004502 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800447c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004480:	2b00      	cmp	r3, #0
 8004482:	da0f      	bge.n	80044a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	f003 020f 	and.w	r2, r3, #15
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	3310      	adds	r3, #16
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	3304      	adds	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	705a      	strb	r2, [r3, #1]
 80044a2:	e00f      	b.n	80044c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	f003 020f 	and.w	r2, r3, #15
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	4413      	add	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_PCD_EP_ClrStall+0x86>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e00e      	b.n	8004502 <HAL_PCD_EP_ClrStall+0xa4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 ff6a 	bl	80083cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800451a:	2b00      	cmp	r3, #0
 800451c:	da0c      	bge.n	8004538 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	3310      	adds	r3, #16
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	3304      	adds	r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e00c      	b.n	8004552 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	f003 020f 	and.w	r2, r3, #15
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	3304      	adds	r3, #4
 8004550:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	4618      	mov	r0, r3
 800455a:	f003 fd89 	bl	8008070 <USB_EPStopXfer>
 800455e:	4603      	mov	r3, r0
 8004560:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004562:	7afb      	ldrb	r3, [r7, #11]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	@ 0x28
 8004570:	af02      	add	r7, sp, #8
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	3310      	adds	r3, #16
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	3304      	adds	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	429a      	cmp	r2, r3
 800459e:	d901      	bls.n	80045a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e06b      	b.n	800467c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d902      	bls.n	80045c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	3303      	adds	r3, #3
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045c8:	e02a      	b.n	8004620 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d902      	bls.n	80045e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3303      	adds	r3, #3
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68d9      	ldr	r1, [r3, #12]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	4603      	mov	r3, r0
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f003 fdde 	bl	80081c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	441a      	add	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	429a      	cmp	r2, r3
 8004634:	d809      	bhi.n	800464a <PCD_WriteEmptyTxFifo+0xde>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800463e:	429a      	cmp	r2, r3
 8004640:	d203      	bcs.n	800464a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1bf      	bne.n	80045ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	429a      	cmp	r2, r3
 8004654:	d811      	bhi.n	800467a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	2201      	movs	r2, #1
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800466a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	43db      	mvns	r3, r3
 8004670:	6939      	ldr	r1, [r7, #16]
 8004672:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004676:	4013      	ands	r3, r2
 8004678:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	333c      	adds	r3, #60	@ 0x3c
 800469c:	3304      	adds	r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	799b      	ldrb	r3, [r3, #6]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d17b      	bne.n	80047b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4a61      	ldr	r2, [pc, #388]	@ (800484c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f240 80b9 	bls.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80b3 	beq.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ec:	6093      	str	r3, [r2, #8]
 80046ee:	e0a7      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	2320      	movs	r3, #32
 800470a:	6093      	str	r3, [r2, #8]
 800470c:	e098      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 8093 	bne.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4a4b      	ldr	r2, [pc, #300]	@ (800484c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d90f      	bls.n	8004742 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004738:	461a      	mov	r2, r3
 800473a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800473e:	6093      	str	r3, [r2, #8]
 8004740:	e07e      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	3304      	adds	r3, #4
 8004756:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	0159      	lsls	r1, r3, #5
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	440b      	add	r3, r1
 8004764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d114      	bne.n	80047a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800478c:	461a      	mov	r2, r3
 800478e:	2101      	movs	r1, #1
 8004790:	f003 ffae 	bl	80086f0 <USB_EP0_OutStart>
 8004794:	e006      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	441a      	add	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f008 ff1a 	bl	800d5e4 <HAL_PCD_DataOutStageCallback>
 80047b0:	e046      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4a26      	ldr	r2, [pc, #152]	@ (8004850 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d124      	bne.n	8004804 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d0:	461a      	mov	r2, r3
 80047d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d6:	6093      	str	r3, [r2, #8]
 80047d8:	e032      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f0:	461a      	mov	r2, r3
 80047f2:	2320      	movs	r3, #32
 80047f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f008 fef1 	bl	800d5e4 <HAL_PCD_DataOutStageCallback>
 8004802:	e01d      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d114      	bne.n	8004834 <PCD_EP_OutXfrComplete_int+0x1b0>
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800482c:	461a      	mov	r2, r3
 800482e:	2100      	movs	r1, #0
 8004830:	f003 ff5e 	bl	80086f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f008 fed2 	bl	800d5e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	4f54300a 	.word	0x4f54300a
 8004850:	4f54310a 	.word	0x4f54310a

08004854 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	333c      	adds	r3, #60	@ 0x3c
 800486c:	3304      	adds	r3, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a15      	ldr	r2, [pc, #84]	@ (80048dc <PCD_EP_OutSetupPacket_int+0x88>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d90e      	bls.n	80048a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a0:	461a      	mov	r2, r3
 80048a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f008 fe89 	bl	800d5c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a0a      	ldr	r2, [pc, #40]	@ (80048dc <PCD_EP_OutSetupPacket_int+0x88>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d90c      	bls.n	80048d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	799b      	ldrb	r3, [r3, #6]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048c8:	461a      	mov	r2, r3
 80048ca:	2101      	movs	r1, #1
 80048cc:	f003 ff10 	bl	80086f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	4f54300a 	.word	0x4f54300a

080048e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
 80048ec:	4613      	mov	r3, r2
 80048ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d107      	bne.n	800490e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048fe:	883b      	ldrh	r3, [r7, #0]
 8004900:	0419      	lsls	r1, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	430a      	orrs	r2, r1
 800490a:	629a      	str	r2, [r3, #40]	@ 0x28
 800490c:	e028      	b.n	8004960 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4413      	add	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]
 8004920:	e00d      	b.n	800493e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	3340      	adds	r3, #64	@ 0x40
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	3301      	adds	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	3b01      	subs	r3, #1
 8004944:	429a      	cmp	r2, r3
 8004946:	d3ec      	bcc.n	8004922 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004948:	883b      	ldrh	r3, [r7, #0]
 800494a:	0418      	lsls	r0, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	3b01      	subs	r3, #1
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	4302      	orrs	r2, r0
 8004958:	3340      	adds	r3, #64	@ 0x40
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	887a      	ldrh	r2, [r7, #2]
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e267      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d075      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049c6:	4b88      	ldr	r3, [pc, #544]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d00c      	beq.n	80049ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d2:	4b85      	ldr	r3, [pc, #532]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d112      	bne.n	8004a04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049de:	4b82      	ldr	r3, [pc, #520]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ea:	d10b      	bne.n	8004a04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	4b7e      	ldr	r3, [pc, #504]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d05b      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x108>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d157      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e242      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0c:	d106      	bne.n	8004a1c <HAL_RCC_OscConfig+0x74>
 8004a0e:	4b76      	ldr	r3, [pc, #472]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a75      	ldr	r2, [pc, #468]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e01d      	b.n	8004a58 <HAL_RCC_OscConfig+0xb0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x98>
 8004a26:	4b70      	ldr	r3, [pc, #448]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6f      	ldr	r2, [pc, #444]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	4b6d      	ldr	r3, [pc, #436]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a6c      	ldr	r2, [pc, #432]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e00b      	b.n	8004a58 <HAL_RCC_OscConfig+0xb0>
 8004a40:	4b69      	ldr	r3, [pc, #420]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a68      	ldr	r2, [pc, #416]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	4b66      	ldr	r3, [pc, #408]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a65      	ldr	r2, [pc, #404]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d013      	beq.n	8004a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fc fdc2 	bl	80015e8 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a68:	f7fc fdbe 	bl	80015e8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	@ 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e207      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0xc0>
 8004a86:	e014      	b.n	8004ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fc fdae 	bl	80015e8 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fc fdaa 	bl	80015e8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	@ 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e1f3      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa2:	4b51      	ldr	r3, [pc, #324]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0xe8>
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d063      	beq.n	8004b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004abe:	4b4a      	ldr	r3, [pc, #296]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aca:	4b47      	ldr	r3, [pc, #284]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d11c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad6:	4b44      	ldr	r3, [pc, #272]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d116      	bne.n	8004b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae2:	4b41      	ldr	r3, [pc, #260]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_RCC_OscConfig+0x152>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d001      	beq.n	8004afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e1c7      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afa:	4b3b      	ldr	r3, [pc, #236]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4937      	ldr	r1, [pc, #220]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0e:	e03a      	b.n	8004b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d020      	beq.n	8004b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b18:	4b34      	ldr	r3, [pc, #208]	@ (8004bec <HAL_RCC_OscConfig+0x244>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fc fd63 	bl	80015e8 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b26:	f7fc fd5f 	bl	80015e8 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1a8      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b38:	4b2b      	ldr	r3, [pc, #172]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b44:	4b28      	ldr	r3, [pc, #160]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4925      	ldr	r1, [pc, #148]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]
 8004b58:	e015      	b.n	8004b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5a:	4b24      	ldr	r3, [pc, #144]	@ (8004bec <HAL_RCC_OscConfig+0x244>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fc fd42 	bl	80015e8 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b68:	f7fc fd3e 	bl	80015e8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e187      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d036      	beq.n	8004c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b9a:	4b15      	ldr	r3, [pc, #84]	@ (8004bf0 <HAL_RCC_OscConfig+0x248>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fc fd22 	bl	80015e8 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba8:	f7fc fd1e 	bl	80015e8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e167      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bba:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x200>
 8004bc6:	e01b      	b.n	8004c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc8:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_RCC_OscConfig+0x248>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bce:	f7fc fd0b 	bl	80015e8 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd4:	e00e      	b.n	8004bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd6:	f7fc fd07 	bl	80015e8 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d907      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e150      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
 8004be8:	40023800 	.word	0x40023800
 8004bec:	42470000 	.word	0x42470000
 8004bf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf4:	4b88      	ldr	r3, [pc, #544]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ea      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8097 	beq.w	8004d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c12:	4b81      	ldr	r3, [pc, #516]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	4b7d      	ldr	r3, [pc, #500]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	4a7c      	ldr	r2, [pc, #496]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3e:	4b77      	ldr	r3, [pc, #476]	@ (8004e1c <HAL_RCC_OscConfig+0x474>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d118      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4a:	4b74      	ldr	r3, [pc, #464]	@ (8004e1c <HAL_RCC_OscConfig+0x474>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a73      	ldr	r2, [pc, #460]	@ (8004e1c <HAL_RCC_OscConfig+0x474>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c56:	f7fc fcc7 	bl	80015e8 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5e:	f7fc fcc3 	bl	80015e8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e10c      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c70:	4b6a      	ldr	r3, [pc, #424]	@ (8004e1c <HAL_RCC_OscConfig+0x474>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d106      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2ea>
 8004c84:	4b64      	ldr	r3, [pc, #400]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c88:	4a63      	ldr	r2, [pc, #396]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c90:	e01c      	b.n	8004ccc <HAL_RCC_OscConfig+0x324>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x30c>
 8004c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	f043 0304 	orr.w	r3, r3, #4
 8004ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	4a5b      	ldr	r2, [pc, #364]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0x324>
 8004cb4:	4b58      	ldr	r3, [pc, #352]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb8:	4a57      	ldr	r2, [pc, #348]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc0:	4b55      	ldr	r3, [pc, #340]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc4:	4a54      	ldr	r2, [pc, #336]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fc fc88 	bl	80015e8 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fc fc84 	bl	80015e8 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e0cb      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf2:	4b49      	ldr	r3, [pc, #292]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0ee      	beq.n	8004cdc <HAL_RCC_OscConfig+0x334>
 8004cfe:	e014      	b.n	8004d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d00:	f7fc fc72 	bl	80015e8 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fc fc6e 	bl	80015e8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0b5      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1ee      	bne.n	8004d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d30:	4b39      	ldr	r3, [pc, #228]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	4a38      	ldr	r2, [pc, #224]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80a1 	beq.w	8004e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d46:	4b34      	ldr	r3, [pc, #208]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d05c      	beq.n	8004e0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d141      	bne.n	8004dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	4b31      	ldr	r3, [pc, #196]	@ (8004e20 <HAL_RCC_OscConfig+0x478>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fc fc42 	bl	80015e8 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d68:	f7fc fc3e 	bl	80015e8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e087      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7a:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69da      	ldr	r2, [r3, #28]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	019b      	lsls	r3, r3, #6
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	491b      	ldr	r1, [pc, #108]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <HAL_RCC_OscConfig+0x478>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db6:	f7fc fc17 	bl	80015e8 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7fc fc13 	bl	80015e8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e05c      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd0:	4b11      	ldr	r3, [pc, #68]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0x416>
 8004ddc:	e054      	b.n	8004e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dde:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <HAL_RCC_OscConfig+0x478>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fc fc00 	bl	80015e8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fc fbfc 	bl	80015e8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e045      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x444>
 8004e0a:	e03d      	b.n	8004e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e038      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40007000 	.word	0x40007000
 8004e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e24:	4b1b      	ldr	r3, [pc, #108]	@ (8004e94 <HAL_RCC_OscConfig+0x4ec>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d028      	beq.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d121      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d11a      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d111      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d107      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800

08004e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0cc      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eac:	4b68      	ldr	r3, [pc, #416]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d90c      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b65      	ldr	r3, [pc, #404]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b63      	ldr	r3, [pc, #396]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0b8      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eec:	4b59      	ldr	r3, [pc, #356]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a58      	ldr	r2, [pc, #352]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f04:	4b53      	ldr	r3, [pc, #332]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a52      	ldr	r2, [pc, #328]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b50      	ldr	r3, [pc, #320]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	494d      	ldr	r1, [pc, #308]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d044      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b47      	ldr	r3, [pc, #284]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d119      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e07f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f56:	4b3f      	ldr	r3, [pc, #252]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e06f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f66:	4b3b      	ldr	r3, [pc, #236]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e067      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f76:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 0203 	bic.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4934      	ldr	r1, [pc, #208]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f88:	f7fc fb2e 	bl	80015e8 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f90:	f7fc fb2a 	bl	80015e8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e04f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 020c 	and.w	r2, r3, #12
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1eb      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b25      	ldr	r3, [pc, #148]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d20c      	bcs.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b22      	ldr	r3, [pc, #136]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e032      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fec:	4b19      	ldr	r3, [pc, #100]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4916      	ldr	r1, [pc, #88]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500a:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	490e      	ldr	r1, [pc, #56]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800501e:	f000 f821 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8005022:	4602      	mov	r2, r0
 8005024:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	490a      	ldr	r1, [pc, #40]	@ (8005058 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	5ccb      	ldrb	r3, [r1, r3]
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	4a09      	ldr	r2, [pc, #36]	@ (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800503a:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fc f9b4 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023c00 	.word	0x40023c00
 8005054:	40023800 	.word	0x40023800
 8005058:	0800dc64 	.word	0x0800dc64
 800505c:	20000000 	.word	0x20000000
 8005060:	20000004 	.word	0x20000004

08005064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005068:	b094      	sub	sp, #80	@ 0x50
 800506a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800507c:	4b79      	ldr	r3, [pc, #484]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d00d      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005088:	2b08      	cmp	r3, #8
 800508a:	f200 80e1 	bhi.w	8005250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x34>
 8005092:	2b04      	cmp	r3, #4
 8005094:	d003      	beq.n	800509e <HAL_RCC_GetSysClockFreq+0x3a>
 8005096:	e0db      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005098:	4b73      	ldr	r3, [pc, #460]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x204>)
 800509a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800509c:	e0db      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800509e:	4b73      	ldr	r3, [pc, #460]	@ (800526c <HAL_RCC_GetSysClockFreq+0x208>)
 80050a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050a2:	e0d8      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d063      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	099b      	lsrs	r3, r3, #6
 80050c0:	2200      	movs	r2, #0
 80050c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ce:	2300      	movs	r3, #0
 80050d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050d6:	4622      	mov	r2, r4
 80050d8:	462b      	mov	r3, r5
 80050da:	f04f 0000 	mov.w	r0, #0
 80050de:	f04f 0100 	mov.w	r1, #0
 80050e2:	0159      	lsls	r1, r3, #5
 80050e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050e8:	0150      	lsls	r0, r2, #5
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4621      	mov	r1, r4
 80050f0:	1a51      	subs	r1, r2, r1
 80050f2:	6139      	str	r1, [r7, #16]
 80050f4:	4629      	mov	r1, r5
 80050f6:	eb63 0301 	sbc.w	r3, r3, r1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005108:	4659      	mov	r1, fp
 800510a:	018b      	lsls	r3, r1, #6
 800510c:	4651      	mov	r1, sl
 800510e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005112:	4651      	mov	r1, sl
 8005114:	018a      	lsls	r2, r1, #6
 8005116:	4651      	mov	r1, sl
 8005118:	ebb2 0801 	subs.w	r8, r2, r1
 800511c:	4659      	mov	r1, fp
 800511e:	eb63 0901 	sbc.w	r9, r3, r1
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800512e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005136:	4690      	mov	r8, r2
 8005138:	4699      	mov	r9, r3
 800513a:	4623      	mov	r3, r4
 800513c:	eb18 0303 	adds.w	r3, r8, r3
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	462b      	mov	r3, r5
 8005144:	eb49 0303 	adc.w	r3, r9, r3
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005156:	4629      	mov	r1, r5
 8005158:	024b      	lsls	r3, r1, #9
 800515a:	4621      	mov	r1, r4
 800515c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005160:	4621      	mov	r1, r4
 8005162:	024a      	lsls	r2, r1, #9
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800516a:	2200      	movs	r2, #0
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800516e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005174:	f7fb f83c 	bl	80001f0 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4613      	mov	r3, r2
 800517e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005180:	e058      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005182:	4b38      	ldr	r3, [pc, #224]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	099b      	lsrs	r3, r3, #6
 8005188:	2200      	movs	r2, #0
 800518a:	4618      	mov	r0, r3
 800518c:	4611      	mov	r1, r2
 800518e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005192:	623b      	str	r3, [r7, #32]
 8005194:	2300      	movs	r3, #0
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
 8005198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800519c:	4642      	mov	r2, r8
 800519e:	464b      	mov	r3, r9
 80051a0:	f04f 0000 	mov.w	r0, #0
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	0159      	lsls	r1, r3, #5
 80051aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ae:	0150      	lsls	r0, r2, #5
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4641      	mov	r1, r8
 80051b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051ba:	4649      	mov	r1, r9
 80051bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051d4:	ebb2 040a 	subs.w	r4, r2, sl
 80051d8:	eb63 050b 	sbc.w	r5, r3, fp
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	00eb      	lsls	r3, r5, #3
 80051e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ea:	00e2      	lsls	r2, r4, #3
 80051ec:	4614      	mov	r4, r2
 80051ee:	461d      	mov	r5, r3
 80051f0:	4643      	mov	r3, r8
 80051f2:	18e3      	adds	r3, r4, r3
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	464b      	mov	r3, r9
 80051f8:	eb45 0303 	adc.w	r3, r5, r3
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800520a:	4629      	mov	r1, r5
 800520c:	028b      	lsls	r3, r1, #10
 800520e:	4621      	mov	r1, r4
 8005210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005214:	4621      	mov	r1, r4
 8005216:	028a      	lsls	r2, r1, #10
 8005218:	4610      	mov	r0, r2
 800521a:	4619      	mov	r1, r3
 800521c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521e:	2200      	movs	r2, #0
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	61fa      	str	r2, [r7, #28]
 8005224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005228:	f7fa ffe2 	bl	80001f0 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4613      	mov	r3, r2
 8005232:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005234:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	3301      	adds	r3, #1
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005244:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800524e:	e002      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x204>)
 8005252:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005258:	4618      	mov	r0, r3
 800525a:	3750      	adds	r7, #80	@ 0x50
 800525c:	46bd      	mov	sp, r7
 800525e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005262:	bf00      	nop
 8005264:	40023800 	.word	0x40023800
 8005268:	00f42400 	.word	0x00f42400
 800526c:	007a1200 	.word	0x007a1200

08005270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005274:	4b03      	ldr	r3, [pc, #12]	@ (8005284 <HAL_RCC_GetHCLKFreq+0x14>)
 8005276:	681b      	ldr	r3, [r3, #0]
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000000 	.word	0x20000000

08005288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800528c:	f7ff fff0 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 8005290:	4602      	mov	r2, r0
 8005292:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	0a9b      	lsrs	r3, r3, #10
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	4903      	ldr	r1, [pc, #12]	@ (80052ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800529e:	5ccb      	ldrb	r3, [r1, r3]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40023800 	.word	0x40023800
 80052ac:	0800dc74 	.word	0x0800dc74

080052b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	220f      	movs	r2, #15
 80052be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052c0:	4b12      	ldr	r3, [pc, #72]	@ (800530c <HAL_RCC_GetClockConfig+0x5c>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0203 	and.w	r2, r3, #3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052cc:	4b0f      	ldr	r3, [pc, #60]	@ (800530c <HAL_RCC_GetClockConfig+0x5c>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052d8:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <HAL_RCC_GetClockConfig+0x5c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052e4:	4b09      	ldr	r3, [pc, #36]	@ (800530c <HAL_RCC_GetClockConfig+0x5c>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	08db      	lsrs	r3, r3, #3
 80052ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052f2:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <HAL_RCC_GetClockConfig+0x60>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0207 	and.w	r2, r3, #7
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	40023c00 	.word	0x40023c00

08005314 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005338:	2b00      	cmp	r3, #0
 800533a:	d038      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800533c:	4b68      	ldr	r3, [pc, #416]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005342:	f7fc f951 	bl	80015e8 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005348:	e008      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800534a:	f7fc f94d 	bl	80015e8 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0bd      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800535c:	4b61      	ldr	r3, [pc, #388]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	071b      	lsls	r3, r3, #28
 800537a:	495a      	ldr	r1, [pc, #360]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005382:	4b57      	ldr	r3, [pc, #348]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005388:	f7fc f92e 	bl	80015e8 <HAL_GetTick>
 800538c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005390:	f7fc f92a 	bl	80015e8 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e09a      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a2:	4b50      	ldr	r3, [pc, #320]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8083 	beq.w	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	4b48      	ldr	r3, [pc, #288]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	4a47      	ldr	r2, [pc, #284]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80053cc:	4b45      	ldr	r3, [pc, #276]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053d8:	4b43      	ldr	r3, [pc, #268]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a42      	ldr	r2, [pc, #264]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053e4:	f7fc f900 	bl	80015e8 <HAL_GetTick>
 80053e8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ec:	f7fc f8fc 	bl	80015e8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e06c      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053fe:	4b3a      	ldr	r3, [pc, #232]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800540a:	4b36      	ldr	r3, [pc, #216]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005412:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02f      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	429a      	cmp	r2, r3
 8005426:	d028      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005428:	4b2e      	ldr	r3, [pc, #184]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005430:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005432:	4b2e      	ldr	r3, [pc, #184]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005438:	4b2c      	ldr	r3, [pc, #176]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800543e:	4a29      	ldr	r2, [pc, #164]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005444:	4b27      	ldr	r3, [pc, #156]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d114      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005450:	f7fc f8ca 	bl	80015e8 <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005456:	e00a      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005458:	f7fc f8c6 	bl	80015e8 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e034      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546e:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0ee      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005486:	d10d      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005488:	4b16      	ldr	r3, [pc, #88]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800549c:	4911      	ldr	r1, [pc, #68]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
 80054a2:	e005      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80054a4:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a0e      	ldr	r2, [pc, #56]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054aa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054ae:	6093      	str	r3, [r2, #8]
 80054b0:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	4909      	ldr	r1, [pc, #36]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7d1a      	ldrb	r2, [r3, #20]
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80054d4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	42470068 	.word	0x42470068
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40007000 	.word	0x40007000
 80054ec:	42470e40 	.word	0x42470e40
 80054f0:	424711e0 	.word	0x424711e0

080054f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d141      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005512:	4b25      	ldr	r3, [pc, #148]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005528:	d131      	bne.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800552a:	4b20      	ldr	r3, [pc, #128]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800552c:	617b      	str	r3, [r7, #20]
          break;
 800552e:	e031      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005530:	4b1d      	ldr	r3, [pc, #116]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800553c:	d109      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800553e:	4b1a      	ldr	r3, [pc, #104]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	e008      	b.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005552:	4b15      	ldr	r3, [pc, #84]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800555c:	4a15      	ldr	r2, [pc, #84]	@ (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005564:	4b10      	ldr	r3, [pc, #64]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800556a:	099b      	lsrs	r3, r3, #6
 800556c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800557e:	0f1b      	lsrs	r3, r3, #28
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	617b      	str	r3, [r7, #20]
          break;
 800558c:	e002      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
          break;
 8005592:	bf00      	nop
        }
      }
      break;
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005596:	bf00      	nop
    }
  }
  return frequency;
 8005598:	697b      	ldr	r3, [r7, #20]
}
 800559a:	4618      	mov	r0, r3
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	00bb8000 	.word	0x00bb8000
 80055b0:	007a1200 	.word	0x007a1200
 80055b4:	00f42400 	.word	0x00f42400

080055b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e07b      	b.n	80056c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055da:	d009      	beq.n	80055f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	61da      	str	r2, [r3, #28]
 80055e2:	e005      	b.n	80055f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fb fe2a 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005674:	ea42 0103 	orr.w	r1, r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	f003 0104 	and.w	r1, r3, #4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	f003 0210 	and.w	r2, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b088      	sub	sp, #32
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056da:	f7fb ff85 	bl	80015e8 <HAL_GetTick>
 80056de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d001      	beq.n	80056f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
 80056f2:	e12a      	b.n	800594a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_SPI_Transmit+0x36>
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e122      	b.n	800594a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_SPI_Transmit+0x48>
 800570e:	2302      	movs	r3, #2
 8005710:	e11b      	b.n	800594a <HAL_SPI_Transmit+0x280>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2203      	movs	r2, #3
 800571e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005760:	d10f      	bne.n	8005782 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005770:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005780:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b40      	cmp	r3, #64	@ 0x40
 800578e:	d007      	beq.n	80057a0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800579e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057a8:	d152      	bne.n	8005850 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_SPI_Transmit+0xee>
 80057b2:	8b7b      	ldrh	r3, [r7, #26]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d145      	bne.n	8005844 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057bc:	881a      	ldrh	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	1c9a      	adds	r2, r3, #2
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057dc:	e032      	b.n	8005844 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d112      	bne.n	8005812 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	881a      	ldrh	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fc:	1c9a      	adds	r2, r3, #2
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005810:	e018      	b.n	8005844 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005812:	f7fb fee9 	bl	80015e8 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d803      	bhi.n	800582a <HAL_SPI_Transmit+0x160>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d102      	bne.n	8005830 <HAL_SPI_Transmit+0x166>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e082      	b.n	800594a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1c7      	bne.n	80057de <HAL_SPI_Transmit+0x114>
 800584e:	e053      	b.n	80058f8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_SPI_Transmit+0x194>
 8005858:	8b7b      	ldrh	r3, [r7, #26]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d147      	bne.n	80058ee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005884:	e033      	b.n	80058ee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b02      	cmp	r3, #2
 8005892:	d113      	bne.n	80058bc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058ba:	e018      	b.n	80058ee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058bc:	f7fb fe94 	bl	80015e8 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d803      	bhi.n	80058d4 <HAL_SPI_Transmit+0x20a>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d2:	d102      	bne.n	80058da <HAL_SPI_Transmit+0x210>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e02d      	b.n	800594a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1c6      	bne.n	8005886 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fbd9 	bl	80060b4 <SPI_EndRxTxTransaction>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005948:	2300      	movs	r3, #0
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b088      	sub	sp, #32
 8005956:	af02      	add	r7, sp, #8
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	d001      	beq.n	8005972 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800596e:	2302      	movs	r3, #2
 8005970:	e104      	b.n	8005b7c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800597a:	d112      	bne.n	80059a2 <HAL_SPI_Receive+0x50>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10e      	bne.n	80059a2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2204      	movs	r2, #4
 8005988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f8f3 	bl	8005b84 <HAL_SPI_TransmitReceive>
 800599e:	4603      	mov	r3, r0
 80059a0:	e0ec      	b.n	8005b7c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059a2:	f7fb fe21 	bl	80015e8 <HAL_GetTick>
 80059a6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_SPI_Receive+0x62>
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0e1      	b.n	8005b7c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_SPI_Receive+0x74>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0da      	b.n	8005b7c <HAL_SPI_Receive+0x22a>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2204      	movs	r2, #4
 80059d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	88fa      	ldrh	r2, [r7, #6]
 80059e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a14:	d10f      	bne.n	8005a36 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a40:	2b40      	cmp	r3, #64	@ 0x40
 8005a42:	d007      	beq.n	8005a54 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d170      	bne.n	8005b3e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a5c:	e035      	b.n	8005aca <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d115      	bne.n	8005a98 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f103 020c 	add.w	r2, r3, #12
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a78:	7812      	ldrb	r2, [r2, #0]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a96:	e018      	b.n	8005aca <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a98:	f7fb fda6 	bl	80015e8 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d803      	bhi.n	8005ab0 <HAL_SPI_Receive+0x15e>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d102      	bne.n	8005ab6 <HAL_SPI_Receive+0x164>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e058      	b.n	8005b7c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1c4      	bne.n	8005a5e <HAL_SPI_Receive+0x10c>
 8005ad4:	e038      	b.n	8005b48 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d113      	bne.n	8005b0c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	b292      	uxth	r2, r2
 8005af0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b0a:	e018      	b.n	8005b3e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b0c:	f7fb fd6c 	bl	80015e8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d803      	bhi.n	8005b24 <HAL_SPI_Receive+0x1d2>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d102      	bne.n	8005b2a <HAL_SPI_Receive+0x1d8>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d109      	bne.n	8005b3e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e01e      	b.n	8005b7c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1c6      	bne.n	8005ad6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fa4b 	bl	8005fe8 <SPI_EndRxTransaction>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	@ 0x28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b92:	2301      	movs	r3, #1
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b96:	f7fb fd27 	bl	80015e8 <HAL_GetTick>
 8005b9a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ba2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005baa:	887b      	ldrh	r3, [r7, #2]
 8005bac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d00c      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x4a>
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bba:	d106      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d102      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x46>
 8005bc4:	7ffb      	ldrb	r3, [r7, #31]
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d001      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e17f      	b.n	8005ece <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x5c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x5c>
 8005bda:	887b      	ldrh	r3, [r7, #2]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e174      	b.n	8005ece <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_SPI_TransmitReceive+0x6e>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e16d      	b.n	8005ece <HAL_SPI_TransmitReceive+0x34a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d003      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2205      	movs	r2, #5
 8005c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	887a      	ldrh	r2, [r7, #2]
 8005c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	887a      	ldrh	r2, [r7, #2]
 8005c24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	887a      	ldrh	r2, [r7, #2]
 8005c30:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	887a      	ldrh	r2, [r7, #2]
 8005c36:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4e:	2b40      	cmp	r3, #64	@ 0x40
 8005c50:	d007      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6a:	d17e      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0xf6>
 8005c74:	8afb      	ldrh	r3, [r7, #22]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d16c      	bne.n	8005d54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	881a      	ldrh	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	1c9a      	adds	r2, r3, #2
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c9e:	e059      	b.n	8005d54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d11b      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x162>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d016      	beq.n	8005ce6 <HAL_SPI_TransmitReceive+0x162>
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d113      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc2:	881a      	ldrh	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cce:	1c9a      	adds	r2, r3, #2
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d119      	bne.n	8005d28 <HAL_SPI_TransmitReceive+0x1a4>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d014      	beq.n	8005d28 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d10:	1c9a      	adds	r2, r3, #2
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d24:	2301      	movs	r3, #1
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d28:	f7fb fc5e 	bl	80015e8 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d80d      	bhi.n	8005d54 <HAL_SPI_TransmitReceive+0x1d0>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d009      	beq.n	8005d54 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e0bc      	b.n	8005ece <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1a0      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x11c>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d19b      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x11c>
 8005d68:	e082      	b.n	8005e70 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_SPI_TransmitReceive+0x1f4>
 8005d72:	8afb      	ldrh	r3, [r7, #22]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d171      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	7812      	ldrb	r2, [r2, #0]
 8005d84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d9e:	e05d      	b.n	8005e5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d11c      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x264>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d017      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x264>
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d114      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d119      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x2a6>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d014      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e26:	2301      	movs	r3, #1
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e2a:	f7fb fbdd 	bl	80015e8 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d803      	bhi.n	8005e42 <HAL_SPI_TransmitReceive+0x2be>
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d102      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x2c4>
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d109      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e038      	b.n	8005ece <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d19c      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x21c>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d197      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f91d 	bl	80060b4 <SPI_EndRxTxTransaction>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e01d      	b.n	8005ece <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3728      	adds	r7, #40	@ 0x28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ee8:	f7fb fb7e 	bl	80015e8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ef8:	f7fb fb76 	bl	80015e8 <HAL_GetTick>
 8005efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005efe:	4b39      	ldr	r3, [pc, #228]	@ (8005fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	015b      	lsls	r3, r3, #5
 8005f04:	0d1b      	lsrs	r3, r3, #20
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	fb02 f303 	mul.w	r3, r2, r3
 8005f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f0e:	e054      	b.n	8005fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f16:	d050      	beq.n	8005fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f18:	f7fb fb66 	bl	80015e8 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d902      	bls.n	8005f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d13d      	bne.n	8005faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f46:	d111      	bne.n	8005f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f50:	d004      	beq.n	8005f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5a:	d107      	bne.n	8005f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f74:	d10f      	bne.n	8005f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e017      	b.n	8005fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	bf0c      	ite	eq
 8005fca:	2301      	moveq	r3, #1
 8005fcc:	2300      	movne	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d19b      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000000 	.word	0x20000000

08005fe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ffc:	d111      	bne.n	8006022 <SPI_EndRxTransaction+0x3a>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006006:	d004      	beq.n	8006012 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006010:	d107      	bne.n	8006022 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006020:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800602a:	d12a      	bne.n	8006082 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006034:	d012      	beq.n	800605c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2200      	movs	r2, #0
 800603e:	2180      	movs	r1, #128	@ 0x80
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff ff49 	bl	8005ed8 <SPI_WaitFlagStateUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d02d      	beq.n	80060a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e026      	b.n	80060aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	2101      	movs	r1, #1
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff ff36 	bl	8005ed8 <SPI_WaitFlagStateUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d01a      	beq.n	80060a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	f043 0220 	orr.w	r2, r3, #32
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e013      	b.n	80060aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2200      	movs	r2, #0
 800608a:	2101      	movs	r1, #1
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff ff23 	bl	8005ed8 <SPI_WaitFlagStateUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609c:	f043 0220 	orr.w	r2, r3, #32
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e000      	b.n	80060aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2201      	movs	r2, #1
 80060c8:	2102      	movs	r1, #2
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff ff04 	bl	8005ed8 <SPI_WaitFlagStateUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060da:	f043 0220 	orr.w	r2, r3, #32
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e032      	b.n	800614c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006154 <SPI_EndRxTxTransaction+0xa0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <SPI_EndRxTxTransaction+0xa4>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	0d5b      	lsrs	r3, r3, #21
 80060f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80060f6:	fb02 f303 	mul.w	r3, r2, r3
 80060fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006104:	d112      	bne.n	800612c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	2180      	movs	r1, #128	@ 0x80
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fee1 	bl	8005ed8 <SPI_WaitFlagStateUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d016      	beq.n	800614a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e00f      	b.n	800614c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	3b01      	subs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006142:	2b80      	cmp	r3, #128	@ 0x80
 8006144:	d0f2      	beq.n	800612c <SPI_EndRxTxTransaction+0x78>
 8006146:	e000      	b.n	800614a <SPI_EndRxTxTransaction+0x96>
        break;
 8006148:	bf00      	nop
  }

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000000 	.word	0x20000000
 8006158:	165e9f81 	.word	0x165e9f81

0800615c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e041      	b.n	80061f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fb f8b6 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f000 fc96 	bl	8006acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d001      	beq.n	8006214 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e03c      	b.n	800628e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1e      	ldr	r2, [pc, #120]	@ (800629c <HAL_TIM_Base_Start+0xa0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d018      	beq.n	8006258 <HAL_TIM_Base_Start+0x5c>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622e:	d013      	beq.n	8006258 <HAL_TIM_Base_Start+0x5c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1a      	ldr	r2, [pc, #104]	@ (80062a0 <HAL_TIM_Base_Start+0xa4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00e      	beq.n	8006258 <HAL_TIM_Base_Start+0x5c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <HAL_TIM_Base_Start+0xa8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d009      	beq.n	8006258 <HAL_TIM_Base_Start+0x5c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a17      	ldr	r2, [pc, #92]	@ (80062a8 <HAL_TIM_Base_Start+0xac>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d004      	beq.n	8006258 <HAL_TIM_Base_Start+0x5c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <HAL_TIM_Base_Start+0xb0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d111      	bne.n	800627c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b06      	cmp	r3, #6
 8006268:	d010      	beq.n	800628c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0201 	orr.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627a:	e007      	b.n	800628c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40014000 	.word	0x40014000

080062b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d001      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e044      	b.n	8006352 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006360 <HAL_TIM_Base_Start_IT+0xb0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d018      	beq.n	800631c <HAL_TIM_Base_Start_IT+0x6c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f2:	d013      	beq.n	800631c <HAL_TIM_Base_Start_IT+0x6c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006364 <HAL_TIM_Base_Start_IT+0xb4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00e      	beq.n	800631c <HAL_TIM_Base_Start_IT+0x6c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a19      	ldr	r2, [pc, #100]	@ (8006368 <HAL_TIM_Base_Start_IT+0xb8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d009      	beq.n	800631c <HAL_TIM_Base_Start_IT+0x6c>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a17      	ldr	r2, [pc, #92]	@ (800636c <HAL_TIM_Base_Start_IT+0xbc>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d004      	beq.n	800631c <HAL_TIM_Base_Start_IT+0x6c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a16      	ldr	r2, [pc, #88]	@ (8006370 <HAL_TIM_Base_Start_IT+0xc0>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d111      	bne.n	8006340 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b06      	cmp	r3, #6
 800632c:	d010      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0201 	orr.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633e:	e007      	b.n	8006350 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40010000 	.word	0x40010000
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40014000 	.word	0x40014000

08006374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e041      	b.n	800640a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f839 	bl	8006412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f000 fb8a 	bl	8006acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <HAL_TIM_PWM_Start+0x24>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	bf14      	ite	ne
 8006444:	2301      	movne	r3, #1
 8006446:	2300      	moveq	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	e022      	b.n	8006492 <HAL_TIM_PWM_Start+0x6a>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b04      	cmp	r3, #4
 8006450:	d109      	bne.n	8006466 <HAL_TIM_PWM_Start+0x3e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b01      	cmp	r3, #1
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	e015      	b.n	8006492 <HAL_TIM_PWM_Start+0x6a>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d109      	bne.n	8006480 <HAL_TIM_PWM_Start+0x58>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	bf14      	ite	ne
 8006478:	2301      	movne	r3, #1
 800647a:	2300      	moveq	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	e008      	b.n	8006492 <HAL_TIM_PWM_Start+0x6a>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	bf14      	ite	ne
 800648c:	2301      	movne	r3, #1
 800648e:	2300      	moveq	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e068      	b.n	800656c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Start+0x82>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064a8:	e013      	b.n	80064d2 <HAL_TIM_PWM_Start+0xaa>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_PWM_Start+0x92>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064b8:	e00b      	b.n	80064d2 <HAL_TIM_PWM_Start+0xaa>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d104      	bne.n	80064ca <HAL_TIM_PWM_Start+0xa2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064c8:	e003      	b.n	80064d2 <HAL_TIM_PWM_Start+0xaa>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2201      	movs	r2, #1
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fda8 	bl	8007030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a23      	ldr	r2, [pc, #140]	@ (8006574 <HAL_TIM_PWM_Start+0x14c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d107      	bne.n	80064fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006574 <HAL_TIM_PWM_Start+0x14c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d018      	beq.n	8006536 <HAL_TIM_PWM_Start+0x10e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650c:	d013      	beq.n	8006536 <HAL_TIM_PWM_Start+0x10e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a19      	ldr	r2, [pc, #100]	@ (8006578 <HAL_TIM_PWM_Start+0x150>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_TIM_PWM_Start+0x10e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a17      	ldr	r2, [pc, #92]	@ (800657c <HAL_TIM_PWM_Start+0x154>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_TIM_PWM_Start+0x10e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a16      	ldr	r2, [pc, #88]	@ (8006580 <HAL_TIM_PWM_Start+0x158>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_TIM_PWM_Start+0x10e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a14      	ldr	r2, [pc, #80]	@ (8006584 <HAL_TIM_PWM_Start+0x15c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d111      	bne.n	800655a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b06      	cmp	r3, #6
 8006546:	d010      	beq.n	800656a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006558:	e007      	b.n	800656a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0201 	orr.w	r2, r2, #1
 8006568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40014000 	.word	0x40014000

08006588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d020      	beq.n	80065ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01b      	beq.n	80065ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0202 	mvn.w	r2, #2
 80065bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa5b 	bl	8006a8e <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fa4d 	bl	8006a7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fa5e 	bl	8006aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01b      	beq.n	8006638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0204 	mvn.w	r2, #4
 8006608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2202      	movs	r2, #2
 800660e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fa35 	bl	8006a8e <HAL_TIM_IC_CaptureCallback>
 8006624:	e005      	b.n	8006632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa27 	bl	8006a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa38 	bl	8006aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d020      	beq.n	8006684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0208 	mvn.w	r2, #8
 8006654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2204      	movs	r2, #4
 800665a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fa0f 	bl	8006a8e <HAL_TIM_IC_CaptureCallback>
 8006670:	e005      	b.n	800667e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa01 	bl	8006a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fa12 	bl	8006aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0310 	and.w	r3, r3, #16
 800668a:	2b00      	cmp	r3, #0
 800668c:	d020      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01b      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0210 	mvn.w	r2, #16
 80066a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2208      	movs	r2, #8
 80066a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f9e9 	bl	8006a8e <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f9db 	bl	8006a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f9ec 	bl	8006aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00c      	beq.n	80066f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0201 	mvn.w	r2, #1
 80066ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fa fc62 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00c      	beq.n	8006718 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fd2a 	bl	800716c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f9bd 	bl	8006ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0220 	mvn.w	r2, #32
 8006758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fcfc 	bl	8007158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006782:	2302      	movs	r3, #2
 8006784:	e0ae      	b.n	80068e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b0c      	cmp	r3, #12
 8006792:	f200 809f 	bhi.w	80068d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006796:	a201      	add	r2, pc, #4	@ (adr r2, 800679c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067d1 	.word	0x080067d1
 80067a0:	080068d5 	.word	0x080068d5
 80067a4:	080068d5 	.word	0x080068d5
 80067a8:	080068d5 	.word	0x080068d5
 80067ac:	08006811 	.word	0x08006811
 80067b0:	080068d5 	.word	0x080068d5
 80067b4:	080068d5 	.word	0x080068d5
 80067b8:	080068d5 	.word	0x080068d5
 80067bc:	08006853 	.word	0x08006853
 80067c0:	080068d5 	.word	0x080068d5
 80067c4:	080068d5 	.word	0x080068d5
 80067c8:	080068d5 	.word	0x080068d5
 80067cc:	08006893 	.word	0x08006893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fa04 	bl	8006be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0208 	orr.w	r2, r2, #8
 80067ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0204 	bic.w	r2, r2, #4
 80067fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6999      	ldr	r1, [r3, #24]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	619a      	str	r2, [r3, #24]
      break;
 800680e:	e064      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fa4a 	bl	8006cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800682a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800683a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6999      	ldr	r1, [r3, #24]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	021a      	lsls	r2, r3, #8
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	619a      	str	r2, [r3, #24]
      break;
 8006850:	e043      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fa95 	bl	8006d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0208 	orr.w	r2, r2, #8
 800686c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0204 	bic.w	r2, r2, #4
 800687c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69d9      	ldr	r1, [r3, #28]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	61da      	str	r2, [r3, #28]
      break;
 8006890:	e023      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fadf 	bl	8006e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69da      	ldr	r2, [r3, #28]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69d9      	ldr	r1, [r3, #28]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	021a      	lsls	r2, r3, #8
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	61da      	str	r2, [r3, #28]
      break;
 80068d2:	e002      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
      break;
 80068d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_TIM_ConfigClockSource+0x1c>
 8006904:	2302      	movs	r3, #2
 8006906:	e0b4      	b.n	8006a72 <HAL_TIM_ConfigClockSource+0x186>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800692e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006940:	d03e      	beq.n	80069c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006946:	f200 8087 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800694e:	f000 8086 	beq.w	8006a5e <HAL_TIM_ConfigClockSource+0x172>
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006956:	d87f      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006958:	2b70      	cmp	r3, #112	@ 0x70
 800695a:	d01a      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0xa6>
 800695c:	2b70      	cmp	r3, #112	@ 0x70
 800695e:	d87b      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006960:	2b60      	cmp	r3, #96	@ 0x60
 8006962:	d050      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0x11a>
 8006964:	2b60      	cmp	r3, #96	@ 0x60
 8006966:	d877      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b50      	cmp	r3, #80	@ 0x50
 800696a:	d03c      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0xfa>
 800696c:	2b50      	cmp	r3, #80	@ 0x50
 800696e:	d873      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b40      	cmp	r3, #64	@ 0x40
 8006972:	d058      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x13a>
 8006974:	2b40      	cmp	r3, #64	@ 0x40
 8006976:	d86f      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006978:	2b30      	cmp	r3, #48	@ 0x30
 800697a:	d064      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x15a>
 800697c:	2b30      	cmp	r3, #48	@ 0x30
 800697e:	d86b      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d060      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x15a>
 8006984:	2b20      	cmp	r3, #32
 8006986:	d867      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d05c      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x15a>
 800698c:	2b10      	cmp	r3, #16
 800698e:	d05a      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x15a>
 8006990:	e062      	b.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069a2:	f000 fb25 	bl	8006ff0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	609a      	str	r2, [r3, #8]
      break;
 80069be:	e04f      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069d0:	f000 fb0e 	bl	8006ff0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069e2:	609a      	str	r2, [r3, #8]
      break;
 80069e4:	e03c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f2:	461a      	mov	r2, r3
 80069f4:	f000 fa82 	bl	8006efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2150      	movs	r1, #80	@ 0x50
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fadb 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006a04:	e02c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a12:	461a      	mov	r2, r3
 8006a14:	f000 faa1 	bl	8006f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2160      	movs	r1, #96	@ 0x60
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 facb 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006a24:	e01c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a32:	461a      	mov	r2, r3
 8006a34:	f000 fa62 	bl	8006efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2140      	movs	r1, #64	@ 0x40
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fabb 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006a44:	e00c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f000 fab2 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006a56:	e003      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5c:	e000      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
	...

08006acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3a      	ldr	r2, [pc, #232]	@ (8006bc8 <TIM_Base_SetConfig+0xfc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00f      	beq.n	8006b04 <TIM_Base_SetConfig+0x38>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aea:	d00b      	beq.n	8006b04 <TIM_Base_SetConfig+0x38>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a37      	ldr	r2, [pc, #220]	@ (8006bcc <TIM_Base_SetConfig+0x100>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <TIM_Base_SetConfig+0x38>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a36      	ldr	r2, [pc, #216]	@ (8006bd0 <TIM_Base_SetConfig+0x104>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_Base_SetConfig+0x38>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a35      	ldr	r2, [pc, #212]	@ (8006bd4 <TIM_Base_SetConfig+0x108>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d108      	bne.n	8006b16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2b      	ldr	r2, [pc, #172]	@ (8006bc8 <TIM_Base_SetConfig+0xfc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01b      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b24:	d017      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a28      	ldr	r2, [pc, #160]	@ (8006bcc <TIM_Base_SetConfig+0x100>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a27      	ldr	r2, [pc, #156]	@ (8006bd0 <TIM_Base_SetConfig+0x104>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00f      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a26      	ldr	r2, [pc, #152]	@ (8006bd4 <TIM_Base_SetConfig+0x108>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a25      	ldr	r2, [pc, #148]	@ (8006bd8 <TIM_Base_SetConfig+0x10c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a24      	ldr	r2, [pc, #144]	@ (8006bdc <TIM_Base_SetConfig+0x110>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a23      	ldr	r2, [pc, #140]	@ (8006be0 <TIM_Base_SetConfig+0x114>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8006bc8 <TIM_Base_SetConfig+0xfc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d103      	bne.n	8006b9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d105      	bne.n	8006bba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f023 0201 	bic.w	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	611a      	str	r2, [r3, #16]
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f023 0201 	bic.w	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 0302 	bic.w	r3, r3, #2
 8006c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cac <TIM_OC1_SetConfig+0xc8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10c      	bne.n	8006c5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0308 	bic.w	r3, r3, #8
 8006c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f023 0304 	bic.w	r3, r3, #4
 8006c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a13      	ldr	r2, [pc, #76]	@ (8006cac <TIM_OC1_SetConfig+0xc8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d111      	bne.n	8006c86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	621a      	str	r2, [r3, #32]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	40010000 	.word	0x40010000

08006cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f023 0210 	bic.w	r2, r3, #16
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0320 	bic.w	r3, r3, #32
 8006cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006d84 <TIM_OC2_SetConfig+0xd4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d10d      	bne.n	8006d2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a15      	ldr	r2, [pc, #84]	@ (8006d84 <TIM_OC2_SetConfig+0xd4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d113      	bne.n	8006d5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000

08006d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e58 <TIM_OC3_SetConfig+0xd0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10d      	bne.n	8006e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a14      	ldr	r2, [pc, #80]	@ (8006e58 <TIM_OC3_SetConfig+0xd0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d113      	bne.n	8006e32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	621a      	str	r2, [r3, #32]
}
 8006e4c:	bf00      	nop
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	40010000 	.word	0x40010000

08006e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	031b      	lsls	r3, r3, #12
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a10      	ldr	r2, [pc, #64]	@ (8006ef8 <TIM_OC4_SetConfig+0x9c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d109      	bne.n	8006ed0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	019b      	lsls	r3, r3, #6
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40010000 	.word	0x40010000

08006efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	f023 0201 	bic.w	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f023 030a 	bic.w	r3, r3, #10
 8006f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b087      	sub	sp, #28
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	f023 0210 	bic.w	r2, r3, #16
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	031b      	lsls	r3, r3, #12
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f043 0307 	orr.w	r3, r3, #7
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	609a      	str	r2, [r3, #8]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800700a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	021a      	lsls	r2, r3, #8
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	431a      	orrs	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4313      	orrs	r3, r2
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	609a      	str	r2, [r3, #8]
}
 8007024:	bf00      	nop
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2201      	movs	r2, #1
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	43db      	mvns	r3, r3
 8007052:	401a      	ands	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1a      	ldr	r2, [r3, #32]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	fa01 f303 	lsl.w	r3, r1, r3
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007090:	2302      	movs	r3, #2
 8007092:	e050      	b.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e0:	d013      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a18      	ldr	r2, [pc, #96]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a16      	ldr	r2, [pc, #88]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a15      	ldr	r2, [pc, #84]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a13      	ldr	r2, [pc, #76]	@ (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d10c      	bne.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4313      	orrs	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40014000 	.word	0x40014000

08007158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007180:	b084      	sub	sp, #16
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	f107 001c 	add.w	r0, r7, #28
 800718e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007192:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007196:	2b01      	cmp	r3, #1
 8007198:	d123      	bne.n	80071e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80071ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d105      	bne.n	80071d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fae8 	bl	80087ac <USB_CoreReset>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]
 80071e0:	e01b      	b.n	800721a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fadc 	bl	80087ac <USB_CoreReset>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007204:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	639a      	str	r2, [r3, #56]	@ 0x38
 800720c:	e005      	b.n	800721a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007212:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800721a:	7fbb      	ldrb	r3, [r7, #30]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d10b      	bne.n	8007238 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f043 0206 	orr.w	r2, r3, #6
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f043 0220 	orr.w	r2, r3, #32
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007244:	b004      	add	sp, #16
 8007246:	4770      	bx	lr

08007248 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d165      	bne.n	8007328 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4a41      	ldr	r2, [pc, #260]	@ (8007364 <USB_SetTurnaroundTime+0x11c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d906      	bls.n	8007272 <USB_SetTurnaroundTime+0x2a>
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4a40      	ldr	r2, [pc, #256]	@ (8007368 <USB_SetTurnaroundTime+0x120>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d202      	bcs.n	8007272 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800726c:	230f      	movs	r3, #15
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e062      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4a3c      	ldr	r2, [pc, #240]	@ (8007368 <USB_SetTurnaroundTime+0x120>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d306      	bcc.n	8007288 <USB_SetTurnaroundTime+0x40>
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	4a3b      	ldr	r2, [pc, #236]	@ (800736c <USB_SetTurnaroundTime+0x124>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d202      	bcs.n	8007288 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007282:	230e      	movs	r3, #14
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	e057      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4a38      	ldr	r2, [pc, #224]	@ (800736c <USB_SetTurnaroundTime+0x124>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d306      	bcc.n	800729e <USB_SetTurnaroundTime+0x56>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4a37      	ldr	r2, [pc, #220]	@ (8007370 <USB_SetTurnaroundTime+0x128>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d202      	bcs.n	800729e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007298:	230d      	movs	r3, #13
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	e04c      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4a33      	ldr	r2, [pc, #204]	@ (8007370 <USB_SetTurnaroundTime+0x128>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d306      	bcc.n	80072b4 <USB_SetTurnaroundTime+0x6c>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4a32      	ldr	r2, [pc, #200]	@ (8007374 <USB_SetTurnaroundTime+0x12c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d802      	bhi.n	80072b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072ae:	230c      	movs	r3, #12
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	e041      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007374 <USB_SetTurnaroundTime+0x12c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d906      	bls.n	80072ca <USB_SetTurnaroundTime+0x82>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4a2e      	ldr	r2, [pc, #184]	@ (8007378 <USB_SetTurnaroundTime+0x130>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d802      	bhi.n	80072ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80072c4:	230b      	movs	r3, #11
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	e036      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007378 <USB_SetTurnaroundTime+0x130>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d906      	bls.n	80072e0 <USB_SetTurnaroundTime+0x98>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4a29      	ldr	r2, [pc, #164]	@ (800737c <USB_SetTurnaroundTime+0x134>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d802      	bhi.n	80072e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80072da:	230a      	movs	r3, #10
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	e02b      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4a26      	ldr	r2, [pc, #152]	@ (800737c <USB_SetTurnaroundTime+0x134>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d906      	bls.n	80072f6 <USB_SetTurnaroundTime+0xae>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4a25      	ldr	r2, [pc, #148]	@ (8007380 <USB_SetTurnaroundTime+0x138>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d202      	bcs.n	80072f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072f0:	2309      	movs	r3, #9
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e020      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4a21      	ldr	r2, [pc, #132]	@ (8007380 <USB_SetTurnaroundTime+0x138>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d306      	bcc.n	800730c <USB_SetTurnaroundTime+0xc4>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	4a20      	ldr	r2, [pc, #128]	@ (8007384 <USB_SetTurnaroundTime+0x13c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d802      	bhi.n	800730c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007306:	2308      	movs	r3, #8
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	e015      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4a1d      	ldr	r2, [pc, #116]	@ (8007384 <USB_SetTurnaroundTime+0x13c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d906      	bls.n	8007322 <USB_SetTurnaroundTime+0xda>
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <USB_SetTurnaroundTime+0x140>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d202      	bcs.n	8007322 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800731c:	2307      	movs	r3, #7
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	e00a      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007322:	2306      	movs	r3, #6
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	e007      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800732e:	2309      	movs	r3, #9
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e001      	b.n	8007338 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007334:	2309      	movs	r3, #9
 8007336:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	029b      	lsls	r3, r3, #10
 800734c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007350:	431a      	orrs	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	00d8acbf 	.word	0x00d8acbf
 8007368:	00e4e1c0 	.word	0x00e4e1c0
 800736c:	00f42400 	.word	0x00f42400
 8007370:	01067380 	.word	0x01067380
 8007374:	011a499f 	.word	0x011a499f
 8007378:	01312cff 	.word	0x01312cff
 800737c:	014ca43f 	.word	0x014ca43f
 8007380:	016e3600 	.word	0x016e3600
 8007384:	01a6ab1f 	.word	0x01a6ab1f
 8007388:	01e84800 	.word	0x01e84800

0800738c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f043 0201 	orr.w	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f023 0201 	bic.w	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d115      	bne.n	800741e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073fe:	200a      	movs	r0, #10
 8007400:	f7fa f8fe 	bl	8001600 <HAL_Delay>
      ms += 10U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	330a      	adds	r3, #10
 8007408:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 f93f 	bl	800868e <USB_GetMode>
 8007410:	4603      	mov	r3, r0
 8007412:	2b01      	cmp	r3, #1
 8007414:	d01e      	beq.n	8007454 <USB_SetCurrentMode+0x84>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2bc7      	cmp	r3, #199	@ 0xc7
 800741a:	d9f0      	bls.n	80073fe <USB_SetCurrentMode+0x2e>
 800741c:	e01a      	b.n	8007454 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d115      	bne.n	8007450 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007430:	200a      	movs	r0, #10
 8007432:	f7fa f8e5 	bl	8001600 <HAL_Delay>
      ms += 10U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	330a      	adds	r3, #10
 800743a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 f926 	bl	800868e <USB_GetMode>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <USB_SetCurrentMode+0x84>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2bc7      	cmp	r3, #199	@ 0xc7
 800744c:	d9f0      	bls.n	8007430 <USB_SetCurrentMode+0x60>
 800744e:	e001      	b.n	8007454 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e005      	b.n	8007460 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2bc8      	cmp	r3, #200	@ 0xc8
 8007458:	d101      	bne.n	800745e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007468:	b084      	sub	sp, #16
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	e009      	b.n	800749c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	3340      	adds	r3, #64	@ 0x40
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	2200      	movs	r2, #0
 8007494:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3301      	adds	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2b0e      	cmp	r3, #14
 80074a0:	d9f2      	bls.n	8007488 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d11c      	bne.n	80074e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074b8:	f043 0302 	orr.w	r3, r3, #2
 80074bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80074e2:	e00b      	b.n	80074fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007502:	461a      	mov	r2, r3
 8007504:	2300      	movs	r3, #0
 8007506:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007508:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800750c:	2b01      	cmp	r3, #1
 800750e:	d10d      	bne.n	800752c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007518:	2100      	movs	r1, #0
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f968 	bl	80077f0 <USB_SetDevSpeed>
 8007520:	e008      	b.n	8007534 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007522:	2101      	movs	r1, #1
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f963 	bl	80077f0 <USB_SetDevSpeed>
 800752a:	e003      	b.n	8007534 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800752c:	2103      	movs	r1, #3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f95e 	bl	80077f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007534:	2110      	movs	r1, #16
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f8fa 	bl	8007730 <USB_FlushTxFifo>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f924 	bl	8007794 <USB_FlushRxFifo>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800755c:	461a      	mov	r2, r3
 800755e:	2300      	movs	r3, #0
 8007560:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007568:	461a      	mov	r2, r3
 800756a:	2300      	movs	r3, #0
 800756c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007574:	461a      	mov	r2, r3
 8007576:	2300      	movs	r3, #0
 8007578:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800757a:	2300      	movs	r3, #0
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	e043      	b.n	8007608 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007592:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007596:	d118      	bne.n	80075ca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075aa:	461a      	mov	r2, r3
 80075ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e013      	b.n	80075dc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c0:	461a      	mov	r2, r3
 80075c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	e008      	b.n	80075dc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d6:	461a      	mov	r2, r3
 80075d8:	2300      	movs	r3, #0
 80075da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e8:	461a      	mov	r2, r3
 80075ea:	2300      	movs	r3, #0
 80075ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fa:	461a      	mov	r2, r3
 80075fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007600:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	3301      	adds	r3, #1
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800760c:	461a      	mov	r2, r3
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	4293      	cmp	r3, r2
 8007612:	d3b5      	bcc.n	8007580 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	e043      	b.n	80076a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800762c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007630:	d118      	bne.n	8007664 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007644:	461a      	mov	r2, r3
 8007646:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	e013      	b.n	8007676 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800765a:	461a      	mov	r2, r3
 800765c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e008      	b.n	8007676 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007670:	461a      	mov	r2, r3
 8007672:	2300      	movs	r3, #0
 8007674:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007682:	461a      	mov	r2, r3
 8007684:	2300      	movs	r3, #0
 8007686:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007694:	461a      	mov	r2, r3
 8007696:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800769a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	3301      	adds	r3, #1
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076a6:	461a      	mov	r2, r3
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d3b5      	bcc.n	800761a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80076ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f043 0210 	orr.w	r2, r3, #16
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	4b10      	ldr	r3, [pc, #64]	@ (800772c <USB_DevInit+0x2c4>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	f043 0208 	orr.w	r2, r3, #8
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007704:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007708:	2b01      	cmp	r3, #1
 800770a:	d107      	bne.n	800771c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007714:	f043 0304 	orr.w	r3, r3, #4
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800771c:	7dfb      	ldrb	r3, [r7, #23]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007728:	b004      	add	sp, #16
 800772a:	4770      	bx	lr
 800772c:	803c3800 	.word	0x803c3800

08007730 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800774a:	d901      	bls.n	8007750 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e01b      	b.n	8007788 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	daf2      	bge.n	800773e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	019b      	lsls	r3, r3, #6
 8007760:	f043 0220 	orr.w	r2, r3, #32
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007774:	d901      	bls.n	800777a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e006      	b.n	8007788 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0320 	and.w	r3, r3, #32
 8007782:	2b20      	cmp	r3, #32
 8007784:	d0f0      	beq.n	8007768 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3301      	adds	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077ac:	d901      	bls.n	80077b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e018      	b.n	80077e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	daf2      	bge.n	80077a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2210      	movs	r2, #16
 80077c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077d0:	d901      	bls.n	80077d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e006      	b.n	80077e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d0f0      	beq.n	80077c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007810:	4313      	orrs	r3, r2
 8007812:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007822:	b480      	push	{r7}
 8007824:	b087      	sub	sp, #28
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0306 	and.w	r3, r3, #6
 800783a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]
 8007846:	e00a      	b.n	800785e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d002      	beq.n	8007854 <USB_GetDevSpeed+0x32>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b06      	cmp	r3, #6
 8007852:	d102      	bne.n	800785a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007854:	2302      	movs	r3, #2
 8007856:	75fb      	strb	r3, [r7, #23]
 8007858:	e001      	b.n	800785e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800785a:	230f      	movs	r3, #15
 800785c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d13a      	bne.n	80078fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	2101      	movs	r1, #1
 800789a:	fa01 f303 	lsl.w	r3, r1, r3
 800789e:	b29b      	uxth	r3, r3
 80078a0:	68f9      	ldr	r1, [r7, #12]
 80078a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078a6:	4313      	orrs	r3, r2
 80078a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d155      	bne.n	800796c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	791b      	ldrb	r3, [r3, #4]
 80078da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	059b      	lsls	r3, r3, #22
 80078e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078e4:	4313      	orrs	r3, r2
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	e036      	b.n	800796c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007904:	69da      	ldr	r2, [r3, #28]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	f003 030f 	and.w	r3, r3, #15
 800790e:	2101      	movs	r1, #1
 8007910:	fa01 f303 	lsl.w	r3, r1, r3
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800791c:	4313      	orrs	r3, r2
 800791e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d11a      	bne.n	800796c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	791b      	ldrb	r3, [r3, #4]
 8007950:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007952:	430b      	orrs	r3, r1
 8007954:	4313      	orrs	r3, r2
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	440a      	add	r2, r1
 800795e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800796a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d161      	bne.n	8007a5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079ae:	d11f      	bne.n	80079f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	0151      	lsls	r1, r2, #5
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	440a      	add	r2, r1
 80079e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	2101      	movs	r1, #1
 8007a02:	fa01 f303 	lsl.w	r3, r1, r3
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a10:	4013      	ands	r3, r2
 8007a12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a1a:	69da      	ldr	r2, [r3, #28]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	2101      	movs	r1, #1
 8007a26:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	43db      	mvns	r3, r3
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a34:	4013      	ands	r3, r2
 8007a36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	0159      	lsls	r1, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	440b      	add	r3, r1
 8007a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a52:	4619      	mov	r1, r3
 8007a54:	4b35      	ldr	r3, [pc, #212]	@ (8007b2c <USB_DeactivateEndpoint+0x1b0>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	600b      	str	r3, [r1, #0]
 8007a5a:	e060      	b.n	8007b1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a72:	d11f      	bne.n	8007ab4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 030f 	and.w	r3, r3, #15
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	43db      	mvns	r3, r3
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f303 	lsl.w	r3, r1, r3
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	43db      	mvns	r3, r3
 8007af2:	68f9      	ldr	r1, [r7, #12]
 8007af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007af8:	4013      	ands	r3, r2
 8007afa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	0159      	lsls	r1, r3, #5
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	440b      	add	r3, r1
 8007b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b16:	4619      	mov	r1, r3
 8007b18:	4b05      	ldr	r3, [pc, #20]	@ (8007b30 <USB_DeactivateEndpoint+0x1b4>)
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	ec337800 	.word	0xec337800
 8007b30:	eff37800 	.word	0xeff37800

08007b34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	@ 0x28
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	785b      	ldrb	r3, [r3, #1]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	f040 817f 	bne.w	8007e54 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d132      	bne.n	8007bc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b78:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b7c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ba0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bbc:	0cdb      	lsrs	r3, r3, #19
 8007bbe:	04db      	lsls	r3, r3, #19
 8007bc0:	6113      	str	r3, [r2, #16]
 8007bc2:	e097      	b.n	8007cf4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bde:	0cdb      	lsrs	r3, r3, #19
 8007be0:	04db      	lsls	r3, r3, #19
 8007be2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bfe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c06:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d11a      	bne.n	8007c44 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	691a      	ldr	r2, [r3, #16]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	0151      	lsls	r1, r2, #5
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	440a      	add	r2, r1
 8007c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c40:	6113      	str	r3, [r2, #16]
 8007c42:	e044      	b.n	8007cce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	1e5a      	subs	r2, r3, #1
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c58:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	8afb      	ldrh	r3, [r7, #22]
 8007c6a:	04d9      	lsls	r1, r3, #19
 8007c6c:	4ba4      	ldr	r3, [pc, #656]	@ (8007f00 <USB_EPStartXfer+0x3cc>)
 8007c6e:	400b      	ands	r3, r1
 8007c70:	69b9      	ldr	r1, [r7, #24]
 8007c72:	0148      	lsls	r0, r1, #5
 8007c74:	69f9      	ldr	r1, [r7, #28]
 8007c76:	4401      	add	r1, r0
 8007c78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	791b      	ldrb	r3, [r3, #4]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d122      	bne.n	8007cce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ca2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007ca6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	8afb      	ldrh	r3, [r7, #22]
 8007cb8:	075b      	lsls	r3, r3, #29
 8007cba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007cbe:	69b9      	ldr	r1, [r7, #24]
 8007cc0:	0148      	lsls	r0, r1, #5
 8007cc2:	69f9      	ldr	r1, [r7, #28]
 8007cc4:	4401      	add	r1, r0
 8007cc6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ce4:	69b9      	ldr	r1, [r7, #24]
 8007ce6:	0148      	lsls	r0, r1, #5
 8007ce8:	69f9      	ldr	r1, [r7, #28]
 8007cea:	4401      	add	r1, r0
 8007cec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d14b      	bne.n	8007d92 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d009      	beq.n	8007d16 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	791b      	ldrb	r3, [r3, #4]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d128      	bne.n	8007d70 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d110      	bne.n	8007d50 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	0151      	lsls	r1, r2, #5
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	440a      	add	r2, r1
 8007d44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	e00f      	b.n	8007d70 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	0151      	lsls	r1, r2, #5
 8007d62:	69fa      	ldr	r2, [r7, #28]
 8007d64:	440a      	add	r2, r1
 8007d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d6e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	e166      	b.n	8008060 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007db0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	791b      	ldrb	r3, [r3, #4]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d015      	beq.n	8007de6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 814e 	beq.w	8008060 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f003 030f 	and.w	r3, r3, #15
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dda:	69f9      	ldr	r1, [r7, #28]
 8007ddc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007de0:	4313      	orrs	r3, r2
 8007de2:	634b      	str	r3, [r1, #52]	@ 0x34
 8007de4:	e13c      	b.n	8008060 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d110      	bne.n	8007e18 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	69fa      	ldr	r2, [r7, #28]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	e00f      	b.n	8007e38 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	0151      	lsls	r1, r2, #5
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e36:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	68d9      	ldr	r1, [r3, #12]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	b298      	uxth	r0, r3
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 f9b9 	bl	80081c4 <USB_WritePacket>
 8007e52:	e105      	b.n	8008060 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e6e:	0cdb      	lsrs	r3, r3, #19
 8007e70:	04db      	lsls	r3, r3, #19
 8007e72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e8e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e92:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e96:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d132      	bne.n	8007f04 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ecc:	69b9      	ldr	r1, [r7, #24]
 8007ece:	0148      	lsls	r0, r1, #5
 8007ed0:	69f9      	ldr	r1, [r7, #28]
 8007ed2:	4401      	add	r1, r0
 8007ed4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ef6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007efa:	6113      	str	r3, [r2, #16]
 8007efc:	e062      	b.n	8007fc4 <USB_EPStartXfer+0x490>
 8007efe:	bf00      	nop
 8007f00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d123      	bne.n	8007f54 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f18:	691a      	ldr	r2, [r3, #16]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f22:	69b9      	ldr	r1, [r7, #24]
 8007f24:	0148      	lsls	r0, r1, #5
 8007f26:	69f9      	ldr	r1, [r7, #28]
 8007f28:	4401      	add	r1, r0
 8007f2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f50:	6113      	str	r3, [r2, #16]
 8007f52:	e037      	b.n	8007fc4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	1e5a      	subs	r2, r3, #1
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f68:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	8afa      	ldrh	r2, [r7, #22]
 8007f70:	fb03 f202 	mul.w	r2, r3, r2
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f84:	691a      	ldr	r2, [r3, #16]
 8007f86:	8afb      	ldrh	r3, [r7, #22]
 8007f88:	04d9      	lsls	r1, r3, #19
 8007f8a:	4b38      	ldr	r3, [pc, #224]	@ (800806c <USB_EPStartXfer+0x538>)
 8007f8c:	400b      	ands	r3, r1
 8007f8e:	69b9      	ldr	r1, [r7, #24]
 8007f90:	0148      	lsls	r0, r1, #5
 8007f92:	69f9      	ldr	r1, [r7, #28]
 8007f94:	4401      	add	r1, r0
 8007f96:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb4:	69b9      	ldr	r1, [r7, #24]
 8007fb6:	0148      	lsls	r0, r1, #5
 8007fb8:	69f9      	ldr	r1, [r7, #28]
 8007fba:	4401      	add	r1, r0
 8007fbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d10d      	bne.n	8007fe6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	68d9      	ldr	r1, [r3, #12]
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe2:	460a      	mov	r2, r1
 8007fe4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	791b      	ldrb	r3, [r3, #4]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d128      	bne.n	8008040 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d110      	bne.n	8008020 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008018:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	e00f      	b.n	8008040 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800803a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800803e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	440a      	add	r2, r1
 8008056:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800805a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800805e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	1ff80000 	.word	0x1ff80000

08008070 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d14a      	bne.n	8008124 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080a6:	f040 8086 	bne.w	80081b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	7812      	ldrb	r2, [r2, #0]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	0151      	lsls	r1, r2, #5
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	440a      	add	r2, r1
 80080e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80080fe:	4293      	cmp	r3, r2
 8008100:	d902      	bls.n	8008108 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	75fb      	strb	r3, [r7, #23]
          break;
 8008106:	e056      	b.n	80081b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800811c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008120:	d0e7      	beq.n	80080f2 <USB_EPStopXfer+0x82>
 8008122:	e048      	b.n	80081b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800813c:	d13b      	bne.n	80081b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	7812      	ldrb	r2, [r2, #0]
 8008152:	0151      	lsls	r1, r2, #5
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	440a      	add	r2, r1
 8008158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800815c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008160:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	7812      	ldrb	r2, [r2, #0]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008184:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008192:	4293      	cmp	r3, r2
 8008194:	d902      	bls.n	800819c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	75fb      	strb	r3, [r7, #23]
          break;
 800819a:	e00c      	b.n	80081b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081b4:	d0e7      	beq.n	8008186 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	371c      	adds	r7, #28
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b089      	sub	sp, #36	@ 0x24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	4611      	mov	r1, r2
 80081d0:	461a      	mov	r2, r3
 80081d2:	460b      	mov	r3, r1
 80081d4:	71fb      	strb	r3, [r7, #7]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80081e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d123      	bne.n	8008232 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80081ea:	88bb      	ldrh	r3, [r7, #4]
 80081ec:	3303      	adds	r3, #3
 80081ee:	089b      	lsrs	r3, r3, #2
 80081f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081f2:	2300      	movs	r3, #0
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e018      	b.n	800822a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	031a      	lsls	r2, r3, #12
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008204:	461a      	mov	r2, r3
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	3301      	adds	r3, #1
 8008210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	3301      	adds	r3, #1
 8008216:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	3301      	adds	r3, #1
 800821c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	3301      	adds	r3, #1
 8008222:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	3301      	adds	r3, #1
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	429a      	cmp	r2, r3
 8008230:	d3e2      	bcc.n	80081f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3724      	adds	r7, #36	@ 0x24
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008240:	b480      	push	{r7}
 8008242:	b08b      	sub	sp, #44	@ 0x2c
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	089b      	lsrs	r3, r3, #2
 800825a:	b29b      	uxth	r3, r3
 800825c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008266:	2300      	movs	r3, #0
 8008268:	623b      	str	r3, [r7, #32]
 800826a:	e014      	b.n	8008296 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	601a      	str	r2, [r3, #0]
    pDest++;
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	3301      	adds	r3, #1
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	3301      	adds	r3, #1
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	3301      	adds	r3, #1
 8008288:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	3301      	adds	r3, #1
 800828e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	3301      	adds	r3, #1
 8008294:	623b      	str	r3, [r7, #32]
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	429a      	cmp	r2, r3
 800829c:	d3e6      	bcc.n	800826c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800829e:	8bfb      	ldrh	r3, [r7, #30]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01e      	beq.n	80082e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ae:	461a      	mov	r2, r3
 80082b0:	f107 0310 	add.w	r3, r7, #16
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	701a      	strb	r2, [r3, #0]
      i++;
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	3301      	adds	r3, #1
 80082ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d2:	3301      	adds	r3, #1
 80082d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80082d6:	8bfb      	ldrh	r3, [r7, #30]
 80082d8:	3b01      	subs	r3, #1
 80082da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80082dc:	8bfb      	ldrh	r3, [r7, #30]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1ea      	bne.n	80082b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	372c      	adds	r7, #44	@ 0x2c
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d12c      	bne.n	8008366 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	db12      	blt.n	8008344 <USB_EPSetStall+0x54>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00f      	beq.n	8008344 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800833e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008342:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	0151      	lsls	r1, r2, #5
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	440a      	add	r2, r1
 800835a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800835e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008362:	6013      	str	r3, [r2, #0]
 8008364:	e02b      	b.n	80083be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	db12      	blt.n	800839e <USB_EPSetStall+0xae>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00f      	beq.n	800839e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	440a      	add	r2, r1
 8008394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008398:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800839c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d128      	bne.n	800843a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008402:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008406:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	791b      	ldrb	r3, [r3, #4]
 800840c:	2b03      	cmp	r3, #3
 800840e:	d003      	beq.n	8008418 <USB_EPClearStall+0x4c>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	791b      	ldrb	r3, [r3, #4]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d138      	bne.n	800848a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	440a      	add	r2, r1
 800842e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	e027      	b.n	800848a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008454:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008458:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	791b      	ldrb	r3, [r3, #4]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d003      	beq.n	800846a <USB_EPClearStall+0x9e>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	791b      	ldrb	r3, [r3, #4]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d10f      	bne.n	800848a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	440a      	add	r2, r1
 8008480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008488:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80084ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80084cc:	68f9      	ldr	r1, [r7, #12]
 80084ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084d2:	4313      	orrs	r3, r2
 80084d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008512:	f023 0302 	bic.w	r3, r3, #2
 8008516:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008526:	b480      	push	{r7}
 8008528:	b085      	sub	sp, #20
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008540:	f023 0303 	bic.w	r3, r3, #3
 8008544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008554:	f043 0302 	orr.w	r3, r3, #2
 8008558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4013      	ands	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008580:	68fb      	ldr	r3, [r7, #12]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	4013      	ands	r3, r2
 80085b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	0c1b      	lsrs	r3, r3, #16
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	4013      	ands	r3, r2
 80085e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	b29b      	uxth	r3, r3
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b085      	sub	sp, #20
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	4013      	ands	r3, r2
 8008622:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008624:	68bb      	ldr	r3, [r7, #8]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008632:	b480      	push	{r7}
 8008634:	b087      	sub	sp, #28
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008654:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	f003 030f 	and.w	r3, r3, #15
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	fa22 f303 	lsr.w	r3, r2, r3
 8008662:	01db      	lsls	r3, r3, #7
 8008664:	b2db      	uxtb	r3, r3
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	4013      	ands	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008680:	68bb      	ldr	r3, [r7, #8]
}
 8008682:	4618      	mov	r0, r3
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	f003 0301 	and.w	r3, r3, #1
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80086c8:	f023 0307 	bic.w	r3, r3, #7
 80086cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	460b      	mov	r3, r1
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	333c      	adds	r3, #60	@ 0x3c
 8008706:	3304      	adds	r3, #4
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	4a26      	ldr	r2, [pc, #152]	@ (80087a8 <USB_EP0_OutStart+0xb8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d90a      	bls.n	800872a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008724:	d101      	bne.n	800872a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	e037      	b.n	800879a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008730:	461a      	mov	r2, r3
 8008732:	2300      	movs	r3, #0
 8008734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008748:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008758:	f043 0318 	orr.w	r3, r3, #24
 800875c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800876c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008770:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d10f      	bne.n	8008798 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800877e:	461a      	mov	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008792:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	4f54300a 	.word	0x4f54300a

080087ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087c4:	d901      	bls.n	80087ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e01b      	b.n	8008802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	daf2      	bge.n	80087b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f043 0201 	orr.w	r2, r3, #1
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3301      	adds	r3, #1
 80087e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087ee:	d901      	bls.n	80087f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e006      	b.n	8008802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d0f0      	beq.n	80087e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f103 0208 	add.w	r2, r3, #8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f103 0208 	add.w	r2, r3, #8
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f103 0208 	add.w	r2, r3, #8
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d103      	bne.n	8008888 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	e00c      	b.n	80088a2 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3308      	adds	r3, #8
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	e002      	b.n	8008896 <vListInsert+0x2e>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d2f6      	bcs.n	8008890 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	601a      	str	r2, [r3, #0]
}
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088da:	b480      	push	{r7}
 80088dc:	b085      	sub	sp, #20
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6892      	ldr	r2, [r2, #8]
 80088f0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6852      	ldr	r2, [r2, #4]
 80088fa:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d103      	bne.n	800890e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	1e5a      	subs	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
	...

08008930 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800893a:	2301      	movs	r3, #1
 800893c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10b      	bne.n	8008960 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800895a:	bf00      	nop
 800895c:	bf00      	nop
 800895e:	e7fd      	b.n	800895c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d05d      	beq.n	8008a22 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800896a:	2b00      	cmp	r3, #0
 800896c:	d059      	beq.n	8008a22 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008976:	2100      	movs	r1, #0
 8008978:	fba3 2302 	umull	r2, r3, r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d000      	beq.n	8008982 <xQueueGenericReset+0x52>
 8008980:	2101      	movs	r1, #1
 8008982:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008984:	2b00      	cmp	r3, #0
 8008986:	d14c      	bne.n	8008a22 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8008988:	f002 f888 	bl	800aa9c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008994:	6939      	ldr	r1, [r7, #16]
 8008996:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008998:	fb01 f303 	mul.w	r3, r1, r3
 800899c:	441a      	add	r2, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2200      	movs	r2, #0
 80089a6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b8:	3b01      	subs	r3, #1
 80089ba:	6939      	ldr	r1, [r7, #16]
 80089bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80089be:	fb01 f303 	mul.w	r3, r1, r3
 80089c2:	441a      	add	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	22ff      	movs	r2, #255	@ 0xff
 80089cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	22ff      	movs	r2, #255	@ 0xff
 80089d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d114      	bne.n	8008a08 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01a      	beq.n	8008a1c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	3310      	adds	r3, #16
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 f93c 	bl	8009c68 <xTaskRemoveFromEventList>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d012      	beq.n	8008a1c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80089f6:	4b16      	ldr	r3, [pc, #88]	@ (8008a50 <xQueueGenericReset+0x120>)
 80089f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	e009      	b.n	8008a1c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	3310      	adds	r3, #16
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fefe 	bl	800880e <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	3324      	adds	r3, #36	@ 0x24
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff fef9 	bl	800880e <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008a1c:	f002 f870 	bl	800ab00 <vPortExitCritical>
 8008a20:	e001      	b.n	8008a26 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10b      	bne.n	8008a44 <xQueueGenericReset+0x114>
        __asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	60bb      	str	r3, [r7, #8]
    }
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	e7fd      	b.n	8008a40 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8008a44:	697b      	ldr	r3, [r7, #20]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	@ 0x28
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d02e      	beq.n	8008aca <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	fba3 2302 	umull	r2, r3, r3, r2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d000      	beq.n	8008a7c <xQueueGenericCreate+0x28>
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d123      	bne.n	8008aca <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008a8a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008a8e:	d81c      	bhi.n	8008aca <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	3350      	adds	r3, #80	@ 0x50
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f002 f8e4 	bl	800ac6c <pvPortMalloc>
 8008aa4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d01d      	beq.n	8008ae8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	3350      	adds	r3, #80	@ 0x50
 8008ab4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ab6:	79fa      	ldrb	r2, [r7, #7]
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	4613      	mov	r3, r2
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 f815 	bl	8008af2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008ac8:	e00e      	b.n	8008ae8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10b      	bne.n	8008ae8 <xQueueGenericCreate+0x94>
        __asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	613b      	str	r3, [r7, #16]
    }
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
    }
 8008aea:	4618      	mov	r0, r3
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d103      	bne.n	8008b0e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e002      	b.n	8008b14 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b20:	2101      	movs	r1, #1
 8008b22:	69b8      	ldr	r0, [r7, #24]
 8008b24:	f7ff ff04 	bl	8008930 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00e      	beq.n	8008b64 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f81c 	bl	8008b9c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b76:	2301      	movs	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	461a      	mov	r2, r3
 8008b82:	6939      	ldr	r1, [r7, #16]
 8008b84:	6978      	ldr	r0, [r7, #20]
 8008b86:	f7ff ff65 	bl	8008a54 <xQueueGenericCreate>
 8008b8a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f7ff ffd3 	bl	8008b38 <prvInitialiseMutex>

        return xNewQueue;
 8008b92:	68fb      	ldr	r3, [r7, #12]
    }
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08e      	sub	sp, #56	@ 0x38
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008baa:	2300      	movs	r3, #0
 8008bac:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10b      	bne.n	8008bd0 <xQueueGenericSend+0x34>
        __asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008bca:	bf00      	nop
 8008bcc:	bf00      	nop
 8008bce:	e7fd      	b.n	8008bcc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d103      	bne.n	8008bde <xQueueGenericSend+0x42>
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <xQueueGenericSend+0x46>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <xQueueGenericSend+0x48>
 8008be2:	2300      	movs	r3, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <xQueueGenericSend+0x64>
        __asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSend+0x72>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSend+0x76>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSend+0x78>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <xQueueGenericSend+0x94>
        __asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	623b      	str	r3, [r7, #32]
    }
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c30:	f001 fa2e 	bl	800a090 <xTaskGetSchedulerState>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d102      	bne.n	8008c40 <xQueueGenericSend+0xa4>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <xQueueGenericSend+0xa8>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <xQueueGenericSend+0xaa>
 8008c44:	2300      	movs	r3, #0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10b      	bne.n	8008c62 <xQueueGenericSend+0xc6>
        __asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	61fb      	str	r3, [r7, #28]
    }
 8008c5c:	bf00      	nop
 8008c5e:	bf00      	nop
 8008c60:	e7fd      	b.n	8008c5e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008c62:	f001 ff1b 	bl	800aa9c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d302      	bcc.n	8008c78 <xQueueGenericSend+0xdc>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d129      	bne.n	8008ccc <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c7e:	f000 f971 	bl	8008f64 <prvCopyDataToQueue>
 8008c82:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	3324      	adds	r3, #36	@ 0x24
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 ffe9 	bl	8009c68 <xTaskRemoveFromEventList>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d013      	beq.n	8008cc4 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8008c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8008d9c <xQueueGenericSend+0x200>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	e00a      	b.n	8008cc4 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8008cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d007      	beq.n	8008cc4 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8008cb4:	4b39      	ldr	r3, [pc, #228]	@ (8008d9c <xQueueGenericSend+0x200>)
 8008cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008cc4:	f001 ff1c 	bl	800ab00 <vPortExitCritical>
                return pdPASS;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e063      	b.n	8008d94 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d103      	bne.n	8008cda <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008cd2:	f001 ff15 	bl	800ab00 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e05c      	b.n	8008d94 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008ce0:	f107 0314 	add.w	r3, r7, #20
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 f897 	bl	8009e18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008cea:	2301      	movs	r3, #1
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008cee:	f001 ff07 	bl	800ab00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008cf2:	f000 fcbf 	bl	8009674 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008cf6:	f001 fed1 	bl	800aa9c <vPortEnterCritical>
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d00:	b25b      	sxtb	r3, r3
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d06:	d103      	bne.n	8008d10 <xQueueGenericSend+0x174>
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d16:	b25b      	sxtb	r3, r3
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d103      	bne.n	8008d26 <xQueueGenericSend+0x18a>
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d26:	f001 feeb 	bl	800ab00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d2a:	1d3a      	adds	r2, r7, #4
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 f886 	bl	8009e44 <xTaskCheckForTimeOut>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d124      	bne.n	8008d88 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d40:	f000 fa08 	bl	8009154 <prvIsQueueFull>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d018      	beq.n	8008d7c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4c:	3310      	adds	r3, #16
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 ff1c 	bl	8009b90 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008d58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d5a:	f000 f993 	bl	8009084 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008d5e:	f000 fc97 	bl	8009690 <xTaskResumeAll>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f47f af7c 	bne.w	8008c62 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d9c <xQueueGenericSend+0x200>)
 8008d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	e772      	b.n	8008c62 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008d7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d7e:	f000 f981 	bl	8009084 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008d82:	f000 fc85 	bl	8009690 <xTaskResumeAll>
 8008d86:	e76c      	b.n	8008c62 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d8a:	f000 f97b 	bl	8009084 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008d8e:	f000 fc7f 	bl	8009690 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8008d92:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3738      	adds	r7, #56	@ 0x38
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08c      	sub	sp, #48	@ 0x30
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10b      	bne.n	8008dd2 <xQueueReceive+0x32>
        __asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	623b      	str	r3, [r7, #32]
    }
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	e7fd      	b.n	8008dce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <xQueueReceive+0x40>
 8008dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <xQueueReceive+0x44>
 8008de0:	2301      	movs	r3, #1
 8008de2:	e000      	b.n	8008de6 <xQueueReceive+0x46>
 8008de4:	2300      	movs	r3, #0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10b      	bne.n	8008e02 <xQueueReceive+0x62>
        __asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	61fb      	str	r3, [r7, #28]
    }
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e02:	f001 f945 	bl	800a090 <xTaskGetSchedulerState>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <xQueueReceive+0x72>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <xQueueReceive+0x76>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e000      	b.n	8008e18 <xQueueReceive+0x78>
 8008e16:	2300      	movs	r3, #0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <xQueueReceive+0x94>
        __asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	61bb      	str	r3, [r7, #24]
    }
 8008e2e:	bf00      	nop
 8008e30:	bf00      	nop
 8008e32:	e7fd      	b.n	8008e30 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008e34:	f001 fe32 	bl	800aa9c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01f      	beq.n	8008e84 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e48:	f000 f8f6 	bl	8009038 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4e:	1e5a      	subs	r2, r3, #1
 8008e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e52:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00f      	beq.n	8008e7c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5e:	3310      	adds	r3, #16
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 ff01 	bl	8009c68 <xTaskRemoveFromEventList>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d007      	beq.n	8008e7c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8008f60 <xQueueReceive+0x1c0>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008e7c:	f001 fe40 	bl	800ab00 <vPortExitCritical>
                return pdPASS;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e069      	b.n	8008f58 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d103      	bne.n	8008e92 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008e8a:	f001 fe39 	bl	800ab00 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e062      	b.n	8008f58 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008e98:	f107 0310 	add.w	r3, r7, #16
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 ffbb 	bl	8009e18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008ea6:	f001 fe2b 	bl	800ab00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008eaa:	f000 fbe3 	bl	8009674 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008eae:	f001 fdf5 	bl	800aa9c <vPortEnterCritical>
 8008eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008eb8:	b25b      	sxtb	r3, r3
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d103      	bne.n	8008ec8 <xQueueReceive+0x128>
 8008ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed4:	d103      	bne.n	8008ede <xQueueReceive+0x13e>
 8008ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ede:	f001 fe0f 	bl	800ab00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ee2:	1d3a      	adds	r2, r7, #4
 8008ee4:	f107 0310 	add.w	r3, r7, #16
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 ffaa 	bl	8009e44 <xTaskCheckForTimeOut>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d123      	bne.n	8008f3e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ef8:	f000 f916 	bl	8009128 <prvIsQueueEmpty>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d017      	beq.n	8008f32 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	3324      	adds	r3, #36	@ 0x24
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fe40 	bl	8009b90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f12:	f000 f8b7 	bl	8009084 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008f16:	f000 fbbb 	bl	8009690 <xTaskResumeAll>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d189      	bne.n	8008e34 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8008f20:	4b0f      	ldr	r3, [pc, #60]	@ (8008f60 <xQueueReceive+0x1c0>)
 8008f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	e780      	b.n	8008e34 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f34:	f000 f8a6 	bl	8009084 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008f38:	f000 fbaa 	bl	8009690 <xTaskResumeAll>
 8008f3c:	e77a      	b.n	8008e34 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f40:	f000 f8a0 	bl	8009084 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008f44:	f000 fba4 	bl	8009690 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f4a:	f000 f8ed 	bl	8009128 <prvIsQueueEmpty>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f43f af6f 	beq.w	8008e34 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8008f56:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3730      	adds	r7, #48	@ 0x30
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	e000ed04 	.word	0xe000ed04

08008f64 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f78:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10d      	bne.n	8008f9e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d14d      	bne.n	8009026 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 f89c 	bl	800a0cc <xTaskPriorityDisinherit>
 8008f94:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	609a      	str	r2, [r3, #8]
 8008f9c:	e043      	b.n	8009026 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d119      	bne.n	8008fd8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6858      	ldr	r0, [r3, #4]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fac:	461a      	mov	r2, r3
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	f004 fde8 	bl	800db84 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbc:	441a      	add	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d32b      	bcc.n	8009026 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	605a      	str	r2, [r3, #4]
 8008fd6:	e026      	b.n	8009026 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68d8      	ldr	r0, [r3, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	f004 fdce 	bl	800db84 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff0:	425b      	negs	r3, r3
 8008ff2:	441a      	add	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d207      	bcs.n	8009014 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900c:	425b      	negs	r3, r3
 800900e:	441a      	add	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d105      	bne.n	8009026 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	3b01      	subs	r3, #1
 8009024:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800902e:	697b      	ldr	r3, [r7, #20]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d018      	beq.n	800907c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	441a      	add	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	429a      	cmp	r2, r3
 8009062:	d303      	bcc.n	800906c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68d9      	ldr	r1, [r3, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009074:	461a      	mov	r2, r3
 8009076:	6838      	ldr	r0, [r7, #0]
 8009078:	f004 fd84 	bl	800db84 <memcpy>
    }
}
 800907c:	bf00      	nop
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800908c:	f001 fd06 	bl	800aa9c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009096:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009098:	e011      	b.n	80090be <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d012      	beq.n	80090c8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	3324      	adds	r3, #36	@ 0x24
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 fdde 	bl	8009c68 <xTaskRemoveFromEventList>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80090b2:	f000 ff2f 	bl	8009f14 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80090b6:	7bfb      	ldrb	r3, [r7, #15]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80090be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dce9      	bgt.n	800909a <prvUnlockQueue+0x16>
 80090c6:	e000      	b.n	80090ca <prvUnlockQueue+0x46>
                    break;
 80090c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	22ff      	movs	r2, #255	@ 0xff
 80090ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80090d2:	f001 fd15 	bl	800ab00 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80090d6:	f001 fce1 	bl	800aa9c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80090e2:	e011      	b.n	8009108 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d012      	beq.n	8009112 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3310      	adds	r3, #16
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fdb9 	bl	8009c68 <xTaskRemoveFromEventList>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80090fc:	f000 ff0a 	bl	8009f14 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	3b01      	subs	r3, #1
 8009104:	b2db      	uxtb	r3, r3
 8009106:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800910c:	2b00      	cmp	r3, #0
 800910e:	dce9      	bgt.n	80090e4 <prvUnlockQueue+0x60>
 8009110:	e000      	b.n	8009114 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009112:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	22ff      	movs	r2, #255	@ 0xff
 8009118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800911c:	f001 fcf0 	bl	800ab00 <vPortExitCritical>
}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009130:	f001 fcb4 	bl	800aa9c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d102      	bne.n	8009142 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e001      	b.n	8009146 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009146:	f001 fcdb 	bl	800ab00 <vPortExitCritical>

    return xReturn;
 800914a:	68fb      	ldr	r3, [r7, #12]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800915c:	f001 fc9e 	bl	800aa9c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009168:	429a      	cmp	r2, r3
 800916a:	d102      	bne.n	8009172 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800916c:	2301      	movs	r3, #1
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	e001      	b.n	8009176 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009176:	f001 fcc3 	bl	800ab00 <vPortExitCritical>

    return xReturn;
 800917a:	68fb      	ldr	r3, [r7, #12]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10b      	bne.n	80091b0 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	60fb      	str	r3, [r7, #12]
    }
 80091aa:	bf00      	nop
 80091ac:	bf00      	nop
 80091ae:	e7fd      	b.n	80091ac <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d024      	beq.n	8009200 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091b6:	2300      	movs	r3, #0
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	e01e      	b.n	80091fa <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80091bc:	4a18      	ldr	r2, [pc, #96]	@ (8009220 <vQueueAddToRegistry+0x9c>)
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	00db      	lsls	r3, r3, #3
 80091c2:	4413      	add	r3, r2
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d105      	bne.n	80091d8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	4a13      	ldr	r2, [pc, #76]	@ (8009220 <vQueueAddToRegistry+0x9c>)
 80091d2:	4413      	add	r3, r2
 80091d4:	613b      	str	r3, [r7, #16]
                    break;
 80091d6:	e013      	b.n	8009200 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <vQueueAddToRegistry+0x70>
 80091de:	4a10      	ldr	r2, [pc, #64]	@ (8009220 <vQueueAddToRegistry+0x9c>)
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d104      	bne.n	80091f4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009220 <vQueueAddToRegistry+0x9c>)
 80091f0:	4413      	add	r3, r2
 80091f2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	3301      	adds	r3, #1
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b07      	cmp	r3, #7
 80091fe:	d9dd      	bls.n	80091bc <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	200002f4 	.word	0x200002f4

08009224 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009234:	f001 fc32 	bl	800aa9c <vPortEnterCritical>
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800923e:	b25b      	sxtb	r3, r3
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d103      	bne.n	800924e <vQueueWaitForMessageRestricted+0x2a>
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009254:	b25b      	sxtb	r3, r3
 8009256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925a:	d103      	bne.n	8009264 <vQueueWaitForMessageRestricted+0x40>
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009264:	f001 fc4c 	bl	800ab00 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d106      	bne.n	800927e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	3324      	adds	r3, #36	@ 0x24
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fcaf 	bl	8009bdc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800927e:	6978      	ldr	r0, [r7, #20]
 8009280:	f7ff ff00 	bl	8009084 <prvUnlockQueue>
    }
 8009284:	bf00      	nop
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800928c:	b580      	push	{r7, lr}
 800928e:	b08c      	sub	sp, #48	@ 0x30
 8009290:	af04      	add	r7, sp, #16
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	4613      	mov	r3, r2
 800929a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 fce3 	bl	800ac6c <pvPortMalloc>
 80092a6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d013      	beq.n	80092d6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092ae:	2058      	movs	r0, #88	@ 0x58
 80092b0:	f001 fcdc 	bl	800ac6c <pvPortMalloc>
 80092b4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80092bc:	2258      	movs	r2, #88	@ 0x58
 80092be:	2100      	movs	r1, #0
 80092c0:	69f8      	ldr	r0, [r7, #28]
 80092c2:	f004 fc33 	bl	800db2c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80092cc:	e005      	b.n	80092da <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80092ce:	6978      	ldr	r0, [r7, #20]
 80092d0:	f001 fd88 	bl	800ade4 <vPortFree>
 80092d4:	e001      	b.n	80092da <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d013      	beq.n	8009308 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092e0:	88fa      	ldrh	r2, [r7, #6]
 80092e2:	2300      	movs	r3, #0
 80092e4:	9303      	str	r3, [sp, #12]
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	9302      	str	r3, [sp, #8]
 80092ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f80e 	bl	8009318 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80092fc:	69f8      	ldr	r0, [r7, #28]
 80092fe:	f000 f89b 	bl	8009438 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009302:	2301      	movs	r3, #1
 8009304:	61bb      	str	r3, [r7, #24]
 8009306:	e002      	b.n	800930e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009308:	f04f 33ff 	mov.w	r3, #4294967295
 800930c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800930e:	69bb      	ldr	r3, [r7, #24]
    }
 8009310:	4618      	mov	r0, r3
 8009312:	3720      	adds	r7, #32
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	461a      	mov	r2, r3
 8009330:	21a5      	movs	r1, #165	@ 0xa5
 8009332:	f004 fbfb 	bl	800db2c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009340:	3b01      	subs	r3, #1
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	f023 0307 	bic.w	r3, r3, #7
 800934e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00b      	beq.n	8009372 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	617b      	str	r3, [r7, #20]
    }
 800936c:	bf00      	nop
 800936e:	bf00      	nop
 8009370:	e7fd      	b.n	800936e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01e      	beq.n	80093b6 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009378:	2300      	movs	r3, #0
 800937a:	61fb      	str	r3, [r7, #28]
 800937c:	e012      	b.n	80093a4 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	4413      	add	r3, r2
 8009384:	7819      	ldrb	r1, [r3, #0]
 8009386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	4413      	add	r3, r2
 800938c:	3334      	adds	r3, #52	@ 0x34
 800938e:	460a      	mov	r2, r1
 8009390:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	4413      	add	r3, r2
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d006      	beq.n	80093ac <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	3301      	adds	r3, #1
 80093a2:	61fb      	str	r3, [r7, #28]
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	2b09      	cmp	r3, #9
 80093a8:	d9e9      	bls.n	800937e <prvInitialiseNewTask+0x66>
 80093aa:	e000      	b.n	80093ae <prvInitialiseNewTask+0x96>
            {
                break;
 80093ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d90b      	bls.n	80093d4 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	613b      	str	r3, [r7, #16]
    }
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d901      	bls.n	80093de <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093da:	2304      	movs	r3, #4
 80093dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093e8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	3304      	adds	r3, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fa2d 	bl	800884e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	3318      	adds	r3, #24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff fa28 	bl	800884e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009402:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	f1c3 0205 	rsb	r2, r3, #5
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009412:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	69b8      	ldr	r0, [r7, #24]
 800941a:	f001 fa09 	bl	800a830 <pxPortInitialiseStack>
 800941e:	4602      	mov	r2, r0
 8009420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009422:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800942a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800942e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009430:	bf00      	nop
 8009432:	3720      	adds	r7, #32
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009440:	f001 fb2c 	bl	800aa9c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009444:	4b40      	ldr	r3, [pc, #256]	@ (8009548 <prvAddNewTaskToReadyList+0x110>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	4a3f      	ldr	r2, [pc, #252]	@ (8009548 <prvAddNewTaskToReadyList+0x110>)
 800944c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800944e:	4b3f      	ldr	r3, [pc, #252]	@ (800954c <prvAddNewTaskToReadyList+0x114>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d109      	bne.n	800946a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009456:	4a3d      	ldr	r2, [pc, #244]	@ (800954c <prvAddNewTaskToReadyList+0x114>)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800945c:	4b3a      	ldr	r3, [pc, #232]	@ (8009548 <prvAddNewTaskToReadyList+0x110>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d110      	bne.n	8009486 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009464:	f000 fd7a 	bl	8009f5c <prvInitialiseTaskLists>
 8009468:	e00d      	b.n	8009486 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800946a:	4b39      	ldr	r3, [pc, #228]	@ (8009550 <prvAddNewTaskToReadyList+0x118>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d109      	bne.n	8009486 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009472:	4b36      	ldr	r3, [pc, #216]	@ (800954c <prvAddNewTaskToReadyList+0x114>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947c:	429a      	cmp	r2, r3
 800947e:	d802      	bhi.n	8009486 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009480:	4a32      	ldr	r2, [pc, #200]	@ (800954c <prvAddNewTaskToReadyList+0x114>)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009486:	4b33      	ldr	r3, [pc, #204]	@ (8009554 <prvAddNewTaskToReadyList+0x11c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	4a31      	ldr	r2, [pc, #196]	@ (8009554 <prvAddNewTaskToReadyList+0x11c>)
 800948e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009490:	4b30      	ldr	r3, [pc, #192]	@ (8009554 <prvAddNewTaskToReadyList+0x11c>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949c:	2201      	movs	r2, #1
 800949e:	409a      	lsls	r2, r3
 80094a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009558 <prvAddNewTaskToReadyList+0x120>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009558 <prvAddNewTaskToReadyList+0x120>)
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ae:	492b      	ldr	r1, [pc, #172]	@ (800955c <prvAddNewTaskToReadyList+0x124>)
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	440b      	add	r3, r1
 80094ba:	3304      	adds	r3, #4
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	609a      	str	r2, [r3, #8]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60da      	str	r2, [r3, #12]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	3204      	adds	r2, #4
 80094d6:	605a      	str	r2, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	1d1a      	adds	r2, r3, #4
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	609a      	str	r2, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4a1b      	ldr	r2, [pc, #108]	@ (800955c <prvAddNewTaskToReadyList+0x124>)
 80094ee:	441a      	add	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	615a      	str	r2, [r3, #20]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f8:	4918      	ldr	r1, [pc, #96]	@ (800955c <prvAddNewTaskToReadyList+0x124>)
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	440b      	add	r3, r1
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	1c59      	adds	r1, r3, #1
 8009508:	4814      	ldr	r0, [pc, #80]	@ (800955c <prvAddNewTaskToReadyList+0x124>)
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4403      	add	r3, r0
 8009514:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009516:	f001 faf3 	bl	800ab00 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800951a:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <prvAddNewTaskToReadyList+0x118>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00e      	beq.n	8009540 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009522:	4b0a      	ldr	r3, [pc, #40]	@ (800954c <prvAddNewTaskToReadyList+0x114>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952c:	429a      	cmp	r2, r3
 800952e:	d207      	bcs.n	8009540 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009530:	4b0b      	ldr	r3, [pc, #44]	@ (8009560 <prvAddNewTaskToReadyList+0x128>)
 8009532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009540:	bf00      	nop
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	2000040c 	.word	0x2000040c
 800954c:	20000334 	.word	0x20000334
 8009550:	20000418 	.word	0x20000418
 8009554:	20000428 	.word	0x20000428
 8009558:	20000414 	.word	0x20000414
 800955c:	20000338 	.word	0x20000338
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d018      	beq.n	80095a8 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009576:	4b14      	ldr	r3, [pc, #80]	@ (80095c8 <vTaskDelay+0x64>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00b      	beq.n	8009596 <vTaskDelay+0x32>
        __asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	60bb      	str	r3, [r7, #8]
    }
 8009590:	bf00      	nop
 8009592:	bf00      	nop
 8009594:	e7fd      	b.n	8009592 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009596:	f000 f86d 	bl	8009674 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800959a:	2100      	movs	r1, #0
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fe3b 	bl	800a218 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80095a2:	f000 f875 	bl	8009690 <xTaskResumeAll>
 80095a6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d107      	bne.n	80095be <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80095ae:	4b07      	ldr	r3, [pc, #28]	@ (80095cc <vTaskDelay+0x68>)
 80095b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80095be:	bf00      	nop
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20000434 	.word	0x20000434
 80095cc:	e000ed04 	.word	0xe000ed04

080095d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80095d6:	4b20      	ldr	r3, [pc, #128]	@ (8009658 <vTaskStartScheduler+0x88>)
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	2300      	movs	r3, #0
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	2300      	movs	r3, #0
 80095e0:	2282      	movs	r2, #130	@ 0x82
 80095e2:	491e      	ldr	r1, [pc, #120]	@ (800965c <vTaskStartScheduler+0x8c>)
 80095e4:	481e      	ldr	r0, [pc, #120]	@ (8009660 <vTaskStartScheduler+0x90>)
 80095e6:	f7ff fe51 	bl	800928c <xTaskCreate>
 80095ea:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d102      	bne.n	80095f8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80095f2:	f000 fe91 	bl	800a318 <xTimerCreateTimerTask>
 80095f6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d116      	bne.n	800962c <vTaskStartScheduler+0x5c>
        __asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60bb      	str	r3, [r7, #8]
    }
 8009610:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009612:	4b14      	ldr	r3, [pc, #80]	@ (8009664 <vTaskStartScheduler+0x94>)
 8009614:	f04f 32ff 	mov.w	r2, #4294967295
 8009618:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800961a:	4b13      	ldr	r3, [pc, #76]	@ (8009668 <vTaskStartScheduler+0x98>)
 800961c:	2201      	movs	r2, #1
 800961e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009620:	4b12      	ldr	r3, [pc, #72]	@ (800966c <vTaskStartScheduler+0x9c>)
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009626:	f001 f995 	bl	800a954 <xPortStartScheduler>
 800962a:	e00f      	b.n	800964c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d10b      	bne.n	800964c <vTaskStartScheduler+0x7c>
        __asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	607b      	str	r3, [r7, #4]
    }
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	e7fd      	b.n	8009648 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800964c:	4b08      	ldr	r3, [pc, #32]	@ (8009670 <vTaskStartScheduler+0xa0>)
 800964e:	681b      	ldr	r3, [r3, #0]
}
 8009650:	bf00      	nop
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	20000430 	.word	0x20000430
 800965c:	0800dbf4 	.word	0x0800dbf4
 8009660:	08009f2d 	.word	0x08009f2d
 8009664:	2000042c 	.word	0x2000042c
 8009668:	20000418 	.word	0x20000418
 800966c:	20000410 	.word	0x20000410
 8009670:	2000000c 	.word	0x2000000c

08009674 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009678:	4b04      	ldr	r3, [pc, #16]	@ (800968c <vTaskSuspendAll+0x18>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3301      	adds	r3, #1
 800967e:	4a03      	ldr	r2, [pc, #12]	@ (800968c <vTaskSuspendAll+0x18>)
 8009680:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009682:	bf00      	nop
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20000434 	.word	0x20000434

08009690 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800969a:	2300      	movs	r3, #0
 800969c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800969e:	4b71      	ldr	r3, [pc, #452]	@ (8009864 <xTaskResumeAll+0x1d4>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10b      	bne.n	80096be <xTaskResumeAll+0x2e>
        __asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	607b      	str	r3, [r7, #4]
    }
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
 80096bc:	e7fd      	b.n	80096ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80096be:	f001 f9ed 	bl	800aa9c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80096c2:	4b68      	ldr	r3, [pc, #416]	@ (8009864 <xTaskResumeAll+0x1d4>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	4a66      	ldr	r2, [pc, #408]	@ (8009864 <xTaskResumeAll+0x1d4>)
 80096ca:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096cc:	4b65      	ldr	r3, [pc, #404]	@ (8009864 <xTaskResumeAll+0x1d4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f040 80c0 	bne.w	8009856 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096d6:	4b64      	ldr	r3, [pc, #400]	@ (8009868 <xTaskResumeAll+0x1d8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 80bb 	beq.w	8009856 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096e0:	e08a      	b.n	80097f8 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e2:	4b62      	ldr	r3, [pc, #392]	@ (800986c <xTaskResumeAll+0x1dc>)
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ee:	613b      	str	r3, [r7, #16]
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	69db      	ldr	r3, [r3, #28]
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	6a12      	ldr	r2, [r2, #32]
 80096f8:	609a      	str	r2, [r3, #8]
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	69d2      	ldr	r2, [r2, #28]
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	3318      	adds	r3, #24
 800970c:	429a      	cmp	r2, r3
 800970e:	d103      	bne.n	8009718 <xTaskResumeAll+0x88>
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	6a1a      	ldr	r2, [r3, #32]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	605a      	str	r2, [r3, #4]
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	2200      	movs	r2, #0
 800971c:	629a      	str	r2, [r3, #40]	@ 0x28
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	1e5a      	subs	r2, r3, #1
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	68d2      	ldr	r2, [r2, #12]
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	69fa      	ldr	r2, [r7, #28]
 800973e:	6892      	ldr	r2, [r2, #8]
 8009740:	605a      	str	r2, [r3, #4]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	3304      	adds	r3, #4
 800974a:	429a      	cmp	r2, r3
 800974c:	d103      	bne.n	8009756 <xTaskResumeAll+0xc6>
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	605a      	str	r2, [r3, #4]
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	2200      	movs	r2, #0
 800975a:	615a      	str	r2, [r3, #20]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	1e5a      	subs	r2, r3, #1
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976a:	2201      	movs	r2, #1
 800976c:	409a      	lsls	r2, r3
 800976e:	4b40      	ldr	r3, [pc, #256]	@ (8009870 <xTaskResumeAll+0x1e0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4313      	orrs	r3, r2
 8009774:	4a3e      	ldr	r2, [pc, #248]	@ (8009870 <xTaskResumeAll+0x1e0>)
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977c:	493d      	ldr	r1, [pc, #244]	@ (8009874 <xTaskResumeAll+0x1e4>)
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	3304      	adds	r3, #4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60bb      	str	r3, [r7, #8]
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	609a      	str	r2, [r3, #8]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	69fa      	ldr	r2, [r7, #28]
 80097a2:	3204      	adds	r2, #4
 80097a4:	605a      	str	r2, [r3, #4]
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	1d1a      	adds	r2, r3, #4
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	609a      	str	r2, [r3, #8]
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4a2e      	ldr	r2, [pc, #184]	@ (8009874 <xTaskResumeAll+0x1e4>)
 80097bc:	441a      	add	r2, r3
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	615a      	str	r2, [r3, #20]
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c6:	492b      	ldr	r1, [pc, #172]	@ (8009874 <xTaskResumeAll+0x1e4>)
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	1c59      	adds	r1, r3, #1
 80097d6:	4827      	ldr	r0, [pc, #156]	@ (8009874 <xTaskResumeAll+0x1e4>)
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4403      	add	r3, r0
 80097e2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e8:	4b23      	ldr	r3, [pc, #140]	@ (8009878 <xTaskResumeAll+0x1e8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d302      	bcc.n	80097f8 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80097f2:	4b22      	ldr	r3, [pc, #136]	@ (800987c <xTaskResumeAll+0x1ec>)
 80097f4:	2201      	movs	r2, #1
 80097f6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097f8:	4b1c      	ldr	r3, [pc, #112]	@ (800986c <xTaskResumeAll+0x1dc>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f47f af70 	bne.w	80096e2 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009808:	f000 fc26 	bl	800a058 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800980c:	4b1c      	ldr	r3, [pc, #112]	@ (8009880 <xTaskResumeAll+0x1f0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d010      	beq.n	800983a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009818:	f000 f846 	bl	80098a8 <xTaskIncrementTick>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8009822:	4b16      	ldr	r3, [pc, #88]	@ (800987c <xTaskResumeAll+0x1ec>)
 8009824:	2201      	movs	r2, #1
 8009826:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	3b01      	subs	r3, #1
 800982c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1f1      	bne.n	8009818 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8009834:	4b12      	ldr	r3, [pc, #72]	@ (8009880 <xTaskResumeAll+0x1f0>)
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800983a:	4b10      	ldr	r3, [pc, #64]	@ (800987c <xTaskResumeAll+0x1ec>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d009      	beq.n	8009856 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009842:	2301      	movs	r3, #1
 8009844:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009846:	4b0f      	ldr	r3, [pc, #60]	@ (8009884 <xTaskResumeAll+0x1f4>)
 8009848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009856:	f001 f953 	bl	800ab00 <vPortExitCritical>

    return xAlreadyYielded;
 800985a:	69bb      	ldr	r3, [r7, #24]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3720      	adds	r7, #32
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20000434 	.word	0x20000434
 8009868:	2000040c 	.word	0x2000040c
 800986c:	200003cc 	.word	0x200003cc
 8009870:	20000414 	.word	0x20000414
 8009874:	20000338 	.word	0x20000338
 8009878:	20000334 	.word	0x20000334
 800987c:	20000420 	.word	0x20000420
 8009880:	2000041c 	.word	0x2000041c
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800988e:	4b05      	ldr	r3, [pc, #20]	@ (80098a4 <xTaskGetTickCount+0x1c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009894:	687b      	ldr	r3, [r7, #4]
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000410 	.word	0x20000410

080098a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	@ 0x28
 80098ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b2:	4b7e      	ldr	r3, [pc, #504]	@ (8009aac <xTaskIncrementTick+0x204>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f040 80ed 	bne.w	8009a96 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098bc:	4b7c      	ldr	r3, [pc, #496]	@ (8009ab0 <xTaskIncrementTick+0x208>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80098c4:	4a7a      	ldr	r2, [pc, #488]	@ (8009ab0 <xTaskIncrementTick+0x208>)
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d121      	bne.n	8009914 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80098d0:	4b78      	ldr	r3, [pc, #480]	@ (8009ab4 <xTaskIncrementTick+0x20c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00b      	beq.n	80098f2 <xTaskIncrementTick+0x4a>
        __asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	607b      	str	r3, [r7, #4]
    }
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <xTaskIncrementTick+0x46>
 80098f2:	4b70      	ldr	r3, [pc, #448]	@ (8009ab4 <xTaskIncrementTick+0x20c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	61fb      	str	r3, [r7, #28]
 80098f8:	4b6f      	ldr	r3, [pc, #444]	@ (8009ab8 <xTaskIncrementTick+0x210>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a6d      	ldr	r2, [pc, #436]	@ (8009ab4 <xTaskIncrementTick+0x20c>)
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	4a6d      	ldr	r2, [pc, #436]	@ (8009ab8 <xTaskIncrementTick+0x210>)
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	4b6d      	ldr	r3, [pc, #436]	@ (8009abc <xTaskIncrementTick+0x214>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	4a6b      	ldr	r2, [pc, #428]	@ (8009abc <xTaskIncrementTick+0x214>)
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	f000 fba2 	bl	800a058 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009914:	4b6a      	ldr	r3, [pc, #424]	@ (8009ac0 <xTaskIncrementTick+0x218>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6a3a      	ldr	r2, [r7, #32]
 800991a:	429a      	cmp	r2, r3
 800991c:	f0c0 80a6 	bcc.w	8009a6c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009920:	4b64      	ldr	r3, [pc, #400]	@ (8009ab4 <xTaskIncrementTick+0x20c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d104      	bne.n	8009934 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800992a:	4b65      	ldr	r3, [pc, #404]	@ (8009ac0 <xTaskIncrementTick+0x218>)
 800992c:	f04f 32ff 	mov.w	r2, #4294967295
 8009930:	601a      	str	r2, [r3, #0]
                    break;
 8009932:	e09b      	b.n	8009a6c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009934:	4b5f      	ldr	r3, [pc, #380]	@ (8009ab4 <xTaskIncrementTick+0x20c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009944:	6a3a      	ldr	r2, [r7, #32]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	429a      	cmp	r2, r3
 800994a:	d203      	bcs.n	8009954 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800994c:	4a5c      	ldr	r2, [pc, #368]	@ (8009ac0 <xTaskIncrementTick+0x218>)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009952:	e08b      	b.n	8009a6c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	613b      	str	r3, [r7, #16]
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	68d2      	ldr	r2, [r2, #12]
 8009962:	609a      	str	r2, [r3, #8]
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	6892      	ldr	r2, [r2, #8]
 800996c:	605a      	str	r2, [r3, #4]
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3304      	adds	r3, #4
 8009976:	429a      	cmp	r2, r3
 8009978:	d103      	bne.n	8009982 <xTaskIncrementTick+0xda>
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	605a      	str	r2, [r3, #4]
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	2200      	movs	r2, #0
 8009986:	615a      	str	r2, [r3, #20]
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	1e5a      	subs	r2, r3, #1
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009996:	2b00      	cmp	r3, #0
 8009998:	d01e      	beq.n	80099d8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	6a12      	ldr	r2, [r2, #32]
 80099a8:	609a      	str	r2, [r3, #8]
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	69d2      	ldr	r2, [r2, #28]
 80099b2:	605a      	str	r2, [r3, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	3318      	adds	r3, #24
 80099bc:	429a      	cmp	r2, r3
 80099be:	d103      	bne.n	80099c8 <xTaskIncrementTick+0x120>
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	6a1a      	ldr	r2, [r3, #32]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	605a      	str	r2, [r3, #4]
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2200      	movs	r2, #0
 80099cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	1e5a      	subs	r2, r3, #1
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099dc:	2201      	movs	r2, #1
 80099de:	409a      	lsls	r2, r3
 80099e0:	4b38      	ldr	r3, [pc, #224]	@ (8009ac4 <xTaskIncrementTick+0x21c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	4a37      	ldr	r2, [pc, #220]	@ (8009ac4 <xTaskIncrementTick+0x21c>)
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ee:	4936      	ldr	r1, [pc, #216]	@ (8009ac8 <xTaskIncrementTick+0x220>)
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	440b      	add	r3, r1
 80099fa:	3304      	adds	r3, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60bb      	str	r3, [r7, #8]
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	609a      	str	r2, [r3, #8]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	60da      	str	r2, [r3, #12]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	3204      	adds	r2, #4
 8009a16:	605a      	str	r2, [r3, #4]
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	609a      	str	r2, [r3, #8]
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a24:	4613      	mov	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4a26      	ldr	r2, [pc, #152]	@ (8009ac8 <xTaskIncrementTick+0x220>)
 8009a2e:	441a      	add	r2, r3
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	615a      	str	r2, [r3, #20]
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a38:	4923      	ldr	r1, [pc, #140]	@ (8009ac8 <xTaskIncrementTick+0x220>)
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	440b      	add	r3, r1
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	1c59      	adds	r1, r3, #1
 8009a48:	481f      	ldr	r0, [pc, #124]	@ (8009ac8 <xTaskIncrementTick+0x220>)
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4403      	add	r3, r0
 8009a54:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8009acc <xTaskIncrementTick+0x224>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	429a      	cmp	r2, r3
 8009a62:	f67f af5d 	bls.w	8009920 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8009a66:	2301      	movs	r3, #1
 8009a68:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a6a:	e759      	b.n	8009920 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a6c:	4b17      	ldr	r3, [pc, #92]	@ (8009acc <xTaskIncrementTick+0x224>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a72:	4915      	ldr	r1, [pc, #84]	@ (8009ac8 <xTaskIncrementTick+0x220>)
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	440b      	add	r3, r1
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d901      	bls.n	8009a88 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8009a88:	4b11      	ldr	r3, [pc, #68]	@ (8009ad0 <xTaskIncrementTick+0x228>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d007      	beq.n	8009aa0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8009a90:	2301      	movs	r3, #1
 8009a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a94:	e004      	b.n	8009aa0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009a96:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad4 <xTaskIncrementTick+0x22c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8009ad4 <xTaskIncrementTick+0x22c>)
 8009a9e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3728      	adds	r7, #40	@ 0x28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	20000434 	.word	0x20000434
 8009ab0:	20000410 	.word	0x20000410
 8009ab4:	200003c4 	.word	0x200003c4
 8009ab8:	200003c8 	.word	0x200003c8
 8009abc:	20000424 	.word	0x20000424
 8009ac0:	2000042c 	.word	0x2000042c
 8009ac4:	20000414 	.word	0x20000414
 8009ac8:	20000338 	.word	0x20000338
 8009acc:	20000334 	.word	0x20000334
 8009ad0:	20000420 	.word	0x20000420
 8009ad4:	2000041c 	.word	0x2000041c

08009ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ade:	4b27      	ldr	r3, [pc, #156]	@ (8009b7c <vTaskSwitchContext+0xa4>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8009ae6:	4b26      	ldr	r3, [pc, #152]	@ (8009b80 <vTaskSwitchContext+0xa8>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8009aec:	e040      	b.n	8009b70 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8009aee:	4b24      	ldr	r3, [pc, #144]	@ (8009b80 <vTaskSwitchContext+0xa8>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af4:	4b23      	ldr	r3, [pc, #140]	@ (8009b84 <vTaskSwitchContext+0xac>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	fab3 f383 	clz	r3, r3
 8009b00:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	f1c3 031f 	rsb	r3, r3, #31
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	491f      	ldr	r1, [pc, #124]	@ (8009b88 <vTaskSwitchContext+0xb0>)
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	440b      	add	r3, r1
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <vTaskSwitchContext+0x5e>
        __asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
    }
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <vTaskSwitchContext+0x5a>
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4a11      	ldr	r2, [pc, #68]	@ (8009b88 <vTaskSwitchContext+0xb0>)
 8009b42:	4413      	add	r3, r2
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	605a      	str	r2, [r3, #4]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	3308      	adds	r3, #8
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d104      	bne.n	8009b66 <vTaskSwitchContext+0x8e>
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	4a07      	ldr	r2, [pc, #28]	@ (8009b8c <vTaskSwitchContext+0xb4>)
 8009b6e:	6013      	str	r3, [r2, #0]
}
 8009b70:	bf00      	nop
 8009b72:	371c      	adds	r7, #28
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	20000434 	.word	0x20000434
 8009b80:	20000420 	.word	0x20000420
 8009b84:	20000414 	.word	0x20000414
 8009b88:	20000338 	.word	0x20000338
 8009b8c:	20000334 	.word	0x20000334

08009b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10b      	bne.n	8009bb8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	60fb      	str	r3, [r7, #12]
    }
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bb8:	4b07      	ldr	r3, [pc, #28]	@ (8009bd8 <vTaskPlaceOnEventList+0x48>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3318      	adds	r3, #24
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fe fe51 	bl	8008868 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	6838      	ldr	r0, [r7, #0]
 8009bca:	f000 fb25 	bl	800a218 <prvAddCurrentTaskToDelayedList>
}
 8009bce:	bf00      	nop
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000334 	.word	0x20000334

08009bdc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	613b      	str	r3, [r7, #16]
    }
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	617b      	str	r3, [r7, #20]
 8009c0c:	4b15      	ldr	r3, [pc, #84]	@ (8009c64 <vTaskPlaceOnEventListRestricted+0x88>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	61da      	str	r2, [r3, #28]
 8009c14:	4b13      	ldr	r3, [pc, #76]	@ (8009c64 <vTaskPlaceOnEventListRestricted+0x88>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	6892      	ldr	r2, [r2, #8]
 8009c1c:	621a      	str	r2, [r3, #32]
 8009c1e:	4b11      	ldr	r3, [pc, #68]	@ (8009c64 <vTaskPlaceOnEventListRestricted+0x88>)
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	3218      	adds	r2, #24
 8009c28:	605a      	str	r2, [r3, #4]
 8009c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009c64 <vTaskPlaceOnEventListRestricted+0x88>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f103 0218 	add.w	r2, r3, #24
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	609a      	str	r2, [r3, #8]
 8009c36:	4b0b      	ldr	r3, [pc, #44]	@ (8009c64 <vTaskPlaceOnEventListRestricted+0x88>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8009c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c52:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	68b8      	ldr	r0, [r7, #8]
 8009c58:	f000 fade 	bl	800a218 <prvAddCurrentTaskToDelayedList>
    }
 8009c5c:	bf00      	nop
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	20000334 	.word	0x20000334

08009c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b08b      	sub	sp, #44	@ 0x2c
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10b      	bne.n	8009c96 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	60fb      	str	r3, [r7, #12]
    }
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	e7fd      	b.n	8009c92 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9a:	61fb      	str	r3, [r7, #28]
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	6a3a      	ldr	r2, [r7, #32]
 8009ca2:	6a12      	ldr	r2, [r2, #32]
 8009ca4:	609a      	str	r2, [r3, #8]
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	6a3a      	ldr	r2, [r7, #32]
 8009cac:	69d2      	ldr	r2, [r2, #28]
 8009cae:	605a      	str	r2, [r3, #4]
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	3318      	adds	r3, #24
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d103      	bne.n	8009cc4 <xTaskRemoveFromEventList+0x5c>
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	6a1a      	ldr	r2, [r3, #32]
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	605a      	str	r2, [r3, #4]
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	1e5a      	subs	r2, r3, #1
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8009e00 <xTaskRemoveFromEventList+0x198>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d15e      	bne.n	8009d9a <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	6a3a      	ldr	r2, [r7, #32]
 8009ce8:	68d2      	ldr	r2, [r2, #12]
 8009cea:	609a      	str	r2, [r3, #8]
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	6a3a      	ldr	r2, [r7, #32]
 8009cf2:	6892      	ldr	r2, [r2, #8]
 8009cf4:	605a      	str	r2, [r3, #4]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d103      	bne.n	8009d0a <xTaskRemoveFromEventList+0xa2>
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	605a      	str	r2, [r3, #4]
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	615a      	str	r2, [r3, #20]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	1e5a      	subs	r2, r3, #1
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1e:	2201      	movs	r2, #1
 8009d20:	409a      	lsls	r2, r3
 8009d22:	4b38      	ldr	r3, [pc, #224]	@ (8009e04 <xTaskRemoveFromEventList+0x19c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	4a36      	ldr	r2, [pc, #216]	@ (8009e04 <xTaskRemoveFromEventList+0x19c>)
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d30:	4935      	ldr	r1, [pc, #212]	@ (8009e08 <xTaskRemoveFromEventList+0x1a0>)
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	613b      	str	r3, [r7, #16]
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	609a      	str	r2, [r3, #8]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	689a      	ldr	r2, [r3, #8]
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	60da      	str	r2, [r3, #12]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	6a3a      	ldr	r2, [r7, #32]
 8009d56:	3204      	adds	r2, #4
 8009d58:	605a      	str	r2, [r3, #4]
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	1d1a      	adds	r2, r3, #4
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	609a      	str	r2, [r3, #8]
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4a26      	ldr	r2, [pc, #152]	@ (8009e08 <xTaskRemoveFromEventList+0x1a0>)
 8009d70:	441a      	add	r2, r3
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	615a      	str	r2, [r3, #20]
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d7a:	4923      	ldr	r1, [pc, #140]	@ (8009e08 <xTaskRemoveFromEventList+0x1a0>)
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	440b      	add	r3, r1
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	1c59      	adds	r1, r3, #1
 8009d8a:	481f      	ldr	r0, [pc, #124]	@ (8009e08 <xTaskRemoveFromEventList+0x1a0>)
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4403      	add	r3, r0
 8009d96:	6019      	str	r1, [r3, #0]
 8009d98:	e01b      	b.n	8009dd2 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8009e0c <xTaskRemoveFromEventList+0x1a4>)
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	61bb      	str	r3, [r7, #24]
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	61da      	str	r2, [r3, #28]
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	689a      	ldr	r2, [r3, #8]
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	621a      	str	r2, [r3, #32]
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	6a3a      	ldr	r2, [r7, #32]
 8009db4:	3218      	adds	r2, #24
 8009db6:	605a      	str	r2, [r3, #4]
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	f103 0218 	add.w	r2, r3, #24
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	609a      	str	r2, [r3, #8]
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	4a11      	ldr	r2, [pc, #68]	@ (8009e0c <xTaskRemoveFromEventList+0x1a4>)
 8009dc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8009dc8:	4b10      	ldr	r3, [pc, #64]	@ (8009e0c <xTaskRemoveFromEventList+0x1a4>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	4a0f      	ldr	r2, [pc, #60]	@ (8009e0c <xTaskRemoveFromEventList+0x1a4>)
 8009dd0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e10 <xTaskRemoveFromEventList+0x1a8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d905      	bls.n	8009dec <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8009de0:	2301      	movs	r3, #1
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009de4:	4b0b      	ldr	r3, [pc, #44]	@ (8009e14 <xTaskRemoveFromEventList+0x1ac>)
 8009de6:	2201      	movs	r2, #1
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	e001      	b.n	8009df0 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8009dec:	2300      	movs	r3, #0
 8009dee:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	372c      	adds	r7, #44	@ 0x2c
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20000434 	.word	0x20000434
 8009e04:	20000414 	.word	0x20000414
 8009e08:	20000338 	.word	0x20000338
 8009e0c:	200003cc 	.word	0x200003cc
 8009e10:	20000334 	.word	0x20000334
 8009e14:	20000420 	.word	0x20000420

08009e18 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e20:	4b06      	ldr	r3, [pc, #24]	@ (8009e3c <vTaskInternalSetTimeOutState+0x24>)
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009e28:	4b05      	ldr	r3, [pc, #20]	@ (8009e40 <vTaskInternalSetTimeOutState+0x28>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	605a      	str	r2, [r3, #4]
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	20000424 	.word	0x20000424
 8009e40:	20000410 	.word	0x20000410

08009e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10b      	bne.n	8009e6c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	613b      	str	r3, [r7, #16]
    }
 8009e66:	bf00      	nop
 8009e68:	bf00      	nop
 8009e6a:	e7fd      	b.n	8009e68 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10b      	bne.n	8009e8a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	60fb      	str	r3, [r7, #12]
    }
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	e7fd      	b.n	8009e86 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8009e8a:	f000 fe07 	bl	800aa9c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8009f0c <xTaskCheckForTimeOut+0xc8>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	69ba      	ldr	r2, [r7, #24]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea6:	d102      	bne.n	8009eae <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	61fb      	str	r3, [r7, #28]
 8009eac:	e026      	b.n	8009efc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	4b17      	ldr	r3, [pc, #92]	@ (8009f10 <xTaskCheckForTimeOut+0xcc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d00a      	beq.n	8009ed0 <xTaskCheckForTimeOut+0x8c>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d305      	bcc.n	8009ed0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
 8009ece:	e015      	b.n	8009efc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d20b      	bcs.n	8009ef2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	1ad2      	subs	r2, r2, r3
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff ff96 	bl	8009e18 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009eec:	2300      	movs	r3, #0
 8009eee:	61fb      	str	r3, [r7, #28]
 8009ef0:	e004      	b.n	8009efc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009efc:	f000 fe00 	bl	800ab00 <vPortExitCritical>

    return xReturn;
 8009f00:	69fb      	ldr	r3, [r7, #28]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000410 	.word	0x20000410
 8009f10:	20000424 	.word	0x20000424

08009f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009f18:	4b03      	ldr	r3, [pc, #12]	@ (8009f28 <vTaskMissedYield+0x14>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	601a      	str	r2, [r3, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	20000420 	.word	0x20000420

08009f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009f34:	f000 f852 	bl	8009fdc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f38:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <prvIdleTask+0x28>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d9f9      	bls.n	8009f34 <prvIdleTask+0x8>
            {
                taskYIELD();
 8009f40:	4b05      	ldr	r3, [pc, #20]	@ (8009f58 <prvIdleTask+0x2c>)
 8009f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009f50:	e7f0      	b.n	8009f34 <prvIdleTask+0x8>
 8009f52:	bf00      	nop
 8009f54:	20000338 	.word	0x20000338
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f62:	2300      	movs	r3, #0
 8009f64:	607b      	str	r3, [r7, #4]
 8009f66:	e00c      	b.n	8009f82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4a12      	ldr	r2, [pc, #72]	@ (8009fbc <prvInitialiseTaskLists+0x60>)
 8009f74:	4413      	add	r3, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fc49 	bl	800880e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	607b      	str	r3, [r7, #4]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d9ef      	bls.n	8009f68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009f88:	480d      	ldr	r0, [pc, #52]	@ (8009fc0 <prvInitialiseTaskLists+0x64>)
 8009f8a:	f7fe fc40 	bl	800880e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009f8e:	480d      	ldr	r0, [pc, #52]	@ (8009fc4 <prvInitialiseTaskLists+0x68>)
 8009f90:	f7fe fc3d 	bl	800880e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009f94:	480c      	ldr	r0, [pc, #48]	@ (8009fc8 <prvInitialiseTaskLists+0x6c>)
 8009f96:	f7fe fc3a 	bl	800880e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8009f9a:	480c      	ldr	r0, [pc, #48]	@ (8009fcc <prvInitialiseTaskLists+0x70>)
 8009f9c:	f7fe fc37 	bl	800880e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8009fa0:	480b      	ldr	r0, [pc, #44]	@ (8009fd0 <prvInitialiseTaskLists+0x74>)
 8009fa2:	f7fe fc34 	bl	800880e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8009fd4 <prvInitialiseTaskLists+0x78>)
 8009fa8:	4a05      	ldr	r2, [pc, #20]	@ (8009fc0 <prvInitialiseTaskLists+0x64>)
 8009faa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fac:	4b0a      	ldr	r3, [pc, #40]	@ (8009fd8 <prvInitialiseTaskLists+0x7c>)
 8009fae:	4a05      	ldr	r2, [pc, #20]	@ (8009fc4 <prvInitialiseTaskLists+0x68>)
 8009fb0:	601a      	str	r2, [r3, #0]
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000338 	.word	0x20000338
 8009fc0:	2000039c 	.word	0x2000039c
 8009fc4:	200003b0 	.word	0x200003b0
 8009fc8:	200003cc 	.word	0x200003cc
 8009fcc:	200003e0 	.word	0x200003e0
 8009fd0:	200003f8 	.word	0x200003f8
 8009fd4:	200003c4 	.word	0x200003c4
 8009fd8:	200003c8 	.word	0x200003c8

08009fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fe2:	e019      	b.n	800a018 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8009fe4:	f000 fd5a 	bl	800aa9c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fe8:	4b10      	ldr	r3, [pc, #64]	@ (800a02c <prvCheckTasksWaitingTermination+0x50>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fe fc70 	bl	80088da <uxListRemove>
                --uxCurrentNumberOfTasks;
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	@ (800a030 <prvCheckTasksWaitingTermination+0x54>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	4a0b      	ldr	r2, [pc, #44]	@ (800a030 <prvCheckTasksWaitingTermination+0x54>)
 800a002:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a004:	4b0b      	ldr	r3, [pc, #44]	@ (800a034 <prvCheckTasksWaitingTermination+0x58>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3b01      	subs	r3, #1
 800a00a:	4a0a      	ldr	r2, [pc, #40]	@ (800a034 <prvCheckTasksWaitingTermination+0x58>)
 800a00c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a00e:	f000 fd77 	bl	800ab00 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f810 	bl	800a038 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a018:	4b06      	ldr	r3, [pc, #24]	@ (800a034 <prvCheckTasksWaitingTermination+0x58>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1e1      	bne.n	8009fe4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a020:	bf00      	nop
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	200003e0 	.word	0x200003e0
 800a030:	2000040c 	.word	0x2000040c
 800a034:	200003f4 	.word	0x200003f4

0800a038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a044:	4618      	mov	r0, r3
 800a046:	f000 fecd 	bl	800ade4 <vPortFree>
            vPortFree( pxTCB );
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 feca 	bl	800ade4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a058:	b480      	push	{r7}
 800a05a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a05c:	4b0a      	ldr	r3, [pc, #40]	@ (800a088 <prvResetNextTaskUnblockTime+0x30>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d104      	bne.n	800a070 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a066:	4b09      	ldr	r3, [pc, #36]	@ (800a08c <prvResetNextTaskUnblockTime+0x34>)
 800a068:	f04f 32ff 	mov.w	r2, #4294967295
 800a06c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a06e:	e005      	b.n	800a07c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a070:	4b05      	ldr	r3, [pc, #20]	@ (800a088 <prvResetNextTaskUnblockTime+0x30>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a04      	ldr	r2, [pc, #16]	@ (800a08c <prvResetNextTaskUnblockTime+0x34>)
 800a07a:	6013      	str	r3, [r2, #0]
}
 800a07c:	bf00      	nop
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	200003c4 	.word	0x200003c4
 800a08c:	2000042c 	.word	0x2000042c

0800a090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a096:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c4 <xTaskGetSchedulerState+0x34>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	607b      	str	r3, [r7, #4]
 800a0a2:	e008      	b.n	800a0b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0a4:	4b08      	ldr	r3, [pc, #32]	@ (800a0c8 <xTaskGetSchedulerState+0x38>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	607b      	str	r3, [r7, #4]
 800a0b0:	e001      	b.n	800a0b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a0b6:	687b      	ldr	r3, [r7, #4]
    }
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	20000418 	.word	0x20000418
 800a0c8:	20000434 	.word	0x20000434

0800a0cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 808e 	beq.w	800a200 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a0e4:	4b49      	ldr	r3, [pc, #292]	@ (800a20c <xTaskPriorityDisinherit+0x140>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d00b      	beq.n	800a106 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	613b      	str	r3, [r7, #16]
    }
 800a100:	bf00      	nop
 800a102:	bf00      	nop
 800a104:	e7fd      	b.n	800a102 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10b      	bne.n	800a126 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	60fb      	str	r3, [r7, #12]
    }
 800a120:	bf00      	nop
 800a122:	bf00      	nop
 800a124:	e7fd      	b.n	800a122 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a12a:	1e5a      	subs	r2, r3, #1
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a138:	429a      	cmp	r2, r3
 800a13a:	d061      	beq.n	800a200 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d15d      	bne.n	800a200 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	3304      	adds	r3, #4
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe fbc6 	bl	80088da <uxListRemove>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10a      	bne.n	800a16a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a158:	2201      	movs	r2, #1
 800a15a:	fa02 f303 	lsl.w	r3, r2, r3
 800a15e:	43da      	mvns	r2, r3
 800a160:	4b2b      	ldr	r3, [pc, #172]	@ (800a210 <xTaskPriorityDisinherit+0x144>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4013      	ands	r3, r2
 800a166:	4a2a      	ldr	r2, [pc, #168]	@ (800a210 <xTaskPriorityDisinherit+0x144>)
 800a168:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a176:	f1c3 0205 	rsb	r2, r3, #5
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a182:	2201      	movs	r2, #1
 800a184:	409a      	lsls	r2, r3
 800a186:	4b22      	ldr	r3, [pc, #136]	@ (800a210 <xTaskPriorityDisinherit+0x144>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	4a20      	ldr	r2, [pc, #128]	@ (800a210 <xTaskPriorityDisinherit+0x144>)
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a194:	491f      	ldr	r1, [pc, #124]	@ (800a214 <xTaskPriorityDisinherit+0x148>)
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	617b      	str	r3, [r7, #20]
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	609a      	str	r2, [r3, #8]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	60da      	str	r2, [r3, #12]
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	3204      	adds	r2, #4
 800a1bc:	605a      	str	r2, [r3, #4]
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	1d1a      	adds	r2, r3, #4
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	609a      	str	r2, [r3, #8]
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4a10      	ldr	r2, [pc, #64]	@ (800a214 <xTaskPriorityDisinherit+0x148>)
 800a1d4:	441a      	add	r2, r3
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	615a      	str	r2, [r3, #20]
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1de:	490d      	ldr	r1, [pc, #52]	@ (800a214 <xTaskPriorityDisinherit+0x148>)
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	1c59      	adds	r1, r3, #1
 800a1ee:	4809      	ldr	r0, [pc, #36]	@ (800a214 <xTaskPriorityDisinherit+0x148>)
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4403      	add	r3, r0
 800a1fa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a200:	69fb      	ldr	r3, [r7, #28]
    }
 800a202:	4618      	mov	r0, r3
 800a204:	3720      	adds	r7, #32
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20000334 	.word	0x20000334
 800a210:	20000414 	.word	0x20000414
 800a214:	20000338 	.word	0x20000338

0800a218 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a222:	4b36      	ldr	r3, [pc, #216]	@ (800a2fc <prvAddCurrentTaskToDelayedList+0xe4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a228:	4b35      	ldr	r3, [pc, #212]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3304      	adds	r3, #4
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe fb53 	bl	80088da <uxListRemove>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10b      	bne.n	800a252 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a23a:	4b31      	ldr	r3, [pc, #196]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	2201      	movs	r2, #1
 800a242:	fa02 f303 	lsl.w	r3, r2, r3
 800a246:	43da      	mvns	r2, r3
 800a248:	4b2e      	ldr	r3, [pc, #184]	@ (800a304 <prvAddCurrentTaskToDelayedList+0xec>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4013      	ands	r3, r2
 800a24e:	4a2d      	ldr	r2, [pc, #180]	@ (800a304 <prvAddCurrentTaskToDelayedList+0xec>)
 800a250:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a258:	d124      	bne.n	800a2a4 <prvAddCurrentTaskToDelayedList+0x8c>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d021      	beq.n	800a2a4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a260:	4b29      	ldr	r3, [pc, #164]	@ (800a308 <prvAddCurrentTaskToDelayedList+0xf0>)
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	613b      	str	r3, [r7, #16]
 800a266:	4b26      	ldr	r3, [pc, #152]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	609a      	str	r2, [r3, #8]
 800a26e:	4b24      	ldr	r3, [pc, #144]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	6892      	ldr	r2, [r2, #8]
 800a276:	60da      	str	r2, [r3, #12]
 800a278:	4b21      	ldr	r3, [pc, #132]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	3204      	adds	r2, #4
 800a282:	605a      	str	r2, [r3, #4]
 800a284:	4b1e      	ldr	r3, [pc, #120]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	1d1a      	adds	r2, r3, #4
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	609a      	str	r2, [r3, #8]
 800a28e:	4b1c      	ldr	r3, [pc, #112]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a1d      	ldr	r2, [pc, #116]	@ (800a308 <prvAddCurrentTaskToDelayedList+0xf0>)
 800a294:	615a      	str	r2, [r3, #20]
 800a296:	4b1c      	ldr	r3, [pc, #112]	@ (800a308 <prvAddCurrentTaskToDelayedList+0xf0>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3301      	adds	r3, #1
 800a29c:	4a1a      	ldr	r2, [pc, #104]	@ (800a308 <prvAddCurrentTaskToDelayedList+0xf0>)
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a2a2:	e026      	b.n	800a2f2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2ac:	4b14      	ldr	r3, [pc, #80]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d209      	bcs.n	800a2d0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2bc:	4b13      	ldr	r3, [pc, #76]	@ (800a30c <prvAddCurrentTaskToDelayedList+0xf4>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f7fe facd 	bl	8008868 <vListInsert>
}
 800a2ce:	e010      	b.n	800a2f2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a310 <prvAddCurrentTaskToDelayedList+0xf8>)
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a300 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4610      	mov	r0, r2
 800a2de:	f7fe fac3 	bl	8008868 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800a2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a314 <prvAddCurrentTaskToDelayedList+0xfc>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d202      	bcs.n	800a2f2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800a2ec:	4a09      	ldr	r2, [pc, #36]	@ (800a314 <prvAddCurrentTaskToDelayedList+0xfc>)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6013      	str	r3, [r2, #0]
}
 800a2f2:	bf00      	nop
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000410 	.word	0x20000410
 800a300:	20000334 	.word	0x20000334
 800a304:	20000414 	.word	0x20000414
 800a308:	200003f8 	.word	0x200003f8
 800a30c:	200003c8 	.word	0x200003c8
 800a310:	200003c4 	.word	0x200003c4
 800a314:	2000042c 	.word	0x2000042c

0800a318 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a31e:	2300      	movs	r3, #0
 800a320:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a322:	f000 fa4f 	bl	800a7c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a326:	4b12      	ldr	r3, [pc, #72]	@ (800a370 <xTimerCreateTimerTask+0x58>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00b      	beq.n	800a346 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800a32e:	4b11      	ldr	r3, [pc, #68]	@ (800a374 <xTimerCreateTimerTask+0x5c>)
 800a330:	9301      	str	r3, [sp, #4]
 800a332:	2302      	movs	r3, #2
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	2300      	movs	r3, #0
 800a338:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a33c:	490e      	ldr	r1, [pc, #56]	@ (800a378 <xTimerCreateTimerTask+0x60>)
 800a33e:	480f      	ldr	r0, [pc, #60]	@ (800a37c <xTimerCreateTimerTask+0x64>)
 800a340:	f7fe ffa4 	bl	800928c <xTaskCreate>
 800a344:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10b      	bne.n	800a364 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	603b      	str	r3, [r7, #0]
    }
 800a35e:	bf00      	nop
 800a360:	bf00      	nop
 800a362:	e7fd      	b.n	800a360 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a364:	687b      	ldr	r3, [r7, #4]
    }
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20000468 	.word	0x20000468
 800a374:	2000046c 	.word	0x2000046c
 800a378:	0800dbfc 	.word	0x0800dbfc
 800a37c:	0800a425 	.word	0x0800a425

0800a380 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a38c:	e008      	b.n	800a3a0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4413      	add	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	18d1      	adds	r1, r2, r3
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f8df 	bl	800a570 <prvInsertTimerInActiveList>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1ea      	bne.n	800a38e <prvReloadTimer+0xe>
        }
    }
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ce:	4b14      	ldr	r3, [pc, #80]	@ (800a420 <prvProcessExpiredTimer+0x5c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fe fa7c 	bl	80088da <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7ff ffc3 	bl	800a380 <prvReloadTimer>
 800a3fa:	e008      	b.n	800a40e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a402:	f023 0301 	bic.w	r3, r3, #1
 800a406:	b2da      	uxtb	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a1b      	ldr	r3, [r3, #32]
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	4798      	blx	r3
    }
 800a416:	bf00      	nop
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000460 	.word	0x20000460

0800a424 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a42c:	f107 0308 	add.w	r3, r7, #8
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f859 	bl	800a4e8 <prvGetNextExpireTime>
 800a436:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4619      	mov	r1, r3
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 f805 	bl	800a44c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a442:	f000 f8d7 	bl	800a5f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a446:	bf00      	nop
 800a448:	e7f0      	b.n	800a42c <prvTimerTask+0x8>
	...

0800a44c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a456:	f7ff f90d 	bl	8009674 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a45a:	f107 0308 	add.w	r3, r7, #8
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 f866 	bl	800a530 <prvSampleTimeNow>
 800a464:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d130      	bne.n	800a4ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10a      	bne.n	800a488 <prvProcessTimerOrBlockTask+0x3c>
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	429a      	cmp	r2, r3
 800a478:	d806      	bhi.n	800a488 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a47a:	f7ff f909 	bl	8009690 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff ff9f 	bl	800a3c4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a486:	e024      	b.n	800a4d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d008      	beq.n	800a4a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a48e:	4b13      	ldr	r3, [pc, #76]	@ (800a4dc <prvProcessTimerOrBlockTask+0x90>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <prvProcessTimerOrBlockTask+0x50>
 800a498:	2301      	movs	r3, #1
 800a49a:	e000      	b.n	800a49e <prvProcessTimerOrBlockTask+0x52>
 800a49c:	2300      	movs	r3, #0
 800a49e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a4e0 <prvProcessTimerOrBlockTask+0x94>)
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f7fe feb9 	bl	8009224 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a4b2:	f7ff f8ed 	bl	8009690 <xTaskResumeAll>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a4bc:	4b09      	ldr	r3, [pc, #36]	@ (800a4e4 <prvProcessTimerOrBlockTask+0x98>)
 800a4be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	f3bf 8f6f 	isb	sy
    }
 800a4cc:	e001      	b.n	800a4d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a4ce:	f7ff f8df 	bl	8009690 <xTaskResumeAll>
    }
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000464 	.word	0x20000464
 800a4e0:	20000468 	.word	0x20000468
 800a4e4:	e000ed04 	.word	0xe000ed04

0800a4e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a52c <prvGetNextExpireTime+0x44>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <prvGetNextExpireTime+0x16>
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	e000      	b.n	800a500 <prvGetNextExpireTime+0x18>
 800a4fe:	2200      	movs	r2, #0
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d105      	bne.n	800a518 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a50c:	4b07      	ldr	r3, [pc, #28]	@ (800a52c <prvGetNextExpireTime+0x44>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	e001      	b.n	800a51c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a51c:	68fb      	ldr	r3, [r7, #12]
    }
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	20000460 	.word	0x20000460

0800a530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a538:	f7ff f9a6 	bl	8009888 <xTaskGetTickCount>
 800a53c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a53e:	4b0b      	ldr	r3, [pc, #44]	@ (800a56c <prvSampleTimeNow+0x3c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	429a      	cmp	r2, r3
 800a546:	d205      	bcs.n	800a554 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a548:	f000 f916 	bl	800a778 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	e002      	b.n	800a55a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a55a:	4a04      	ldr	r2, [pc, #16]	@ (800a56c <prvSampleTimeNow+0x3c>)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a560:	68fb      	ldr	r3, [r7, #12]
    }
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000470 	.word	0x20000470

0800a570 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a57e:	2300      	movs	r3, #0
 800a580:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d812      	bhi.n	800a5bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	1ad2      	subs	r2, r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d302      	bcc.n	800a5aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	e01b      	b.n	800a5e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5aa:	4b10      	ldr	r3, [pc, #64]	@ (800a5ec <prvInsertTimerInActiveList+0x7c>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	f7fe f957 	bl	8008868 <vListInsert>
 800a5ba:	e012      	b.n	800a5e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d206      	bcs.n	800a5d2 <prvInsertTimerInActiveList+0x62>
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d302      	bcc.n	800a5d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	e007      	b.n	800a5e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5d2:	4b07      	ldr	r3, [pc, #28]	@ (800a5f0 <prvInsertTimerInActiveList+0x80>)
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3304      	adds	r3, #4
 800a5da:	4619      	mov	r1, r3
 800a5dc:	4610      	mov	r0, r2
 800a5de:	f7fe f943 	bl	8008868 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a5e2:	697b      	ldr	r3, [r7, #20]
    }
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20000464 	.word	0x20000464
 800a5f0:	20000460 	.word	0x20000460

0800a5f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5fa:	e0a9      	b.n	800a750 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f2c0 80a6 	blt.w	800a750 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	3304      	adds	r3, #4
 800a614:	4618      	mov	r0, r3
 800a616:	f7fe f960 	bl	80088da <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a61a:	1d3b      	adds	r3, r7, #4
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff ff87 	bl	800a530 <prvSampleTimeNow>
 800a622:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	3b01      	subs	r3, #1
 800a628:	2b08      	cmp	r3, #8
 800a62a:	f200 808e 	bhi.w	800a74a <prvProcessReceivedCommands+0x156>
 800a62e:	a201      	add	r2, pc, #4	@ (adr r2, 800a634 <prvProcessReceivedCommands+0x40>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a659 	.word	0x0800a659
 800a638:	0800a659 	.word	0x0800a659
 800a63c:	0800a6c1 	.word	0x0800a6c1
 800a640:	0800a6d5 	.word	0x0800a6d5
 800a644:	0800a721 	.word	0x0800a721
 800a648:	0800a659 	.word	0x0800a659
 800a64c:	0800a659 	.word	0x0800a659
 800a650:	0800a6c1 	.word	0x0800a6c1
 800a654:	0800a6d5 	.word	0x0800a6d5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	18d1      	adds	r1, r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	69f8      	ldr	r0, [r7, #28]
 800a678:	f7ff ff7a 	bl	800a570 <prvInsertTimerInActiveList>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d065      	beq.n	800a74e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d009      	beq.n	800a6a4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	4413      	add	r3, r2
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	4619      	mov	r1, r3
 800a69c:	69f8      	ldr	r0, [r7, #28]
 800a69e:	f7ff fe6f 	bl	800a380 <prvReloadTimer>
 800a6a2:	e008      	b.n	800a6b6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6aa:	f023 0301 	bic.w	r3, r3, #1
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	69f8      	ldr	r0, [r7, #28]
 800a6bc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800a6be:	e046      	b.n	800a74e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6c6:	f023 0301 	bic.w	r3, r3, #1
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800a6d2:	e03d      	b.n	800a750 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6da:	f043 0301 	orr.w	r3, r3, #1
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10b      	bne.n	800a70c <prvProcessReceivedCommands+0x118>
        __asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	617b      	str	r3, [r7, #20]
    }
 800a706:	bf00      	nop
 800a708:	bf00      	nop
 800a70a:	e7fd      	b.n	800a708 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	699a      	ldr	r2, [r3, #24]
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	18d1      	adds	r1, r2, r3
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	69ba      	ldr	r2, [r7, #24]
 800a718:	69f8      	ldr	r0, [r7, #28]
 800a71a:	f7ff ff29 	bl	800a570 <prvInsertTimerInActiveList>
                        break;
 800a71e:	e017      	b.n	800a750 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d103      	bne.n	800a736 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800a72e:	69f8      	ldr	r0, [r7, #28]
 800a730:	f000 fb58 	bl	800ade4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a734:	e00c      	b.n	800a750 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a73c:	f023 0301 	bic.w	r3, r3, #1
 800a740:	b2da      	uxtb	r2, r3
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800a748:	e002      	b.n	800a750 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800a74a:	bf00      	nop
 800a74c:	e000      	b.n	800a750 <prvProcessReceivedCommands+0x15c>
                        break;
 800a74e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a750:	4b08      	ldr	r3, [pc, #32]	@ (800a774 <prvProcessReceivedCommands+0x180>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f107 0108 	add.w	r1, r7, #8
 800a758:	2200      	movs	r2, #0
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fb20 	bl	8008da0 <xQueueReceive>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	f47f af4a 	bne.w	800a5fc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20000468 	.word	0x20000468

0800a778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a77e:	e009      	b.n	800a794 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a780:	4b0e      	ldr	r3, [pc, #56]	@ (800a7bc <prvSwitchTimerLists+0x44>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a78a:	f04f 31ff 	mov.w	r1, #4294967295
 800a78e:	6838      	ldr	r0, [r7, #0]
 800a790:	f7ff fe18 	bl	800a3c4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a794:	4b09      	ldr	r3, [pc, #36]	@ (800a7bc <prvSwitchTimerLists+0x44>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1f0      	bne.n	800a780 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a79e:	4b07      	ldr	r3, [pc, #28]	@ (800a7bc <prvSwitchTimerLists+0x44>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	@ (800a7c0 <prvSwitchTimerLists+0x48>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a04      	ldr	r2, [pc, #16]	@ (800a7bc <prvSwitchTimerLists+0x44>)
 800a7aa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a7ac:	4a04      	ldr	r2, [pc, #16]	@ (800a7c0 <prvSwitchTimerLists+0x48>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6013      	str	r3, [r2, #0]
    }
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000460 	.word	0x20000460
 800a7c0:	20000464 	.word	0x20000464

0800a7c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a7c8:	f000 f968 	bl	800aa9c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a7cc:	4b12      	ldr	r3, [pc, #72]	@ (800a818 <prvCheckForValidListAndQueue+0x54>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d11d      	bne.n	800a810 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a7d4:	4811      	ldr	r0, [pc, #68]	@ (800a81c <prvCheckForValidListAndQueue+0x58>)
 800a7d6:	f7fe f81a 	bl	800880e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a7da:	4811      	ldr	r0, [pc, #68]	@ (800a820 <prvCheckForValidListAndQueue+0x5c>)
 800a7dc:	f7fe f817 	bl	800880e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a7e0:	4b10      	ldr	r3, [pc, #64]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a7e2:	4a0e      	ldr	r2, [pc, #56]	@ (800a81c <prvCheckForValidListAndQueue+0x58>)
 800a7e4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a7e6:	4b10      	ldr	r3, [pc, #64]	@ (800a828 <prvCheckForValidListAndQueue+0x64>)
 800a7e8:	4a0d      	ldr	r2, [pc, #52]	@ (800a820 <prvCheckForValidListAndQueue+0x5c>)
 800a7ea:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	210c      	movs	r1, #12
 800a7f0:	200a      	movs	r0, #10
 800a7f2:	f7fe f92f 	bl	8008a54 <xQueueGenericCreate>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4a07      	ldr	r2, [pc, #28]	@ (800a818 <prvCheckForValidListAndQueue+0x54>)
 800a7fa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800a7fc:	4b06      	ldr	r3, [pc, #24]	@ (800a818 <prvCheckForValidListAndQueue+0x54>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d005      	beq.n	800a810 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a804:	4b04      	ldr	r3, [pc, #16]	@ (800a818 <prvCheckForValidListAndQueue+0x54>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4908      	ldr	r1, [pc, #32]	@ (800a82c <prvCheckForValidListAndQueue+0x68>)
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fe fcba 	bl	8009184 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a810:	f000 f976 	bl	800ab00 <vPortExitCritical>
    }
 800a814:	bf00      	nop
 800a816:	bd80      	pop	{r7, pc}
 800a818:	20000468 	.word	0x20000468
 800a81c:	20000438 	.word	0x20000438
 800a820:	2000044c 	.word	0x2000044c
 800a824:	20000460 	.word	0x20000460
 800a828:	20000464 	.word	0x20000464
 800a82c:	0800dc04 	.word	0x0800dc04

0800a830 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3b04      	subs	r3, #4
 800a840:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a848:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3b04      	subs	r3, #4
 800a84e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f023 0201 	bic.w	r2, r3, #1
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3b04      	subs	r3, #4
 800a85e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a860:	4a0c      	ldr	r2, [pc, #48]	@ (800a894 <pxPortInitialiseStack+0x64>)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3b14      	subs	r3, #20
 800a86a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b04      	subs	r3, #4
 800a876:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f06f 0202 	mvn.w	r2, #2
 800a87e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3b20      	subs	r3, #32
 800a884:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a886:	68fb      	ldr	r3, [r7, #12]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	0800a899 	.word	0x0800a899

0800a898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a8a2:	4b13      	ldr	r3, [pc, #76]	@ (800a8f0 <prvTaskExitError+0x58>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8aa:	d00b      	beq.n	800a8c4 <prvTaskExitError+0x2c>
        __asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	60fb      	str	r3, [r7, #12]
    }
 800a8be:	bf00      	nop
 800a8c0:	bf00      	nop
 800a8c2:	e7fd      	b.n	800a8c0 <prvTaskExitError+0x28>
        __asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	60bb      	str	r3, [r7, #8]
    }
 800a8d6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a8d8:	bf00      	nop
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d0fc      	beq.n	800a8da <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a8e0:	bf00      	nop
 800a8e2:	bf00      	nop
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	20000010 	.word	0x20000010
	...

0800a900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a900:	4b07      	ldr	r3, [pc, #28]	@ (800a920 <pxCurrentTCBConst2>)
 800a902:	6819      	ldr	r1, [r3, #0]
 800a904:	6808      	ldr	r0, [r1, #0]
 800a906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	f380 8809 	msr	PSP, r0
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f04f 0000 	mov.w	r0, #0
 800a916:	f380 8811 	msr	BASEPRI, r0
 800a91a:	4770      	bx	lr
 800a91c:	f3af 8000 	nop.w

0800a920 <pxCurrentTCBConst2>:
 800a920:	20000334 	.word	0x20000334
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop

0800a928 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800a928:	4808      	ldr	r0, [pc, #32]	@ (800a94c <prvPortStartFirstTask+0x24>)
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	6800      	ldr	r0, [r0, #0]
 800a92e:	f380 8808 	msr	MSP, r0
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8814 	msr	CONTROL, r0
 800a93a:	b662      	cpsie	i
 800a93c:	b661      	cpsie	f
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	df00      	svc	0
 800a948:	bf00      	nop
 800a94a:	0000      	.short	0x0000
 800a94c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop

0800a954 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a95a:	4b47      	ldr	r3, [pc, #284]	@ (800aa78 <xPortStartScheduler+0x124>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a47      	ldr	r2, [pc, #284]	@ (800aa7c <xPortStartScheduler+0x128>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d10b      	bne.n	800a97c <xPortStartScheduler+0x28>
        __asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	613b      	str	r3, [r7, #16]
    }
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	e7fd      	b.n	800a978 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a97c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa78 <xPortStartScheduler+0x124>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a3f      	ldr	r2, [pc, #252]	@ (800aa80 <xPortStartScheduler+0x12c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d10b      	bne.n	800a99e <xPortStartScheduler+0x4a>
        __asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	60fb      	str	r3, [r7, #12]
    }
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	e7fd      	b.n	800a99a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a99e:	4b39      	ldr	r3, [pc, #228]	@ (800aa84 <xPortStartScheduler+0x130>)
 800a9a0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	22ff      	movs	r2, #255	@ 0xff
 800a9ae:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9b8:	78fb      	ldrb	r3, [r7, #3]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	4b31      	ldr	r3, [pc, #196]	@ (800aa88 <xPortStartScheduler+0x134>)
 800a9c4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9c6:	4b31      	ldr	r3, [pc, #196]	@ (800aa8c <xPortStartScheduler+0x138>)
 800a9c8:	2207      	movs	r2, #7
 800a9ca:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9cc:	e009      	b.n	800a9e2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800a9ce:	4b2f      	ldr	r3, [pc, #188]	@ (800aa8c <xPortStartScheduler+0x138>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	4a2d      	ldr	r2, [pc, #180]	@ (800aa8c <xPortStartScheduler+0x138>)
 800a9d6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ea:	2b80      	cmp	r3, #128	@ 0x80
 800a9ec:	d0ef      	beq.n	800a9ce <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9ee:	4b27      	ldr	r3, [pc, #156]	@ (800aa8c <xPortStartScheduler+0x138>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f1c3 0307 	rsb	r3, r3, #7
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d00b      	beq.n	800aa12 <xPortStartScheduler+0xbe>
        __asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	60bb      	str	r3, [r7, #8]
    }
 800aa0c:	bf00      	nop
 800aa0e:	bf00      	nop
 800aa10:	e7fd      	b.n	800aa0e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa12:	4b1e      	ldr	r3, [pc, #120]	@ (800aa8c <xPortStartScheduler+0x138>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	4a1c      	ldr	r2, [pc, #112]	@ (800aa8c <xPortStartScheduler+0x138>)
 800aa1a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa1c:	4b1b      	ldr	r3, [pc, #108]	@ (800aa8c <xPortStartScheduler+0x138>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa24:	4a19      	ldr	r2, [pc, #100]	@ (800aa8c <xPortStartScheduler+0x138>)
 800aa26:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800aa30:	4b17      	ldr	r3, [pc, #92]	@ (800aa90 <xPortStartScheduler+0x13c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a16      	ldr	r2, [pc, #88]	@ (800aa90 <xPortStartScheduler+0x13c>)
 800aa36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800aa3c:	4b14      	ldr	r3, [pc, #80]	@ (800aa90 <xPortStartScheduler+0x13c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a13      	ldr	r2, [pc, #76]	@ (800aa90 <xPortStartScheduler+0x13c>)
 800aa42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa46:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800aa48:	f000 f8e0 	bl	800ac0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800aa4c:	4b11      	ldr	r3, [pc, #68]	@ (800aa94 <xPortStartScheduler+0x140>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800aa52:	f000 f8ff 	bl	800ac54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa56:	4b10      	ldr	r3, [pc, #64]	@ (800aa98 <xPortStartScheduler+0x144>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a0f      	ldr	r2, [pc, #60]	@ (800aa98 <xPortStartScheduler+0x144>)
 800aa5c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa60:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800aa62:	f7ff ff61 	bl	800a928 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800aa66:	f7ff f837 	bl	8009ad8 <vTaskSwitchContext>
    prvTaskExitError();
 800aa6a:	f7ff ff15 	bl	800a898 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	e000ed00 	.word	0xe000ed00
 800aa7c:	410fc271 	.word	0x410fc271
 800aa80:	410fc270 	.word	0x410fc270
 800aa84:	e000e400 	.word	0xe000e400
 800aa88:	20000474 	.word	0x20000474
 800aa8c:	20000478 	.word	0x20000478
 800aa90:	e000ed20 	.word	0xe000ed20
 800aa94:	20000010 	.word	0x20000010
 800aa98:	e000ef34 	.word	0xe000ef34

0800aa9c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
        __asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	607b      	str	r3, [r7, #4]
    }
 800aab4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800aab6:	4b10      	ldr	r3, [pc, #64]	@ (800aaf8 <vPortEnterCritical+0x5c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3301      	adds	r3, #1
 800aabc:	4a0e      	ldr	r2, [pc, #56]	@ (800aaf8 <vPortEnterCritical+0x5c>)
 800aabe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800aac0:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf8 <vPortEnterCritical+0x5c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d110      	bne.n	800aaea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aac8:	4b0c      	ldr	r3, [pc, #48]	@ (800aafc <vPortEnterCritical+0x60>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00b      	beq.n	800aaea <vPortEnterCritical+0x4e>
        __asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	603b      	str	r3, [r7, #0]
    }
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
 800aae8:	e7fd      	b.n	800aae6 <vPortEnterCritical+0x4a>
    }
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	20000010 	.word	0x20000010
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800ab06:	4b12      	ldr	r3, [pc, #72]	@ (800ab50 <vPortExitCritical+0x50>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10b      	bne.n	800ab26 <vPortExitCritical+0x26>
        __asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	607b      	str	r3, [r7, #4]
    }
 800ab20:	bf00      	nop
 800ab22:	bf00      	nop
 800ab24:	e7fd      	b.n	800ab22 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800ab26:	4b0a      	ldr	r3, [pc, #40]	@ (800ab50 <vPortExitCritical+0x50>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	4a08      	ldr	r2, [pc, #32]	@ (800ab50 <vPortExitCritical+0x50>)
 800ab2e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800ab30:	4b07      	ldr	r3, [pc, #28]	@ (800ab50 <vPortExitCritical+0x50>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <vPortExitCritical+0x44>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800ab42:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	20000010 	.word	0x20000010
	...

0800ab60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800ab60:	f3ef 8009 	mrs	r0, PSP
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	4b15      	ldr	r3, [pc, #84]	@ (800abc0 <pxCurrentTCBConst>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	f01e 0f10 	tst.w	lr, #16
 800ab70:	bf08      	it	eq
 800ab72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7a:	6010      	str	r0, [r2, #0]
 800ab7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab84:	f380 8811 	msr	BASEPRI, r0
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f7fe ffa2 	bl	8009ad8 <vTaskSwitchContext>
 800ab94:	f04f 0000 	mov.w	r0, #0
 800ab98:	f380 8811 	msr	BASEPRI, r0
 800ab9c:	bc09      	pop	{r0, r3}
 800ab9e:	6819      	ldr	r1, [r3, #0]
 800aba0:	6808      	ldr	r0, [r1, #0]
 800aba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba6:	f01e 0f10 	tst.w	lr, #16
 800abaa:	bf08      	it	eq
 800abac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abb0:	f380 8809 	msr	PSP, r0
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	f3af 8000 	nop.w

0800abc0 <pxCurrentTCBConst>:
 800abc0:	20000334 	.word	0x20000334
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop

0800abc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
        __asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	607b      	str	r3, [r7, #4]
    }
 800abe0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800abe2:	f7fe fe61 	bl	80098a8 <xTaskIncrementTick>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abec:	4b06      	ldr	r3, [pc, #24]	@ (800ac08 <SysTick_Handler+0x40>)
 800abee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	603b      	str	r3, [r7, #0]
        __asm volatile
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f383 8811 	msr	BASEPRI, r3
    }
 800abfe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac10:	4b0b      	ldr	r3, [pc, #44]	@ (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <vPortSetupTimerInterrupt+0x38>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac48 <vPortSetupTimerInterrupt+0x3c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a0a      	ldr	r2, [pc, #40]	@ (800ac4c <vPortSetupTimerInterrupt+0x40>)
 800ac22:	fba2 2303 	umull	r2, r3, r2, r3
 800ac26:	099b      	lsrs	r3, r3, #6
 800ac28:	4a09      	ldr	r2, [pc, #36]	@ (800ac50 <vPortSetupTimerInterrupt+0x44>)
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac2e:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac30:	2207      	movs	r2, #7
 800ac32:	601a      	str	r2, [r3, #0]
}
 800ac34:	bf00      	nop
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	e000e010 	.word	0xe000e010
 800ac44:	e000e018 	.word	0xe000e018
 800ac48:	20000000 	.word	0x20000000
 800ac4c:	10624dd3 	.word	0x10624dd3
 800ac50:	e000e014 	.word	0xe000e014

0800ac54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800ac54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac64 <vPortEnableVFP+0x10>
 800ac58:	6801      	ldr	r1, [r0, #0]
 800ac5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac5e:	6001      	str	r1, [r0, #0]
 800ac60:	4770      	bx	lr
 800ac62:	0000      	.short	0x0000
 800ac64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop

0800ac6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	@ 0x28
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800ac78:	f7fe fcfc 	bl	8009674 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ac7c:	4b54      	ldr	r3, [pc, #336]	@ (800add0 <pvPortMalloc+0x164>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ac84:	f000 f90c 	bl	800aea0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d012      	beq.n	800acb4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800ac8e:	2208      	movs	r2, #8
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f003 0307 	and.w	r3, r3, #7
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	3308      	adds	r3, #8
 800ac9a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	43db      	mvns	r3, r3
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d804      	bhi.n	800acb0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	4413      	add	r3, r2
 800acac:	607b      	str	r3, [r7, #4]
 800acae:	e001      	b.n	800acb4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	db71      	blt.n	800ad9e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d06e      	beq.n	800ad9e <pvPortMalloc+0x132>
 800acc0:	4b44      	ldr	r3, [pc, #272]	@ (800add4 <pvPortMalloc+0x168>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d869      	bhi.n	800ad9e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800acca:	4b43      	ldr	r3, [pc, #268]	@ (800add8 <pvPortMalloc+0x16c>)
 800accc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800acce:	4b42      	ldr	r3, [pc, #264]	@ (800add8 <pvPortMalloc+0x16c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acd4:	e004      	b.n	800ace0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800acd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800acda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d903      	bls.n	800acf2 <pvPortMalloc+0x86>
 800acea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1f1      	bne.n	800acd6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800acf2:	4b37      	ldr	r3, [pc, #220]	@ (800add0 <pvPortMalloc+0x164>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d050      	beq.n	800ad9e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2208      	movs	r2, #8
 800ad02:	4413      	add	r3, r2
 800ad04:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	1ad2      	subs	r2, r2, r3
 800ad16:	2308      	movs	r3, #8
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d920      	bls.n	800ad60 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4413      	add	r3, r2
 800ad24:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f003 0307 	and.w	r3, r3, #7
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <pvPortMalloc+0xdc>
        __asm volatile
 800ad30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	613b      	str	r3, [r7, #16]
    }
 800ad42:	bf00      	nop
 800ad44:	bf00      	nop
 800ad46:	e7fd      	b.n	800ad44 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	1ad2      	subs	r2, r2, r3
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ad54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad5a:	6978      	ldr	r0, [r7, #20]
 800ad5c:	f000 f8fc 	bl	800af58 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad60:	4b1c      	ldr	r3, [pc, #112]	@ (800add4 <pvPortMalloc+0x168>)
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	4a1a      	ldr	r2, [pc, #104]	@ (800add4 <pvPortMalloc+0x168>)
 800ad6c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad6e:	4b19      	ldr	r3, [pc, #100]	@ (800add4 <pvPortMalloc+0x168>)
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	4b1a      	ldr	r3, [pc, #104]	@ (800addc <pvPortMalloc+0x170>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d203      	bcs.n	800ad82 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad7a:	4b16      	ldr	r3, [pc, #88]	@ (800add4 <pvPortMalloc+0x168>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a17      	ldr	r2, [pc, #92]	@ (800addc <pvPortMalloc+0x170>)
 800ad80:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ad94:	4b12      	ldr	r3, [pc, #72]	@ (800ade0 <pvPortMalloc+0x174>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	4a11      	ldr	r2, [pc, #68]	@ (800ade0 <pvPortMalloc+0x174>)
 800ad9c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ad9e:	f7fe fc77 	bl	8009690 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	f003 0307 	and.w	r3, r3, #7
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <pvPortMalloc+0x158>
        __asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	60fb      	str	r3, [r7, #12]
    }
 800adbe:	bf00      	nop
 800adc0:	bf00      	nop
 800adc2:	e7fd      	b.n	800adc0 <pvPortMalloc+0x154>
    return pvReturn;
 800adc4:	69fb      	ldr	r3, [r7, #28]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3728      	adds	r7, #40	@ 0x28
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20013084 	.word	0x20013084
 800add4:	20013088 	.word	0x20013088
 800add8:	2001307c 	.word	0x2001307c
 800addc:	2001308c 	.word	0x2001308c
 800ade0:	20013090 	.word	0x20013090

0800ade4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d04b      	beq.n	800ae8e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800adf6:	2308      	movs	r3, #8
 800adf8:	425b      	negs	r3, r3
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	4413      	add	r3, r2
 800adfe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	db0b      	blt.n	800ae24 <vPortFree+0x40>
        __asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	60fb      	str	r3, [r7, #12]
    }
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	e7fd      	b.n	800ae20 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <vPortFree+0x60>
        __asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	60bb      	str	r3, [r7, #8]
    }
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	e7fd      	b.n	800ae40 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	0fdb      	lsrs	r3, r3, #31
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d01c      	beq.n	800ae8e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d118      	bne.n	800ae8e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800ae68:	f7fe fc04 	bl	8009674 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	4b09      	ldr	r3, [pc, #36]	@ (800ae98 <vPortFree+0xb4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4413      	add	r3, r2
 800ae76:	4a08      	ldr	r2, [pc, #32]	@ (800ae98 <vPortFree+0xb4>)
 800ae78:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae7a:	6938      	ldr	r0, [r7, #16]
 800ae7c:	f000 f86c 	bl	800af58 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ae80:	4b06      	ldr	r3, [pc, #24]	@ (800ae9c <vPortFree+0xb8>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3301      	adds	r3, #1
 800ae86:	4a05      	ldr	r2, [pc, #20]	@ (800ae9c <vPortFree+0xb8>)
 800ae88:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ae8a:	f7fe fc01 	bl	8009690 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ae8e:	bf00      	nop
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20013088 	.word	0x20013088
 800ae9c:	20013094 	.word	0x20013094

0800aea0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aea6:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800aeaa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800aeac:	4b25      	ldr	r3, [pc, #148]	@ (800af44 <prvHeapInit+0xa4>)
 800aeae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f003 0307 	and.w	r3, r3, #7
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00c      	beq.n	800aed4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3307      	adds	r3, #7
 800aebe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0307 	bic.w	r3, r3, #7
 800aec6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	4a1d      	ldr	r2, [pc, #116]	@ (800af44 <prvHeapInit+0xa4>)
 800aed0:	4413      	add	r3, r2
 800aed2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aed8:	4a1b      	ldr	r2, [pc, #108]	@ (800af48 <prvHeapInit+0xa8>)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800aede:	4b1a      	ldr	r3, [pc, #104]	@ (800af48 <prvHeapInit+0xa8>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	4413      	add	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800aeec:	2208      	movs	r2, #8
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 0307 	bic.w	r3, r3, #7
 800aefa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4a13      	ldr	r2, [pc, #76]	@ (800af4c <prvHeapInit+0xac>)
 800af00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800af02:	4b12      	ldr	r3, [pc, #72]	@ (800af4c <prvHeapInit+0xac>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2200      	movs	r2, #0
 800af08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800af0a:	4b10      	ldr	r3, [pc, #64]	@ (800af4c <prvHeapInit+0xac>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	1ad2      	subs	r2, r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af20:	4b0a      	ldr	r3, [pc, #40]	@ (800af4c <prvHeapInit+0xac>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	4a08      	ldr	r2, [pc, #32]	@ (800af50 <prvHeapInit+0xb0>)
 800af2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	4a07      	ldr	r2, [pc, #28]	@ (800af54 <prvHeapInit+0xb4>)
 800af36:	6013      	str	r3, [r2, #0]
}
 800af38:	bf00      	nop
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	2000047c 	.word	0x2000047c
 800af48:	2001307c 	.word	0x2001307c
 800af4c:	20013084 	.word	0x20013084
 800af50:	2001308c 	.word	0x2001308c
 800af54:	20013088 	.word	0x20013088

0800af58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af60:	4b28      	ldr	r3, [pc, #160]	@ (800b004 <prvInsertBlockIntoFreeList+0xac>)
 800af62:	60fb      	str	r3, [r7, #12]
 800af64:	e002      	b.n	800af6c <prvInsertBlockIntoFreeList+0x14>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	429a      	cmp	r2, r3
 800af74:	d8f7      	bhi.n	800af66 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	4413      	add	r3, r2
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	429a      	cmp	r2, r3
 800af86:	d108      	bne.n	800af9a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	441a      	add	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	441a      	add	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d118      	bne.n	800afe0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	4b15      	ldr	r3, [pc, #84]	@ (800b008 <prvInsertBlockIntoFreeList+0xb0>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d00d      	beq.n	800afd6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	441a      	add	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	e008      	b.n	800afe8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afd6:	4b0c      	ldr	r3, [pc, #48]	@ (800b008 <prvInsertBlockIntoFreeList+0xb0>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	e003      	b.n	800afe8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	429a      	cmp	r2, r3
 800afee:	d002      	beq.n	800aff6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800aff6:	bf00      	nop
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	2001307c 	.word	0x2001307c
 800b008:	20013084 	.word	0x20013084

0800b00c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b018:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b01c:	f002 fd42 	bl	800daa4 <USBD_static_malloc>
 800b020:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d109      	bne.n	800b03c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	32b0      	adds	r2, #176	@ 0xb0
 800b032:	2100      	movs	r1, #0
 800b034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b038:	2302      	movs	r3, #2
 800b03a:	e0d4      	b.n	800b1e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b03c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b040:	2100      	movs	r1, #0
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f002 fd72 	bl	800db2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	32b0      	adds	r2, #176	@ 0xb0
 800b052:	68f9      	ldr	r1, [r7, #12]
 800b054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	32b0      	adds	r2, #176	@ 0xb0
 800b062:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	7c1b      	ldrb	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d138      	bne.n	800b0e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b074:	4b5e      	ldr	r3, [pc, #376]	@ (800b1f0 <USBD_CDC_Init+0x1e4>)
 800b076:	7819      	ldrb	r1, [r3, #0]
 800b078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b07c:	2202      	movs	r2, #2
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f002 fbed 	bl	800d85e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b084:	4b5a      	ldr	r3, [pc, #360]	@ (800b1f0 <USBD_CDC_Init+0x1e4>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	f003 020f 	and.w	r2, r3, #15
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	440b      	add	r3, r1
 800b098:	3324      	adds	r3, #36	@ 0x24
 800b09a:	2201      	movs	r2, #1
 800b09c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b09e:	4b55      	ldr	r3, [pc, #340]	@ (800b1f4 <USBD_CDC_Init+0x1e8>)
 800b0a0:	7819      	ldrb	r1, [r3, #0]
 800b0a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f002 fbd8 	bl	800d85e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b0ae:	4b51      	ldr	r3, [pc, #324]	@ (800b1f4 <USBD_CDC_Init+0x1e8>)
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	f003 020f 	and.w	r2, r3, #15
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0ca:	4b4b      	ldr	r3, [pc, #300]	@ (800b1f8 <USBD_CDC_Init+0x1ec>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	f003 020f 	and.w	r2, r3, #15
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	440b      	add	r3, r1
 800b0de:	3326      	adds	r3, #38	@ 0x26
 800b0e0:	2210      	movs	r2, #16
 800b0e2:	801a      	strh	r2, [r3, #0]
 800b0e4:	e035      	b.n	800b152 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0e6:	4b42      	ldr	r3, [pc, #264]	@ (800b1f0 <USBD_CDC_Init+0x1e4>)
 800b0e8:	7819      	ldrb	r1, [r3, #0]
 800b0ea:	2340      	movs	r3, #64	@ 0x40
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f002 fbb5 	bl	800d85e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b0f4:	4b3e      	ldr	r3, [pc, #248]	@ (800b1f0 <USBD_CDC_Init+0x1e4>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	f003 020f 	and.w	r2, r3, #15
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	4613      	mov	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	440b      	add	r3, r1
 800b108:	3324      	adds	r3, #36	@ 0x24
 800b10a:	2201      	movs	r2, #1
 800b10c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b10e:	4b39      	ldr	r3, [pc, #228]	@ (800b1f4 <USBD_CDC_Init+0x1e8>)
 800b110:	7819      	ldrb	r1, [r3, #0]
 800b112:	2340      	movs	r3, #64	@ 0x40
 800b114:	2202      	movs	r2, #2
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f002 fba1 	bl	800d85e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b11c:	4b35      	ldr	r3, [pc, #212]	@ (800b1f4 <USBD_CDC_Init+0x1e8>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	f003 020f 	and.w	r2, r3, #15
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	4613      	mov	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	440b      	add	r3, r1
 800b130:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b134:	2201      	movs	r2, #1
 800b136:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b138:	4b2f      	ldr	r3, [pc, #188]	@ (800b1f8 <USBD_CDC_Init+0x1ec>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	f003 020f 	and.w	r2, r3, #15
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	440b      	add	r3, r1
 800b14c:	3326      	adds	r3, #38	@ 0x26
 800b14e:	2210      	movs	r2, #16
 800b150:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b152:	4b29      	ldr	r3, [pc, #164]	@ (800b1f8 <USBD_CDC_Init+0x1ec>)
 800b154:	7819      	ldrb	r1, [r3, #0]
 800b156:	2308      	movs	r3, #8
 800b158:	2203      	movs	r2, #3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f002 fb7f 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b160:	4b25      	ldr	r3, [pc, #148]	@ (800b1f8 <USBD_CDC_Init+0x1ec>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	f003 020f 	and.w	r2, r3, #15
 800b168:	6879      	ldr	r1, [r7, #4]
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	3324      	adds	r3, #36	@ 0x24
 800b176:	2201      	movs	r2, #1
 800b178:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	33b0      	adds	r3, #176	@ 0xb0
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e018      	b.n	800b1e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	7c1b      	ldrb	r3, [r3, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10a      	bne.n	800b1d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f4 <USBD_CDC_Init+0x1e8>)
 800b1be:	7819      	ldrb	r1, [r3, #0]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f002 fc36 	bl	800da3c <USBD_LL_PrepareReceive>
 800b1d0:	e008      	b.n	800b1e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1d2:	4b08      	ldr	r3, [pc, #32]	@ (800b1f4 <USBD_CDC_Init+0x1e8>)
 800b1d4:	7819      	ldrb	r1, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1dc:	2340      	movs	r3, #64	@ 0x40
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f002 fc2c 	bl	800da3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	2000009b 	.word	0x2000009b
 800b1f4:	2000009c 	.word	0x2000009c
 800b1f8:	2000009d 	.word	0x2000009d

0800b1fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b208:	4b3a      	ldr	r3, [pc, #232]	@ (800b2f4 <USBD_CDC_DeInit+0xf8>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f002 fb4b 	bl	800d8aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b214:	4b37      	ldr	r3, [pc, #220]	@ (800b2f4 <USBD_CDC_DeInit+0xf8>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	f003 020f 	and.w	r2, r3, #15
 800b21c:	6879      	ldr	r1, [r7, #4]
 800b21e:	4613      	mov	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	440b      	add	r3, r1
 800b228:	3324      	adds	r3, #36	@ 0x24
 800b22a:	2200      	movs	r2, #0
 800b22c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b22e:	4b32      	ldr	r3, [pc, #200]	@ (800b2f8 <USBD_CDC_DeInit+0xfc>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f002 fb38 	bl	800d8aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b23a:	4b2f      	ldr	r3, [pc, #188]	@ (800b2f8 <USBD_CDC_DeInit+0xfc>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f003 020f 	and.w	r2, r3, #15
 800b242:	6879      	ldr	r1, [r7, #4]
 800b244:	4613      	mov	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	440b      	add	r3, r1
 800b24e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b252:	2200      	movs	r2, #0
 800b254:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b256:	4b29      	ldr	r3, [pc, #164]	@ (800b2fc <USBD_CDC_DeInit+0x100>)
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f002 fb24 	bl	800d8aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b262:	4b26      	ldr	r3, [pc, #152]	@ (800b2fc <USBD_CDC_DeInit+0x100>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	f003 020f 	and.w	r2, r3, #15
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	4613      	mov	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	440b      	add	r3, r1
 800b276:	3324      	adds	r3, #36	@ 0x24
 800b278:	2200      	movs	r2, #0
 800b27a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b27c:	4b1f      	ldr	r3, [pc, #124]	@ (800b2fc <USBD_CDC_DeInit+0x100>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f003 020f 	and.w	r2, r3, #15
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	440b      	add	r3, r1
 800b290:	3326      	adds	r3, #38	@ 0x26
 800b292:	2200      	movs	r2, #0
 800b294:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	32b0      	adds	r2, #176	@ 0xb0
 800b2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d01f      	beq.n	800b2e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	33b0      	adds	r3, #176	@ 0xb0
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	32b0      	adds	r2, #176	@ 0xb0
 800b2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f002 fbf8 	bl	800dac0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	32b0      	adds	r2, #176	@ 0xb0
 800b2da:	2100      	movs	r1, #0
 800b2dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	2000009b 	.word	0x2000009b
 800b2f8:	2000009c 	.word	0x2000009c
 800b2fc:	2000009d 	.word	0x2000009d

0800b300 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	32b0      	adds	r2, #176	@ 0xb0
 800b314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b318:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d101      	bne.n	800b330 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e0bf      	b.n	800b4b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d050      	beq.n	800b3de <USBD_CDC_Setup+0xde>
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	f040 80af 	bne.w	800b4a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	88db      	ldrh	r3, [r3, #6]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d03a      	beq.n	800b3c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	b25b      	sxtb	r3, r3
 800b350:	2b00      	cmp	r3, #0
 800b352:	da1b      	bge.n	800b38c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	33b0      	adds	r3, #176	@ 0xb0
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b36a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	88d2      	ldrh	r2, [r2, #6]
 800b370:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	88db      	ldrh	r3, [r3, #6]
 800b376:	2b07      	cmp	r3, #7
 800b378:	bf28      	it	cs
 800b37a:	2307      	movcs	r3, #7
 800b37c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	89fa      	ldrh	r2, [r7, #14]
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f001 fd93 	bl	800ceb0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b38a:	e090      	b.n	800b4ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	785a      	ldrb	r2, [r3, #1]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	88db      	ldrh	r3, [r3, #6]
 800b39a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b39c:	d803      	bhi.n	800b3a6 <USBD_CDC_Setup+0xa6>
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	88db      	ldrh	r3, [r3, #6]
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	e000      	b.n	800b3a8 <USBD_CDC_Setup+0xa8>
 800b3a6:	2240      	movs	r2, #64	@ 0x40
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b3ae:	6939      	ldr	r1, [r7, #16]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 fda5 	bl	800cf08 <USBD_CtlPrepareRx>
      break;
 800b3be:	e076      	b.n	800b4ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	33b0      	adds	r3, #176	@ 0xb0
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4413      	add	r3, r2
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	7850      	ldrb	r0, [r2, #1]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	4798      	blx	r3
      break;
 800b3dc:	e067      	b.n	800b4ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	785b      	ldrb	r3, [r3, #1]
 800b3e2:	2b0b      	cmp	r3, #11
 800b3e4:	d851      	bhi.n	800b48a <USBD_CDC_Setup+0x18a>
 800b3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ec <USBD_CDC_Setup+0xec>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b41d 	.word	0x0800b41d
 800b3f0:	0800b499 	.word	0x0800b499
 800b3f4:	0800b48b 	.word	0x0800b48b
 800b3f8:	0800b48b 	.word	0x0800b48b
 800b3fc:	0800b48b 	.word	0x0800b48b
 800b400:	0800b48b 	.word	0x0800b48b
 800b404:	0800b48b 	.word	0x0800b48b
 800b408:	0800b48b 	.word	0x0800b48b
 800b40c:	0800b48b 	.word	0x0800b48b
 800b410:	0800b48b 	.word	0x0800b48b
 800b414:	0800b447 	.word	0x0800b447
 800b418:	0800b471 	.word	0x0800b471
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b03      	cmp	r3, #3
 800b426:	d107      	bne.n	800b438 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b428:	f107 030a 	add.w	r3, r7, #10
 800b42c:	2202      	movs	r2, #2
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f001 fd3d 	bl	800ceb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b436:	e032      	b.n	800b49e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f001 fcbb 	bl	800cdb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b440:	2303      	movs	r3, #3
 800b442:	75fb      	strb	r3, [r7, #23]
          break;
 800b444:	e02b      	b.n	800b49e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d107      	bne.n	800b462 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b452:	f107 030d 	add.w	r3, r7, #13
 800b456:	2201      	movs	r2, #1
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f001 fd28 	bl	800ceb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b460:	e01d      	b.n	800b49e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 fca6 	bl	800cdb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b46a:	2303      	movs	r3, #3
 800b46c:	75fb      	strb	r3, [r7, #23]
          break;
 800b46e:	e016      	b.n	800b49e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d00f      	beq.n	800b49c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f001 fc99 	bl	800cdb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b484:	2303      	movs	r3, #3
 800b486:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b488:	e008      	b.n	800b49c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f001 fc92 	bl	800cdb6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b492:	2303      	movs	r3, #3
 800b494:	75fb      	strb	r3, [r7, #23]
          break;
 800b496:	e002      	b.n	800b49e <USBD_CDC_Setup+0x19e>
          break;
 800b498:	bf00      	nop
 800b49a:	e008      	b.n	800b4ae <USBD_CDC_Setup+0x1ae>
          break;
 800b49c:	bf00      	nop
      }
      break;
 800b49e:	e006      	b.n	800b4ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f001 fc87 	bl	800cdb6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	32b0      	adds	r2, #176	@ 0xb0
 800b4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e065      	b.n	800b5ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	32b0      	adds	r2, #176	@ 0xb0
 800b4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4f2:	78fb      	ldrb	r3, [r7, #3]
 800b4f4:	f003 020f 	and.w	r2, r3, #15
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	440b      	add	r3, r1
 800b504:	3318      	adds	r3, #24
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d02f      	beq.n	800b56c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	f003 020f 	and.w	r2, r3, #15
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	4613      	mov	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	440b      	add	r3, r1
 800b51e:	3318      	adds	r3, #24
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	f003 010f 	and.w	r1, r3, #15
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	460b      	mov	r3, r1
 800b52c:	00db      	lsls	r3, r3, #3
 800b52e:	440b      	add	r3, r1
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4403      	add	r3, r0
 800b534:	331c      	adds	r3, #28
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	fbb2 f1f3 	udiv	r1, r2, r3
 800b53c:	fb01 f303 	mul.w	r3, r1, r3
 800b540:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b542:	2b00      	cmp	r3, #0
 800b544:	d112      	bne.n	800b56c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b546:	78fb      	ldrb	r3, [r7, #3]
 800b548:	f003 020f 	and.w	r2, r3, #15
 800b54c:	6879      	ldr	r1, [r7, #4]
 800b54e:	4613      	mov	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	440b      	add	r3, r1
 800b558:	3318      	adds	r3, #24
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b55e:	78f9      	ldrb	r1, [r7, #3]
 800b560:	2300      	movs	r3, #0
 800b562:	2200      	movs	r2, #0
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f002 fa48 	bl	800d9fa <USBD_LL_Transmit>
 800b56a:	e01f      	b.n	800b5ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2200      	movs	r2, #0
 800b570:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	33b0      	adds	r3, #176	@ 0xb0
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d010      	beq.n	800b5ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	33b0      	adds	r3, #176	@ 0xb0
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b5a8:	78fa      	ldrb	r2, [r7, #3]
 800b5aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	32b0      	adds	r2, #176	@ 0xb0
 800b5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	32b0      	adds	r2, #176	@ 0xb0
 800b5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e01a      	b.n	800b61e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5e8:	78fb      	ldrb	r3, [r7, #3]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f002 fa46 	bl	800da7e <USBD_LL_GetRxDataSize>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	33b0      	adds	r3, #176	@ 0xb0
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b618:	4611      	mov	r1, r2
 800b61a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	32b0      	adds	r2, #176	@ 0xb0
 800b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b644:	2303      	movs	r3, #3
 800b646:	e024      	b.n	800b692 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	33b0      	adds	r3, #176	@ 0xb0
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d019      	beq.n	800b690 <USBD_CDC_EP0_RxReady+0x6a>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b662:	2bff      	cmp	r3, #255	@ 0xff
 800b664:	d014      	beq.n	800b690 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	33b0      	adds	r3, #176	@ 0xb0
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b67e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b686:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	22ff      	movs	r2, #255	@ 0xff
 800b68c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6a4:	2182      	movs	r1, #130	@ 0x82
 800b6a6:	4818      	ldr	r0, [pc, #96]	@ (800b708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6a8:	f000 fd4f 	bl	800c14a <USBD_GetEpDesc>
 800b6ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4815      	ldr	r0, [pc, #84]	@ (800b708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6b2:	f000 fd4a 	bl	800c14a <USBD_GetEpDesc>
 800b6b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6b8:	2181      	movs	r1, #129	@ 0x81
 800b6ba:	4813      	ldr	r0, [pc, #76]	@ (800b708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6bc:	f000 fd45 	bl	800c14a <USBD_GetEpDesc>
 800b6c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2210      	movs	r2, #16
 800b6cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6dc:	711a      	strb	r2, [r3, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d006      	beq.n	800b6f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6f0:	711a      	strb	r2, [r3, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2243      	movs	r2, #67	@ 0x43
 800b6fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6fc:	4b02      	ldr	r3, [pc, #8]	@ (800b708 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20000058 	.word	0x20000058

0800b70c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b714:	2182      	movs	r1, #130	@ 0x82
 800b716:	4818      	ldr	r0, [pc, #96]	@ (800b778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b718:	f000 fd17 	bl	800c14a <USBD_GetEpDesc>
 800b71c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b71e:	2101      	movs	r1, #1
 800b720:	4815      	ldr	r0, [pc, #84]	@ (800b778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b722:	f000 fd12 	bl	800c14a <USBD_GetEpDesc>
 800b726:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b728:	2181      	movs	r1, #129	@ 0x81
 800b72a:	4813      	ldr	r0, [pc, #76]	@ (800b778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b72c:	f000 fd0d 	bl	800c14a <USBD_GetEpDesc>
 800b730:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2210      	movs	r2, #16
 800b73c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d006      	beq.n	800b752 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2200      	movs	r2, #0
 800b748:	711a      	strb	r2, [r3, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f042 0202 	orr.w	r2, r2, #2
 800b750:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d006      	beq.n	800b766 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	711a      	strb	r2, [r3, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f042 0202 	orr.w	r2, r2, #2
 800b764:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2243      	movs	r2, #67	@ 0x43
 800b76a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b76c:	4b02      	ldr	r3, [pc, #8]	@ (800b778 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20000058 	.word	0x20000058

0800b77c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b784:	2182      	movs	r1, #130	@ 0x82
 800b786:	4818      	ldr	r0, [pc, #96]	@ (800b7e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b788:	f000 fcdf 	bl	800c14a <USBD_GetEpDesc>
 800b78c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b78e:	2101      	movs	r1, #1
 800b790:	4815      	ldr	r0, [pc, #84]	@ (800b7e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b792:	f000 fcda 	bl	800c14a <USBD_GetEpDesc>
 800b796:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b798:	2181      	movs	r1, #129	@ 0x81
 800b79a:	4813      	ldr	r0, [pc, #76]	@ (800b7e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b79c:	f000 fcd5 	bl	800c14a <USBD_GetEpDesc>
 800b7a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2210      	movs	r2, #16
 800b7ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d006      	beq.n	800b7c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7bc:	711a      	strb	r2, [r3, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7d0:	711a      	strb	r2, [r3, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2243      	movs	r2, #67	@ 0x43
 800b7da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7dc:	4b02      	ldr	r3, [pc, #8]	@ (800b7e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20000058 	.word	0x20000058

0800b7ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	220a      	movs	r2, #10
 800b7f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b7fa:	4b03      	ldr	r3, [pc, #12]	@ (800b808 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	20000014 	.word	0x20000014

0800b80c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b81c:	2303      	movs	r3, #3
 800b81e:	e009      	b.n	800b834 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	33b0      	adds	r3, #176	@ 0xb0
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b840:	b480      	push	{r7}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	32b0      	adds	r2, #176	@ 0xb0
 800b856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b862:	2303      	movs	r3, #3
 800b864:	e008      	b.n	800b878 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	371c      	adds	r7, #28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	32b0      	adds	r2, #176	@ 0xb0
 800b898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d101      	bne.n	800b8a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	e004      	b.n	800b8b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
	...

0800b8c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	32b0      	adds	r2, #176	@ 0xb0
 800b8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	e025      	b.n	800b932 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d11f      	bne.n	800b930 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b8f8:	4b10      	ldr	r3, [pc, #64]	@ (800b93c <USBD_CDC_TransmitPacket+0x7c>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	4613      	mov	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4403      	add	r3, r0
 800b912:	3318      	adds	r3, #24
 800b914:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b916:	4b09      	ldr	r3, [pc, #36]	@ (800b93c <USBD_CDC_TransmitPacket+0x7c>)
 800b918:	7819      	ldrb	r1, [r3, #0]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f002 f867 	bl	800d9fa <USBD_LL_Transmit>

    ret = USBD_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000009b 	.word	0x2000009b

0800b940 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	32b0      	adds	r2, #176	@ 0xb0
 800b952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b956:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	32b0      	adds	r2, #176	@ 0xb0
 800b962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e018      	b.n	800b9a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	7c1b      	ldrb	r3, [r3, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b976:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a8 <USBD_CDC_ReceivePacket+0x68>)
 800b978:	7819      	ldrb	r1, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f002 f859 	bl	800da3c <USBD_LL_PrepareReceive>
 800b98a:	e008      	b.n	800b99e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b98c:	4b06      	ldr	r3, [pc, #24]	@ (800b9a8 <USBD_CDC_ReceivePacket+0x68>)
 800b98e:	7819      	ldrb	r1, [r3, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b996:	2340      	movs	r3, #64	@ 0x40
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f002 f84f 	bl	800da3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	2000009c 	.word	0x2000009c

0800b9ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e01f      	b.n	800ba04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	79fa      	ldrb	r2, [r7, #7]
 800b9f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f001 fec9 	bl	800d790 <USBD_LL_Init>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e025      	b.n	800ba70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	32ae      	adds	r2, #174	@ 0xae
 800ba36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00f      	beq.n	800ba60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	32ae      	adds	r2, #174	@ 0xae
 800ba4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba50:	f107 020e 	add.w	r2, r7, #14
 800ba54:	4610      	mov	r0, r2
 800ba56:	4798      	blx	r3
 800ba58:	4602      	mov	r2, r0
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba66:	1c5a      	adds	r2, r3, #1
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f001 fed1 	bl	800d828 <USBD_LL_Start>
 800ba86:	4603      	mov	r3, r0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b084      	sub	sp, #16
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	460b      	mov	r3, r1
 800bab0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800babc:	2b00      	cmp	r3, #0
 800babe:	d009      	beq.n	800bad4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	78fa      	ldrb	r2, [r7, #3]
 800baca:	4611      	mov	r1, r2
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	4798      	blx	r3
 800bad0:	4603      	mov	r3, r0
 800bad2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	4611      	mov	r1, r2
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	4798      	blx	r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb04:	2303      	movs	r3, #3
 800bb06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b084      	sub	sp, #16
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 f90c 	bl	800cd42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb38:	461a      	mov	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb46:	f003 031f 	and.w	r3, r3, #31
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d01a      	beq.n	800bb84 <USBD_LL_SetupStage+0x72>
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d822      	bhi.n	800bb98 <USBD_LL_SetupStage+0x86>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d002      	beq.n	800bb5c <USBD_LL_SetupStage+0x4a>
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d00a      	beq.n	800bb70 <USBD_LL_SetupStage+0x5e>
 800bb5a:	e01d      	b.n	800bb98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fb63 	bl	800c230 <USBD_StdDevReq>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6e:	e020      	b.n	800bbb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fbcb 	bl	800c314 <USBD_StdItfReq>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
      break;
 800bb82:	e016      	b.n	800bbb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fc2d 	bl	800c3ec <USBD_StdEPReq>
 800bb92:	4603      	mov	r3, r0
 800bb94:	73fb      	strb	r3, [r7, #15]
      break;
 800bb96:	e00c      	b.n	800bbb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f001 fe9e 	bl	800d8e8 <USBD_LL_StallEP>
 800bbac:	4603      	mov	r3, r0
 800bbae:	73fb      	strb	r3, [r7, #15]
      break;
 800bbb0:	bf00      	nop
  }

  return ret;
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bbce:	7afb      	ldrb	r3, [r7, #11]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d16e      	bne.n	800bcb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bbda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	f040 8098 	bne.w	800bd18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	689a      	ldr	r2, [r3, #8]
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d913      	bls.n	800bc1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	689a      	ldr	r2, [r3, #8]
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	1ad2      	subs	r2, r2, r3
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	68da      	ldr	r2, [r3, #12]
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	bf28      	it	cs
 800bc0e:	4613      	movcs	r3, r2
 800bc10:	461a      	mov	r2, r3
 800bc12:	6879      	ldr	r1, [r7, #4]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f001 f994 	bl	800cf42 <USBD_CtlContinueRx>
 800bc1a:	e07d      	b.n	800bd18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc22:	f003 031f 	and.w	r3, r3, #31
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d014      	beq.n	800bc54 <USBD_LL_DataOutStage+0x98>
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d81d      	bhi.n	800bc6a <USBD_LL_DataOutStage+0xae>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <USBD_LL_DataOutStage+0x7c>
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d003      	beq.n	800bc3e <USBD_LL_DataOutStage+0x82>
 800bc36:	e018      	b.n	800bc6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc3c:	e018      	b.n	800bc70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	4619      	mov	r1, r3
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 fa64 	bl	800c116 <USBD_CoreFindIF>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	75bb      	strb	r3, [r7, #22]
            break;
 800bc52:	e00d      	b.n	800bc70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 fa66 	bl	800c130 <USBD_CoreFindEP>
 800bc64:	4603      	mov	r3, r0
 800bc66:	75bb      	strb	r3, [r7, #22]
            break;
 800bc68:	e002      	b.n	800bc70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	75bb      	strb	r3, [r7, #22]
            break;
 800bc6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc70:	7dbb      	ldrb	r3, [r7, #22]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d119      	bne.n	800bcaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d113      	bne.n	800bcaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc82:	7dba      	ldrb	r2, [r7, #22]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	32ae      	adds	r2, #174	@ 0xae
 800bc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00b      	beq.n	800bcaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bc92:	7dba      	ldrb	r2, [r7, #22]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc9a:	7dba      	ldrb	r2, [r7, #22]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	32ae      	adds	r2, #174	@ 0xae
 800bca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f001 f95a 	bl	800cf64 <USBD_CtlSendStatus>
 800bcb0:	e032      	b.n	800bd18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcb2:	7afb      	ldrb	r3, [r7, #11]
 800bcb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	4619      	mov	r1, r3
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 fa37 	bl	800c130 <USBD_CoreFindEP>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcc6:	7dbb      	ldrb	r3, [r7, #22]
 800bcc8:	2bff      	cmp	r3, #255	@ 0xff
 800bcca:	d025      	beq.n	800bd18 <USBD_LL_DataOutStage+0x15c>
 800bccc:	7dbb      	ldrb	r3, [r7, #22]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d122      	bne.n	800bd18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	d117      	bne.n	800bd0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bcde:	7dba      	ldrb	r2, [r7, #22]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	32ae      	adds	r2, #174	@ 0xae
 800bce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00f      	beq.n	800bd0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bcee:	7dba      	ldrb	r2, [r7, #22]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bcf6:	7dba      	ldrb	r2, [r7, #22]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	32ae      	adds	r2, #174	@ 0xae
 800bcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	7afa      	ldrb	r2, [r7, #11]
 800bd04:	4611      	mov	r1, r2
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	4798      	blx	r3
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	e000      	b.n	800bd1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b086      	sub	sp, #24
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	60f8      	str	r0, [r7, #12]
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	607a      	str	r2, [r7, #4]
 800bd2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd30:	7afb      	ldrb	r3, [r7, #11]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d16f      	bne.n	800be16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	3314      	adds	r3, #20
 800bd3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d15a      	bne.n	800bdfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	689a      	ldr	r2, [r3, #8]
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d914      	bls.n	800bd7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	689a      	ldr	r2, [r3, #8]
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	1ad2      	subs	r2, r2, r3
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	461a      	mov	r2, r3
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f001 f8bc 	bl	800cee6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2200      	movs	r2, #0
 800bd72:	2100      	movs	r1, #0
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f001 fe61 	bl	800da3c <USBD_LL_PrepareReceive>
 800bd7a:	e03f      	b.n	800bdfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	68da      	ldr	r2, [r3, #12]
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d11c      	bne.n	800bdc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d316      	bcc.n	800bdc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d20f      	bcs.n	800bdc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bda2:	2200      	movs	r2, #0
 800bda4:	2100      	movs	r1, #0
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f001 f89d 	bl	800cee6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2100      	movs	r1, #0
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f001 fe3e 	bl	800da3c <USBD_LL_PrepareReceive>
 800bdc0:	e01c      	b.n	800bdfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d10f      	bne.n	800bdee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d009      	beq.n	800bdee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdee:	2180      	movs	r1, #128	@ 0x80
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f001 fd79 	bl	800d8e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f001 f8c7 	bl	800cf8a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d03a      	beq.n	800be7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7ff fe42 	bl	800ba90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be14:	e032      	b.n	800be7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be16:	7afb      	ldrb	r3, [r7, #11]
 800be18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	4619      	mov	r1, r3
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 f985 	bl	800c130 <USBD_CoreFindEP>
 800be26:	4603      	mov	r3, r0
 800be28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	2bff      	cmp	r3, #255	@ 0xff
 800be2e:	d025      	beq.n	800be7c <USBD_LL_DataInStage+0x15a>
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d122      	bne.n	800be7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d11c      	bne.n	800be7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be42:	7dfa      	ldrb	r2, [r7, #23]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	32ae      	adds	r2, #174	@ 0xae
 800be48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d014      	beq.n	800be7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be52:	7dfa      	ldrb	r2, [r7, #23]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be5a:	7dfa      	ldrb	r2, [r7, #23]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	32ae      	adds	r2, #174	@ 0xae
 800be60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	7afa      	ldrb	r2, [r7, #11]
 800be68:	4611      	mov	r1, r2
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	4798      	blx	r3
 800be6e:	4603      	mov	r3, r0
 800be70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be72:	7dbb      	ldrb	r3, [r7, #22]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d001      	beq.n	800be7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800be78:	7dbb      	ldrb	r3, [r7, #22]
 800be7a:	e000      	b.n	800be7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d014      	beq.n	800beec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00e      	beq.n	800beec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	6852      	ldr	r2, [r2, #4]
 800beda:	b2d2      	uxtb	r2, r2
 800bedc:	4611      	mov	r1, r2
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	4798      	blx	r3
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bee8:	2303      	movs	r3, #3
 800beea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800beec:	2340      	movs	r3, #64	@ 0x40
 800beee:	2200      	movs	r2, #0
 800bef0:	2100      	movs	r1, #0
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f001 fcb3 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2240      	movs	r2, #64	@ 0x40
 800bf04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf08:	2340      	movs	r3, #64	@ 0x40
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2180      	movs	r1, #128	@ 0x80
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f001 fca5 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2240      	movs	r2, #64	@ 0x40
 800bf1e:	621a      	str	r2, [r3, #32]

  return ret;
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	460b      	mov	r3, r1
 800bf34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	78fa      	ldrb	r2, [r7, #3]
 800bf3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b04      	cmp	r3, #4
 800bf5c:	d006      	beq.n	800bf6c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2204      	movs	r2, #4
 800bf70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b04      	cmp	r3, #4
 800bf94:	d106      	bne.n	800bfa4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b082      	sub	sp, #8
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d110      	bne.n	800bfe8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe2:	69db      	ldr	r3, [r3, #28]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b082      	sub	sp, #8
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	460b      	mov	r3, r1
 800bffc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	32ae      	adds	r2, #174	@ 0xae
 800c008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c010:	2303      	movs	r3, #3
 800c012:	e01c      	b.n	800c04e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d115      	bne.n	800c04c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	32ae      	adds	r2, #174	@ 0xae
 800c02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00b      	beq.n	800c04c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	32ae      	adds	r2, #174	@ 0xae
 800c03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c042:	6a1b      	ldr	r3, [r3, #32]
 800c044:	78fa      	ldrb	r2, [r7, #3]
 800c046:	4611      	mov	r1, r2
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	460b      	mov	r3, r1
 800c060:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	32ae      	adds	r2, #174	@ 0xae
 800c06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c074:	2303      	movs	r3, #3
 800c076:	e01c      	b.n	800c0b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b03      	cmp	r3, #3
 800c082:	d115      	bne.n	800c0b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	32ae      	adds	r2, #174	@ 0xae
 800c08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00b      	beq.n	800c0b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	32ae      	adds	r2, #174	@ 0xae
 800c0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a8:	78fa      	ldrb	r2, [r7, #3]
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00e      	beq.n	800c10c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	6852      	ldr	r2, [r2, #4]
 800c0fa:	b2d2      	uxtb	r2, r2
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	4798      	blx	r3
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c108:	2303      	movs	r3, #3
 800c10a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	460b      	mov	r3, r1
 800c120:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c122:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c124:	4618      	mov	r0, r3
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c13c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c13e:	4618      	mov	r0, r3
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b086      	sub	sp, #24
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	460b      	mov	r3, r1
 800c154:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c15e:	2300      	movs	r3, #0
 800c160:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	885b      	ldrh	r3, [r3, #2]
 800c166:	b29b      	uxth	r3, r3
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	7812      	ldrb	r2, [r2, #0]
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d91f      	bls.n	800c1b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c176:	e013      	b.n	800c1a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c178:	f107 030a 	add.w	r3, r7, #10
 800c17c:	4619      	mov	r1, r3
 800c17e:	6978      	ldr	r0, [r7, #20]
 800c180:	f000 f81b 	bl	800c1ba <USBD_GetNextDesc>
 800c184:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	785b      	ldrb	r3, [r3, #1]
 800c18a:	2b05      	cmp	r3, #5
 800c18c:	d108      	bne.n	800c1a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	789b      	ldrb	r3, [r3, #2]
 800c196:	78fa      	ldrb	r2, [r7, #3]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d008      	beq.n	800c1ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c19c:	2300      	movs	r3, #0
 800c19e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	885b      	ldrh	r3, [r3, #2]
 800c1a4:	b29a      	uxth	r2, r3
 800c1a6:	897b      	ldrh	r3, [r7, #10]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d8e5      	bhi.n	800c178 <USBD_GetEpDesc+0x2e>
 800c1ac:	e000      	b.n	800c1b0 <USBD_GetEpDesc+0x66>
          break;
 800c1ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1b0:	693b      	ldr	r3, [r7, #16]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b085      	sub	sp, #20
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	881b      	ldrh	r3, [r3, #0]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	7812      	ldrb	r2, [r2, #0]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b087      	sub	sp, #28
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	3301      	adds	r3, #1
 800c208:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c210:	8a3b      	ldrh	r3, [r7, #16]
 800c212:	021b      	lsls	r3, r3, #8
 800c214:	b21a      	sxth	r2, r3
 800c216:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	b21b      	sxth	r3, r3
 800c21e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c220:	89fb      	ldrh	r3, [r7, #14]
}
 800c222:	4618      	mov	r0, r3
 800c224:	371c      	adds	r7, #28
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
	...

0800c230 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c246:	2b40      	cmp	r3, #64	@ 0x40
 800c248:	d005      	beq.n	800c256 <USBD_StdDevReq+0x26>
 800c24a:	2b40      	cmp	r3, #64	@ 0x40
 800c24c:	d857      	bhi.n	800c2fe <USBD_StdDevReq+0xce>
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00f      	beq.n	800c272 <USBD_StdDevReq+0x42>
 800c252:	2b20      	cmp	r3, #32
 800c254:	d153      	bne.n	800c2fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	32ae      	adds	r2, #174	@ 0xae
 800c260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	4798      	blx	r3
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
      break;
 800c270:	e04a      	b.n	800c308 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	785b      	ldrb	r3, [r3, #1]
 800c276:	2b09      	cmp	r3, #9
 800c278:	d83b      	bhi.n	800c2f2 <USBD_StdDevReq+0xc2>
 800c27a:	a201      	add	r2, pc, #4	@ (adr r2, 800c280 <USBD_StdDevReq+0x50>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c2d5 	.word	0x0800c2d5
 800c284:	0800c2e9 	.word	0x0800c2e9
 800c288:	0800c2f3 	.word	0x0800c2f3
 800c28c:	0800c2df 	.word	0x0800c2df
 800c290:	0800c2f3 	.word	0x0800c2f3
 800c294:	0800c2b3 	.word	0x0800c2b3
 800c298:	0800c2a9 	.word	0x0800c2a9
 800c29c:	0800c2f3 	.word	0x0800c2f3
 800c2a0:	0800c2cb 	.word	0x0800c2cb
 800c2a4:	0800c2bd 	.word	0x0800c2bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fa3c 	bl	800c728 <USBD_GetDescriptor>
          break;
 800c2b0:	e024      	b.n	800c2fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fba1 	bl	800c9fc <USBD_SetAddress>
          break;
 800c2ba:	e01f      	b.n	800c2fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fbe0 	bl	800ca84 <USBD_SetConfig>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
          break;
 800c2c8:	e018      	b.n	800c2fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2ca:	6839      	ldr	r1, [r7, #0]
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fc83 	bl	800cbd8 <USBD_GetConfig>
          break;
 800c2d2:	e013      	b.n	800c2fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fcb4 	bl	800cc44 <USBD_GetStatus>
          break;
 800c2dc:	e00e      	b.n	800c2fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fce3 	bl	800ccac <USBD_SetFeature>
          break;
 800c2e6:	e009      	b.n	800c2fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fd07 	bl	800ccfe <USBD_ClrFeature>
          break;
 800c2f0:	e004      	b.n	800c2fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fd5e 	bl	800cdb6 <USBD_CtlError>
          break;
 800c2fa:	bf00      	nop
      }
      break;
 800c2fc:	e004      	b.n	800c308 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fd58 	bl	800cdb6 <USBD_CtlError>
      break;
 800c306:	bf00      	nop
  }

  return ret;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop

0800c314 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c32a:	2b40      	cmp	r3, #64	@ 0x40
 800c32c:	d005      	beq.n	800c33a <USBD_StdItfReq+0x26>
 800c32e:	2b40      	cmp	r3, #64	@ 0x40
 800c330:	d852      	bhi.n	800c3d8 <USBD_StdItfReq+0xc4>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <USBD_StdItfReq+0x26>
 800c336:	2b20      	cmp	r3, #32
 800c338:	d14e      	bne.n	800c3d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c340:	b2db      	uxtb	r3, r3
 800c342:	3b01      	subs	r3, #1
 800c344:	2b02      	cmp	r3, #2
 800c346:	d840      	bhi.n	800c3ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	889b      	ldrh	r3, [r3, #4]
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d836      	bhi.n	800c3c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	889b      	ldrh	r3, [r3, #4]
 800c356:	b2db      	uxtb	r3, r3
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7ff fedb 	bl	800c116 <USBD_CoreFindIF>
 800c360:	4603      	mov	r3, r0
 800c362:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c364:	7bbb      	ldrb	r3, [r7, #14]
 800c366:	2bff      	cmp	r3, #255	@ 0xff
 800c368:	d01d      	beq.n	800c3a6 <USBD_StdItfReq+0x92>
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d11a      	bne.n	800c3a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c370:	7bba      	ldrb	r2, [r7, #14]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	32ae      	adds	r2, #174	@ 0xae
 800c376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00f      	beq.n	800c3a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c380:	7bba      	ldrb	r2, [r7, #14]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c388:	7bba      	ldrb	r2, [r7, #14]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	32ae      	adds	r2, #174	@ 0xae
 800c38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	4798      	blx	r3
 800c39a:	4603      	mov	r3, r0
 800c39c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c39e:	e004      	b.n	800c3aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3a4:	e001      	b.n	800c3aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	88db      	ldrh	r3, [r3, #6]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d110      	bne.n	800c3d4 <USBD_StdItfReq+0xc0>
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10d      	bne.n	800c3d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fdd3 	bl	800cf64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3be:	e009      	b.n	800c3d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fcf7 	bl	800cdb6 <USBD_CtlError>
          break;
 800c3c8:	e004      	b.n	800c3d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3ca:	6839      	ldr	r1, [r7, #0]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fcf2 	bl	800cdb6 <USBD_CtlError>
          break;
 800c3d2:	e000      	b.n	800c3d6 <USBD_StdItfReq+0xc2>
          break;
 800c3d4:	bf00      	nop
      }
      break;
 800c3d6:	e004      	b.n	800c3e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fceb 	bl	800cdb6 <USBD_CtlError>
      break;
 800c3e0:	bf00      	nop
  }

  return ret;
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	889b      	ldrh	r3, [r3, #4]
 800c3fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c408:	2b40      	cmp	r3, #64	@ 0x40
 800c40a:	d007      	beq.n	800c41c <USBD_StdEPReq+0x30>
 800c40c:	2b40      	cmp	r3, #64	@ 0x40
 800c40e:	f200 817f 	bhi.w	800c710 <USBD_StdEPReq+0x324>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d02a      	beq.n	800c46c <USBD_StdEPReq+0x80>
 800c416:	2b20      	cmp	r3, #32
 800c418:	f040 817a 	bne.w	800c710 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
 800c41e:	4619      	mov	r1, r3
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7ff fe85 	bl	800c130 <USBD_CoreFindEP>
 800c426:	4603      	mov	r3, r0
 800c428:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c42a:	7b7b      	ldrb	r3, [r7, #13]
 800c42c:	2bff      	cmp	r3, #255	@ 0xff
 800c42e:	f000 8174 	beq.w	800c71a <USBD_StdEPReq+0x32e>
 800c432:	7b7b      	ldrb	r3, [r7, #13]
 800c434:	2b00      	cmp	r3, #0
 800c436:	f040 8170 	bne.w	800c71a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c43a:	7b7a      	ldrb	r2, [r7, #13]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c442:	7b7a      	ldrb	r2, [r7, #13]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	32ae      	adds	r2, #174	@ 0xae
 800c448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 8163 	beq.w	800c71a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c454:	7b7a      	ldrb	r2, [r7, #13]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	32ae      	adds	r2, #174	@ 0xae
 800c45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	4798      	blx	r3
 800c466:	4603      	mov	r3, r0
 800c468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c46a:	e156      	b.n	800c71a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	785b      	ldrb	r3, [r3, #1]
 800c470:	2b03      	cmp	r3, #3
 800c472:	d008      	beq.n	800c486 <USBD_StdEPReq+0x9a>
 800c474:	2b03      	cmp	r3, #3
 800c476:	f300 8145 	bgt.w	800c704 <USBD_StdEPReq+0x318>
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 809b 	beq.w	800c5b6 <USBD_StdEPReq+0x1ca>
 800c480:	2b01      	cmp	r3, #1
 800c482:	d03c      	beq.n	800c4fe <USBD_StdEPReq+0x112>
 800c484:	e13e      	b.n	800c704 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d002      	beq.n	800c498 <USBD_StdEPReq+0xac>
 800c492:	2b03      	cmp	r3, #3
 800c494:	d016      	beq.n	800c4c4 <USBD_StdEPReq+0xd8>
 800c496:	e02c      	b.n	800c4f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c498:	7bbb      	ldrb	r3, [r7, #14]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00d      	beq.n	800c4ba <USBD_StdEPReq+0xce>
 800c49e:	7bbb      	ldrb	r3, [r7, #14]
 800c4a0:	2b80      	cmp	r3, #128	@ 0x80
 800c4a2:	d00a      	beq.n	800c4ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f001 fa1d 	bl	800d8e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ae:	2180      	movs	r1, #128	@ 0x80
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f001 fa19 	bl	800d8e8 <USBD_LL_StallEP>
 800c4b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4b8:	e020      	b.n	800c4fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fc7a 	bl	800cdb6 <USBD_CtlError>
              break;
 800c4c2:	e01b      	b.n	800c4fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	885b      	ldrh	r3, [r3, #2]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10e      	bne.n	800c4ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4cc:	7bbb      	ldrb	r3, [r7, #14]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00b      	beq.n	800c4ea <USBD_StdEPReq+0xfe>
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	2b80      	cmp	r3, #128	@ 0x80
 800c4d6:	d008      	beq.n	800c4ea <USBD_StdEPReq+0xfe>
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	88db      	ldrh	r3, [r3, #6]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d104      	bne.n	800c4ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f001 f9ff 	bl	800d8e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fd3a 	bl	800cf64 <USBD_CtlSendStatus>

              break;
 800c4f0:	e004      	b.n	800c4fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fc5e 	bl	800cdb6 <USBD_CtlError>
              break;
 800c4fa:	bf00      	nop
          }
          break;
 800c4fc:	e107      	b.n	800c70e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b02      	cmp	r3, #2
 800c508:	d002      	beq.n	800c510 <USBD_StdEPReq+0x124>
 800c50a:	2b03      	cmp	r3, #3
 800c50c:	d016      	beq.n	800c53c <USBD_StdEPReq+0x150>
 800c50e:	e04b      	b.n	800c5a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00d      	beq.n	800c532 <USBD_StdEPReq+0x146>
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	2b80      	cmp	r3, #128	@ 0x80
 800c51a:	d00a      	beq.n	800c532 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c51c:	7bbb      	ldrb	r3, [r7, #14]
 800c51e:	4619      	mov	r1, r3
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f001 f9e1 	bl	800d8e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c526:	2180      	movs	r1, #128	@ 0x80
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f001 f9dd 	bl	800d8e8 <USBD_LL_StallEP>
 800c52e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c530:	e040      	b.n	800c5b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fc3e 	bl	800cdb6 <USBD_CtlError>
              break;
 800c53a:	e03b      	b.n	800c5b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	885b      	ldrh	r3, [r3, #2]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d136      	bne.n	800c5b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c544:	7bbb      	ldrb	r3, [r7, #14]
 800c546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d004      	beq.n	800c558 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c54e:	7bbb      	ldrb	r3, [r7, #14]
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f001 f9e7 	bl	800d926 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fd03 	bl	800cf64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c55e:	7bbb      	ldrb	r3, [r7, #14]
 800c560:	4619      	mov	r1, r3
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff fde4 	bl	800c130 <USBD_CoreFindEP>
 800c568:	4603      	mov	r3, r0
 800c56a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c56c:	7b7b      	ldrb	r3, [r7, #13]
 800c56e:	2bff      	cmp	r3, #255	@ 0xff
 800c570:	d01f      	beq.n	800c5b2 <USBD_StdEPReq+0x1c6>
 800c572:	7b7b      	ldrb	r3, [r7, #13]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d11c      	bne.n	800c5b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c578:	7b7a      	ldrb	r2, [r7, #13]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c580:	7b7a      	ldrb	r2, [r7, #13]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	32ae      	adds	r2, #174	@ 0xae
 800c586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d010      	beq.n	800c5b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c590:	7b7a      	ldrb	r2, [r7, #13]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	32ae      	adds	r2, #174	@ 0xae
 800c596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	4798      	blx	r3
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5a6:	e004      	b.n	800c5b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fc03 	bl	800cdb6 <USBD_CtlError>
              break;
 800c5b0:	e000      	b.n	800c5b4 <USBD_StdEPReq+0x1c8>
              break;
 800c5b2:	bf00      	nop
          }
          break;
 800c5b4:	e0ab      	b.n	800c70e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d002      	beq.n	800c5c8 <USBD_StdEPReq+0x1dc>
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d032      	beq.n	800c62c <USBD_StdEPReq+0x240>
 800c5c6:	e097      	b.n	800c6f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5c8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d007      	beq.n	800c5de <USBD_StdEPReq+0x1f2>
 800c5ce:	7bbb      	ldrb	r3, [r7, #14]
 800c5d0:	2b80      	cmp	r3, #128	@ 0x80
 800c5d2:	d004      	beq.n	800c5de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5d4:	6839      	ldr	r1, [r7, #0]
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 fbed 	bl	800cdb6 <USBD_CtlError>
                break;
 800c5dc:	e091      	b.n	800c702 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	da0b      	bge.n	800c5fe <USBD_StdEPReq+0x212>
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	3310      	adds	r3, #16
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	e00b      	b.n	800c616 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c604:	4613      	mov	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	4413      	add	r3, r2
 800c614:	3304      	adds	r3, #4
 800c616:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2202      	movs	r2, #2
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fc43 	bl	800ceb0 <USBD_CtlSendData>
              break;
 800c62a:	e06a      	b.n	800c702 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c62c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c630:	2b00      	cmp	r3, #0
 800c632:	da11      	bge.n	800c658 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c634:	7bbb      	ldrb	r3, [r7, #14]
 800c636:	f003 020f 	and.w	r2, r3, #15
 800c63a:	6879      	ldr	r1, [r7, #4]
 800c63c:	4613      	mov	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4413      	add	r3, r2
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	440b      	add	r3, r1
 800c646:	3324      	adds	r3, #36	@ 0x24
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d117      	bne.n	800c67e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fbb0 	bl	800cdb6 <USBD_CtlError>
                  break;
 800c656:	e054      	b.n	800c702 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c658:	7bbb      	ldrb	r3, [r7, #14]
 800c65a:	f003 020f 	and.w	r2, r3, #15
 800c65e:	6879      	ldr	r1, [r7, #4]
 800c660:	4613      	mov	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4413      	add	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	440b      	add	r3, r1
 800c66a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d104      	bne.n	800c67e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fb9d 	bl	800cdb6 <USBD_CtlError>
                  break;
 800c67c:	e041      	b.n	800c702 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c67e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c682:	2b00      	cmp	r3, #0
 800c684:	da0b      	bge.n	800c69e <USBD_StdEPReq+0x2b2>
 800c686:	7bbb      	ldrb	r3, [r7, #14]
 800c688:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c68c:	4613      	mov	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	3310      	adds	r3, #16
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	4413      	add	r3, r2
 800c69a:	3304      	adds	r3, #4
 800c69c:	e00b      	b.n	800c6b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c69e:	7bbb      	ldrb	r3, [r7, #14]
 800c6a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d002      	beq.n	800c6c4 <USBD_StdEPReq+0x2d8>
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	2b80      	cmp	r3, #128	@ 0x80
 800c6c2:	d103      	bne.n	800c6cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	e00e      	b.n	800c6ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f001 f947 	bl	800d964 <USBD_LL_IsStallEP>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	601a      	str	r2, [r3, #0]
 800c6e2:	e002      	b.n	800c6ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2202      	movs	r2, #2
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fbdd 	bl	800ceb0 <USBD_CtlSendData>
              break;
 800c6f6:	e004      	b.n	800c702 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fb5b 	bl	800cdb6 <USBD_CtlError>
              break;
 800c700:	bf00      	nop
          }
          break;
 800c702:	e004      	b.n	800c70e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fb55 	bl	800cdb6 <USBD_CtlError>
          break;
 800c70c:	bf00      	nop
      }
      break;
 800c70e:	e005      	b.n	800c71c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fb4f 	bl	800cdb6 <USBD_CtlError>
      break;
 800c718:	e000      	b.n	800c71c <USBD_StdEPReq+0x330>
      break;
 800c71a:	bf00      	nop
  }

  return ret;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c732:	2300      	movs	r3, #0
 800c734:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c736:	2300      	movs	r3, #0
 800c738:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	885b      	ldrh	r3, [r3, #2]
 800c742:	0a1b      	lsrs	r3, r3, #8
 800c744:	b29b      	uxth	r3, r3
 800c746:	3b01      	subs	r3, #1
 800c748:	2b06      	cmp	r3, #6
 800c74a:	f200 8128 	bhi.w	800c99e <USBD_GetDescriptor+0x276>
 800c74e:	a201      	add	r2, pc, #4	@ (adr r2, 800c754 <USBD_GetDescriptor+0x2c>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c771 	.word	0x0800c771
 800c758:	0800c789 	.word	0x0800c789
 800c75c:	0800c7c9 	.word	0x0800c7c9
 800c760:	0800c99f 	.word	0x0800c99f
 800c764:	0800c99f 	.word	0x0800c99f
 800c768:	0800c93f 	.word	0x0800c93f
 800c76c:	0800c96b 	.word	0x0800c96b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	7c12      	ldrb	r2, [r2, #16]
 800c77c:	f107 0108 	add.w	r1, r7, #8
 800c780:	4610      	mov	r0, r2
 800c782:	4798      	blx	r3
 800c784:	60f8      	str	r0, [r7, #12]
      break;
 800c786:	e112      	b.n	800c9ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	7c1b      	ldrb	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10d      	bne.n	800c7ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c798:	f107 0208 	add.w	r2, r7, #8
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
 800c7a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7aa:	e100      	b.n	800c9ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b4:	f107 0208 	add.w	r2, r7, #8
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	4798      	blx	r3
 800c7bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	701a      	strb	r2, [r3, #0]
      break;
 800c7c6:	e0f2      	b.n	800c9ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	885b      	ldrh	r3, [r3, #2]
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b05      	cmp	r3, #5
 800c7d0:	f200 80ac 	bhi.w	800c92c <USBD_GetDescriptor+0x204>
 800c7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7dc <USBD_GetDescriptor+0xb4>)
 800c7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7da:	bf00      	nop
 800c7dc:	0800c7f5 	.word	0x0800c7f5
 800c7e0:	0800c829 	.word	0x0800c829
 800c7e4:	0800c85d 	.word	0x0800c85d
 800c7e8:	0800c891 	.word	0x0800c891
 800c7ec:	0800c8c5 	.word	0x0800c8c5
 800c7f0:	0800c8f9 	.word	0x0800c8f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00b      	beq.n	800c818 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	7c12      	ldrb	r2, [r2, #16]
 800c80c:	f107 0108 	add.w	r1, r7, #8
 800c810:	4610      	mov	r0, r2
 800c812:	4798      	blx	r3
 800c814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c816:	e091      	b.n	800c93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c818:	6839      	ldr	r1, [r7, #0]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 facb 	bl	800cdb6 <USBD_CtlError>
            err++;
 800c820:	7afb      	ldrb	r3, [r7, #11]
 800c822:	3301      	adds	r3, #1
 800c824:	72fb      	strb	r3, [r7, #11]
          break;
 800c826:	e089      	b.n	800c93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00b      	beq.n	800c84c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	7c12      	ldrb	r2, [r2, #16]
 800c840:	f107 0108 	add.w	r1, r7, #8
 800c844:	4610      	mov	r0, r2
 800c846:	4798      	blx	r3
 800c848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c84a:	e077      	b.n	800c93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fab1 	bl	800cdb6 <USBD_CtlError>
            err++;
 800c854:	7afb      	ldrb	r3, [r7, #11]
 800c856:	3301      	adds	r3, #1
 800c858:	72fb      	strb	r3, [r7, #11]
          break;
 800c85a:	e06f      	b.n	800c93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00b      	beq.n	800c880 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	7c12      	ldrb	r2, [r2, #16]
 800c874:	f107 0108 	add.w	r1, r7, #8
 800c878:	4610      	mov	r0, r2
 800c87a:	4798      	blx	r3
 800c87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c87e:	e05d      	b.n	800c93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c880:	6839      	ldr	r1, [r7, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fa97 	bl	800cdb6 <USBD_CtlError>
            err++;
 800c888:	7afb      	ldrb	r3, [r7, #11]
 800c88a:	3301      	adds	r3, #1
 800c88c:	72fb      	strb	r3, [r7, #11]
          break;
 800c88e:	e055      	b.n	800c93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00b      	beq.n	800c8b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	7c12      	ldrb	r2, [r2, #16]
 800c8a8:	f107 0108 	add.w	r1, r7, #8
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4798      	blx	r3
 800c8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8b2:	e043      	b.n	800c93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8b4:	6839      	ldr	r1, [r7, #0]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fa7d 	bl	800cdb6 <USBD_CtlError>
            err++;
 800c8bc:	7afb      	ldrb	r3, [r7, #11]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c8c2:	e03b      	b.n	800c93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00b      	beq.n	800c8e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	7c12      	ldrb	r2, [r2, #16]
 800c8dc:	f107 0108 	add.w	r1, r7, #8
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	4798      	blx	r3
 800c8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8e6:	e029      	b.n	800c93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fa63 	bl	800cdb6 <USBD_CtlError>
            err++;
 800c8f0:	7afb      	ldrb	r3, [r7, #11]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8f6:	e021      	b.n	800c93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00b      	beq.n	800c91c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	7c12      	ldrb	r2, [r2, #16]
 800c910:	f107 0108 	add.w	r1, r7, #8
 800c914:	4610      	mov	r0, r2
 800c916:	4798      	blx	r3
 800c918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c91a:	e00f      	b.n	800c93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c91c:	6839      	ldr	r1, [r7, #0]
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fa49 	bl	800cdb6 <USBD_CtlError>
            err++;
 800c924:	7afb      	ldrb	r3, [r7, #11]
 800c926:	3301      	adds	r3, #1
 800c928:	72fb      	strb	r3, [r7, #11]
          break;
 800c92a:	e007      	b.n	800c93c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c92c:	6839      	ldr	r1, [r7, #0]
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 fa41 	bl	800cdb6 <USBD_CtlError>
          err++;
 800c934:	7afb      	ldrb	r3, [r7, #11]
 800c936:	3301      	adds	r3, #1
 800c938:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c93a:	bf00      	nop
      }
      break;
 800c93c:	e037      	b.n	800c9ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	7c1b      	ldrb	r3, [r3, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d109      	bne.n	800c95a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c94c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c94e:	f107 0208 	add.w	r2, r7, #8
 800c952:	4610      	mov	r0, r2
 800c954:	4798      	blx	r3
 800c956:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c958:	e029      	b.n	800c9ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fa2a 	bl	800cdb6 <USBD_CtlError>
        err++;
 800c962:	7afb      	ldrb	r3, [r7, #11]
 800c964:	3301      	adds	r3, #1
 800c966:	72fb      	strb	r3, [r7, #11]
      break;
 800c968:	e021      	b.n	800c9ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	7c1b      	ldrb	r3, [r3, #16]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10d      	bne.n	800c98e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c97a:	f107 0208 	add.w	r2, r7, #8
 800c97e:	4610      	mov	r0, r2
 800c980:	4798      	blx	r3
 800c982:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	3301      	adds	r3, #1
 800c988:	2207      	movs	r2, #7
 800c98a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c98c:	e00f      	b.n	800c9ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fa10 	bl	800cdb6 <USBD_CtlError>
        err++;
 800c996:	7afb      	ldrb	r3, [r7, #11]
 800c998:	3301      	adds	r3, #1
 800c99a:	72fb      	strb	r3, [r7, #11]
      break;
 800c99c:	e007      	b.n	800c9ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fa08 	bl	800cdb6 <USBD_CtlError>
      err++;
 800c9a6:	7afb      	ldrb	r3, [r7, #11]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c9ac:	bf00      	nop
  }

  if (err != 0U)
 800c9ae:	7afb      	ldrb	r3, [r7, #11]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d11e      	bne.n	800c9f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	88db      	ldrh	r3, [r3, #6]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d016      	beq.n	800c9ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c9bc:	893b      	ldrh	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00e      	beq.n	800c9e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	88da      	ldrh	r2, [r3, #6]
 800c9c6:	893b      	ldrh	r3, [r7, #8]
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	bf28      	it	cs
 800c9cc:	4613      	movcs	r3, r2
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9d2:	893b      	ldrh	r3, [r7, #8]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	68f9      	ldr	r1, [r7, #12]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fa69 	bl	800ceb0 <USBD_CtlSendData>
 800c9de:	e009      	b.n	800c9f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9e0:	6839      	ldr	r1, [r7, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f9e7 	bl	800cdb6 <USBD_CtlError>
 800c9e8:	e004      	b.n	800c9f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 faba 	bl	800cf64 <USBD_CtlSendStatus>
 800c9f0:	e000      	b.n	800c9f4 <USBD_GetDescriptor+0x2cc>
    return;
 800c9f2:	bf00      	nop
  }
}
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop

0800c9fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	889b      	ldrh	r3, [r3, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d131      	bne.n	800ca72 <USBD_SetAddress+0x76>
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	88db      	ldrh	r3, [r3, #6]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d12d      	bne.n	800ca72 <USBD_SetAddress+0x76>
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	885b      	ldrh	r3, [r3, #2]
 800ca1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca1c:	d829      	bhi.n	800ca72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	885b      	ldrh	r3, [r3, #2]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d104      	bne.n	800ca40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f9bc 	bl	800cdb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca3e:	e01d      	b.n	800ca7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	7bfa      	ldrb	r2, [r7, #15]
 800ca44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca48:	7bfb      	ldrb	r3, [r7, #15]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 ffb5 	bl	800d9bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fa86 	bl	800cf64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d004      	beq.n	800ca68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2202      	movs	r2, #2
 800ca62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca66:	e009      	b.n	800ca7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca70:	e004      	b.n	800ca7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 f99e 	bl	800cdb6 <USBD_CtlError>
  }
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	885b      	ldrh	r3, [r3, #2]
 800ca96:	b2da      	uxtb	r2, r3
 800ca98:	4b4e      	ldr	r3, [pc, #312]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800ca9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca9c:	4b4d      	ldr	r3, [pc, #308]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d905      	bls.n	800cab0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f985 	bl	800cdb6 <USBD_CtlError>
    return USBD_FAIL;
 800caac:	2303      	movs	r3, #3
 800caae:	e08c      	b.n	800cbca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d002      	beq.n	800cac2 <USBD_SetConfig+0x3e>
 800cabc:	2b03      	cmp	r3, #3
 800cabe:	d029      	beq.n	800cb14 <USBD_SetConfig+0x90>
 800cac0:	e075      	b.n	800cbae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cac2:	4b44      	ldr	r3, [pc, #272]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d020      	beq.n	800cb0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800caca:	4b42      	ldr	r3, [pc, #264]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cad4:	4b3f      	ldr	r3, [pc, #252]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	4619      	mov	r1, r3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7fe ffe3 	bl	800baa6 <USBD_SetClassConfig>
 800cae0:	4603      	mov	r3, r0
 800cae2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d008      	beq.n	800cafc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800caea:	6839      	ldr	r1, [r7, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 f962 	bl	800cdb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2202      	movs	r2, #2
 800caf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cafa:	e065      	b.n	800cbc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 fa31 	bl	800cf64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2203      	movs	r2, #3
 800cb06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb0a:	e05d      	b.n	800cbc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fa29 	bl	800cf64 <USBD_CtlSendStatus>
      break;
 800cb12:	e059      	b.n	800cbc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb14:	4b2f      	ldr	r3, [pc, #188]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d112      	bne.n	800cb42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2202      	movs	r2, #2
 800cb20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cb24:	4b2b      	ldr	r3, [pc, #172]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb2e:	4b29      	ldr	r3, [pc, #164]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7fe ffd2 	bl	800bade <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fa12 	bl	800cf64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb40:	e042      	b.n	800cbc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb42:	4b24      	ldr	r3, [pc, #144]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	461a      	mov	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d02a      	beq.n	800cba6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7fe ffc0 	bl	800bade <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb5e:	4b1d      	ldr	r3, [pc, #116]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb68:	4b1a      	ldr	r3, [pc, #104]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7fe ff99 	bl	800baa6 <USBD_SetClassConfig>
 800cb74:	4603      	mov	r3, r0
 800cb76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00f      	beq.n	800cb9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f918 	bl	800cdb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7fe ffa5 	bl	800bade <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2202      	movs	r2, #2
 800cb98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb9c:	e014      	b.n	800cbc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f9e0 	bl	800cf64 <USBD_CtlSendStatus>
      break;
 800cba4:	e010      	b.n	800cbc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f9dc 	bl	800cf64 <USBD_CtlSendStatus>
      break;
 800cbac:	e00c      	b.n	800cbc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 f900 	bl	800cdb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbb6:	4b07      	ldr	r3, [pc, #28]	@ (800cbd4 <USBD_SetConfig+0x150>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7fe ff8e 	bl	800bade <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc6:	bf00      	nop
  }

  return ret;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20013098 	.word	0x20013098

0800cbd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	88db      	ldrh	r3, [r3, #6]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d004      	beq.n	800cbf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f8e2 	bl	800cdb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cbf2:	e023      	b.n	800cc3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	dc02      	bgt.n	800cc06 <USBD_GetConfig+0x2e>
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	dc03      	bgt.n	800cc0c <USBD_GetConfig+0x34>
 800cc04:	e015      	b.n	800cc32 <USBD_GetConfig+0x5a>
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d00b      	beq.n	800cc22 <USBD_GetConfig+0x4a>
 800cc0a:	e012      	b.n	800cc32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	3308      	adds	r3, #8
 800cc16:	2201      	movs	r2, #1
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 f948 	bl	800ceb0 <USBD_CtlSendData>
        break;
 800cc20:	e00c      	b.n	800cc3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3304      	adds	r3, #4
 800cc26:	2201      	movs	r2, #1
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 f940 	bl	800ceb0 <USBD_CtlSendData>
        break;
 800cc30:	e004      	b.n	800cc3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f8be 	bl	800cdb6 <USBD_CtlError>
        break;
 800cc3a:	bf00      	nop
}
 800cc3c:	bf00      	nop
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	3b01      	subs	r3, #1
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d81e      	bhi.n	800cc9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	88db      	ldrh	r3, [r3, #6]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d004      	beq.n	800cc6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f8a5 	bl	800cdb6 <USBD_CtlError>
        break;
 800cc6c:	e01a      	b.n	800cca4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2201      	movs	r2, #1
 800cc72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d005      	beq.n	800cc8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	f043 0202 	orr.w	r2, r3, #2
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	330c      	adds	r3, #12
 800cc8e:	2202      	movs	r2, #2
 800cc90:	4619      	mov	r1, r3
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f90c 	bl	800ceb0 <USBD_CtlSendData>
      break;
 800cc98:	e004      	b.n	800cca4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f88a 	bl	800cdb6 <USBD_CtlError>
      break;
 800cca2:	bf00      	nop
  }
}
 800cca4:	bf00      	nop
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	885b      	ldrh	r3, [r3, #2]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d107      	bne.n	800ccce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f94c 	bl	800cf64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cccc:	e013      	b.n	800ccf6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	885b      	ldrh	r3, [r3, #2]
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d10b      	bne.n	800ccee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	889b      	ldrh	r3, [r3, #4]
 800ccda:	0a1b      	lsrs	r3, r3, #8
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f93c 	bl	800cf64 <USBD_CtlSendStatus>
}
 800ccec:	e003      	b.n	800ccf6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 f860 	bl	800cdb6 <USBD_CtlError>
}
 800ccf6:	bf00      	nop
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b082      	sub	sp, #8
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	3b01      	subs	r3, #1
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d80b      	bhi.n	800cd2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	885b      	ldrh	r3, [r3, #2]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d10c      	bne.n	800cd38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 f91c 	bl	800cf64 <USBD_CtlSendStatus>
      }
      break;
 800cd2c:	e004      	b.n	800cd38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f840 	bl	800cdb6 <USBD_CtlError>
      break;
 800cd36:	e000      	b.n	800cd3a <USBD_ClrFeature+0x3c>
      break;
 800cd38:	bf00      	nop
  }
}
 800cd3a:	bf00      	nop
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b084      	sub	sp, #16
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	781a      	ldrb	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	781a      	ldrb	r2, [r3, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f7ff fa40 	bl	800c1f2 <SWAPBYTE>
 800cd72:	4603      	mov	r3, r0
 800cd74:	461a      	mov	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3301      	adds	r3, #1
 800cd84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7ff fa33 	bl	800c1f2 <SWAPBYTE>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	461a      	mov	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3301      	adds	r3, #1
 800cd98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fa26 	bl	800c1f2 <SWAPBYTE>
 800cda6:	4603      	mov	r3, r0
 800cda8:	461a      	mov	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	80da      	strh	r2, [r3, #6]
}
 800cdae:	bf00      	nop
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b082      	sub	sp, #8
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdc0:	2180      	movs	r1, #128	@ 0x80
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fd90 	bl	800d8e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdc8:	2100      	movs	r1, #0
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fd8c 	bl	800d8e8 <USBD_LL_StallEP>
}
 800cdd0:	bf00      	nop
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d042      	beq.n	800ce74 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cdf2:	6938      	ldr	r0, [r7, #16]
 800cdf4:	f000 f842 	bl	800ce7c <USBD_GetLen>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce02:	d808      	bhi.n	800ce16 <USBD_GetString+0x3e>
 800ce04:	6938      	ldr	r0, [r7, #16]
 800ce06:	f000 f839 	bl	800ce7c <USBD_GetLen>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	e001      	b.n	800ce1a <USBD_GetString+0x42>
 800ce16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	4413      	add	r3, r2
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	7812      	ldrb	r2, [r2, #0]
 800ce28:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	4413      	add	r3, r2
 800ce36:	2203      	movs	r2, #3
 800ce38:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce40:	e013      	b.n	800ce6a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
 800ce44:	68ba      	ldr	r2, [r7, #8]
 800ce46:	4413      	add	r3, r2
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	7812      	ldrb	r2, [r2, #0]
 800ce4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	3301      	adds	r3, #1
 800ce52:	613b      	str	r3, [r7, #16]
    idx++;
 800ce54:	7dfb      	ldrb	r3, [r7, #23]
 800ce56:	3301      	adds	r3, #1
 800ce58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	4413      	add	r3, r2
 800ce60:	2200      	movs	r2, #0
 800ce62:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce64:	7dfb      	ldrb	r3, [r7, #23]
 800ce66:	3301      	adds	r3, #1
 800ce68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1e7      	bne.n	800ce42 <USBD_GetString+0x6a>
 800ce72:	e000      	b.n	800ce76 <USBD_GetString+0x9e>
    return;
 800ce74:	bf00      	nop
  }
}
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce84:	2300      	movs	r3, #0
 800ce86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce8c:	e005      	b.n	800ce9a <USBD_GetLen+0x1e>
  {
    len++;
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
 800ce90:	3301      	adds	r3, #1
 800ce92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	3301      	adds	r3, #1
 800ce98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1f5      	bne.n	800ce8e <USBD_GetLen+0x12>
  }

  return len;
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2202      	movs	r2, #2
 800cec0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	2100      	movs	r1, #0
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f000 fd8f 	bl	800d9fa <USBD_LL_Transmit>

  return USBD_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b084      	sub	sp, #16
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	60f8      	str	r0, [r7, #12]
 800ceee:	60b9      	str	r1, [r7, #8]
 800cef0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	2100      	movs	r1, #0
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f000 fd7e 	bl	800d9fa <USBD_LL_Transmit>

  return USBD_OK;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2203      	movs	r2, #3
 800cf18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	2100      	movs	r1, #0
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 fd82 	bl	800da3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	60f8      	str	r0, [r7, #12]
 800cf4a:	60b9      	str	r1, [r7, #8]
 800cf4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	2100      	movs	r1, #0
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 fd71 	bl	800da3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2204      	movs	r2, #4
 800cf70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf74:	2300      	movs	r3, #0
 800cf76:	2200      	movs	r2, #0
 800cf78:	2100      	movs	r1, #0
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fd3d 	bl	800d9fa <USBD_LL_Transmit>

  return USBD_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b082      	sub	sp, #8
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2205      	movs	r2, #5
 800cf96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fd4b 	bl	800da3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	4912      	ldr	r1, [pc, #72]	@ (800d000 <MX_USB_DEVICE_Init+0x50>)
 800cfb8:	4812      	ldr	r0, [pc, #72]	@ (800d004 <MX_USB_DEVICE_Init+0x54>)
 800cfba:	f7fe fcf7 	bl	800b9ac <USBD_Init>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cfc4:	f7f4 f80a 	bl	8000fdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cfc8:	490f      	ldr	r1, [pc, #60]	@ (800d008 <MX_USB_DEVICE_Init+0x58>)
 800cfca:	480e      	ldr	r0, [pc, #56]	@ (800d004 <MX_USB_DEVICE_Init+0x54>)
 800cfcc:	f7fe fd1e 	bl	800ba0c <USBD_RegisterClass>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cfd6:	f7f4 f801 	bl	8000fdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cfda:	490c      	ldr	r1, [pc, #48]	@ (800d00c <MX_USB_DEVICE_Init+0x5c>)
 800cfdc:	4809      	ldr	r0, [pc, #36]	@ (800d004 <MX_USB_DEVICE_Init+0x54>)
 800cfde:	f7fe fc15 	bl	800b80c <USBD_CDC_RegisterInterface>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cfe8:	f7f3 fff8 	bl	8000fdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cfec:	4805      	ldr	r0, [pc, #20]	@ (800d004 <MX_USB_DEVICE_Init+0x54>)
 800cfee:	f7fe fd43 	bl	800ba78 <USBD_Start>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cff8:	f7f3 fff0 	bl	8000fdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cffc:	bf00      	nop
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	200000b4 	.word	0x200000b4
 800d004:	2001309c 	.word	0x2001309c
 800d008:	20000020 	.word	0x20000020
 800d00c:	200000a0 	.word	0x200000a0

0800d010 <parse_packet>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
int8_t parse_packet(uint8_t *buffer, uint16_t packet_length, SensorData *data) {
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	460b      	mov	r3, r1
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	817b      	strh	r3, [r7, #10]
    // Ensure the packet is large enough
    if (packet_length < 8) { // Minimum size: danger(1) + proximity(4) + roadTypeLength(1) + quality(4)
 800d01e:	897b      	ldrh	r3, [r7, #10]
 800d020:	2b07      	cmp	r3, #7
 800d022:	d801      	bhi.n	800d028 <parse_packet+0x18>
        return 0;
 800d024:	2300      	movs	r3, #0
 800d026:	e050      	b.n	800d0ca <parse_packet+0xba>
    }

    // Step 1: Extract fields
    uint8_t *ptr = buffer + 3;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	3303      	adds	r3, #3
 800d02c:	617b      	str	r3, [r7, #20]
    data->danger = *ptr; // 1 byte
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	b25a      	sxtb	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	701a      	strb	r2, [r3, #0]
    ptr += 1;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	3301      	adds	r3, #1
 800d03c:	617b      	str	r3, [r7, #20]

    data->dangerProximity = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	061a      	lsls	r2, r3, #24
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	3301      	adds	r3, #1
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	041b      	lsls	r3, r3, #16
 800d04c:	431a      	orrs	r2, r3
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	3302      	adds	r3, #2
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	021b      	lsls	r3, r3, #8
 800d056:	4313      	orrs	r3, r2
 800d058:	697a      	ldr	r2, [r7, #20]
 800d05a:	3203      	adds	r2, #3
 800d05c:	7812      	ldrb	r2, [r2, #0]
 800d05e:	431a      	orrs	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	605a      	str	r2, [r3, #4]
    ptr += 4;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	3304      	adds	r3, #4
 800d068:	617b      	str	r3, [r7, #20]

    uint8_t roadTypeLength = *ptr; // 1 byte
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	74fb      	strb	r3, [r7, #19]
    ptr += 1;
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	3301      	adds	r3, #1
 800d074:	617b      	str	r3, [r7, #20]

    // Ensure the roadType string fits within the buffer
    if (roadTypeLength >= sizeof(data->roadType)) {
 800d076:	7cfb      	ldrb	r3, [r7, #19]
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d901      	bls.n	800d080 <parse_packet+0x70>
        return 0; // String too long
 800d07c:	2300      	movs	r3, #0
 800d07e:	e024      	b.n	800d0ca <parse_packet+0xba>
    }

    // Copy roadType string
    memcpy(data->roadType, ptr, roadTypeLength);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3308      	adds	r3, #8
 800d084:	7cfa      	ldrb	r2, [r7, #19]
 800d086:	6979      	ldr	r1, [r7, #20]
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 fd7b 	bl	800db84 <memcpy>
    data->roadType[roadTypeLength] = '\0'; // Null-terminate
 800d08e:	7cfb      	ldrb	r3, [r7, #19]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	4413      	add	r3, r2
 800d094:	2200      	movs	r2, #0
 800d096:	721a      	strb	r2, [r3, #8]
    ptr += roadTypeLength;
 800d098:	7cfb      	ldrb	r3, [r7, #19]
 800d09a:	697a      	ldr	r2, [r7, #20]
 800d09c:	4413      	add	r3, r2
 800d09e:	617b      	str	r3, [r7, #20]

    // Extract roadQuality
    data->roadQuality = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	061a      	lsls	r2, r3, #24
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	041b      	lsls	r3, r3, #16
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	3302      	adds	r3, #2
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	021b      	lsls	r3, r3, #8
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	697a      	ldr	r2, [r7, #20]
 800d0bc:	3203      	adds	r2, #3
 800d0be:	7812      	ldrb	r2, [r2, #0]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	611a      	str	r2, [r3, #16]

    return 1;
 800d0c8:	2301      	movs	r3, #1
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3718      	adds	r7, #24
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d0d8:	2200      	movs	r2, #0
 800d0da:	4905      	ldr	r1, [pc, #20]	@ (800d0f0 <CDC_Init_FS+0x1c>)
 800d0dc:	4805      	ldr	r0, [pc, #20]	@ (800d0f4 <CDC_Init_FS+0x20>)
 800d0de:	f7fe fbaf 	bl	800b840 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d0e2:	4905      	ldr	r1, [pc, #20]	@ (800d0f8 <CDC_Init_FS+0x24>)
 800d0e4:	4803      	ldr	r0, [pc, #12]	@ (800d0f4 <CDC_Init_FS+0x20>)
 800d0e6:	f7fe fbcd 	bl	800b884 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d0ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20013b78 	.word	0x20013b78
 800d0f4:	2001309c 	.word	0x2001309c
 800d0f8:	20013378 	.word	0x20013378

0800d0fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d100:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d102:	4618      	mov	r0, r3
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	6039      	str	r1, [r7, #0]
 800d116:	71fb      	strb	r3, [r7, #7]
 800d118:	4613      	mov	r3, r2
 800d11a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	2b23      	cmp	r3, #35	@ 0x23
 800d120:	d84a      	bhi.n	800d1b8 <CDC_Control_FS+0xac>
 800d122:	a201      	add	r2, pc, #4	@ (adr r2, 800d128 <CDC_Control_FS+0x1c>)
 800d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d128:	0800d1b9 	.word	0x0800d1b9
 800d12c:	0800d1b9 	.word	0x0800d1b9
 800d130:	0800d1b9 	.word	0x0800d1b9
 800d134:	0800d1b9 	.word	0x0800d1b9
 800d138:	0800d1b9 	.word	0x0800d1b9
 800d13c:	0800d1b9 	.word	0x0800d1b9
 800d140:	0800d1b9 	.word	0x0800d1b9
 800d144:	0800d1b9 	.word	0x0800d1b9
 800d148:	0800d1b9 	.word	0x0800d1b9
 800d14c:	0800d1b9 	.word	0x0800d1b9
 800d150:	0800d1b9 	.word	0x0800d1b9
 800d154:	0800d1b9 	.word	0x0800d1b9
 800d158:	0800d1b9 	.word	0x0800d1b9
 800d15c:	0800d1b9 	.word	0x0800d1b9
 800d160:	0800d1b9 	.word	0x0800d1b9
 800d164:	0800d1b9 	.word	0x0800d1b9
 800d168:	0800d1b9 	.word	0x0800d1b9
 800d16c:	0800d1b9 	.word	0x0800d1b9
 800d170:	0800d1b9 	.word	0x0800d1b9
 800d174:	0800d1b9 	.word	0x0800d1b9
 800d178:	0800d1b9 	.word	0x0800d1b9
 800d17c:	0800d1b9 	.word	0x0800d1b9
 800d180:	0800d1b9 	.word	0x0800d1b9
 800d184:	0800d1b9 	.word	0x0800d1b9
 800d188:	0800d1b9 	.word	0x0800d1b9
 800d18c:	0800d1b9 	.word	0x0800d1b9
 800d190:	0800d1b9 	.word	0x0800d1b9
 800d194:	0800d1b9 	.word	0x0800d1b9
 800d198:	0800d1b9 	.word	0x0800d1b9
 800d19c:	0800d1b9 	.word	0x0800d1b9
 800d1a0:	0800d1b9 	.word	0x0800d1b9
 800d1a4:	0800d1b9 	.word	0x0800d1b9
 800d1a8:	0800d1b9 	.word	0x0800d1b9
 800d1ac:	0800d1b9 	.word	0x0800d1b9
 800d1b0:	0800d1b9 	.word	0x0800d1b9
 800d1b4:	0800d1b9 	.word	0x0800d1b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1b8:	bf00      	nop
  }

  return (USBD_OK);
 800d1ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1c8:	b5b0      	push	{r4, r5, r7, lr}
 800d1ca:	b08e      	sub	sp, #56	@ 0x38
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SensorData data;
	if(!parse_packet(Buf, *Len, &data)){
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7ff ff16 	bl	800d010 <parse_packet>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d119      	bne.n	800d21e <CDC_Receive_FS+0x56>
		uint8_t error_response[] = "Invalid packet format";
 800d1ea:	4b1b      	ldr	r3, [pc, #108]	@ (800d258 <CDC_Receive_FS+0x90>)
 800d1ec:	f107 040c 	add.w	r4, r7, #12
 800d1f0:	461d      	mov	r5, r3
 800d1f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d1fa:	6020      	str	r0, [r4, #0]
 800d1fc:	3404      	adds	r4, #4
 800d1fe:	8021      	strh	r1, [r4, #0]
		CDC_Transmit_FS(error_response, strlen((char*)error_response));
 800d200:	f107 030c 	add.w	r3, r7, #12
 800d204:	4618      	mov	r0, r3
 800d206:	f7f2 ffeb 	bl	80001e0 <strlen>
 800d20a:	4603      	mov	r3, r0
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	f107 030c 	add.w	r3, r7, #12
 800d212:	4611      	mov	r1, r2
 800d214:	4618      	mov	r0, r3
 800d216:	f000 f829 	bl	800d26c <CDC_Transmit_FS>
		return USBD_FAIL;
 800d21a:	2303      	movs	r3, #3
 800d21c:	e017      	b.n	800d24e <CDC_Receive_FS+0x86>
	}

	recivedData = data;
 800d21e:	4b0f      	ldr	r3, [pc, #60]	@ (800d25c <CDC_Receive_FS+0x94>)
 800d220:	461d      	mov	r5, r3
 800d222:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800d226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	602b      	str	r3, [r5, #0]
	isDefined = 1;
 800d22e:	4b0c      	ldr	r3, [pc, #48]	@ (800d260 <CDC_Receive_FS+0x98>)
 800d230:	2201      	movs	r2, #1
 800d232:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d234:	6879      	ldr	r1, [r7, #4]
 800d236:	480b      	ldr	r0, [pc, #44]	@ (800d264 <CDC_Receive_FS+0x9c>)
 800d238:	f7fe fb24 	bl	800b884 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d23c:	4809      	ldr	r0, [pc, #36]	@ (800d264 <CDC_Receive_FS+0x9c>)
 800d23e:	f7fe fb7f 	bl	800b940 <USBD_CDC_ReceivePacket>

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800d242:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d246:	4808      	ldr	r0, [pc, #32]	@ (800d268 <CDC_Receive_FS+0xa0>)
 800d248:	f7f4 fc7d 	bl	8001b46 <HAL_GPIO_TogglePin>
	return (USBD_OK);
 800d24c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3738      	adds	r7, #56	@ 0x38
 800d252:	46bd      	mov	sp, r7
 800d254:	bdb0      	pop	{r4, r5, r7, pc}
 800d256:	bf00      	nop
 800d258:	0800dc0c 	.word	0x0800dc0c
 800d25c:	2001437c 	.word	0x2001437c
 800d260:	20014378 	.word	0x20014378
 800d264:	2001309c 	.word	0x2001309c
 800d268:	40020c00 	.word	0x40020c00

0800d26c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	460b      	mov	r3, r1
 800d276:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d27c:	4b0d      	ldr	r3, [pc, #52]	@ (800d2b4 <CDC_Transmit_FS+0x48>)
 800d27e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d282:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d28e:	2301      	movs	r3, #1
 800d290:	e00b      	b.n	800d2aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d292:	887b      	ldrh	r3, [r7, #2]
 800d294:	461a      	mov	r2, r3
 800d296:	6879      	ldr	r1, [r7, #4]
 800d298:	4806      	ldr	r0, [pc, #24]	@ (800d2b4 <CDC_Transmit_FS+0x48>)
 800d29a:	f7fe fad1 	bl	800b840 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d29e:	4805      	ldr	r0, [pc, #20]	@ (800d2b4 <CDC_Transmit_FS+0x48>)
 800d2a0:	f7fe fb0e 	bl	800b8c0 <USBD_CDC_TransmitPacket>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	2001309c 	.word	0x2001309c

0800d2b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	371c      	adds	r7, #28
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
	...

0800d2dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	6039      	str	r1, [r7, #0]
 800d2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2212      	movs	r2, #18
 800d2ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2ee:	4b03      	ldr	r3, [pc, #12]	@ (800d2fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	200000d0 	.word	0x200000d0

0800d300 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	4603      	mov	r3, r0
 800d308:	6039      	str	r1, [r7, #0]
 800d30a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	2204      	movs	r2, #4
 800d310:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d312:	4b03      	ldr	r3, [pc, #12]	@ (800d320 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	200000e4 	.word	0x200000e4

0800d324 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	4603      	mov	r3, r0
 800d32c:	6039      	str	r1, [r7, #0]
 800d32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d105      	bne.n	800d342 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	4907      	ldr	r1, [pc, #28]	@ (800d358 <USBD_FS_ProductStrDescriptor+0x34>)
 800d33a:	4808      	ldr	r0, [pc, #32]	@ (800d35c <USBD_FS_ProductStrDescriptor+0x38>)
 800d33c:	f7ff fd4c 	bl	800cdd8 <USBD_GetString>
 800d340:	e004      	b.n	800d34c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d342:	683a      	ldr	r2, [r7, #0]
 800d344:	4904      	ldr	r1, [pc, #16]	@ (800d358 <USBD_FS_ProductStrDescriptor+0x34>)
 800d346:	4805      	ldr	r0, [pc, #20]	@ (800d35c <USBD_FS_ProductStrDescriptor+0x38>)
 800d348:	f7ff fd46 	bl	800cdd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d34c:	4b02      	ldr	r3, [pc, #8]	@ (800d358 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20014390 	.word	0x20014390
 800d35c:	0800dc24 	.word	0x0800dc24

0800d360 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	6039      	str	r1, [r7, #0]
 800d36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d36c:	683a      	ldr	r2, [r7, #0]
 800d36e:	4904      	ldr	r1, [pc, #16]	@ (800d380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d370:	4804      	ldr	r0, [pc, #16]	@ (800d384 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d372:	f7ff fd31 	bl	800cdd8 <USBD_GetString>
  return USBD_StrDesc;
 800d376:	4b02      	ldr	r3, [pc, #8]	@ (800d380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	20014390 	.word	0x20014390
 800d384:	0800dc34 	.word	0x0800dc34

0800d388 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	6039      	str	r1, [r7, #0]
 800d392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	221a      	movs	r2, #26
 800d398:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d39a:	f000 f843 	bl	800d424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d39e:	4b02      	ldr	r3, [pc, #8]	@ (800d3a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	200000e8 	.word	0x200000e8

0800d3ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	6039      	str	r1, [r7, #0]
 800d3b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d3b8:	79fb      	ldrb	r3, [r7, #7]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d105      	bne.n	800d3ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	4907      	ldr	r1, [pc, #28]	@ (800d3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3c2:	4808      	ldr	r0, [pc, #32]	@ (800d3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3c4:	f7ff fd08 	bl	800cdd8 <USBD_GetString>
 800d3c8:	e004      	b.n	800d3d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3ca:	683a      	ldr	r2, [r7, #0]
 800d3cc:	4904      	ldr	r1, [pc, #16]	@ (800d3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3ce:	4805      	ldr	r0, [pc, #20]	@ (800d3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3d0:	f7ff fd02 	bl	800cdd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3d4:	4b02      	ldr	r3, [pc, #8]	@ (800d3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20014390 	.word	0x20014390
 800d3e4:	0800dc48 	.word	0x0800dc48

0800d3e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	6039      	str	r1, [r7, #0]
 800d3f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3f4:	79fb      	ldrb	r3, [r7, #7]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d105      	bne.n	800d406 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	4907      	ldr	r1, [pc, #28]	@ (800d41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3fe:	4808      	ldr	r0, [pc, #32]	@ (800d420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d400:	f7ff fcea 	bl	800cdd8 <USBD_GetString>
 800d404:	e004      	b.n	800d410 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d406:	683a      	ldr	r2, [r7, #0]
 800d408:	4904      	ldr	r1, [pc, #16]	@ (800d41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d40a:	4805      	ldr	r0, [pc, #20]	@ (800d420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d40c:	f7ff fce4 	bl	800cdd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d410:	4b02      	ldr	r3, [pc, #8]	@ (800d41c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d412:	4618      	mov	r0, r3
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20014390 	.word	0x20014390
 800d420:	0800dc54 	.word	0x0800dc54

0800d424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d42a:	4b0f      	ldr	r3, [pc, #60]	@ (800d468 <Get_SerialNum+0x44>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d430:	4b0e      	ldr	r3, [pc, #56]	@ (800d46c <Get_SerialNum+0x48>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d436:	4b0e      	ldr	r3, [pc, #56]	@ (800d470 <Get_SerialNum+0x4c>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4413      	add	r3, r2
 800d442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d009      	beq.n	800d45e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d44a:	2208      	movs	r2, #8
 800d44c:	4909      	ldr	r1, [pc, #36]	@ (800d474 <Get_SerialNum+0x50>)
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f000 f814 	bl	800d47c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d454:	2204      	movs	r2, #4
 800d456:	4908      	ldr	r1, [pc, #32]	@ (800d478 <Get_SerialNum+0x54>)
 800d458:	68b8      	ldr	r0, [r7, #8]
 800d45a:	f000 f80f 	bl	800d47c <IntToUnicode>
  }
}
 800d45e:	bf00      	nop
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	1fff7a10 	.word	0x1fff7a10
 800d46c:	1fff7a14 	.word	0x1fff7a14
 800d470:	1fff7a18 	.word	0x1fff7a18
 800d474:	200000ea 	.word	0x200000ea
 800d478:	200000fa 	.word	0x200000fa

0800d47c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	4613      	mov	r3, r2
 800d488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d48e:	2300      	movs	r3, #0
 800d490:	75fb      	strb	r3, [r7, #23]
 800d492:	e027      	b.n	800d4e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	0f1b      	lsrs	r3, r3, #28
 800d498:	2b09      	cmp	r3, #9
 800d49a:	d80b      	bhi.n	800d4b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	0f1b      	lsrs	r3, r3, #28
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	440b      	add	r3, r1
 800d4ac:	3230      	adds	r2, #48	@ 0x30
 800d4ae:	b2d2      	uxtb	r2, r2
 800d4b0:	701a      	strb	r2, [r3, #0]
 800d4b2:	e00a      	b.n	800d4ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	0f1b      	lsrs	r3, r3, #28
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	4619      	mov	r1, r3
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	440b      	add	r3, r1
 800d4c4:	3237      	adds	r2, #55	@ 0x37
 800d4c6:	b2d2      	uxtb	r2, r2
 800d4c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	011b      	lsls	r3, r3, #4
 800d4ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4d0:	7dfb      	ldrb	r3, [r7, #23]
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	4413      	add	r3, r2
 800d4da:	2200      	movs	r2, #0
 800d4dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4de:	7dfb      	ldrb	r3, [r7, #23]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	75fb      	strb	r3, [r7, #23]
 800d4e4:	7dfa      	ldrb	r2, [r7, #23]
 800d4e6:	79fb      	ldrb	r3, [r7, #7]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d3d3      	bcc.n	800d494 <IntToUnicode+0x18>
  }
}
 800d4ec:	bf00      	nop
 800d4ee:	bf00      	nop
 800d4f0:	371c      	adds	r7, #28
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
	...

0800d4fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b08a      	sub	sp, #40	@ 0x28
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d504:	f107 0314 	add.w	r3, r7, #20
 800d508:	2200      	movs	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	605a      	str	r2, [r3, #4]
 800d50e:	609a      	str	r2, [r3, #8]
 800d510:	60da      	str	r2, [r3, #12]
 800d512:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d51c:	d147      	bne.n	800d5ae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d51e:	2300      	movs	r3, #0
 800d520:	613b      	str	r3, [r7, #16]
 800d522:	4b25      	ldr	r3, [pc, #148]	@ (800d5b8 <HAL_PCD_MspInit+0xbc>)
 800d524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d526:	4a24      	ldr	r2, [pc, #144]	@ (800d5b8 <HAL_PCD_MspInit+0xbc>)
 800d528:	f043 0301 	orr.w	r3, r3, #1
 800d52c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d52e:	4b22      	ldr	r3, [pc, #136]	@ (800d5b8 <HAL_PCD_MspInit+0xbc>)
 800d530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	613b      	str	r3, [r7, #16]
 800d538:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d53a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d53e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d540:	2300      	movs	r3, #0
 800d542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d544:	2300      	movs	r3, #0
 800d546:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d548:	f107 0314 	add.w	r3, r7, #20
 800d54c:	4619      	mov	r1, r3
 800d54e:	481b      	ldr	r0, [pc, #108]	@ (800d5bc <HAL_PCD_MspInit+0xc0>)
 800d550:	f7f4 f95c 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d554:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800d558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d55a:	2302      	movs	r3, #2
 800d55c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d562:	2303      	movs	r3, #3
 800d564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d566:	230a      	movs	r3, #10
 800d568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d56a:	f107 0314 	add.w	r3, r7, #20
 800d56e:	4619      	mov	r1, r3
 800d570:	4812      	ldr	r0, [pc, #72]	@ (800d5bc <HAL_PCD_MspInit+0xc0>)
 800d572:	f7f4 f94b 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d576:	4b10      	ldr	r3, [pc, #64]	@ (800d5b8 <HAL_PCD_MspInit+0xbc>)
 800d578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d57a:	4a0f      	ldr	r2, [pc, #60]	@ (800d5b8 <HAL_PCD_MspInit+0xbc>)
 800d57c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d580:	6353      	str	r3, [r2, #52]	@ 0x34
 800d582:	2300      	movs	r3, #0
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b8 <HAL_PCD_MspInit+0xbc>)
 800d588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d58a:	4a0b      	ldr	r2, [pc, #44]	@ (800d5b8 <HAL_PCD_MspInit+0xbc>)
 800d58c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d590:	6453      	str	r3, [r2, #68]	@ 0x44
 800d592:	4b09      	ldr	r3, [pc, #36]	@ (800d5b8 <HAL_PCD_MspInit+0xbc>)
 800d594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d59a:	60fb      	str	r3, [r7, #12]
 800d59c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	2043      	movs	r0, #67	@ 0x43
 800d5a4:	f7f4 f908 	bl	80017b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d5a8:	2043      	movs	r0, #67	@ 0x43
 800d5aa:	f7f4 f921 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d5ae:	bf00      	nop
 800d5b0:	3728      	adds	r7, #40	@ 0x28
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	40023800 	.word	0x40023800
 800d5bc:	40020000 	.word	0x40020000

0800d5c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	4610      	mov	r0, r2
 800d5d8:	f7fe fa9b 	bl	800bb12 <USBD_LL_SetupStage>
}
 800d5dc:	bf00      	nop
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5f6:	78fa      	ldrb	r2, [r7, #3]
 800d5f8:	6879      	ldr	r1, [r7, #4]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	440b      	add	r3, r1
 800d604:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	78fb      	ldrb	r3, [r7, #3]
 800d60c:	4619      	mov	r1, r3
 800d60e:	f7fe fad5 	bl	800bbbc <USBD_LL_DataOutStage>
}
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b082      	sub	sp, #8
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	460b      	mov	r3, r1
 800d624:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d62c:	78fa      	ldrb	r2, [r7, #3]
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	4613      	mov	r3, r2
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	4413      	add	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	440b      	add	r3, r1
 800d63a:	3320      	adds	r3, #32
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	78fb      	ldrb	r3, [r7, #3]
 800d640:	4619      	mov	r1, r3
 800d642:	f7fe fb6e 	bl	800bd22 <USBD_LL_DataInStage>
}
 800d646:	bf00      	nop
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b082      	sub	sp, #8
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fe fca8 	bl	800bfb2 <USBD_LL_SOF>
}
 800d662:	bf00      	nop
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b084      	sub	sp, #16
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d672:	2301      	movs	r3, #1
 800d674:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	79db      	ldrb	r3, [r3, #7]
 800d67a:	2b02      	cmp	r3, #2
 800d67c:	d001      	beq.n	800d682 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d67e:	f7f3 fcad 	bl	8000fdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d688:	7bfa      	ldrb	r2, [r7, #15]
 800d68a:	4611      	mov	r1, r2
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe fc4c 	bl	800bf2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fe fbf4 	bl	800be86 <USBD_LL_Reset>
}
 800d69e:	bf00      	nop
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fe fc47 	bl	800bf4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	6812      	ldr	r2, [r2, #0]
 800d6ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d6ce:	f043 0301 	orr.w	r3, r3, #1
 800d6d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	7adb      	ldrb	r3, [r3, #11]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d005      	beq.n	800d6e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6dc:	4b04      	ldr	r3, [pc, #16]	@ (800d6f0 <HAL_PCD_SuspendCallback+0x48>)
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	4a03      	ldr	r2, [pc, #12]	@ (800d6f0 <HAL_PCD_SuspendCallback+0x48>)
 800d6e2:	f043 0306 	orr.w	r3, r3, #6
 800d6e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6e8:	bf00      	nop
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	e000ed00 	.word	0xe000ed00

0800d6f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fc3d 	bl	800bf82 <USBD_LL_Resume>
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	460b      	mov	r3, r1
 800d71a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d722:	78fa      	ldrb	r2, [r7, #3]
 800d724:	4611      	mov	r1, r2
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe fc95 	bl	800c056 <USBD_LL_IsoOUTIncomplete>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d746:	78fa      	ldrb	r2, [r7, #3]
 800d748:	4611      	mov	r1, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fc51 	bl	800bff2 <USBD_LL_IsoINIncomplete>
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d766:	4618      	mov	r0, r3
 800d768:	f7fe fca7 	bl	800c0ba <USBD_LL_DevConnected>
}
 800d76c:	bf00      	nop
 800d76e:	3708      	adds	r7, #8
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d782:	4618      	mov	r0, r3
 800d784:	f7fe fca4 	bl	800c0d0 <USBD_LL_DevDisconnected>
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d13c      	bne.n	800d81a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d7a0:	4a20      	ldr	r2, [pc, #128]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d7b0:	4b1c      	ldr	r3, [pc, #112]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d7b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d7b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7ba:	2204      	movs	r2, #4
 800d7bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d7be:	4b19      	ldr	r3, [pc, #100]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d7c4:	4b17      	ldr	r3, [pc, #92]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d7ca:	4b16      	ldr	r3, [pc, #88]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7cc:	2202      	movs	r2, #2
 800d7ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d7d0:	4b14      	ldr	r3, [pc, #80]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d7d6:	4b13      	ldr	r3, [pc, #76]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7d8:	2200      	movs	r2, #0
 800d7da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d7dc:	4b11      	ldr	r3, [pc, #68]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d7e2:	4b10      	ldr	r3, [pc, #64]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d7e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d7ee:	480d      	ldr	r0, [pc, #52]	@ (800d824 <USBD_LL_Init+0x94>)
 800d7f0:	f7f5 fe88 	bl	8003504 <HAL_PCD_Init>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d7fa:	f7f3 fbef 	bl	8000fdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7fe:	2180      	movs	r1, #128	@ 0x80
 800d800:	4808      	ldr	r0, [pc, #32]	@ (800d824 <USBD_LL_Init+0x94>)
 800d802:	f7f7 f8b4 	bl	800496e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d806:	2240      	movs	r2, #64	@ 0x40
 800d808:	2100      	movs	r1, #0
 800d80a:	4806      	ldr	r0, [pc, #24]	@ (800d824 <USBD_LL_Init+0x94>)
 800d80c:	f7f7 f868 	bl	80048e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d810:	2280      	movs	r2, #128	@ 0x80
 800d812:	2101      	movs	r1, #1
 800d814:	4803      	ldr	r0, [pc, #12]	@ (800d824 <USBD_LL_Init+0x94>)
 800d816:	f7f7 f863 	bl	80048e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	20014590 	.word	0x20014590

0800d828 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d83e:	4618      	mov	r0, r3
 800d840:	f7f5 ff6f 	bl	8003722 <HAL_PCD_Start>
 800d844:	4603      	mov	r3, r0
 800d846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d848:	7bfb      	ldrb	r3, [r7, #15]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 f942 	bl	800dad4 <USBD_Get_USB_Status>
 800d850:	4603      	mov	r3, r0
 800d852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d854:	7bbb      	ldrb	r3, [r7, #14]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b084      	sub	sp, #16
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	4608      	mov	r0, r1
 800d868:	4611      	mov	r1, r2
 800d86a:	461a      	mov	r2, r3
 800d86c:	4603      	mov	r3, r0
 800d86e:	70fb      	strb	r3, [r7, #3]
 800d870:	460b      	mov	r3, r1
 800d872:	70bb      	strb	r3, [r7, #2]
 800d874:	4613      	mov	r3, r2
 800d876:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d878:	2300      	movs	r3, #0
 800d87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d886:	78bb      	ldrb	r3, [r7, #2]
 800d888:	883a      	ldrh	r2, [r7, #0]
 800d88a:	78f9      	ldrb	r1, [r7, #3]
 800d88c:	f7f6 fc43 	bl	8004116 <HAL_PCD_EP_Open>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	4618      	mov	r0, r3
 800d898:	f000 f91c 	bl	800dad4 <USBD_Get_USB_Status>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8c4:	78fa      	ldrb	r2, [r7, #3]
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7f6 fc8e 	bl	80041ea <HAL_PCD_EP_Close>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 f8fd 	bl	800dad4 <USBD_Get_USB_Status>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d902:	78fa      	ldrb	r2, [r7, #3]
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7f6 fd46 	bl	8004398 <HAL_PCD_EP_SetStall>
 800d90c:	4603      	mov	r3, r0
 800d90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d910:	7bfb      	ldrb	r3, [r7, #15]
 800d912:	4618      	mov	r0, r3
 800d914:	f000 f8de 	bl	800dad4 <USBD_Get_USB_Status>
 800d918:	4603      	mov	r3, r0
 800d91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b084      	sub	sp, #16
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	460b      	mov	r3, r1
 800d930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d932:	2300      	movs	r3, #0
 800d934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d940:	78fa      	ldrb	r2, [r7, #3]
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f7f6 fd8a 	bl	800445e <HAL_PCD_EP_ClrStall>
 800d94a:	4603      	mov	r3, r0
 800d94c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
 800d950:	4618      	mov	r0, r3
 800d952:	f000 f8bf 	bl	800dad4 <USBD_Get_USB_Status>
 800d956:	4603      	mov	r3, r0
 800d958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d95a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	460b      	mov	r3, r1
 800d96e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d976:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	da0b      	bge.n	800d998 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d986:	68f9      	ldr	r1, [r7, #12]
 800d988:	4613      	mov	r3, r2
 800d98a:	00db      	lsls	r3, r3, #3
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	440b      	add	r3, r1
 800d992:	3316      	adds	r3, #22
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	e00b      	b.n	800d9b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d99e:	68f9      	ldr	r1, [r7, #12]
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	4413      	add	r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	440b      	add	r3, r1
 800d9aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d9ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3714      	adds	r7, #20
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9d6:	78fa      	ldrb	r2, [r7, #3]
 800d9d8:	4611      	mov	r1, r2
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7f6 fb77 	bl	80040ce <HAL_PCD_SetAddress>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 f874 	bl	800dad4 <USBD_Get_USB_Status>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b086      	sub	sp, #24
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	60f8      	str	r0, [r7, #12]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	603b      	str	r3, [r7, #0]
 800da06:	460b      	mov	r3, r1
 800da08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da0e:	2300      	movs	r3, #0
 800da10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da18:	7af9      	ldrb	r1, [r7, #11]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	f7f6 fc81 	bl	8004324 <HAL_PCD_EP_Transmit>
 800da22:	4603      	mov	r3, r0
 800da24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da26:	7dfb      	ldrb	r3, [r7, #23]
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 f853 	bl	800dad4 <USBD_Get_USB_Status>
 800da2e:	4603      	mov	r3, r0
 800da30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da32:	7dbb      	ldrb	r3, [r7, #22]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	607a      	str	r2, [r7, #4]
 800da46:	603b      	str	r3, [r7, #0]
 800da48:	460b      	mov	r3, r1
 800da4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da5a:	7af9      	ldrb	r1, [r7, #11]
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	f7f6 fc0d 	bl	800427e <HAL_PCD_EP_Receive>
 800da64:	4603      	mov	r3, r0
 800da66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da68:	7dfb      	ldrb	r3, [r7, #23]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 f832 	bl	800dad4 <USBD_Get_USB_Status>
 800da70:	4603      	mov	r3, r0
 800da72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da74:	7dbb      	ldrb	r3, [r7, #22]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	460b      	mov	r3, r1
 800da88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da90:	78fa      	ldrb	r2, [r7, #3]
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f7f6 fc2d 	bl	80042f4 <HAL_PCD_EP_GetRxCount>
 800da9a:	4603      	mov	r3, r0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800daac:	4b03      	ldr	r3, [pc, #12]	@ (800dabc <USBD_static_malloc+0x18>)
}
 800daae:	4618      	mov	r0, r3
 800dab0:	370c      	adds	r7, #12
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	20014a74 	.word	0x20014a74

0800dac0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]

}
 800dac8:	bf00      	nop
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dae2:	79fb      	ldrb	r3, [r7, #7]
 800dae4:	2b03      	cmp	r3, #3
 800dae6:	d817      	bhi.n	800db18 <USBD_Get_USB_Status+0x44>
 800dae8:	a201      	add	r2, pc, #4	@ (adr r2, 800daf0 <USBD_Get_USB_Status+0x1c>)
 800daea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daee:	bf00      	nop
 800daf0:	0800db01 	.word	0x0800db01
 800daf4:	0800db07 	.word	0x0800db07
 800daf8:	0800db0d 	.word	0x0800db0d
 800dafc:	0800db13 	.word	0x0800db13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	73fb      	strb	r3, [r7, #15]
    break;
 800db04:	e00b      	b.n	800db1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db06:	2303      	movs	r3, #3
 800db08:	73fb      	strb	r3, [r7, #15]
    break;
 800db0a:	e008      	b.n	800db1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db0c:	2301      	movs	r3, #1
 800db0e:	73fb      	strb	r3, [r7, #15]
    break;
 800db10:	e005      	b.n	800db1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db12:	2303      	movs	r3, #3
 800db14:	73fb      	strb	r3, [r7, #15]
    break;
 800db16:	e002      	b.n	800db1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db18:	2303      	movs	r3, #3
 800db1a:	73fb      	strb	r3, [r7, #15]
    break;
 800db1c:	bf00      	nop
  }
  return usb_status;
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <memset>:
 800db2c:	4402      	add	r2, r0
 800db2e:	4603      	mov	r3, r0
 800db30:	4293      	cmp	r3, r2
 800db32:	d100      	bne.n	800db36 <memset+0xa>
 800db34:	4770      	bx	lr
 800db36:	f803 1b01 	strb.w	r1, [r3], #1
 800db3a:	e7f9      	b.n	800db30 <memset+0x4>

0800db3c <__libc_init_array>:
 800db3c:	b570      	push	{r4, r5, r6, lr}
 800db3e:	4d0d      	ldr	r5, [pc, #52]	@ (800db74 <__libc_init_array+0x38>)
 800db40:	4c0d      	ldr	r4, [pc, #52]	@ (800db78 <__libc_init_array+0x3c>)
 800db42:	1b64      	subs	r4, r4, r5
 800db44:	10a4      	asrs	r4, r4, #2
 800db46:	2600      	movs	r6, #0
 800db48:	42a6      	cmp	r6, r4
 800db4a:	d109      	bne.n	800db60 <__libc_init_array+0x24>
 800db4c:	4d0b      	ldr	r5, [pc, #44]	@ (800db7c <__libc_init_array+0x40>)
 800db4e:	4c0c      	ldr	r4, [pc, #48]	@ (800db80 <__libc_init_array+0x44>)
 800db50:	f000 f826 	bl	800dba0 <_init>
 800db54:	1b64      	subs	r4, r4, r5
 800db56:	10a4      	asrs	r4, r4, #2
 800db58:	2600      	movs	r6, #0
 800db5a:	42a6      	cmp	r6, r4
 800db5c:	d105      	bne.n	800db6a <__libc_init_array+0x2e>
 800db5e:	bd70      	pop	{r4, r5, r6, pc}
 800db60:	f855 3b04 	ldr.w	r3, [r5], #4
 800db64:	4798      	blx	r3
 800db66:	3601      	adds	r6, #1
 800db68:	e7ee      	b.n	800db48 <__libc_init_array+0xc>
 800db6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db6e:	4798      	blx	r3
 800db70:	3601      	adds	r6, #1
 800db72:	e7f2      	b.n	800db5a <__libc_init_array+0x1e>
 800db74:	0800dc84 	.word	0x0800dc84
 800db78:	0800dc84 	.word	0x0800dc84
 800db7c:	0800dc84 	.word	0x0800dc84
 800db80:	0800dc88 	.word	0x0800dc88

0800db84 <memcpy>:
 800db84:	440a      	add	r2, r1
 800db86:	4291      	cmp	r1, r2
 800db88:	f100 33ff 	add.w	r3, r0, #4294967295
 800db8c:	d100      	bne.n	800db90 <memcpy+0xc>
 800db8e:	4770      	bx	lr
 800db90:	b510      	push	{r4, lr}
 800db92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db9a:	4291      	cmp	r1, r2
 800db9c:	d1f9      	bne.n	800db92 <memcpy+0xe>
 800db9e:	bd10      	pop	{r4, pc}

0800dba0 <_init>:
 800dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba2:	bf00      	nop
 800dba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba6:	bc08      	pop	{r3}
 800dba8:	469e      	mov	lr, r3
 800dbaa:	4770      	bx	lr

0800dbac <_fini>:
 800dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbae:	bf00      	nop
 800dbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb2:	bc08      	pop	{r3}
 800dbb4:	469e      	mov	lr, r3
 800dbb6:	4770      	bx	lr
