
PRIM-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800ba9c  0800ba9c  0000ca9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb1c  0800bb1c  0000d104  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb1c  0800bb1c  0000cb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb24  0800bb24  0000d104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb24  0800bb24  0000cb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb28  0800bb28  0000cb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800bb2c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b2c  20000104  0800bc30  0000d104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014c30  0800bc30  0000dc30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0bc  00000000  00000000  0000d134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e35  00000000  00000000  0002c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  00031028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001644  00000000  00000000  00032d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf6b  00000000  00000000  00034344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e4e  00000000  00000000  000502af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f498  00000000  00000000  000750fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079b8  00000000  00000000  001145d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba84 	.word	0x0800ba84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800ba84 	.word	0x0800ba84

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <i2c1_pisiRegister>:
void initGyro(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af04      	add	r7, sp, #16
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	460b      	mov	r3, r1
 80004dc:	71bb      	strb	r3, [r7, #6]
 80004de:	4613      	mov	r3, r2
 80004e0:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	b299      	uxth	r1, r3
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	230a      	movs	r3, #10
 80004f2:	9302      	str	r3, [sp, #8]
 80004f4:	2301      	movs	r3, #1
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	1d7b      	adds	r3, r7, #5
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2301      	movs	r3, #1
 80004fe:	4804      	ldr	r0, [pc, #16]	@ (8000510 <i2c1_pisiRegister+0x40>)
 8000500:	f001 f9ec 	bl	80018dc <HAL_I2C_Mem_Write>
 8000504:	4603      	mov	r3, r0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000120 	.word	0x20000120

08000514 <initOrientation>:
        reg |= 0x80;
    naprava <<= 1;
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
}

void initOrientation() { // ne pozabit klicati te funkcije
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000518:	2227      	movs	r2, #39	@ 0x27
 800051a:	2120      	movs	r1, #32
 800051c:	2019      	movs	r0, #25
 800051e:	f7ff ffd7 	bl	80004d0 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000522:	2288      	movs	r2, #136	@ 0x88
 8000524:	2123      	movs	r1, #35	@ 0x23
 8000526:	2019      	movs	r0, #25
 8000528:	f7ff ffd2 	bl	80004d0 <i2c1_pisiRegister>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af02      	add	r7, sp, #8
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000540:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	b29b      	uxth	r3, r3
 8000546:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2108      	movs	r1, #8
 800054c:	480c      	ldr	r0, [pc, #48]	@ (8000580 <spi1_beriRegister+0x50>)
 800054e:	f001 f84d 	bl	80015ec <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 8000552:	f107 020c 	add.w	r2, r7, #12
 8000556:	f107 010e 	add.w	r1, r7, #14
 800055a:	2302      	movs	r3, #2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2302      	movs	r3, #2
 8000560:	4808      	ldr	r0, [pc, #32]	@ (8000584 <spi1_beriRegister+0x54>)
 8000562:	f004 fbec 	bl	8004d3e <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2108      	movs	r1, #8
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <spi1_beriRegister+0x50>)
 800056c:	f001 f83e 	bl	80015ec <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 8000570:	89bb      	ldrh	r3, [r7, #12]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	b2db      	uxtb	r3, r3
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	20000204 	.word	0x20000204

08000588 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	b21a      	sxth	r2, r3
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	021b      	lsls	r3, r3, #8
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2108      	movs	r1, #8
 80005ae:	4809      	ldr	r0, [pc, #36]	@ (80005d4 <spi1_pisiRegister+0x4c>)
 80005b0:	f001 f81c 	bl	80015ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 80005b4:	f107 010e 	add.w	r1, r7, #14
 80005b8:	2302      	movs	r3, #2
 80005ba:	2202      	movs	r2, #2
 80005bc:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <spi1_pisiRegister+0x50>)
 80005be:	f004 fa7a 	bl	8004ab6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2108      	movs	r1, #8
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <spi1_pisiRegister+0x4c>)
 80005c8:	f001 f810 	bl	80015ec <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	20000204 	.word	0x20000204

080005dc <initGyro>:
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
}

void initGyro() { // ne pozabit klicat te funkcije
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
    // preverimo ali smo "poklicali" pravi senzor
    uint8_t cip = spi1_beriRegister(0x0F);
 80005e2:	200f      	movs	r0, #15
 80005e4:	f7ff ffa4 	bl	8000530 <spi1_beriRegister>
 80005e8:	4603      	mov	r3, r0
 80005ea:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2bd4      	cmp	r3, #212	@ 0xd4
 80005f0:	d004      	beq.n	80005fc <initGyro+0x20>
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2bd3      	cmp	r3, #211	@ 0xd3
 80005f6:	d001      	beq.n	80005fc <initGyro+0x20>
        for (;;);
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x0F); // zbudi ziroskop in omogoci osi
 80005fc:	210f      	movs	r1, #15
 80005fe:	2020      	movs	r0, #32
 8000600:	f7ff ffc2 	bl	8000588 <spi1_pisiRegister>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <vTask1>:

void vTask1(void *pvParameters){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);  // Toggle an LED
 8000614:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <vTask1+0x20>)
 800061a:	f001 f800 	bl	800161e <HAL_GPIO_TogglePin>
		vTaskDelay(500 / portTICK_PERIOD_MS);  // Delay for 500ms
 800061e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000622:	f007 f8c1 	bl	80077a8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);  // Toggle an LED
 8000626:	bf00      	nop
 8000628:	e7f4      	b.n	8000614 <vTask1+0x8>
 800062a:	bf00      	nop
 800062c:	40020c00 	.word	0x40020c00

08000630 <vTask2>:
	}
}

void vTask2(void *pvParameters){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);  // Toggle an LED
 8000638:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <vTask2+0x20>)
 800063e:	f000 ffee 	bl	800161e <HAL_GPIO_TogglePin>
		vTaskDelay(1000 / portTICK_PERIOD_MS);  // Delay for 500ms
 8000642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000646:	f007 f8af 	bl	80077a8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);  // Toggle an LED
 800064a:	bf00      	nop
 800064c:	e7f4      	b.n	8000638 <vTask2+0x8>
 800064e:	bf00      	nop
 8000650:	40020c00 	.word	0x40020c00

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fcfb 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f84d 	bl	80006fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000662:	f000 f8b3 	bl	80007cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f995 	bl	8000994 <MX_GPIO_Init>
  MX_I2C1_Init();
 800066a:	f000 f8cf 	bl	800080c <MX_I2C1_Init>
  MX_I2S2_Init();
 800066e:	f000 f8fd 	bl	800086c <MX_I2S2_Init>
  MX_I2S3_Init();
 8000672:	f000 f929 	bl	80008c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000676:	f000 f957 	bl	8000928 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800067a:	f00a fcd1 	bl	800b020 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 800067e:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <main+0x8c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <main+0x8c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f042 0201 	orr.w	r2, r2, #1
 800068c:	601a      	str	r2, [r3, #0]
  initOrientation();
 800068e:	f7ff ff41 	bl	8000514 <initOrientation>

  __HAL_SPI_ENABLE(&hspi1);
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <main+0x90>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <main+0x90>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80006a0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 80006a2:	2201      	movs	r2, #1
 80006a4:	2108      	movs	r1, #8
 80006a6:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <main+0x94>)
 80006a8:	f000 ffa0 	bl	80015ec <HAL_GPIO_WritePin>
  initGyro();
 80006ac:	f7ff ff96 	bl	80005dc <initGyro>

  xTaskCreate(
 80006b0:	2300      	movs	r3, #0
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	2280      	movs	r2, #128	@ 0x80
 80006bc:	490b      	ldr	r1, [pc, #44]	@ (80006ec <main+0x98>)
 80006be:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <main+0x9c>)
 80006c0:	f006 ff06 	bl	80074d0 <xTaskCreate>
		"vTask1",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  xTaskCreate(
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2302      	movs	r3, #2
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	4908      	ldr	r1, [pc, #32]	@ (80006f4 <main+0xa0>)
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <main+0xa4>)
 80006d4:	f006 fefc 	bl	80074d0 <xTaskCreate>
		"vTask2",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		2,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  vTaskStartScheduler();
 80006d8:	f007 f89c 	bl	8007814 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <main+0x88>
 80006e0:	20000120 	.word	0x20000120
 80006e4:	20000204 	.word	0x20000204
 80006e8:	40021000 	.word	0x40021000
 80006ec:	0800ba9c 	.word	0x0800ba9c
 80006f0:	0800060d 	.word	0x0800060d
 80006f4:	0800baa4 	.word	0x0800baa4
 80006f8:	08000631 	.word	0x08000631

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	@ 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00b f980 	bl	800ba10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b27      	ldr	r3, [pc, #156]	@ (80007c4 <SystemClock_Config+0xc8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a26      	ldr	r2, [pc, #152]	@ (80007c4 <SystemClock_Config+0xc8>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <SystemClock_Config+0xc8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a20      	ldr	r2, [pc, #128]	@ (80007c8 <SystemClock_Config+0xcc>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <SystemClock_Config+0xcc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800076a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000770:	23c0      	movs	r3, #192	@ 0xc0
 8000772:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000774:	2304      	movs	r3, #4
 8000776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fb07 	bl	8003d94 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f9ee 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2103      	movs	r1, #3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fd69 	bl	8004284 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007b8:	f000 f9d8 	bl	8000b6c <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	@ 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007e2:	2301      	movs	r3, #1
 80007e4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80007e6:	23c8      	movs	r3, #200	@ 0xc8
 80007e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007ea:	2305      	movs	r3, #5
 80007ec:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 ff83 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000800:	f000 f9b4 	bl	8000b6c <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000812:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <MX_I2C1_Init+0x58>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000818:	4a13      	ldr	r2, [pc, #76]	@ (8000868 <MX_I2C1_Init+0x5c>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_I2C1_Init+0x54>)
 800081e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000822:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <MX_I2C1_Init+0x54>)
 800082c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000830:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_I2C1_Init+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_I2C1_Init+0x54>)
 800084c:	f000 ff02 	bl	8001654 <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000856:	f000 f989 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000120 	.word	0x20000120
 8000864:	40005400 	.word	0x40005400
 8000868:	00061a80 	.word	0x00061a80

0800086c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2S2_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <MX_I2S2_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2S2_Init+0x50>)
 8000878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2S2_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_I2S2_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_I2S2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_I2S2_Init+0x50>)
 8000892:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <MX_I2S2_Init+0x58>)
 8000894:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_I2S2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_I2S2_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_I2S2_Init+0x50>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_I2S2_Init+0x50>)
 80008aa:	f001 fb81 	bl	8001fb0 <HAL_I2S_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 f95a 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000174 	.word	0x20000174
 80008c0:	40003800 	.word	0x40003800
 80008c4:	00017700 	.word	0x00017700

080008c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <MX_I2S3_Init+0x54>)
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <MX_I2S3_Init+0x58>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_I2S3_Init+0x54>)
 80008d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <MX_I2S3_Init+0x54>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_I2S3_Init+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <MX_I2S3_Init+0x54>)
 80008e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <MX_I2S3_Init+0x54>)
 80008f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000924 <MX_I2S3_Init+0x5c>)
 80008f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008f4:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_I2S3_Init+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <MX_I2S3_Init+0x54>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_I2S3_Init+0x54>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_I2S3_Init+0x54>)
 8000908:	f001 fb52 	bl	8001fb0 <HAL_I2S_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000912:	f000 f92b 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200001bc 	.word	0x200001bc
 8000920:	40003c00 	.word	0x40003c00
 8000924:	00017700 	.word	0x00017700

08000928 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_SPI1_Init+0x64>)
 800092e:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <MX_SPI1_Init+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <MX_SPI1_Init+0x64>)
 8000934:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_SPI1_Init+0x64>)
 8000948:	2202      	movs	r2, #2
 800094a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_SPI1_Init+0x64>)
 800094e:	2201      	movs	r2, #1
 8000950:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_SPI1_Init+0x64>)
 8000954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000958:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_SPI1_Init+0x64>)
 800095c:	2218      	movs	r2, #24
 800095e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_SPI1_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096c:	4b07      	ldr	r3, [pc, #28]	@ (800098c <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_SPI1_Init+0x64>)
 8000974:	220a      	movs	r2, #10
 8000976:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_SPI1_Init+0x64>)
 800097a:	f004 f813 	bl	80049a4 <HAL_SPI_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000984:	f000 f8f2 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000204 	.word	0x20000204
 8000990:	40013000 	.word	0x40013000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	@ 0x30
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	4b61      	ldr	r3, [pc, #388]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a60      	ldr	r2, [pc, #384]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a59      	ldr	r2, [pc, #356]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b57      	ldr	r3, [pc, #348]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b53      	ldr	r3, [pc, #332]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a52      	ldr	r2, [pc, #328]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b50      	ldr	r3, [pc, #320]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b4c      	ldr	r3, [pc, #304]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a4b      	ldr	r2, [pc, #300]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b49      	ldr	r3, [pc, #292]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b45      	ldr	r3, [pc, #276]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a44      	ldr	r2, [pc, #272]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b42      	ldr	r3, [pc, #264]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b3b      	ldr	r3, [pc, #236]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2108      	movs	r1, #8
 8000a56:	4838      	ldr	r0, [pc, #224]	@ (8000b38 <MX_GPIO_Init+0x1a4>)
 8000a58:	f000 fdc8 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4836      	ldr	r0, [pc, #216]	@ (8000b3c <MX_GPIO_Init+0x1a8>)
 8000a62:	f000 fdc3 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a66:	2200      	movs	r2, #0
 8000a68:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a6c:	4834      	ldr	r0, [pc, #208]	@ (8000b40 <MX_GPIO_Init+0x1ac>)
 8000a6e:	f000 fdbd 	bl	80015ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a72:	2304      	movs	r3, #4
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	482c      	ldr	r0, [pc, #176]	@ (8000b38 <MX_GPIO_Init+0x1a4>)
 8000a86:	f000 fc2d 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4825      	ldr	r0, [pc, #148]	@ (8000b38 <MX_GPIO_Init+0x1a4>)
 8000aa2:	f000 fc1f 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000aa6:	2332      	movs	r3, #50	@ 0x32
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aaa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481f      	ldr	r0, [pc, #124]	@ (8000b38 <MX_GPIO_Init+0x1a4>)
 8000abc:	f000 fc12 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4819      	ldr	r0, [pc, #100]	@ (8000b3c <MX_GPIO_Init+0x1a8>)
 8000ad8:	f000 fc04 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <MX_GPIO_Init+0x1b0>)
 8000af2:	f000 fbf7 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000af6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000afa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <MX_GPIO_Init+0x1ac>)
 8000b10:	f000 fbe8 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b14:	2320      	movs	r3, #32
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <MX_GPIO_Init+0x1ac>)
 8000b28:	f000 fbdc 	bl	80012e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	@ 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5a:	f000 fa9d 	bl	8001098 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40000c00 	.word	0x40000c00

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <Error_Handler+0x8>

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_I2C_MspInit+0x84>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12c      	bne.n	8000c44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <HAL_I2C_MspInit+0x8c>)
 8000c24:	f000 fb5e 	bl	80012e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	@ 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020400 	.word	0x40020400

08000c58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a59      	ldr	r2, [pc, #356]	@ (8000ddc <HAL_I2S_MspInit+0x184>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d15b      	bne.n	8000d32 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
 8000c7e:	4b58      	ldr	r3, [pc, #352]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a57      	ldr	r2, [pc, #348]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b55      	ldr	r3, [pc, #340]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	4b51      	ldr	r3, [pc, #324]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a50      	ldr	r2, [pc, #320]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a49      	ldr	r2, [pc, #292]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b47      	ldr	r3, [pc, #284]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000cde:	2306      	movs	r3, #6
 8000ce0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	483e      	ldr	r0, [pc, #248]	@ (8000de4 <HAL_I2S_MspInit+0x18c>)
 8000cea:	f000 fafb 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4836      	ldr	r0, [pc, #216]	@ (8000de4 <HAL_I2S_MspInit+0x18c>)
 8000d0a:	f000 faeb 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d0e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d20:	2305      	movs	r3, #5
 8000d22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	482f      	ldr	r0, [pc, #188]	@ (8000de8 <HAL_I2S_MspInit+0x190>)
 8000d2c:	f000 fada 	bl	80012e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d30:	e04f      	b.n	8000dd2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a2d      	ldr	r2, [pc, #180]	@ (8000dec <HAL_I2S_MspInit+0x194>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d14a      	bne.n	8000dd2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	4a26      	ldr	r2, [pc, #152]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4c:	4b24      	ldr	r3, [pc, #144]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	4a1f      	ldr	r2, [pc, #124]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	4a18      	ldr	r2, [pc, #96]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_I2S_MspInit+0x188>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d90:	2310      	movs	r3, #16
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da0:	2306      	movs	r3, #6
 8000da2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <HAL_I2S_MspInit+0x198>)
 8000dac:	f000 fa9a 	bl	80012e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000db0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <HAL_I2S_MspInit+0x18c>)
 8000dce:	f000 fa89 	bl	80012e4 <HAL_GPIO_Init>
}
 8000dd2:	bf00      	nop
 8000dd4:	3738      	adds	r7, #56	@ 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40003800 	.word	0x40003800
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40003c00 	.word	0x40003c00
 8000df0:	40020000 	.word	0x40020000

08000df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <HAL_SPI_MspInit+0x84>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12b      	bne.n	8000e6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a10      	ldr	r2, [pc, #64]	@ (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e4e:	23e0      	movs	r3, #224	@ 0xe0
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <HAL_SPI_MspInit+0x8c>)
 8000e6a:	f000 fa3b 	bl	80012e4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	@ 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40013000 	.word	0x40013000
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	@ 0x38
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <HAL_InitTick+0xe4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	4a32      	ldr	r2, [pc, #200]	@ (8000f68 <HAL_InitTick+0xe4>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <HAL_InitTick+0xe4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb0:	f107 0210 	add.w	r2, r7, #16
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fbee 	bl	800469c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d103      	bne.n	8000ed2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eca:	f003 fbd3 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8000ece:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ed0:	e004      	b.n	8000edc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ed2:	f003 fbcf 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ede:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <HAL_InitTick+0xe8>)
 8000ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee4:	0c9b      	lsrs	r3, r3, #18
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000eea:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <HAL_InitTick+0xec>)
 8000eec:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <HAL_InitTick+0xf0>)
 8000eee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <HAL_InitTick+0xec>)
 8000ef2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ef6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f70 <HAL_InitTick+0xec>)
 8000efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000efc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <HAL_InitTick+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <HAL_InitTick+0xec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <HAL_InitTick+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000f10:	4817      	ldr	r0, [pc, #92]	@ (8000f70 <HAL_InitTick+0xec>)
 8000f12:	f004 f999 	bl	8005248 <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d11b      	bne.n	8000f5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000f24:	4812      	ldr	r0, [pc, #72]	@ (8000f70 <HAL_InitTick+0xec>)
 8000f26:	f004 f9e9 	bl	80052fc <HAL_TIM_Base_Start_IT>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d111      	bne.n	8000f5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f38:	2032      	movs	r0, #50	@ 0x32
 8000f3a:	f000 f9c5 	bl	80012c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d808      	bhi.n	8000f56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	2032      	movs	r0, #50	@ 0x32
 8000f4a:	f000 f9a1 	bl	8001290 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <HAL_InitTick+0xf4>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e002      	b.n	8000f5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3738      	adds	r7, #56	@ 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	431bde83 	.word	0x431bde83
 8000f70:	2000025c 	.word	0x2000025c
 8000f74:	40000c00 	.word	0x40000c00
 8000f78:	20000004 	.word	0x20000004

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <NMI_Handler+0x4>

08000f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <MemManage_Handler+0x4>

08000f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <TIM5_IRQHandler+0x10>)
 8000fba:	f004 fa01 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000025c 	.word	0x2000025c

08000fc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <OTG_FS_IRQHandler+0x10>)
 8000fce:	f001 fdd3 	bl	8002b78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2001452c 	.word	0x2001452c

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001038 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001004:	f7ff ffea 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	@ (8001040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	@ (800104c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f00a fcf7 	bl	800ba20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fb0f 	bl	8000654 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001044:	0800bb2c 	.word	0x0800bb2c
  ldr r2, =_sbss
 8001048:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800104c:	20014c30 	.word	0x20014c30

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f8fc 	bl	800127a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	200f      	movs	r0, #15
 8001084:	f7ff fefe 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fd76 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	200002a4 	.word	0x200002a4

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200002a4 	.word	0x200002a4

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	@ (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	@ (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	@ (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	@ 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	@ 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff4c 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a2:	f7ff ff61 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff ffb1 	bl	8001214 <NVIC_EncodePriority>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff80 	bl	80011c0 <__NVIC_SetPriority>
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff54 	bl	8001184 <__NVIC_EnableIRQ>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e159      	b.n	80015b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8148 	bne.w	80015ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d005      	beq.n	8001336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	2b02      	cmp	r3, #2
 8001334:	d130      	bne.n	8001398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 0201 	and.w	r2, r3, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d017      	beq.n	80013d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a2 	beq.w	80015ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b57      	ldr	r3, [pc, #348]	@ (80015cc <HAL_GPIO_Init+0x2e8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	4a56      	ldr	r2, [pc, #344]	@ (80015cc <HAL_GPIO_Init+0x2e8>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001478:	6453      	str	r3, [r2, #68]	@ 0x44
 800147a:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <HAL_GPIO_Init+0x2e8>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001486:	4a52      	ldr	r2, [pc, #328]	@ (80015d0 <HAL_GPIO_Init+0x2ec>)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a49      	ldr	r2, [pc, #292]	@ (80015d4 <HAL_GPIO_Init+0x2f0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x202>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a48      	ldr	r2, [pc, #288]	@ (80015d8 <HAL_GPIO_Init+0x2f4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x1fe>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a47      	ldr	r2, [pc, #284]	@ (80015dc <HAL_GPIO_Init+0x2f8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x1fa>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a46      	ldr	r2, [pc, #280]	@ (80015e0 <HAL_GPIO_Init+0x2fc>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x1f6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a45      	ldr	r2, [pc, #276]	@ (80015e4 <HAL_GPIO_Init+0x300>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x1f2>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014e6:	2300      	movs	r3, #0
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f8:	4935      	ldr	r1, [pc, #212]	@ (80015d0 <HAL_GPIO_Init+0x2ec>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b38      	ldr	r3, [pc, #224]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a2f      	ldr	r2, [pc, #188]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a24      	ldr	r2, [pc, #144]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155a:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157e:	4a1a      	ldr	r2, [pc, #104]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001584:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a8:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	f67f aea2 	bls.w	8001300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3724      	adds	r7, #36	@ 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020c00 	.word	0x40020c00
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	041a      	lsls	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001630:	887a      	ldrh	r2, [r7, #2]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	041a      	lsls	r2, r3, #16
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43d9      	mvns	r1, r3
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	400b      	ands	r3, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e12b      	b.n	80018be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff faa4 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2224      	movs	r2, #36	@ 0x24
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b8:	f002 ffdc 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 80016bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a81      	ldr	r2, [pc, #516]	@ (80018c8 <HAL_I2C_Init+0x274>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d807      	bhi.n	80016d8 <HAL_I2C_Init+0x84>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4a80      	ldr	r2, [pc, #512]	@ (80018cc <HAL_I2C_Init+0x278>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	bf94      	ite	ls
 80016d0:	2301      	movls	r3, #1
 80016d2:	2300      	movhi	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	e006      	b.n	80016e6 <HAL_I2C_Init+0x92>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4a7d      	ldr	r2, [pc, #500]	@ (80018d0 <HAL_I2C_Init+0x27c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	bf94      	ite	ls
 80016e0:	2301      	movls	r3, #1
 80016e2:	2300      	movhi	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0e7      	b.n	80018be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4a78      	ldr	r2, [pc, #480]	@ (80018d4 <HAL_I2C_Init+0x280>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9b      	lsrs	r3, r3, #18
 80016f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a6a      	ldr	r2, [pc, #424]	@ (80018c8 <HAL_I2C_Init+0x274>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d802      	bhi.n	8001728 <HAL_I2C_Init+0xd4>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3301      	adds	r3, #1
 8001726:	e009      	b.n	800173c <HAL_I2C_Init+0xe8>
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	4a69      	ldr	r2, [pc, #420]	@ (80018d8 <HAL_I2C_Init+0x284>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	3301      	adds	r3, #1
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	430b      	orrs	r3, r1
 8001742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800174e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	495c      	ldr	r1, [pc, #368]	@ (80018c8 <HAL_I2C_Init+0x274>)
 8001758:	428b      	cmp	r3, r1
 800175a:	d819      	bhi.n	8001790 <HAL_I2C_Init+0x13c>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e59      	subs	r1, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fbb1 f3f3 	udiv	r3, r1, r3
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001770:	400b      	ands	r3, r1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00a      	beq.n	800178c <HAL_I2C_Init+0x138>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1e59      	subs	r1, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fbb1 f3f3 	udiv	r3, r1, r3
 8001784:	3301      	adds	r3, #1
 8001786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178a:	e051      	b.n	8001830 <HAL_I2C_Init+0x1dc>
 800178c:	2304      	movs	r3, #4
 800178e:	e04f      	b.n	8001830 <HAL_I2C_Init+0x1dc>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d111      	bne.n	80017bc <HAL_I2C_Init+0x168>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1e58      	subs	r0, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	440b      	add	r3, r1
 80017a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	e012      	b.n	80017e2 <HAL_I2C_Init+0x18e>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e58      	subs	r0, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	0099      	lsls	r1, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Init+0x196>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e022      	b.n	8001830 <HAL_I2C_Init+0x1dc>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10e      	bne.n	8001810 <HAL_I2C_Init+0x1bc>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1e58      	subs	r0, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6859      	ldr	r1, [r3, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	440b      	add	r3, r1
 8001800:	fbb0 f3f3 	udiv	r3, r0, r3
 8001804:	3301      	adds	r3, #1
 8001806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800180e:	e00f      	b.n	8001830 <HAL_I2C_Init+0x1dc>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1e58      	subs	r0, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	0099      	lsls	r1, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	fbb0 f3f3 	udiv	r3, r0, r3
 8001826:	3301      	adds	r3, #1
 8001828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	6809      	ldr	r1, [r1, #0]
 8001834:	4313      	orrs	r3, r2
 8001836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800185e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6911      	ldr	r1, [r2, #16]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68d2      	ldr	r2, [r2, #12]
 800186a:	4311      	orrs	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	430b      	orrs	r3, r1
 8001872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	000186a0 	.word	0x000186a0
 80018cc:	001e847f 	.word	0x001e847f
 80018d0:	003d08ff 	.word	0x003d08ff
 80018d4:	431bde83 	.word	0x431bde83
 80018d8:	10624dd3 	.word	0x10624dd3

080018dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	817b      	strh	r3, [r7, #10]
 80018ee:	460b      	mov	r3, r1
 80018f0:	813b      	strh	r3, [r7, #8]
 80018f2:	4613      	mov	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018f6:	f7ff fbe3 	bl	80010c0 <HAL_GetTick>
 80018fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b20      	cmp	r3, #32
 8001906:	f040 80d9 	bne.w	8001abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2319      	movs	r3, #25
 8001910:	2201      	movs	r2, #1
 8001912:	496d      	ldr	r1, [pc, #436]	@ (8001ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f971 	bl	8001bfc <I2C_WaitOnFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001920:	2302      	movs	r3, #2
 8001922:	e0cc      	b.n	8001abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_I2C_Mem_Write+0x56>
 800192e:	2302      	movs	r3, #2
 8001930:	e0c5      	b.n	8001abe <HAL_I2C_Mem_Write+0x1e2>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b01      	cmp	r3, #1
 8001946:	d007      	beq.n	8001958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2221      	movs	r2, #33	@ 0x21
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2240      	movs	r2, #64	@ 0x40
 8001974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a3a      	ldr	r2, [r7, #32]
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4a4d      	ldr	r2, [pc, #308]	@ (8001acc <HAL_I2C_Mem_Write+0x1f0>)
 8001998:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800199a:	88f8      	ldrh	r0, [r7, #6]
 800199c:	893a      	ldrh	r2, [r7, #8]
 800199e:	8979      	ldrh	r1, [r7, #10]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4603      	mov	r3, r0
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f890 	bl	8001ad0 <I2C_RequestMemoryWrite>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d052      	beq.n	8001a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e081      	b.n	8001abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fa36 	bl	8001e30 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d107      	bne.n	80019e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06b      	b.n	8001abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d11b      	bne.n	8001a5c <HAL_I2C_Mem_Write+0x180>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d017      	beq.n	8001a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1aa      	bne.n	80019ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 fa29 	bl	8001ec0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00d      	beq.n	8001a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d107      	bne.n	8001a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e016      	b.n	8001abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e000      	b.n	8001abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001abc:	2302      	movs	r3, #2
  }
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	00100002 	.word	0x00100002
 8001acc:	ffff0000 	.word	0xffff0000

08001ad0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	4608      	mov	r0, r1
 8001ada:	4611      	mov	r1, r2
 8001adc:	461a      	mov	r2, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	817b      	strh	r3, [r7, #10]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	813b      	strh	r3, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f878 	bl	8001bfc <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00d      	beq.n	8001b2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b20:	d103      	bne.n	8001b2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e05f      	b.n	8001bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b2e:	897b      	ldrh	r3, [r7, #10]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	6a3a      	ldr	r2, [r7, #32]
 8001b42:	492d      	ldr	r1, [pc, #180]	@ (8001bf8 <I2C_RequestMemoryWrite+0x128>)
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f8d3 	bl	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e04c      	b.n	8001bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6c:	6a39      	ldr	r1, [r7, #32]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f95e 	bl	8001e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00d      	beq.n	8001b96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d107      	bne.n	8001b92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e02b      	b.n	8001bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b9c:	893b      	ldrh	r3, [r7, #8]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	e021      	b.n	8001bec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ba8:	893b      	ldrh	r3, [r7, #8]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb8:	6a39      	ldr	r1, [r7, #32]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f938 	bl	8001e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00d      	beq.n	8001be2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d107      	bne.n	8001bde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e005      	b.n	8001bee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001be2:	893b      	ldrh	r3, [r7, #8]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	00010002 	.word	0x00010002

08001bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c0c:	e048      	b.n	8001ca0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d044      	beq.n	8001ca0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c16:	f7ff fa53 	bl	80010c0 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d139      	bne.n	8001ca0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d10d      	bne.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4013      	ands	r3, r2
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	e00c      	b.n	8001c6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d116      	bne.n	8001ca0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	f043 0220 	orr.w	r2, r3, #32
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e023      	b.n	8001ce8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d10d      	bne.n	8001cc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	e00c      	b.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d093      	beq.n	8001c0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cfe:	e071      	b.n	8001de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d0e:	d123      	bne.n	8001d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	f043 0204 	orr.w	r2, r3, #4
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e067      	b.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5e:	d041      	beq.n	8001de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d60:	f7ff f9ae 	bl	80010c0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d302      	bcc.n	8001d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d136      	bne.n	8001de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d10c      	bne.n	8001d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	e00b      	b.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	43da      	mvns	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4013      	ands	r3, r2
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	f043 0220 	orr.w	r2, r3, #32
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e021      	b.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10c      	bne.n	8001e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	43da      	mvns	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e00b      	b.n	8001e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4013      	ands	r3, r2
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f af6d 	bne.w	8001d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e3c:	e034      	b.n	8001ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f886 	bl	8001f50 <I2C_IsAcknowledgeFailed>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e034      	b.n	8001eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d028      	beq.n	8001ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e56:	f7ff f933 	bl	80010c0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d302      	bcc.n	8001e6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d11d      	bne.n	8001ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e76:	2b80      	cmp	r3, #128	@ 0x80
 8001e78:	d016      	beq.n	8001ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f043 0220 	orr.w	r2, r3, #32
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e007      	b.n	8001eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb2:	2b80      	cmp	r3, #128	@ 0x80
 8001eb4:	d1c3      	bne.n	8001e3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ecc:	e034      	b.n	8001f38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f83e 	bl	8001f50 <I2C_IsAcknowledgeFailed>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e034      	b.n	8001f48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d028      	beq.n	8001f38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee6:	f7ff f8eb 	bl	80010c0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d11d      	bne.n	8001f38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d016      	beq.n	8001f38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e007      	b.n	8001f48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d1c3      	bne.n	8001ece <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f66:	d11b      	bne.n	8001fa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e128      	b.n	8002214 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a90      	ldr	r2, [pc, #576]	@ (800221c <HAL_I2S_Init+0x26c>)
 8001fda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7fe fe3b 	bl	8000c58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001ff8:	f023 030f 	bic.w	r3, r3, #15
 8001ffc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2202      	movs	r2, #2
 8002004:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d060      	beq.n	80020d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002016:	2310      	movs	r3, #16
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e001      	b.n	8002020 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b20      	cmp	r3, #32
 8002026:	d802      	bhi.n	800202e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800202e:	2001      	movs	r0, #1
 8002030:	f002 fc56 	bl	80048e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002034:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800203e:	d125      	bne.n	800208c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	461a      	mov	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	3305      	adds	r3, #5
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e01f      	b.n	80020aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	fbb2 f2f3 	udiv	r2, r2, r3
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	3305      	adds	r3, #5
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e00e      	b.n	80020aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fbb2 f2f3 	udiv	r2, r2, r3
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	461a      	mov	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	3305      	adds	r3, #5
 80020a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002220 <HAL_I2S_Init+0x270>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	08db      	lsrs	r3, r3, #3
 80020b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	e003      	b.n	80020d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d902      	bls.n	80020e4 <HAL_I2S_Init+0x134>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	2bff      	cmp	r3, #255	@ 0xff
 80020e2:	d907      	bls.n	80020f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e8:	f043 0210 	orr.w	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e08f      	b.n	8002214 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	ea42 0103 	orr.w	r1, r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	430a      	orrs	r2, r1
 8002106:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002112:	f023 030f 	bic.w	r3, r3, #15
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6851      	ldr	r1, [r2, #4]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6892      	ldr	r2, [r2, #8]
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68d2      	ldr	r2, [r2, #12]
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6992      	ldr	r2, [r2, #24]
 800212a:	430a      	orrs	r2, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002136:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d161      	bne.n	8002204 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a38      	ldr	r2, [pc, #224]	@ (8002224 <HAL_I2S_Init+0x274>)
 8002144:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a37      	ldr	r2, [pc, #220]	@ (8002228 <HAL_I2S_Init+0x278>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_I2S_Init+0x1a4>
 8002150:	4b36      	ldr	r3, [pc, #216]	@ (800222c <HAL_I2S_Init+0x27c>)
 8002152:	e001      	b.n	8002158 <HAL_I2S_Init+0x1a8>
 8002154:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	4932      	ldr	r1, [pc, #200]	@ (8002228 <HAL_I2S_Init+0x278>)
 8002160:	428a      	cmp	r2, r1
 8002162:	d101      	bne.n	8002168 <HAL_I2S_Init+0x1b8>
 8002164:	4a31      	ldr	r2, [pc, #196]	@ (800222c <HAL_I2S_Init+0x27c>)
 8002166:	e001      	b.n	800216c <HAL_I2S_Init+0x1bc>
 8002168:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800216c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002170:	f023 030f 	bic.w	r3, r3, #15
 8002174:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2b      	ldr	r2, [pc, #172]	@ (8002228 <HAL_I2S_Init+0x278>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_I2S_Init+0x1d4>
 8002180:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <HAL_I2S_Init+0x27c>)
 8002182:	e001      	b.n	8002188 <HAL_I2S_Init+0x1d8>
 8002184:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002188:	2202      	movs	r2, #2
 800218a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a25      	ldr	r2, [pc, #148]	@ (8002228 <HAL_I2S_Init+0x278>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_I2S_Init+0x1ea>
 8002196:	4b25      	ldr	r3, [pc, #148]	@ (800222c <HAL_I2S_Init+0x27c>)
 8002198:	e001      	b.n	800219e <HAL_I2S_Init+0x1ee>
 800219a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021aa:	d003      	beq.n	80021b4 <HAL_I2S_Init+0x204>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80021b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e001      	b.n	80021c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021de:	4313      	orrs	r3, r2
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <HAL_I2S_Init+0x278>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_I2S_Init+0x24c>
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <HAL_I2S_Init+0x27c>)
 80021fa:	e001      	b.n	8002200 <HAL_I2S_Init+0x250>
 80021fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002200:	897a      	ldrh	r2, [r7, #10]
 8002202:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	08002327 	.word	0x08002327
 8002220:	cccccccd 	.word	0xcccccccd
 8002224:	0800243d 	.word	0x0800243d
 8002228:	40003800 	.word	0x40003800
 800222c:	40003400 	.word	0x40003400

08002230 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffb8 	bl	8002230 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022da:	b292      	uxth	r2, r2
 80022dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	1c9a      	adds	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10e      	bne.n	800231e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800230e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff93 	bl	8002244 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b04      	cmp	r3, #4
 8002340:	d13a      	bne.n	80023b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d109      	bne.n	8002360 <I2S_IRQHandler+0x3a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002356:	2b40      	cmp	r3, #64	@ 0x40
 8002358:	d102      	bne.n	8002360 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffb4 	bl	80022c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002366:	2b40      	cmp	r3, #64	@ 0x40
 8002368:	d126      	bne.n	80023b8 <I2S_IRQHandler+0x92>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b20      	cmp	r3, #32
 8002376:	d11f      	bne.n	80023b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002386:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f043 0202 	orr.w	r2, r3, #2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ff50 	bl	8002258 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d136      	bne.n	8002432 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d109      	bne.n	80023e2 <I2S_IRQHandler+0xbc>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d8:	2b80      	cmp	r3, #128	@ 0x80
 80023da:	d102      	bne.n	80023e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff45 	bl	800226c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d122      	bne.n	8002432 <I2S_IRQHandler+0x10c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d11b      	bne.n	8002432 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002408:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002424:	f043 0204 	orr.w	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff13 	bl	8002258 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a92      	ldr	r2, [pc, #584]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002456:	4b92      	ldr	r3, [pc, #584]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002458:	e001      	b.n	800245e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800245a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a8b      	ldr	r2, [pc, #556]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002474:	4b8a      	ldr	r3, [pc, #552]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002476:	e001      	b.n	800247c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002478:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002488:	d004      	beq.n	8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 8099 	bne.w	80025c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f925 	bl	80026f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d107      	bne.n	80024c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f9c8 	bl	8002858 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ce:	2b40      	cmp	r3, #64	@ 0x40
 80024d0:	d13a      	bne.n	8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d035      	beq.n	8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80024e6:	4b6e      	ldr	r3, [pc, #440]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024e8:	e001      	b.n	80024ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80024ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4969      	ldr	r1, [pc, #420]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024f6:	428b      	cmp	r3, r1
 80024f8:	d101      	bne.n	80024fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80024fa:	4b69      	ldr	r3, [pc, #420]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024fc:	e001      	b.n	8002502 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80024fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002502:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002506:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002516:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	f043 0202 	orr.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fe88 	bl	8002258 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b08      	cmp	r3, #8
 8002550:	f040 80c3 	bne.w	80026da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80bd 	beq.w	80026da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800256e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a49      	ldr	r2, [pc, #292]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800257a:	4b49      	ldr	r3, [pc, #292]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800257c:	e001      	b.n	8002582 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800257e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4944      	ldr	r1, [pc, #272]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800258a:	428b      	cmp	r3, r1
 800258c:	d101      	bne.n	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800258e:	4b44      	ldr	r3, [pc, #272]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002590:	e001      	b.n	8002596 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002592:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002596:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800259a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f043 0204 	orr.w	r2, r3, #4
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fe4a 	bl	8002258 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025c4:	e089      	b.n	80026da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d107      	bne.n	80025e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8be 	bl	800275c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f8fd 	bl	80027f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002600:	2b40      	cmp	r3, #64	@ 0x40
 8002602:	d12f      	bne.n	8002664 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02a      	beq.n	8002664 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800261c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1e      	ldr	r2, [pc, #120]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800262a:	e001      	b.n	8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800262c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4919      	ldr	r1, [pc, #100]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002638:	428b      	cmp	r3, r1
 800263a:	d101      	bne.n	8002640 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800263e:	e001      	b.n	8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002640:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002644:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002648:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	f043 0202 	orr.w	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fdfa 	bl	8002258 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b08      	cmp	r3, #8
 800266c:	d136      	bne.n	80026dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d031      	beq.n	80026dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a07      	ldr	r2, [pc, #28]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002682:	4b07      	ldr	r3, [pc, #28]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002684:	e001      	b.n	800268a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002686:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4902      	ldr	r1, [pc, #8]	@ (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002692:	428b      	cmp	r3, r1
 8002694:	d106      	bne.n	80026a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002696:	4b02      	ldr	r3, [pc, #8]	@ (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002698:	e006      	b.n	80026a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800269a:	bf00      	nop
 800269c:	40003800 	.word	0x40003800
 80026a0:	40003400 	.word	0x40003400
 80026a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026ac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fdc0 	bl	8002258 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026d8:	e000      	b.n	80026dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026da:	bf00      	nop
}
 80026dc:	bf00      	nop
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	1c99      	adds	r1, r3, #2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6251      	str	r1, [r2, #36]	@ 0x24
 800270a:	881a      	ldrh	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d113      	bne.n	8002752 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002738:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d106      	bne.n	8002752 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ffc9 	bl	80026e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	1c99      	adds	r1, r3, #2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6251      	str	r1, [r2, #36]	@ 0x24
 800276e:	8819      	ldrh	r1, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <I2SEx_TxISR_I2SExt+0x90>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <I2SEx_TxISR_I2SExt+0x22>
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <I2SEx_TxISR_I2SExt+0x94>)
 800277c:	e001      	b.n	8002782 <I2SEx_TxISR_I2SExt+0x26>
 800277e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002782:	460a      	mov	r2, r1
 8002784:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d121      	bne.n	80027e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <I2SEx_TxISR_I2SExt+0x90>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <I2SEx_TxISR_I2SExt+0x50>
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <I2SEx_TxISR_I2SExt+0x94>)
 80027aa:	e001      	b.n	80027b0 <I2SEx_TxISR_I2SExt+0x54>
 80027ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	490d      	ldr	r1, [pc, #52]	@ (80027ec <I2SEx_TxISR_I2SExt+0x90>)
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d101      	bne.n	80027c0 <I2SEx_TxISR_I2SExt+0x64>
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <I2SEx_TxISR_I2SExt+0x94>)
 80027be:	e001      	b.n	80027c4 <I2SEx_TxISR_I2SExt+0x68>
 80027c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80027c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff81 	bl	80026e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40003800 	.word	0x40003800
 80027f0:	40003400 	.word	0x40003400

080027f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68d8      	ldr	r0, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	1c99      	adds	r1, r3, #2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800280c:	b282      	uxth	r2, r0
 800280e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d113      	bne.n	8002850 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002836:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ff4a 	bl	80026e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a20      	ldr	r2, [pc, #128]	@ (80028e8 <I2SEx_RxISR_I2SExt+0x90>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <I2SEx_RxISR_I2SExt+0x16>
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <I2SEx_RxISR_I2SExt+0x94>)
 800286c:	e001      	b.n	8002872 <I2SEx_RxISR_I2SExt+0x1a>
 800286e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002872:	68d8      	ldr	r0, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	1c99      	adds	r1, r3, #2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800287e:	b282      	uxth	r2, r0
 8002880:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d121      	bne.n	80028de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <I2SEx_RxISR_I2SExt+0x90>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <I2SEx_RxISR_I2SExt+0x50>
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <I2SEx_RxISR_I2SExt+0x94>)
 80028a6:	e001      	b.n	80028ac <I2SEx_RxISR_I2SExt+0x54>
 80028a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	490d      	ldr	r1, [pc, #52]	@ (80028e8 <I2SEx_RxISR_I2SExt+0x90>)
 80028b4:	428b      	cmp	r3, r1
 80028b6:	d101      	bne.n	80028bc <I2SEx_RxISR_I2SExt+0x64>
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <I2SEx_RxISR_I2SExt+0x94>)
 80028ba:	e001      	b.n	80028c0 <I2SEx_RxISR_I2SExt+0x68>
 80028bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff03 	bl	80026e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40003800 	.word	0x40003800
 80028ec:	40003400 	.word	0x40003400

080028f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e101      	b.n	8002b06 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f008 fd5f 	bl	800b3e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2203      	movs	r2, #3
 8002926:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002930:	d102      	bne.n	8002938 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f003 f80e 	bl	800595e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7c1a      	ldrb	r2, [r3, #16]
 800294a:	f88d 2000 	strb.w	r2, [sp]
 800294e:	3304      	adds	r3, #4
 8002950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002952:	f002 feed 	bl	8005730 <USB_CoreInit>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0ce      	b.n	8002b06 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f003 f806 	bl	8005980 <USB_SetCurrentMode>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0bf      	b.n	8002b06 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	e04a      	b.n	8002a22 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3315      	adds	r3, #21
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3314      	adds	r3, #20
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	b298      	uxth	r0, r3
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	332e      	adds	r3, #46	@ 0x2e
 80029c8:	4602      	mov	r2, r0
 80029ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3318      	adds	r3, #24
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	331c      	adds	r3, #28
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	3320      	adds	r3, #32
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3324      	adds	r3, #36	@ 0x24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	791b      	ldrb	r3, [r3, #4]
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d3af      	bcc.n	800298c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e044      	b.n	8002abc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	791b      	ldrb	r3, [r3, #4]
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3b5      	bcc.n	8002a32 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7c1a      	ldrb	r2, [r3, #16]
 8002ace:	f88d 2000 	strb.w	r2, [sp]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad6:	f002 ff9f 	bl	8005a18 <USB_DevInit>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e00c      	b.n	8002b06 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 ffe9 	bl	8006ad6 <USB_DevDisconnect>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_PCD_Start+0x1c>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e022      	b.n	8002b70 <HAL_PCD_Start+0x62>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 fef0 	bl	800593c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 ff97 	bl	8006a94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b08d      	sub	sp, #52	@ 0x34
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 f855 	bl	8006c3e <USB_GetMode>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f040 848c 	bne.w	80034b4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 ffb9 	bl	8006b18 <USB_ReadInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8482 	beq.w	80034b2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 ffa6 	bl	8006b18 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d107      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f002 0202 	and.w	r2, r2, #2
 8002be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 ff94 	bl	8006b18 <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d161      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0210 	bic.w	r2, r2, #16
 8002c08:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f003 020f 	and.w	r2, r3, #15
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	0c5b      	lsrs	r3, r3, #17
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d124      	bne.n	8002c80 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d035      	beq.n	8002cae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	6a38      	ldr	r0, [r7, #32]
 8002c56:	f003 fdcb 	bl	80067f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c66:	441a      	add	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c78:	441a      	add	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	615a      	str	r2, [r3, #20]
 8002c7e:	e016      	b.n	8002cae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	0c5b      	lsrs	r3, r3, #17
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	d110      	bne.n	8002cae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c92:	2208      	movs	r2, #8
 8002c94:	4619      	mov	r1, r3
 8002c96:	6a38      	ldr	r0, [r7, #32]
 8002c98:	f003 fdaa 	bl	80067f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca8:	441a      	add	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0210 	orr.w	r2, r2, #16
 8002cbc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 ff28 	bl	8006b18 <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cd2:	f040 80a7 	bne.w	8002e24 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 ff2d 	bl	8006b3e <USB_ReadDevAllOutEpInterrupt>
 8002ce4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002ce6:	e099      	b.n	8002e1c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 808e 	beq.w	8002e10 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 ff51 	bl	8006ba6 <USB_ReadDevOutEPInterrupt>
 8002d04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2301      	movs	r3, #1
 8002d20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fea3 	bl	8003a70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d40:	461a      	mov	r2, r3
 8002d42:	2308      	movs	r3, #8
 8002d44:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 ff79 	bl	8003c40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	2310      	movs	r3, #16
 8002d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d030      	beq.n	8002dd6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7c:	2b80      	cmp	r3, #128	@ 0x80
 8002d7e:	d109      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d92:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d108      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f008 fc18 	bl	800b5f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dec:	461a      	mov	r2, r3
 8002dee:	2320      	movs	r3, #32
 8002df0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e0e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	3301      	adds	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f47f af62 	bne.w	8002ce8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 fe75 	bl	8006b18 <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e38:	f040 80db 	bne.w	8002ff2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fe96 	bl	8006b72 <USB_ReadDevAllInEpInterrupt>
 8002e46:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002e4c:	e0cd      	b.n	8002fea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80c2 	beq.w	8002fde <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 febc 	bl	8006be2 <USB_ReadDevInEPInterrupt>
 8002e6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d057      	beq.n	8002f26 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69f9      	ldr	r1, [r7, #28]
 8002e92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e96:	4013      	ands	r3, r2
 8002e98:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	799b      	ldrb	r3, [r3, #6]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d132      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3320      	adds	r3, #32
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4403      	add	r3, r0
 8002ed4:	331c      	adds	r3, #28
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4419      	add	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4403      	add	r3, r0
 8002ee8:	3320      	adds	r3, #32
 8002eea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d113      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x3a2>
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3324      	adds	r3, #36	@ 0x24
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d108      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f12:	461a      	mov	r2, r3
 8002f14:	2101      	movs	r1, #1
 8002f16:	f003 fec3 	bl	8006ca0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f008 faec 	bl	800b4fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2308      	movs	r3, #8
 8002f40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f74:	461a      	mov	r2, r3
 8002f76:	2340      	movs	r3, #64	@ 0x40
 8002f78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f86:	6a38      	ldr	r0, [r7, #32]
 8002f88:	f002 feaa 	bl	8005ce0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	3310      	adds	r3, #16
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	78db      	ldrb	r3, [r3, #3]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d108      	bne.n	8002fba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2200      	movs	r2, #0
 8002fac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f008 fb2f 	bl	800b618 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2302      	movs	r3, #2
 8002fca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fcbd 	bl	8003958 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	085b      	lsrs	r3, r3, #1
 8002fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f47f af2e 	bne.w	8002e4e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fd8e 	bl	8006b18 <USB_ReadInterrupts>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003002:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003006:	d122      	bne.n	800304e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003022:	2b01      	cmp	r3, #1
 8003024:	d108      	bne.n	8003038 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800302e:	2100      	movs	r1, #0
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fea3 	bl	8003d7c <HAL_PCDEx_LPM_Callback>
 8003036:	e002      	b.n	800303e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f008 facd 	bl	800b5d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800304c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fd60 	bl	8006b18 <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003062:	d112      	bne.n	800308a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d102      	bne.n	800307a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f008 fa89 	bl	800b58c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003088:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f003 fd42 	bl	8006b18 <USB_ReadInterrupts>
 8003094:	4603      	mov	r3, r0
 8003096:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800309e:	f040 80b7 	bne.w	8003210 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2110      	movs	r1, #16
 80030bc:	4618      	mov	r0, r3
 80030be:	f002 fe0f 	bl	8005ce0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c6:	e046      	b.n	8003156 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d4:	461a      	mov	r2, r3
 80030d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ec:	0151      	lsls	r1, r2, #5
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	440a      	add	r2, r1
 80030f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003108:	461a      	mov	r2, r3
 800310a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800310e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003120:	0151      	lsls	r1, r2, #5
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	440a      	add	r2, r1
 8003126:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800312a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800312e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003140:	0151      	lsls	r1, r2, #5
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	440a      	add	r2, r1
 8003146:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800314a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800314e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003152:	3301      	adds	r3, #1
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	791b      	ldrb	r3, [r3, #4]
 800315a:	461a      	mov	r2, r3
 800315c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315e:	4293      	cmp	r3, r2
 8003160:	d3b2      	bcc.n	80030c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003170:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003174:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7bdb      	ldrb	r3, [r3, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800318e:	f043 030b 	orr.w	r3, r3, #11
 8003192:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031a4:	f043 030b 	orr.w	r3, r3, #11
 80031a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031aa:	e015      	b.n	80031d8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031be:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80031c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031d2:	f043 030b 	orr.w	r3, r3, #11
 80031d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80031ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031fa:	461a      	mov	r2, r3
 80031fc:	f003 fd50 	bl	8006ca0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800320e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fc7f 	bl	8006b18 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003224:	d123      	bne.n	800326e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fd15 	bl	8006c5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f002 fdcc 	bl	8005dd2 <USB_GetDevSpeed>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681c      	ldr	r4, [r3, #0]
 8003246:	f001 fa09 	bl	800465c <HAL_RCC_GetHCLKFreq>
 800324a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003250:	461a      	mov	r2, r3
 8003252:	4620      	mov	r0, r4
 8003254:	f002 fad0 	bl	80057f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f008 f978 	bl	800b54e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800326c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fc50 	bl	8006b18 <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b08      	cmp	r3, #8
 8003280:	d10a      	bne.n	8003298 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f008 f955 	bl	800b532 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f002 0208 	and.w	r2, r2, #8
 8003296:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fc3b 	bl	8006b18 <USB_ReadInterrupts>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	2b80      	cmp	r3, #128	@ 0x80
 80032aa:	d123      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b8:	2301      	movs	r3, #1
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80032bc:	e014      	b.n	80032e8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fb0a 	bl	80038f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	3301      	adds	r3, #1
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	791b      	ldrb	r3, [r3, #4]
 80032ec:	461a      	mov	r2, r3
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d3e4      	bcc.n	80032be <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fc0d 	bl	8006b18 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003304:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003308:	d13c      	bne.n	8003384 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800330a:	2301      	movs	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
 800330e:	e02b      	b.n	8003368 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3318      	adds	r3, #24
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d115      	bne.n	8003362 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003336:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	da12      	bge.n	8003362 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3317      	adds	r3, #23
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 faca 	bl	80038f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	3301      	adds	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	791b      	ldrb	r3, [r3, #4]
 800336c:	461a      	mov	r2, r3
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	4293      	cmp	r3, r2
 8003372:	d3cd      	bcc.n	8003310 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003382:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fbc5 	bl	8006b18 <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003394:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003398:	d156      	bne.n	8003448 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800339a:	2301      	movs	r3, #1
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
 800339e:	e045      	b.n	800342c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d12e      	bne.n	8003426 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	da2b      	bge.n	8003426 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80033da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033de:	429a      	cmp	r2, r3
 80033e0:	d121      	bne.n	8003426 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800341e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003422:	6053      	str	r3, [r2, #4]
            break;
 8003424:	e008      	b.n	8003438 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	3301      	adds	r3, #1
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	791b      	ldrb	r3, [r3, #4]
 8003430:	461a      	mov	r2, r3
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	4293      	cmp	r3, r2
 8003436:	d3b3      	bcc.n	80033a0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f003 fb63 	bl	8006b18 <USB_ReadInterrupts>
 8003452:	4603      	mov	r3, r0
 8003454:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800345c:	d10a      	bne.n	8003474 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f008 f8ec 	bl	800b63c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f003 fb4d 	bl	8006b18 <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d115      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f008 f8dc 	bl	800b658 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	e000      	b.n	80034b4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80034b2:	bf00      	nop
    }
  }
}
 80034b4:	3734      	adds	r7, #52	@ 0x34
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}

080034ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_PCD_SetAddress+0x1a>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e012      	b.n	80034fa <HAL_PCD_SetAddress+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 faac 	bl	8006a48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	4608      	mov	r0, r1
 800350c:	4611      	mov	r1, r2
 800350e:	461a      	mov	r2, r3
 8003510:	4603      	mov	r3, r0
 8003512:	70fb      	strb	r3, [r7, #3]
 8003514:	460b      	mov	r3, r1
 8003516:	803b      	strh	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	da0f      	bge.n	8003548 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	3310      	adds	r3, #16
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	705a      	strb	r2, [r3, #1]
 8003546:	e00f      	b.n	8003568 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 020f 	and.w	r2, r3, #15
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003574:	883b      	ldrh	r3, [r7, #0]
 8003576:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	78ba      	ldrb	r2, [r7, #2]
 8003582:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003596:	78bb      	ldrb	r3, [r7, #2]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d102      	bne.n	80035a2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_PCD_EP_Open+0xae>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e00e      	b.n	80035ce <HAL_PCD_EP_Open+0xcc>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	4618      	mov	r0, r3
 80035c0:	f002 fc2c 	bl	8005e1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80035cc:	7afb      	ldrb	r3, [r7, #11]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da0f      	bge.n	800360a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 020f 	and.w	r2, r3, #15
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	3310      	adds	r3, #16
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	3304      	adds	r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	705a      	strb	r2, [r3, #1]
 8003608:	e00f      	b.n	800362a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	f003 020f 	and.w	r2, r3, #15
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_PCD_EP_Close+0x6e>
 8003640:	2302      	movs	r3, #2
 8003642:	e00e      	b.n	8003662 <HAL_PCD_EP_Close+0x8c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68f9      	ldr	r1, [r7, #12]
 8003652:	4618      	mov	r0, r3
 8003654:	f002 fc6a 	bl	8005f2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	460b      	mov	r3, r1
 8003678:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800367a:	7afb      	ldrb	r3, [r7, #11]
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	3304      	adds	r3, #4
 8003692:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2200      	movs	r2, #0
 80036a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ac:	7afb      	ldrb	r3, [r7, #11]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	799b      	ldrb	r3, [r3, #6]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	799b      	ldrb	r3, [r3, #6]
 80036ce:	461a      	mov	r2, r3
 80036d0:	6979      	ldr	r1, [r7, #20]
 80036d2:	f002 fd07 	bl	80060e4 <USB_EPStartXfer>

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	f003 020f 	and.w	r2, r3, #15
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	460b      	mov	r3, r1
 800371e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003720:	7afb      	ldrb	r3, [r7, #11]
 8003722:	f003 020f 	and.w	r2, r3, #15
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	3310      	adds	r3, #16
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	3304      	adds	r3, #4
 8003736:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2200      	movs	r2, #0
 8003748:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2201      	movs	r2, #1
 800374e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003750:	7afb      	ldrb	r3, [r7, #11]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	b2da      	uxtb	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	799b      	ldrb	r3, [r3, #6]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d102      	bne.n	800376a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	799b      	ldrb	r3, [r3, #6]
 8003772:	461a      	mov	r2, r3
 8003774:	6979      	ldr	r1, [r7, #20]
 8003776:	f002 fcb5 	bl	80060e4 <USB_EPStartXfer>

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	7912      	ldrb	r2, [r2, #4]
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e04f      	b.n	8003842 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	da0f      	bge.n	80037ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 020f 	and.w	r2, r3, #15
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	3310      	adds	r3, #16
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	3304      	adds	r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	705a      	strb	r2, [r3, #1]
 80037c8:	e00d      	b.n	80037e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	3304      	adds	r3, #4
 80037de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_PCD_EP_SetStall+0x82>
 8003802:	2302      	movs	r3, #2
 8003804:	e01d      	b.n	8003842 <HAL_PCD_EP_SetStall+0xbe>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	4618      	mov	r0, r3
 8003816:	f003 f843 	bl	80068a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7999      	ldrb	r1, [r3, #6]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003832:	461a      	mov	r2, r3
 8003834:	f003 fa34 	bl	8006ca0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	7912      	ldrb	r2, [r2, #4]
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e042      	b.n	80038ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da0f      	bge.n	8003890 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	3310      	adds	r3, #16
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	705a      	strb	r2, [r3, #1]
 800388e:	e00f      	b.n	80038b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_PCD_EP_ClrStall+0x86>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e00e      	b.n	80038ee <HAL_PCD_EP_ClrStall+0xa4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68f9      	ldr	r1, [r7, #12]
 80038de:	4618      	mov	r0, r3
 80038e0:	f003 f84c 	bl	800697c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003906:	2b00      	cmp	r3, #0
 8003908:	da0c      	bge.n	8003924 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 020f 	and.w	r2, r3, #15
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	3310      	adds	r3, #16
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	3304      	adds	r3, #4
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e00c      	b.n	800393e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	f003 020f 	and.w	r2, r3, #15
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	3304      	adds	r3, #4
 800393c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	4618      	mov	r0, r3
 8003946:	f002 fe6b 	bl	8006620 <USB_EPStopXfer>
 800394a:	4603      	mov	r3, r0
 800394c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800394e:	7afb      	ldrb	r3, [r7, #11]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	@ 0x28
 800395c:	af02      	add	r7, sp, #8
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	3310      	adds	r3, #16
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d901      	bls.n	8003990 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e06b      	b.n	8003a68 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d902      	bls.n	80039ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3303      	adds	r3, #3
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039b4:	e02a      	b.n	8003a0c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d902      	bls.n	80039d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3303      	adds	r3, #3
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	68d9      	ldr	r1, [r3, #12]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4603      	mov	r3, r0
 80039ee:	6978      	ldr	r0, [r7, #20]
 80039f0:	f002 fec0 	bl	8006774 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	441a      	add	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	441a      	add	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d809      	bhi.n	8003a36 <PCD_WriteEmptyTxFifo+0xde>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d203      	bcs.n	8003a36 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1bf      	bne.n	80039b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d811      	bhi.n	8003a66 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	2201      	movs	r2, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	6939      	ldr	r1, [r7, #16]
 8003a5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a62:	4013      	ands	r3, r2
 8003a64:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	333c      	adds	r3, #60	@ 0x3c
 8003a88:	3304      	adds	r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	799b      	ldrb	r3, [r3, #6]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d17b      	bne.n	8003b9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a61      	ldr	r2, [pc, #388]	@ (8003c38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	f240 80b9 	bls.w	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80b3 	beq.w	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ad8:	6093      	str	r3, [r2, #8]
 8003ada:	e0a7      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	2320      	movs	r3, #32
 8003af6:	6093      	str	r3, [r2, #8]
 8003af8:	e098      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 8093 	bne.w	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4a4b      	ldr	r2, [pc, #300]	@ (8003c38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d90f      	bls.n	8003b2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	e07e      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	3304      	adds	r3, #4
 8003b42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d114      	bne.n	8003b90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	f003 f890 	bl	8006ca0 <USB_EP0_OutStart>
 8003b80:	e006      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f007 fc96 	bl	800b4c8 <HAL_PCD_DataOutStageCallback>
 8003b9c:	e046      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	4a26      	ldr	r2, [pc, #152]	@ (8003c3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d124      	bne.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc2:	6093      	str	r3, [r2, #8]
 8003bc4:	e032      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2320      	movs	r3, #32
 8003be0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f007 fc6d 	bl	800b4c8 <HAL_PCD_DataOutStageCallback>
 8003bee:	e01d      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d114      	bne.n	8003c20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d108      	bne.n	8003c20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	f003 f840 	bl	8006ca0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f007 fc4e 	bl	800b4c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	4f54300a 	.word	0x4f54300a
 8003c3c:	4f54310a 	.word	0x4f54310a

08003c40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	333c      	adds	r3, #60	@ 0x3c
 8003c58:	3304      	adds	r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d90e      	bls.n	8003c94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f007 fc05 	bl	800b4a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d90c      	bls.n	8003cbc <PCD_EP_OutSetupPacket_int+0x7c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	799b      	ldrb	r3, [r3, #6]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	f002 fff2 	bl	8006ca0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	4f54300a 	.word	0x4f54300a

08003ccc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d107      	bne.n	8003cfa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cea:	883b      	ldrh	r3, [r7, #0]
 8003cec:	0419      	lsls	r1, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cf8:	e028      	b.n	8003d4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4413      	add	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e00d      	b.n	8003d2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	3340      	adds	r3, #64	@ 0x40
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0c1b      	lsrs	r3, r3, #16
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	4413      	add	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	3301      	adds	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d3ec      	bcc.n	8003d0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d34:	883b      	ldrh	r3, [r7, #0]
 8003d36:	0418      	lsls	r0, r3, #16
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6819      	ldr	r1, [r3, #0]
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	4302      	orrs	r2, r0
 8003d44:	3340      	adds	r3, #64	@ 0x40
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e267      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d075      	beq.n	8003e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003db2:	4b88      	ldr	r3, [pc, #544]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d00c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dbe:	4b85      	ldr	r3, [pc, #532]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d112      	bne.n	8003df0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dca:	4b82      	ldr	r3, [pc, #520]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd6:	d10b      	bne.n	8003df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05b      	beq.n	8003e9c <HAL_RCC_OscConfig+0x108>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d157      	bne.n	8003e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e242      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x74>
 8003dfa:	4b76      	ldr	r3, [pc, #472]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a75      	ldr	r2, [pc, #468]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xb0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x98>
 8003e12:	4b70      	ldr	r3, [pc, #448]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6f      	ldr	r2, [pc, #444]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6c      	ldr	r2, [pc, #432]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xb0>
 8003e2c:	4b69      	ldr	r3, [pc, #420]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a68      	ldr	r2, [pc, #416]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b66      	ldr	r3, [pc, #408]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a65      	ldr	r2, [pc, #404]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fd f938 	bl	80010c0 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fd f934 	bl	80010c0 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	@ 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e207      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xc0>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fd f924 	bl	80010c0 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fd f920 	bl	80010c0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	@ 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1f3      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	4b51      	ldr	r3, [pc, #324]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0xe8>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d063      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb6:	4b47      	ldr	r3, [pc, #284]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d11c      	bne.n	8003efc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec2:	4b44      	ldr	r3, [pc, #272]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	4b41      	ldr	r3, [pc, #260]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x152>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e1c7      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4937      	ldr	r1, [pc, #220]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	e03a      	b.n	8003f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b34      	ldr	r3, [pc, #208]	@ (8003fd8 <HAL_RCC_OscConfig+0x244>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7fd f8d9 	bl	80010c0 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f12:	f7fd f8d5 	bl	80010c0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e1a8      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f24:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b28      	ldr	r3, [pc, #160]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4925      	ldr	r1, [pc, #148]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	e015      	b.n	8003f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f46:	4b24      	ldr	r3, [pc, #144]	@ (8003fd8 <HAL_RCC_OscConfig+0x244>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd f8b8 	bl	80010c0 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f54:	f7fd f8b4 	bl	80010c0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e187      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f66:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d036      	beq.n	8003fec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f86:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <HAL_RCC_OscConfig+0x248>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fd f898 	bl	80010c0 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fd f894 	bl	80010c0 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e167      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x200>
 8003fb2:	e01b      	b.n	8003fec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb4:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <HAL_RCC_OscConfig+0x248>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fba:	f7fd f881 	bl	80010c0 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc0:	e00e      	b.n	8003fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc2:	f7fd f87d 	bl	80010c0 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d907      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e150      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	42470000 	.word	0x42470000
 8003fdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	4b88      	ldr	r3, [pc, #544]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ea      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8097 	beq.w	8004128 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffe:	4b81      	ldr	r3, [pc, #516]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10f      	bne.n	800402a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	4b7d      	ldr	r3, [pc, #500]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	4a7c      	ldr	r2, [pc, #496]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	@ 0x40
 800401a:	4b7a      	ldr	r3, [pc, #488]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b77      	ldr	r3, [pc, #476]	@ (8004208 <HAL_RCC_OscConfig+0x474>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d118      	bne.n	8004068 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004036:	4b74      	ldr	r3, [pc, #464]	@ (8004208 <HAL_RCC_OscConfig+0x474>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a73      	ldr	r2, [pc, #460]	@ (8004208 <HAL_RCC_OscConfig+0x474>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004042:	f7fd f83d 	bl	80010c0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fd f839 	bl	80010c0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e10c      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405c:	4b6a      	ldr	r3, [pc, #424]	@ (8004208 <HAL_RCC_OscConfig+0x474>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x2ea>
 8004070:	4b64      	ldr	r3, [pc, #400]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004074:	4a63      	ldr	r2, [pc, #396]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	@ 0x70
 800407c:	e01c      	b.n	80040b8 <HAL_RCC_OscConfig+0x324>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b05      	cmp	r3, #5
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x30c>
 8004086:	4b5f      	ldr	r3, [pc, #380]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	4a5e      	ldr	r2, [pc, #376]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 800408c:	f043 0304 	orr.w	r3, r3, #4
 8004090:	6713      	str	r3, [r2, #112]	@ 0x70
 8004092:	4b5c      	ldr	r3, [pc, #368]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	4a5b      	ldr	r2, [pc, #364]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6713      	str	r3, [r2, #112]	@ 0x70
 800409e:	e00b      	b.n	80040b8 <HAL_RCC_OscConfig+0x324>
 80040a0:	4b58      	ldr	r3, [pc, #352]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a4:	4a57      	ldr	r2, [pc, #348]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ac:	4b55      	ldr	r3, [pc, #340]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b0:	4a54      	ldr	r2, [pc, #336]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 80040b2:	f023 0304 	bic.w	r3, r3, #4
 80040b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fc fffe 	bl	80010c0 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c8:	f7fc fffa 	bl	80010c0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0cb      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040de:	4b49      	ldr	r3, [pc, #292]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0ee      	beq.n	80040c8 <HAL_RCC_OscConfig+0x334>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ec:	f7fc ffe8 	bl	80010c0 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fc ffe4 	bl	80010c0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0b5      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410a:	4b3e      	ldr	r3, [pc, #248]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1ee      	bne.n	80040f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411c:	4b39      	ldr	r3, [pc, #228]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	4a38      	ldr	r2, [pc, #224]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004126:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80a1 	beq.w	8004274 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004132:	4b34      	ldr	r3, [pc, #208]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b08      	cmp	r3, #8
 800413c:	d05c      	beq.n	80041f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d141      	bne.n	80041ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004146:	4b31      	ldr	r3, [pc, #196]	@ (800420c <HAL_RCC_OscConfig+0x478>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fc ffb8 	bl	80010c0 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004154:	f7fc ffb4 	bl	80010c0 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e087      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	4b27      	ldr	r3, [pc, #156]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	019b      	lsls	r3, r3, #6
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	3b01      	subs	r3, #1
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	491b      	ldr	r1, [pc, #108]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800419c:	4b1b      	ldr	r3, [pc, #108]	@ (800420c <HAL_RCC_OscConfig+0x478>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a2:	f7fc ff8d 	bl	80010c0 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041aa:	f7fc ff89 	bl	80010c0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e05c      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x416>
 80041c8:	e054      	b.n	8004274 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ca:	4b10      	ldr	r3, [pc, #64]	@ (800420c <HAL_RCC_OscConfig+0x478>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fc ff76 	bl	80010c0 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fc ff72 	bl	80010c0 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e045      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <HAL_RCC_OscConfig+0x470>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x444>
 80041f6:	e03d      	b.n	8004274 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e038      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
 8004204:	40023800 	.word	0x40023800
 8004208:	40007000 	.word	0x40007000
 800420c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004210:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <HAL_RCC_OscConfig+0x4ec>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d028      	beq.n	8004270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d121      	bne.n	8004270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d11a      	bne.n	8004270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004240:	4013      	ands	r3, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004248:	4293      	cmp	r3, r2
 800424a:	d111      	bne.n	8004270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	3b01      	subs	r3, #1
 800425a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d107      	bne.n	8004270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800

08004284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0cc      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004298:	4b68      	ldr	r3, [pc, #416]	@ (800443c <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d90c      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b65      	ldr	r3, [pc, #404]	@ (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b63      	ldr	r3, [pc, #396]	@ (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0b8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d8:	4b59      	ldr	r3, [pc, #356]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a58      	ldr	r2, [pc, #352]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f0:	4b53      	ldr	r3, [pc, #332]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a52      	ldr	r2, [pc, #328]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b50      	ldr	r3, [pc, #320]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	494d      	ldr	r1, [pc, #308]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d044      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b47      	ldr	r3, [pc, #284]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d119      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d003      	beq.n	8004342 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	2b03      	cmp	r3, #3
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	4b3f      	ldr	r3, [pc, #252]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e06f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004352:	4b3b      	ldr	r3, [pc, #236]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e067      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b37      	ldr	r3, [pc, #220]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4934      	ldr	r1, [pc, #208]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004374:	f7fc fea4 	bl	80010c0 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fc fea0 	bl	80010c0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e04f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b2b      	ldr	r3, [pc, #172]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a4:	4b25      	ldr	r3, [pc, #148]	@ (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d20c      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b22      	ldr	r3, [pc, #136]	@ (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b20      	ldr	r3, [pc, #128]	@ (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e032      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4916      	ldr	r1, [pc, #88]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043f6:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	490e      	ldr	r1, [pc, #56]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800440a:	f000 f821 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800440e:	4602      	mov	r2, r0
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	490a      	ldr	r1, [pc, #40]	@ (8004444 <HAL_RCC_ClockConfig+0x1c0>)
 800441c:	5ccb      	ldrb	r3, [r1, r3]
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	4a09      	ldr	r2, [pc, #36]	@ (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004426:	4b09      	ldr	r3, [pc, #36]	@ (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fc fd2a 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023c00 	.word	0x40023c00
 8004440:	40023800 	.word	0x40023800
 8004444:	0800bb04 	.word	0x0800bb04
 8004448:	20000000 	.word	0x20000000
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004454:	b094      	sub	sp, #80	@ 0x50
 8004456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004468:	4b79      	ldr	r3, [pc, #484]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d00d      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x40>
 8004474:	2b08      	cmp	r3, #8
 8004476:	f200 80e1 	bhi.w	800463c <HAL_RCC_GetSysClockFreq+0x1ec>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x34>
 800447e:	2b04      	cmp	r3, #4
 8004480:	d003      	beq.n	800448a <HAL_RCC_GetSysClockFreq+0x3a>
 8004482:	e0db      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004484:	4b73      	ldr	r3, [pc, #460]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x204>)
 8004486:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004488:	e0db      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800448a:	4b73      	ldr	r3, [pc, #460]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x208>)
 800448c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800448e:	e0d8      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004490:	4b6f      	ldr	r3, [pc, #444]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004498:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800449a:	4b6d      	ldr	r3, [pc, #436]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d063      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	099b      	lsrs	r3, r3, #6
 80044ac:	2200      	movs	r2, #0
 80044ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ba:	2300      	movs	r3, #0
 80044bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044c2:	4622      	mov	r2, r4
 80044c4:	462b      	mov	r3, r5
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	0159      	lsls	r1, r3, #5
 80044d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d4:	0150      	lsls	r0, r2, #5
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4621      	mov	r1, r4
 80044dc:	1a51      	subs	r1, r2, r1
 80044de:	6139      	str	r1, [r7, #16]
 80044e0:	4629      	mov	r1, r5
 80044e2:	eb63 0301 	sbc.w	r3, r3, r1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f4:	4659      	mov	r1, fp
 80044f6:	018b      	lsls	r3, r1, #6
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044fe:	4651      	mov	r1, sl
 8004500:	018a      	lsls	r2, r1, #6
 8004502:	4651      	mov	r1, sl
 8004504:	ebb2 0801 	subs.w	r8, r2, r1
 8004508:	4659      	mov	r1, fp
 800450a:	eb63 0901 	sbc.w	r9, r3, r1
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800451a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800451e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004522:	4690      	mov	r8, r2
 8004524:	4699      	mov	r9, r3
 8004526:	4623      	mov	r3, r4
 8004528:	eb18 0303 	adds.w	r3, r8, r3
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	462b      	mov	r3, r5
 8004530:	eb49 0303 	adc.w	r3, r9, r3
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004542:	4629      	mov	r1, r5
 8004544:	024b      	lsls	r3, r1, #9
 8004546:	4621      	mov	r1, r4
 8004548:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800454c:	4621      	mov	r1, r4
 800454e:	024a      	lsls	r2, r1, #9
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004556:	2200      	movs	r2, #0
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800455a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800455c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004560:	f7fb fe3e 	bl	80001e0 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4613      	mov	r3, r2
 800456a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800456c:	e058      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456e:	4b38      	ldr	r3, [pc, #224]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	2200      	movs	r2, #0
 8004576:	4618      	mov	r0, r3
 8004578:	4611      	mov	r1, r2
 800457a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	2300      	movs	r3, #0
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
 8004584:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004588:	4642      	mov	r2, r8
 800458a:	464b      	mov	r3, r9
 800458c:	f04f 0000 	mov.w	r0, #0
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	0159      	lsls	r1, r3, #5
 8004596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800459a:	0150      	lsls	r0, r2, #5
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4641      	mov	r1, r8
 80045a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80045a6:	4649      	mov	r1, r9
 80045a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045c0:	ebb2 040a 	subs.w	r4, r2, sl
 80045c4:	eb63 050b 	sbc.w	r5, r3, fp
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	00eb      	lsls	r3, r5, #3
 80045d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d6:	00e2      	lsls	r2, r4, #3
 80045d8:	4614      	mov	r4, r2
 80045da:	461d      	mov	r5, r3
 80045dc:	4643      	mov	r3, r8
 80045de:	18e3      	adds	r3, r4, r3
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	464b      	mov	r3, r9
 80045e4:	eb45 0303 	adc.w	r3, r5, r3
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045f6:	4629      	mov	r1, r5
 80045f8:	028b      	lsls	r3, r1, #10
 80045fa:	4621      	mov	r1, r4
 80045fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004600:	4621      	mov	r1, r4
 8004602:	028a      	lsls	r2, r1, #10
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460a:	2200      	movs	r2, #0
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	61fa      	str	r2, [r7, #28]
 8004610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004614:	f7fb fde4 	bl	80001e0 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4613      	mov	r3, r2
 800461e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800463a:	e002      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x204>)
 800463e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004644:	4618      	mov	r0, r3
 8004646:	3750      	adds	r7, #80	@ 0x50
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	00f42400 	.word	0x00f42400
 8004658:	007a1200 	.word	0x007a1200

0800465c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004660:	4b03      	ldr	r3, [pc, #12]	@ (8004670 <HAL_RCC_GetHCLKFreq+0x14>)
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000000 	.word	0x20000000

08004674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004678:	f7ff fff0 	bl	800465c <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	0a9b      	lsrs	r3, r3, #10
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4903      	ldr	r1, [pc, #12]	@ (8004698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40023800 	.word	0x40023800
 8004698:	0800bb14 	.word	0x0800bb14

0800469c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	220f      	movs	r2, #15
 80046aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046ac:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <HAL_RCC_GetClockConfig+0x5c>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0203 	and.w	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046b8:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <HAL_RCC_GetClockConfig+0x5c>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046c4:	4b0c      	ldr	r3, [pc, #48]	@ (80046f8 <HAL_RCC_GetClockConfig+0x5c>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <HAL_RCC_GetClockConfig+0x5c>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	08db      	lsrs	r3, r3, #3
 80046d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046de:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <HAL_RCC_GetClockConfig+0x60>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0207 	and.w	r2, r3, #7
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	601a      	str	r2, [r3, #0]
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40023c00 	.word	0x40023c00

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004724:	2b00      	cmp	r3, #0
 8004726:	d038      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004728:	4b68      	ldr	r3, [pc, #416]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800472e:	f7fc fcc7 	bl	80010c0 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004736:	f7fc fcc3 	bl	80010c0 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0bd      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004748:	4b61      	ldr	r3, [pc, #388]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	071b      	lsls	r3, r3, #28
 8004766:	495a      	ldr	r1, [pc, #360]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800476e:	4b57      	ldr	r3, [pc, #348]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004770:	2201      	movs	r2, #1
 8004772:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004774:	f7fc fca4 	bl	80010c0 <HAL_GetTick>
 8004778:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800477a:	e008      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800477c:	f7fc fca0 	bl	80010c0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e09a      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800478e:	4b50      	ldr	r3, [pc, #320]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8083 	beq.w	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	4b48      	ldr	r3, [pc, #288]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	4a47      	ldr	r2, [pc, #284]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80047b8:	4b45      	ldr	r3, [pc, #276]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047c4:	4b43      	ldr	r3, [pc, #268]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a42      	ldr	r2, [pc, #264]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047d0:	f7fc fc76 	bl	80010c0 <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d8:	f7fc fc72 	bl	80010c0 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e06c      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80047ea:	4b3a      	ldr	r3, [pc, #232]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047f6:	4b36      	ldr	r3, [pc, #216]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fe:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d02f      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	429a      	cmp	r2, r3
 8004812:	d028      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004814:	4b2e      	ldr	r3, [pc, #184]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800481e:	4b2e      	ldr	r3, [pc, #184]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004824:	4b2c      	ldr	r3, [pc, #176]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800482a:	4a29      	ldr	r2, [pc, #164]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004830:	4b27      	ldr	r3, [pc, #156]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	d114      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800483c:	f7fc fc40 	bl	80010c0 <HAL_GetTick>
 8004840:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	e00a      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fc fc3c 	bl	80010c0 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e034      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	4b1d      	ldr	r3, [pc, #116]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ee      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800486e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004872:	d10d      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004874:	4b16      	ldr	r3, [pc, #88]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004888:	4911      	ldr	r1, [pc, #68]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
 800488e:	e005      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004890:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a0e      	ldr	r2, [pc, #56]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004896:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800489a:	6093      	str	r3, [r2, #8]
 800489c:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a8:	4909      	ldr	r1, [pc, #36]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	7d1a      	ldrb	r2, [r3, #20]
 80048be:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80048c0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	42470068 	.word	0x42470068
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40007000 	.word	0x40007000
 80048d8:	42470e40 	.word	0x42470e40
 80048dc:	424711e0 	.word	0x424711e0

080048e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d141      	bne.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048fe:	4b25      	ldr	r3, [pc, #148]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004914:	d131      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004916:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004918:	617b      	str	r3, [r7, #20]
          break;
 800491a:	e031      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800491c:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004928:	d109      	bne.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800492a:	4b1a      	ldr	r3, [pc, #104]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004934:	4a19      	ldr	r2, [pc, #100]	@ (800499c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800493e:	4b15      	ldr	r3, [pc, #84]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004948:	4a15      	ldr	r2, [pc, #84]	@ (80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004950:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004956:	099b      	lsrs	r3, r3, #6
 8004958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496a:	0f1b      	lsrs	r3, r3, #28
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	617b      	str	r3, [r7, #20]
          break;
 8004978:	e002      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
          break;
 800497e:	bf00      	nop
        }
      }
      break;
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004982:	bf00      	nop
    }
  }
  return frequency;
 8004984:	697b      	ldr	r3, [r7, #20]
}
 8004986:	4618      	mov	r0, r3
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800
 8004998:	00bb8000 	.word	0x00bb8000
 800499c:	007a1200 	.word	0x007a1200
 80049a0:	00f42400 	.word	0x00f42400

080049a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e07b      	b.n	8004aae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049c6:	d009      	beq.n	80049dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	61da      	str	r2, [r3, #28]
 80049ce:	e005      	b.n	80049dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc f9fc 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a60:	ea42 0103 	orr.w	r1, r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0104 	and.w	r1, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	f003 0210 	and.w	r2, r3, #16
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b088      	sub	sp, #32
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ac6:	f7fc fafb 	bl	80010c0 <HAL_GetTick>
 8004aca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
 8004ade:	e12a      	b.n	8004d36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_SPI_Transmit+0x36>
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e122      	b.n	8004d36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_SPI_Transmit+0x48>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e11b      	b.n	8004d36 <HAL_SPI_Transmit+0x280>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b4c:	d10f      	bne.n	8004b6e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b78:	2b40      	cmp	r3, #64	@ 0x40
 8004b7a:	d007      	beq.n	8004b8c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b94:	d152      	bne.n	8004c3c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit+0xee>
 8004b9e:	8b7b      	ldrh	r3, [r7, #26]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d145      	bne.n	8004c30 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	881a      	ldrh	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	1c9a      	adds	r2, r3, #2
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bc8:	e032      	b.n	8004c30 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d112      	bne.n	8004bfe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bdc:	881a      	ldrh	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004bfc:	e018      	b.n	8004c30 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfe:	f7fc fa5f 	bl	80010c0 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d803      	bhi.n	8004c16 <HAL_SPI_Transmit+0x160>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d102      	bne.n	8004c1c <HAL_SPI_Transmit+0x166>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e082      	b.n	8004d36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1c7      	bne.n	8004bca <HAL_SPI_Transmit+0x114>
 8004c3a:	e053      	b.n	8004ce4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <HAL_SPI_Transmit+0x194>
 8004c44:	8b7b      	ldrh	r3, [r7, #26]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d147      	bne.n	8004cda <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c70:	e033      	b.n	8004cda <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d113      	bne.n	8004ca8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ca6:	e018      	b.n	8004cda <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca8:	f7fc fa0a 	bl	80010c0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_Transmit+0x20a>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Transmit+0x210>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e02d      	b.n	8004d36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1c6      	bne.n	8004c72 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fa59 	bl	80051a0 <SPI_EndRxTxTransaction>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b08a      	sub	sp, #40	@ 0x28
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
 8004d4a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d50:	f7fc f9b6 	bl	80010c0 <HAL_GetTick>
 8004d54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d64:	887b      	ldrh	r3, [r7, #2]
 8004d66:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d68:	7ffb      	ldrb	r3, [r7, #31]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d00c      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x4a>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d74:	d106      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x46>
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d001      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004d84:	2302      	movs	r3, #2
 8004d86:	e17f      	b.n	8005088 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x5c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x5c>
 8004d94:	887b      	ldrh	r3, [r7, #2]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e174      	b.n	8005088 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_SPI_TransmitReceive+0x6e>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e16d      	b.n	8005088 <HAL_SPI_TransmitReceive+0x34a>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d003      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2205      	movs	r2, #5
 8004dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	887a      	ldrh	r2, [r7, #2]
 8004dde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	887a      	ldrh	r2, [r7, #2]
 8004dea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e08:	2b40      	cmp	r3, #64	@ 0x40
 8004e0a:	d007      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e24:	d17e      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <HAL_SPI_TransmitReceive+0xf6>
 8004e2e:	8afb      	ldrh	r3, [r7, #22]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d16c      	bne.n	8004f0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	881a      	ldrh	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e58:	e059      	b.n	8004f0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d11b      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x162>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d016      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x162>
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d113      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	881a      	ldrh	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e88:	1c9a      	adds	r2, r3, #2
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d119      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x1a4>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d014      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ee2:	f7fc f8ed 	bl	80010c0 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d80d      	bhi.n	8004f0e <HAL_SPI_TransmitReceive+0x1d0>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d009      	beq.n	8004f0e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0bc      	b.n	8005088 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1a0      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x11c>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d19b      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x11c>
 8004f22:	e082      	b.n	800502a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x1f4>
 8004f2c:	8afb      	ldrh	r3, [r7, #22]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d171      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	7812      	ldrb	r2, [r2, #0]
 8004f3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f58:	e05d      	b.n	8005016 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11c      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x264>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d017      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x264>
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d114      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	7812      	ldrb	r2, [r2, #0]
 8004f84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d119      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x2a6>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fe4:	f7fc f86c 	bl	80010c0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d803      	bhi.n	8004ffc <HAL_SPI_TransmitReceive+0x2be>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d102      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x2c4>
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e038      	b.n	8005088 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d19c      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x21c>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d197      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f8b6 	bl	80051a0 <SPI_EndRxTxTransaction>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e01d      	b.n	8005088 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005086:	2300      	movs	r3, #0
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3728      	adds	r7, #40	@ 0x28
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050a0:	f7fc f80e 	bl	80010c0 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	4413      	add	r3, r2
 80050ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050b0:	f7fc f806 	bl	80010c0 <HAL_GetTick>
 80050b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050b6:	4b39      	ldr	r3, [pc, #228]	@ (800519c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	015b      	lsls	r3, r3, #5
 80050bc:	0d1b      	lsrs	r3, r3, #20
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	e054      	b.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d050      	beq.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050d0:	f7fb fff6 	bl	80010c0 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d902      	bls.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d13d      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050fe:	d111      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005108:	d004      	beq.n	8005114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005112:	d107      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800512c:	d10f      	bne.n	800514e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800514c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e017      	b.n	8005192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3b01      	subs	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d19b      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000000 	.word	0x20000000

080051a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2201      	movs	r2, #1
 80051b4:	2102      	movs	r1, #2
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff ff6a 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e032      	b.n	8005238 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <SPI_EndRxTxTransaction+0xa0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005244 <SPI_EndRxTxTransaction+0xa4>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	0d5b      	lsrs	r3, r3, #21
 80051de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f0:	d112      	bne.n	8005218 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2200      	movs	r2, #0
 80051fa:	2180      	movs	r1, #128	@ 0x80
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff ff47 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d016      	beq.n	8005236 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	f043 0220 	orr.w	r2, r3, #32
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e00f      	b.n	8005238 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	3b01      	subs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522e:	2b80      	cmp	r3, #128	@ 0x80
 8005230:	d0f2      	beq.n	8005218 <SPI_EndRxTxTransaction+0x78>
 8005232:	e000      	b.n	8005236 <SPI_EndRxTxTransaction+0x96>
        break;
 8005234:	bf00      	nop
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000000 	.word	0x20000000
 8005244:	165e9f81 	.word	0x165e9f81

08005248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e041      	b.n	80052de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f839 	bl	80052e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 f9b2 	bl	80055f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	d001      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e044      	b.n	800539e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1e      	ldr	r2, [pc, #120]	@ (80053ac <HAL_TIM_Base_Start_IT+0xb0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d018      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x6c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533e:	d013      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x6c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1a      	ldr	r2, [pc, #104]	@ (80053b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x6c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a19      	ldr	r2, [pc, #100]	@ (80053b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x6c>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x6c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <HAL_TIM_Base_Start_IT+0xc0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d111      	bne.n	800538c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b06      	cmp	r3, #6
 8005378:	d010      	beq.n	800539c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538a:	e007      	b.n	800539c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40000400 	.word	0x40000400
 80053b4:	40000800 	.word	0x40000800
 80053b8:	40000c00 	.word	0x40000c00
 80053bc:	40014000 	.word	0x40014000

080053c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d020      	beq.n	8005424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01b      	beq.n	8005424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0202 	mvn.w	r2, #2
 80053f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f8d2 	bl	80055b4 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8c4 	bl	80055a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f8d5 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d020      	beq.n	8005470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01b      	beq.n	8005470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0204 	mvn.w	r2, #4
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f8ac 	bl	80055b4 <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f89e 	bl	80055a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f8af 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d020      	beq.n	80054bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01b      	beq.n	80054bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0208 	mvn.w	r2, #8
 800548c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2204      	movs	r2, #4
 8005492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f886 	bl	80055b4 <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f878 	bl	80055a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f889 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0210 	mvn.w	r2, #16
 80054d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2208      	movs	r2, #8
 80054de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f860 	bl	80055b4 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f852 	bl	80055a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f863 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0201 	mvn.w	r2, #1
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fb0e 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8e6 	bl	800571c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f834 	bl	80055dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0220 	mvn.w	r2, #32
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8b8 	bl	8005708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3a      	ldr	r2, [pc, #232]	@ (80056ec <TIM_Base_SetConfig+0xfc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00f      	beq.n	8005628 <TIM_Base_SetConfig+0x38>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560e:	d00b      	beq.n	8005628 <TIM_Base_SetConfig+0x38>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a37      	ldr	r2, [pc, #220]	@ (80056f0 <TIM_Base_SetConfig+0x100>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_Base_SetConfig+0x38>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a36      	ldr	r2, [pc, #216]	@ (80056f4 <TIM_Base_SetConfig+0x104>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_Base_SetConfig+0x38>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a35      	ldr	r2, [pc, #212]	@ (80056f8 <TIM_Base_SetConfig+0x108>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2b      	ldr	r2, [pc, #172]	@ (80056ec <TIM_Base_SetConfig+0xfc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01b      	beq.n	800567a <TIM_Base_SetConfig+0x8a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005648:	d017      	beq.n	800567a <TIM_Base_SetConfig+0x8a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a28      	ldr	r2, [pc, #160]	@ (80056f0 <TIM_Base_SetConfig+0x100>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <TIM_Base_SetConfig+0x8a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a27      	ldr	r2, [pc, #156]	@ (80056f4 <TIM_Base_SetConfig+0x104>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_Base_SetConfig+0x8a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <TIM_Base_SetConfig+0x108>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_Base_SetConfig+0x8a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a25      	ldr	r2, [pc, #148]	@ (80056fc <TIM_Base_SetConfig+0x10c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_Base_SetConfig+0x8a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a24      	ldr	r2, [pc, #144]	@ (8005700 <TIM_Base_SetConfig+0x110>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_Base_SetConfig+0x8a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a23      	ldr	r2, [pc, #140]	@ (8005704 <TIM_Base_SetConfig+0x114>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a0e      	ldr	r2, [pc, #56]	@ (80056ec <TIM_Base_SetConfig+0xfc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d103      	bne.n	80056c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d105      	bne.n	80056de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f023 0201 	bic.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	611a      	str	r2, [r3, #16]
  }
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800
 80056f8:	40000c00 	.word	0x40000c00
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800

08005708 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005730:	b084      	sub	sp, #16
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	f107 001c 	add.w	r0, r7, #28
 800573e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005742:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005746:	2b01      	cmp	r3, #1
 8005748:	d123      	bne.n	8005792 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800575e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005772:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005776:	2b01      	cmp	r3, #1
 8005778:	d105      	bne.n	8005786 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fae8 	bl	8006d5c <USB_CoreReset>
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]
 8005790:	e01b      	b.n	80057ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f001 fadc 	bl	8006d5c <USB_CoreReset>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80057bc:	e005      	b.n	80057ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057ca:	7fbb      	ldrb	r3, [r7, #30]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10b      	bne.n	80057e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f043 0206 	orr.w	r2, r3, #6
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057f4:	b004      	add	sp, #16
 80057f6:	4770      	bx	lr

080057f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d165      	bne.n	80058d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a41      	ldr	r2, [pc, #260]	@ (8005914 <USB_SetTurnaroundTime+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d906      	bls.n	8005822 <USB_SetTurnaroundTime+0x2a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4a40      	ldr	r2, [pc, #256]	@ (8005918 <USB_SetTurnaroundTime+0x120>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d202      	bcs.n	8005822 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800581c:	230f      	movs	r3, #15
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e062      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4a3c      	ldr	r2, [pc, #240]	@ (8005918 <USB_SetTurnaroundTime+0x120>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d306      	bcc.n	8005838 <USB_SetTurnaroundTime+0x40>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4a3b      	ldr	r2, [pc, #236]	@ (800591c <USB_SetTurnaroundTime+0x124>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d202      	bcs.n	8005838 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005832:	230e      	movs	r3, #14
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e057      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a38      	ldr	r2, [pc, #224]	@ (800591c <USB_SetTurnaroundTime+0x124>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d306      	bcc.n	800584e <USB_SetTurnaroundTime+0x56>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a37      	ldr	r2, [pc, #220]	@ (8005920 <USB_SetTurnaroundTime+0x128>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d202      	bcs.n	800584e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005848:	230d      	movs	r3, #13
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e04c      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4a33      	ldr	r2, [pc, #204]	@ (8005920 <USB_SetTurnaroundTime+0x128>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d306      	bcc.n	8005864 <USB_SetTurnaroundTime+0x6c>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a32      	ldr	r2, [pc, #200]	@ (8005924 <USB_SetTurnaroundTime+0x12c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d802      	bhi.n	8005864 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800585e:	230c      	movs	r3, #12
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e041      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a2f      	ldr	r2, [pc, #188]	@ (8005924 <USB_SetTurnaroundTime+0x12c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d906      	bls.n	800587a <USB_SetTurnaroundTime+0x82>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a2e      	ldr	r2, [pc, #184]	@ (8005928 <USB_SetTurnaroundTime+0x130>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d802      	bhi.n	800587a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005874:	230b      	movs	r3, #11
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e036      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4a2a      	ldr	r2, [pc, #168]	@ (8005928 <USB_SetTurnaroundTime+0x130>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d906      	bls.n	8005890 <USB_SetTurnaroundTime+0x98>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4a29      	ldr	r2, [pc, #164]	@ (800592c <USB_SetTurnaroundTime+0x134>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d802      	bhi.n	8005890 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800588a:	230a      	movs	r3, #10
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e02b      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a26      	ldr	r2, [pc, #152]	@ (800592c <USB_SetTurnaroundTime+0x134>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d906      	bls.n	80058a6 <USB_SetTurnaroundTime+0xae>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a25      	ldr	r2, [pc, #148]	@ (8005930 <USB_SetTurnaroundTime+0x138>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d202      	bcs.n	80058a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80058a0:	2309      	movs	r3, #9
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e020      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4a21      	ldr	r2, [pc, #132]	@ (8005930 <USB_SetTurnaroundTime+0x138>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d306      	bcc.n	80058bc <USB_SetTurnaroundTime+0xc4>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4a20      	ldr	r2, [pc, #128]	@ (8005934 <USB_SetTurnaroundTime+0x13c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d802      	bhi.n	80058bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058b6:	2308      	movs	r3, #8
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e015      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a1d      	ldr	r2, [pc, #116]	@ (8005934 <USB_SetTurnaroundTime+0x13c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d906      	bls.n	80058d2 <USB_SetTurnaroundTime+0xda>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005938 <USB_SetTurnaroundTime+0x140>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d202      	bcs.n	80058d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058cc:	2307      	movs	r3, #7
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e00a      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058d2:	2306      	movs	r3, #6
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e007      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058de:	2309      	movs	r3, #9
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e001      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058e4:	2309      	movs	r3, #9
 80058e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	029b      	lsls	r3, r3, #10
 80058fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005900:	431a      	orrs	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	00d8acbf 	.word	0x00d8acbf
 8005918:	00e4e1c0 	.word	0x00e4e1c0
 800591c:	00f42400 	.word	0x00f42400
 8005920:	01067380 	.word	0x01067380
 8005924:	011a499f 	.word	0x011a499f
 8005928:	01312cff 	.word	0x01312cff
 800592c:	014ca43f 	.word	0x014ca43f
 8005930:	016e3600 	.word	0x016e3600
 8005934:	01a6ab1f 	.word	0x01a6ab1f
 8005938:	01e84800 	.word	0x01e84800

0800593c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f043 0201 	orr.w	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d115      	bne.n	80059ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059ae:	200a      	movs	r0, #10
 80059b0:	f7fb fb92 	bl	80010d8 <HAL_Delay>
      ms += 10U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	330a      	adds	r3, #10
 80059b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 f93f 	bl	8006c3e <USB_GetMode>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d01e      	beq.n	8005a04 <USB_SetCurrentMode+0x84>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80059ca:	d9f0      	bls.n	80059ae <USB_SetCurrentMode+0x2e>
 80059cc:	e01a      	b.n	8005a04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d115      	bne.n	8005a00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059e0:	200a      	movs	r0, #10
 80059e2:	f7fb fb79 	bl	80010d8 <HAL_Delay>
      ms += 10U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	330a      	adds	r3, #10
 80059ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 f926 	bl	8006c3e <USB_GetMode>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <USB_SetCurrentMode+0x84>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80059fc:	d9f0      	bls.n	80059e0 <USB_SetCurrentMode+0x60>
 80059fe:	e001      	b.n	8005a04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e005      	b.n	8005a10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a08:	d101      	bne.n	8005a0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a18:	b084      	sub	sp, #16
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b086      	sub	sp, #24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e009      	b.n	8005a4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	3340      	adds	r3, #64	@ 0x40
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	2200      	movs	r2, #0
 8005a44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b0e      	cmp	r3, #14
 8005a50:	d9f2      	bls.n	8005a38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d11c      	bne.n	8005a94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a92:	e00b      	b.n	8005aac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ab8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d10d      	bne.n	8005adc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f968 	bl	8005da0 <USB_SetDevSpeed>
 8005ad0:	e008      	b.n	8005ae4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f963 	bl	8005da0 <USB_SetDevSpeed>
 8005ada:	e003      	b.n	8005ae4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005adc:	2103      	movs	r1, #3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f95e 	bl	8005da0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ae4:	2110      	movs	r1, #16
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8fa 	bl	8005ce0 <USB_FlushTxFifo>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f924 	bl	8005d44 <USB_FlushRxFifo>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2300      	movs	r3, #0
 8005b10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b18:	461a      	mov	r2, r3
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b24:	461a      	mov	r2, r3
 8005b26:	2300      	movs	r3, #0
 8005b28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e043      	b.n	8005bb8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b46:	d118      	bne.n	8005b7a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e013      	b.n	8005b8c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b70:	461a      	mov	r2, r3
 8005b72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e008      	b.n	8005b8c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b86:	461a      	mov	r2, r3
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005baa:	461a      	mov	r2, r3
 8005bac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d3b5      	bcc.n	8005b30 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	e043      	b.n	8005c52 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005be0:	d118      	bne.n	8005c14 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	e013      	b.n	8005c26 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	e008      	b.n	8005c26 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c20:	461a      	mov	r2, r3
 8005c22:	2300      	movs	r3, #0
 8005c24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c32:	461a      	mov	r2, r3
 8005c34:	2300      	movs	r3, #0
 8005c36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c44:	461a      	mov	r2, r3
 8005c46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c56:	461a      	mov	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d3b5      	bcc.n	8005bca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f043 0210 	orr.w	r2, r3, #16
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699a      	ldr	r2, [r3, #24]
 8005c98:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <USB_DevInit+0x2c4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ca0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	f043 0208 	orr.w	r2, r3, #8
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d107      	bne.n	8005ccc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cc4:	f043 0304 	orr.w	r3, r3, #4
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd8:	b004      	add	sp, #16
 8005cda:	4770      	bx	lr
 8005cdc:	803c3800 	.word	0x803c3800

08005ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cfa:	d901      	bls.n	8005d00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e01b      	b.n	8005d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	daf2      	bge.n	8005cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	019b      	lsls	r3, r3, #6
 8005d10:	f043 0220 	orr.w	r2, r3, #32
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d24:	d901      	bls.n	8005d2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e006      	b.n	8005d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d0f0      	beq.n	8005d18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d5c:	d901      	bls.n	8005d62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e018      	b.n	8005d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	daf2      	bge.n	8005d50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2210      	movs	r2, #16
 8005d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d80:	d901      	bls.n	8005d86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e006      	b.n	8005d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d0f0      	beq.n	8005d74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0306 	and.w	r3, r3, #6
 8005dea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005df2:	2300      	movs	r3, #0
 8005df4:	75fb      	strb	r3, [r7, #23]
 8005df6:	e00a      	b.n	8005e0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d002      	beq.n	8005e04 <USB_GetDevSpeed+0x32>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b06      	cmp	r3, #6
 8005e02:	d102      	bne.n	8005e0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e04:	2302      	movs	r3, #2
 8005e06:	75fb      	strb	r3, [r7, #23]
 8005e08:	e001      	b.n	8005e0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e0a:	230f      	movs	r3, #15
 8005e0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d13a      	bne.n	8005eae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	2101      	movs	r1, #1
 8005e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	68f9      	ldr	r1, [r7, #12]
 8005e52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d155      	bne.n	8005f1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	791b      	ldrb	r3, [r3, #4]
 8005e8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	059b      	lsls	r3, r3, #22
 8005e92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e94:	4313      	orrs	r3, r2
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e036      	b.n	8005f1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb4:	69da      	ldr	r2, [r3, #28]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	68f9      	ldr	r1, [r7, #12]
 8005ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11a      	bne.n	8005f1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	791b      	ldrb	r3, [r3, #4]
 8005f00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f02:	430b      	orrs	r3, r1
 8005f04:	4313      	orrs	r3, r2
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d161      	bne.n	800600c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f5e:	d11f      	bne.n	8005fa0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	0159      	lsls	r1, r3, #5
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	440b      	add	r3, r1
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006002:	4619      	mov	r1, r3
 8006004:	4b35      	ldr	r3, [pc, #212]	@ (80060dc <USB_DeactivateEndpoint+0x1b0>)
 8006006:	4013      	ands	r3, r2
 8006008:	600b      	str	r3, [r1, #0]
 800600a:	e060      	b.n	80060ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800601e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006022:	d11f      	bne.n	8006064 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	440a      	add	r2, r1
 800603a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800603e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006042:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	440a      	add	r2, r1
 800605a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800605e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006062:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800606a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	2101      	movs	r1, #1
 8006076:	fa01 f303 	lsl.w	r3, r1, r3
 800607a:	041b      	lsls	r3, r3, #16
 800607c:	43db      	mvns	r3, r3
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006084:	4013      	ands	r3, r2
 8006086:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	2101      	movs	r1, #1
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	43db      	mvns	r3, r3
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a8:	4013      	ands	r3, r2
 80060aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	0159      	lsls	r1, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	440b      	add	r3, r1
 80060c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c6:	4619      	mov	r1, r3
 80060c8:	4b05      	ldr	r3, [pc, #20]	@ (80060e0 <USB_DeactivateEndpoint+0x1b4>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	ec337800 	.word	0xec337800
 80060e0:	eff37800 	.word	0xeff37800

080060e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	@ 0x28
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	4613      	mov	r3, r2
 80060f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	2b01      	cmp	r3, #1
 8006102:	f040 817f 	bne.w	8006404 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d132      	bne.n	8006174 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006128:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800612c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006130:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800616c:	0cdb      	lsrs	r3, r3, #19
 800616e:	04db      	lsls	r3, r3, #19
 8006170:	6113      	str	r3, [r2, #16]
 8006172:	e097      	b.n	80062a4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800618e:	0cdb      	lsrs	r3, r3, #19
 8006190:	04db      	lsls	r3, r3, #19
 8006192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d11a      	bne.n	80061f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d903      	bls.n	80061d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	0151      	lsls	r1, r2, #5
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	440a      	add	r2, r1
 80061e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061f0:	6113      	str	r3, [r2, #16]
 80061f2:	e044      	b.n	800627e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	4413      	add	r3, r2
 80061fe:	1e5a      	subs	r2, r3, #1
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	8afb      	ldrh	r3, [r7, #22]
 800621a:	04d9      	lsls	r1, r3, #19
 800621c:	4ba4      	ldr	r3, [pc, #656]	@ (80064b0 <USB_EPStartXfer+0x3cc>)
 800621e:	400b      	ands	r3, r1
 8006220:	69b9      	ldr	r1, [r7, #24]
 8006222:	0148      	lsls	r0, r1, #5
 8006224:	69f9      	ldr	r1, [r7, #28]
 8006226:	4401      	add	r1, r0
 8006228:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800622c:	4313      	orrs	r3, r2
 800622e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	791b      	ldrb	r3, [r3, #4]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d122      	bne.n	800627e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006252:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006256:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	8afb      	ldrh	r3, [r7, #22]
 8006268:	075b      	lsls	r3, r3, #29
 800626a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800626e:	69b9      	ldr	r1, [r7, #24]
 8006270:	0148      	lsls	r0, r1, #5
 8006272:	69f9      	ldr	r1, [r7, #28]
 8006274:	4401      	add	r1, r0
 8006276:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800627a:	4313      	orrs	r3, r2
 800627c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006294:	69b9      	ldr	r1, [r7, #24]
 8006296:	0148      	lsls	r0, r1, #5
 8006298:	69f9      	ldr	r1, [r7, #28]
 800629a:	4401      	add	r1, r0
 800629c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062a0:	4313      	orrs	r3, r2
 80062a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d14b      	bne.n	8006342 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	791b      	ldrb	r3, [r3, #4]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d128      	bne.n	8006320 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d110      	bne.n	8006300 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e00f      	b.n	8006320 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800631a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800631e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800633a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	e166      	b.n	8006610 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800635c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006360:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d015      	beq.n	8006396 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 814e 	beq.w	8006610 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	2101      	movs	r1, #1
 8006386:	fa01 f303 	lsl.w	r3, r1, r3
 800638a:	69f9      	ldr	r1, [r7, #28]
 800638c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006390:	4313      	orrs	r3, r2
 8006392:	634b      	str	r3, [r1, #52]	@ 0x34
 8006394:	e13c      	b.n	8006610 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d110      	bne.n	80063c8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e00f      	b.n	80063e8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	68d9      	ldr	r1, [r3, #12]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	781a      	ldrb	r2, [r3, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	b298      	uxth	r0, r3
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	4603      	mov	r3, r0
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f9b9 	bl	8006774 <USB_WritePacket>
 8006402:	e105      	b.n	8006610 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800641e:	0cdb      	lsrs	r3, r3, #19
 8006420:	04db      	lsls	r3, r3, #19
 8006422:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800643e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006442:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006446:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d132      	bne.n	80064b4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	4401      	add	r1, r0
 8006484:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	0151      	lsls	r1, r2, #5
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	440a      	add	r2, r1
 80064a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064aa:	6113      	str	r3, [r2, #16]
 80064ac:	e062      	b.n	8006574 <USB_EPStartXfer+0x490>
 80064ae:	bf00      	nop
 80064b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d123      	bne.n	8006504 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	0148      	lsls	r0, r1, #5
 80064d6:	69f9      	ldr	r1, [r7, #28]
 80064d8:	4401      	add	r1, r0
 80064da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064de:	4313      	orrs	r3, r2
 80064e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006500:	6113      	str	r3, [r2, #16]
 8006502:	e037      	b.n	8006574 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4413      	add	r3, r2
 800650e:	1e5a      	subs	r2, r3, #1
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	8afa      	ldrh	r2, [r7, #22]
 8006520:	fb03 f202 	mul.w	r2, r3, r2
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	8afb      	ldrh	r3, [r7, #22]
 8006538:	04d9      	lsls	r1, r3, #19
 800653a:	4b38      	ldr	r3, [pc, #224]	@ (800661c <USB_EPStartXfer+0x538>)
 800653c:	400b      	ands	r3, r1
 800653e:	69b9      	ldr	r1, [r7, #24]
 8006540:	0148      	lsls	r0, r1, #5
 8006542:	69f9      	ldr	r1, [r7, #28]
 8006544:	4401      	add	r1, r0
 8006546:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800654a:	4313      	orrs	r3, r2
 800654c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006564:	69b9      	ldr	r1, [r7, #24]
 8006566:	0148      	lsls	r0, r1, #5
 8006568:	69f9      	ldr	r1, [r7, #28]
 800656a:	4401      	add	r1, r0
 800656c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006570:	4313      	orrs	r3, r2
 8006572:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d10d      	bne.n	8006596 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	68d9      	ldr	r1, [r3, #12]
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006592:	460a      	mov	r2, r1
 8006594:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	791b      	ldrb	r3, [r3, #4]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d128      	bne.n	80065f0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d110      	bne.n	80065d0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e00f      	b.n	80065f0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800660a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800660e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3720      	adds	r7, #32
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	1ff80000 	.word	0x1ff80000

08006620 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d14a      	bne.n	80066d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006652:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006656:	f040 8086 	bne.w	8006766 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	7812      	ldrb	r2, [r2, #0]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006678:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800667c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800669c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d902      	bls.n	80066b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
          break;
 80066b6:	e056      	b.n	8006766 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d0:	d0e7      	beq.n	80066a2 <USB_EPStopXfer+0x82>
 80066d2:	e048      	b.n	8006766 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ec:	d13b      	bne.n	8006766 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800670c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006710:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	7812      	ldrb	r2, [r2, #0]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006730:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006734:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006742:	4293      	cmp	r3, r2
 8006744:	d902      	bls.n	800674c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	75fb      	strb	r3, [r7, #23]
          break;
 800674a:	e00c      	b.n	8006766 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006764:	d0e7      	beq.n	8006736 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
}
 8006768:	4618      	mov	r0, r3
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006774:	b480      	push	{r7}
 8006776:	b089      	sub	sp, #36	@ 0x24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4611      	mov	r1, r2
 8006780:	461a      	mov	r2, r3
 8006782:	460b      	mov	r3, r1
 8006784:	71fb      	strb	r3, [r7, #7]
 8006786:	4613      	mov	r3, r2
 8006788:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006792:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d123      	bne.n	80067e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800679a:	88bb      	ldrh	r3, [r7, #4]
 800679c:	3303      	adds	r3, #3
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	e018      	b.n	80067da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	031a      	lsls	r2, r3, #12
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b4:	461a      	mov	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	3301      	adds	r3, #1
 80067c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	3301      	adds	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3301      	adds	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	3301      	adds	r3, #1
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3e2      	bcc.n	80067a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3724      	adds	r7, #36	@ 0x24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b08b      	sub	sp, #44	@ 0x2c
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	b29b      	uxth	r3, r3
 800680c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006816:	2300      	movs	r3, #0
 8006818:	623b      	str	r3, [r7, #32]
 800681a:	e014      	b.n	8006846 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	601a      	str	r2, [r3, #0]
    pDest++;
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	3301      	adds	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	3301      	adds	r3, #1
 8006832:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	3301      	adds	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	3301      	adds	r3, #1
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	3301      	adds	r3, #1
 8006844:	623b      	str	r3, [r7, #32]
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	429a      	cmp	r2, r3
 800684c:	d3e6      	bcc.n	800681c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800684e:	8bfb      	ldrh	r3, [r7, #30]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01e      	beq.n	8006892 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800685e:	461a      	mov	r2, r3
 8006860:	f107 0310 	add.w	r3, r7, #16
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
 8006874:	b2da      	uxtb	r2, r3
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	701a      	strb	r2, [r3, #0]
      i++;
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	3301      	adds	r3, #1
 800687e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	3301      	adds	r3, #1
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006886:	8bfb      	ldrh	r3, [r7, #30]
 8006888:	3b01      	subs	r3, #1
 800688a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800688c:	8bfb      	ldrh	r3, [r7, #30]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ea      	bne.n	8006868 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006894:	4618      	mov	r0, r3
 8006896:	372c      	adds	r7, #44	@ 0x2c
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d12c      	bne.n	8006916 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	db12      	blt.n	80068f4 <USB_EPSetStall+0x54>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00f      	beq.n	80068f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800690e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	e02b      	b.n	800696e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	db12      	blt.n	800694e <USB_EPSetStall+0xae>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00f      	beq.n	800694e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006948:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800694c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006968:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800696c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d128      	bne.n	80069ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	791b      	ldrb	r3, [r3, #4]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d003      	beq.n	80069c8 <USB_EPClearStall+0x4c>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	791b      	ldrb	r3, [r3, #4]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d138      	bne.n	8006a3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e027      	b.n	8006a3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	791b      	ldrb	r3, [r3, #4]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d003      	beq.n	8006a1a <USB_EPClearStall+0x9e>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	791b      	ldrb	r3, [r3, #4]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d10f      	bne.n	8006a3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a82:	4313      	orrs	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ac2:	f023 0302 	bic.w	r3, r3, #2
 8006ac6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006af0:	f023 0303 	bic.w	r3, r3, #3
 8006af4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b04:	f043 0302 	orr.w	r3, r3, #2
 8006b08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b30:	68fb      	ldr	r3, [r7, #12]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0c1b      	lsrs	r3, r3, #16
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	4013      	ands	r3, r2
 8006b94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	b29b      	uxth	r3, r3
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b087      	sub	sp, #28
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c12:	01db      	lsls	r3, r3, #7
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c30:	68bb      	ldr	r3, [r7, #8]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c78:	f023 0307 	bic.w	r3, r3, #7
 8006c7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	333c      	adds	r3, #60	@ 0x3c
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4a26      	ldr	r2, [pc, #152]	@ (8006d58 <USB_EP0_OutStart+0xb8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d90a      	bls.n	8006cda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cd4:	d101      	bne.n	8006cda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e037      	b.n	8006d4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d08:	f043 0318 	orr.w	r3, r3, #24
 8006d0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006d20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d10f      	bne.n	8006d48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006d46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	4f54300a 	.word	0x4f54300a

08006d5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d74:	d901      	bls.n	8006d7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e01b      	b.n	8006db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	daf2      	bge.n	8006d68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f043 0201 	orr.w	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d9e:	d901      	bls.n	8006da4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e006      	b.n	8006db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d0f0      	beq.n	8006d92 <USB_CoreReset+0x36>

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f103 0208 	add.w	r2, r3, #8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f103 0208 	add.w	r2, r3, #8
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f103 0208 	add.w	r2, r3, #8
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2e:	d103      	bne.n	8006e38 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e00c      	b.n	8006e52 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e002      	b.n	8006e46 <vListInsert+0x2e>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d2f6      	bcs.n	8006e40 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6892      	ldr	r2, [r2, #8]
 8006ea0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6852      	ldr	r2, [r2, #4]
 8006eaa:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d103      	bne.n	8006ebe <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	1e5a      	subs	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8006eea:	2301      	movs	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	e7fd      	b.n	8006f0c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d05d      	beq.n	8006fd2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d059      	beq.n	8006fd2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f26:	2100      	movs	r1, #0
 8006f28:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d000      	beq.n	8006f32 <xQueueGenericReset+0x52>
 8006f30:	2101      	movs	r1, #1
 8006f32:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d14c      	bne.n	8006fd2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8006f38:	f001 fe28 	bl	8008b8c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f44:	6939      	ldr	r1, [r7, #16]
 8006f46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f48:	fb01 f303 	mul.w	r3, r1, r3
 8006f4c:	441a      	add	r2, r3
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2200      	movs	r2, #0
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	6939      	ldr	r1, [r7, #16]
 8006f6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f6e:	fb01 f303 	mul.w	r3, r1, r3
 8006f72:	441a      	add	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	22ff      	movs	r2, #255	@ 0xff
 8006f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	22ff      	movs	r2, #255	@ 0xff
 8006f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d114      	bne.n	8006fb8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01a      	beq.n	8006fcc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3310      	adds	r3, #16
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 ff86 	bl	8007eac <xTaskRemoveFromEventList>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d012      	beq.n	8006fcc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006fa6:	4b16      	ldr	r3, [pc, #88]	@ (8007000 <xQueueGenericReset+0x120>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	e009      	b.n	8006fcc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	3310      	adds	r3, #16
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff fefe 	bl	8006dbe <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3324      	adds	r3, #36	@ 0x24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fef9 	bl	8006dbe <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8006fcc:	f001 fe10 	bl	8008bf0 <vPortExitCritical>
 8006fd0:	e001      	b.n	8006fd6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <xQueueGenericReset+0x114>
        __asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60bb      	str	r3, [r7, #8]
    }
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8006ff4:	697b      	ldr	r3, [r7, #20]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	@ 0x28
 8007008:	af02      	add	r7, sp, #8
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	4613      	mov	r3, r2
 8007010:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02e      	beq.n	800707a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800701c:	2100      	movs	r1, #0
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	fba3 2302 	umull	r2, r3, r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d000      	beq.n	800702c <xQueueGenericCreate+0x28>
 800702a:	2101      	movs	r1, #1
 800702c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800702e:	2b00      	cmp	r3, #0
 8007030:	d123      	bne.n	800707a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800703a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800703e:	d81c      	bhi.n	800707a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	fb02 f303 	mul.w	r3, r2, r3
 8007048:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	3350      	adds	r3, #80	@ 0x50
 800704e:	4618      	mov	r0, r3
 8007050:	f001 fe84 	bl	8008d5c <pvPortMalloc>
 8007054:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01d      	beq.n	8007098 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	3350      	adds	r3, #80	@ 0x50
 8007064:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007066:	79fa      	ldrb	r2, [r7, #7]
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	4613      	mov	r3, r2
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f815 	bl	80070a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8007078:	e00e      	b.n	8007098 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10b      	bne.n	8007098 <xQueueGenericCreate+0x94>
        __asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	613b      	str	r3, [r7, #16]
    }
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007098:	69fb      	ldr	r3, [r7, #28]
    }
 800709a:	4618      	mov	r0, r3
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d103      	bne.n	80070be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e002      	b.n	80070c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070d0:	2101      	movs	r1, #1
 80070d2:	69b8      	ldr	r0, [r7, #24]
 80070d4:	f7ff ff04 	bl	8006ee0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08c      	sub	sp, #48	@ 0x30
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80070f4:	2300      	movs	r3, #0
 80070f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10b      	bne.n	800711a <xQueueReceive+0x32>
        __asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	623b      	str	r3, [r7, #32]
    }
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <xQueueReceive+0x40>
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <xQueueReceive+0x44>
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <xQueueReceive+0x46>
 800712c:	2300      	movs	r3, #0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10b      	bne.n	800714a <xQueueReceive+0x62>
        __asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	61fb      	str	r3, [r7, #28]
    }
 8007144:	bf00      	nop
 8007146:	bf00      	nop
 8007148:	e7fd      	b.n	8007146 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800714a:	f001 f8c3 	bl	80082d4 <xTaskGetSchedulerState>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <xQueueReceive+0x72>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <xQueueReceive+0x76>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <xQueueReceive+0x78>
 800715e:	2300      	movs	r3, #0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <xQueueReceive+0x94>
        __asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	61bb      	str	r3, [r7, #24]
    }
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800717c:	f001 fd06 	bl	8008b8c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007184:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01f      	beq.n	80071cc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007190:	f000 f88c 	bl	80072ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	1e5a      	subs	r2, r3, #1
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00f      	beq.n	80071c4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	3310      	adds	r3, #16
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fe7f 	bl	8007eac <xTaskRemoveFromEventList>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80071b4:	4b3c      	ldr	r3, [pc, #240]	@ (80072a8 <xQueueReceive+0x1c0>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80071c4:	f001 fd14 	bl	8008bf0 <vPortExitCritical>
                return pdPASS;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e069      	b.n	80072a0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d103      	bne.n	80071da <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80071d2:	f001 fd0d 	bl	8008bf0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e062      	b.n	80072a0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80071da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80071e0:	f107 0310 	add.w	r3, r7, #16
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 ff39 	bl	800805c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80071ea:	2301      	movs	r3, #1
 80071ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80071ee:	f001 fcff 	bl	8008bf0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80071f2:	f000 fb61 	bl	80078b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80071f6:	f001 fcc9 	bl	8008b8c <vPortEnterCritical>
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007200:	b25b      	sxtb	r3, r3
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d103      	bne.n	8007210 <xQueueReceive+0x128>
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007216:	b25b      	sxtb	r3, r3
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d103      	bne.n	8007226 <xQueueReceive+0x13e>
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007226:	f001 fce3 	bl	8008bf0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800722a:	1d3a      	adds	r2, r7, #4
 800722c:	f107 0310 	add.w	r3, r7, #16
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f000 ff28 	bl	8008088 <xTaskCheckForTimeOut>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d123      	bne.n	8007286 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800723e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007240:	f000 f8ac 	bl	800739c <prvIsQueueEmpty>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d017      	beq.n	800727a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	3324      	adds	r3, #36	@ 0x24
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4611      	mov	r1, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fdbe 	bl	8007dd4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800725a:	f000 f84d 	bl	80072f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800725e:	f000 fb39 	bl	80078d4 <xTaskResumeAll>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d189      	bne.n	800717c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8007268:	4b0f      	ldr	r3, [pc, #60]	@ (80072a8 <xQueueReceive+0x1c0>)
 800726a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	e780      	b.n	800717c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800727a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800727c:	f000 f83c 	bl	80072f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007280:	f000 fb28 	bl	80078d4 <xTaskResumeAll>
 8007284:	e77a      	b.n	800717c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8007286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007288:	f000 f836 	bl	80072f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800728c:	f000 fb22 	bl	80078d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007292:	f000 f883 	bl	800739c <prvIsQueueEmpty>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f43f af6f 	beq.w	800717c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800729e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3730      	adds	r7, #48	@ 0x30
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d018      	beq.n	80072f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	441a      	add	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d303      	bcc.n	80072e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68d9      	ldr	r1, [r3, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	461a      	mov	r2, r3
 80072ea:	6838      	ldr	r0, [r7, #0]
 80072ec:	f004 fbbc 	bl	800ba68 <memcpy>
    }
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007300:	f001 fc44 	bl	8008b8c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800730a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800730c:	e011      	b.n	8007332 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	d012      	beq.n	800733c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3324      	adds	r3, #36	@ 0x24
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fdc6 	bl	8007eac <xTaskRemoveFromEventList>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8007326:	f000 ff17 	bl	8008158 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	3b01      	subs	r3, #1
 800732e:	b2db      	uxtb	r3, r3
 8007330:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007336:	2b00      	cmp	r3, #0
 8007338:	dce9      	bgt.n	800730e <prvUnlockQueue+0x16>
 800733a:	e000      	b.n	800733e <prvUnlockQueue+0x46>
                    break;
 800733c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	22ff      	movs	r2, #255	@ 0xff
 8007342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8007346:	f001 fc53 	bl	8008bf0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800734a:	f001 fc1f 	bl	8008b8c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007354:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007356:	e011      	b.n	800737c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d012      	beq.n	8007386 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3310      	adds	r3, #16
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fda1 	bl	8007eac <xTaskRemoveFromEventList>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007370:	f000 fef2 	bl	8008158 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	3b01      	subs	r3, #1
 8007378:	b2db      	uxtb	r3, r3
 800737a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800737c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007380:	2b00      	cmp	r3, #0
 8007382:	dce9      	bgt.n	8007358 <prvUnlockQueue+0x60>
 8007384:	e000      	b.n	8007388 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007386:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	22ff      	movs	r2, #255	@ 0xff
 800738c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8007390:	f001 fc2e 	bl	8008bf0 <vPortExitCritical>
}
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80073a4:	f001 fbf2 	bl	8008b8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80073b0:	2301      	movs	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	e001      	b.n	80073ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80073ba:	f001 fc19 	bl	8008bf0 <vPortExitCritical>

    return xReturn;
 80073be:	68fb      	ldr	r3, [r7, #12]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10b      	bne.n	80073f4 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	60fb      	str	r3, [r7, #12]
    }
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	e7fd      	b.n	80073f0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d024      	beq.n	8007444 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	e01e      	b.n	800743e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007400:	4a18      	ldr	r2, [pc, #96]	@ (8007464 <vQueueAddToRegistry+0x9c>)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	4413      	add	r3, r2
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	429a      	cmp	r2, r3
 800740e:	d105      	bne.n	800741c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4a13      	ldr	r2, [pc, #76]	@ (8007464 <vQueueAddToRegistry+0x9c>)
 8007416:	4413      	add	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
                    break;
 800741a:	e013      	b.n	8007444 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <vQueueAddToRegistry+0x70>
 8007422:	4a10      	ldr	r2, [pc, #64]	@ (8007464 <vQueueAddToRegistry+0x9c>)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	4a0c      	ldr	r2, [pc, #48]	@ (8007464 <vQueueAddToRegistry+0x9c>)
 8007434:	4413      	add	r3, r2
 8007436:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	3301      	adds	r3, #1
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b07      	cmp	r3, #7
 8007442:	d9dd      	bls.n	8007400 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8007456:	bf00      	nop
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	200002a8 	.word	0x200002a8

08007468 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007478:	f001 fb88 	bl	8008b8c <vPortEnterCritical>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007482:	b25b      	sxtb	r3, r3
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d103      	bne.n	8007492 <vQueueWaitForMessageRestricted+0x2a>
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007498:	b25b      	sxtb	r3, r3
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d103      	bne.n	80074a8 <vQueueWaitForMessageRestricted+0x40>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074a8:	f001 fba2 	bl	8008bf0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	3324      	adds	r3, #36	@ 0x24
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fcaf 	bl	8007e20 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80074c2:	6978      	ldr	r0, [r7, #20]
 80074c4:	f7ff ff18 	bl	80072f8 <prvUnlockQueue>
    }
 80074c8:	bf00      	nop
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08c      	sub	sp, #48	@ 0x30
 80074d4:	af04      	add	r7, sp, #16
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	4613      	mov	r3, r2
 80074de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 fc39 	bl	8008d5c <pvPortMalloc>
 80074ea:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d013      	beq.n	800751a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074f2:	2058      	movs	r0, #88	@ 0x58
 80074f4:	f001 fc32 	bl	8008d5c <pvPortMalloc>
 80074f8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007500:	2258      	movs	r2, #88	@ 0x58
 8007502:	2100      	movs	r1, #0
 8007504:	69f8      	ldr	r0, [r7, #28]
 8007506:	f004 fa83 	bl	800ba10 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007510:	e005      	b.n	800751e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8007512:	6978      	ldr	r0, [r7, #20]
 8007514:	f001 fcde 	bl	8008ed4 <vPortFree>
 8007518:	e001      	b.n	800751e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d013      	beq.n	800754c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007524:	88fa      	ldrh	r2, [r7, #6]
 8007526:	2300      	movs	r3, #0
 8007528:	9303      	str	r3, [sp, #12]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	9302      	str	r3, [sp, #8]
 800752e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f80e 	bl	800755c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007540:	69f8      	ldr	r0, [r7, #28]
 8007542:	f000 f89b 	bl	800767c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007546:	2301      	movs	r3, #1
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	e002      	b.n	8007552 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800754c:	f04f 33ff 	mov.w	r3, #4294967295
 8007550:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007552:	69bb      	ldr	r3, [r7, #24]
    }
 8007554:	4618      	mov	r0, r3
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	461a      	mov	r2, r3
 8007574:	21a5      	movs	r1, #165	@ 0xa5
 8007576:	f004 fa4b 	bl	800ba10 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007584:	3b01      	subs	r3, #1
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f023 0307 	bic.w	r3, r3, #7
 8007592:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00b      	beq.n	80075b6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	617b      	str	r3, [r7, #20]
    }
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	e7fd      	b.n	80075b2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01e      	beq.n	80075fa <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	e012      	b.n	80075e8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	4413      	add	r3, r2
 80075c8:	7819      	ldrb	r1, [r3, #0]
 80075ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	3334      	adds	r3, #52	@ 0x34
 80075d2:	460a      	mov	r2, r1
 80075d4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d006      	beq.n	80075f0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	3301      	adds	r3, #1
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	2b09      	cmp	r3, #9
 80075ec:	d9e9      	bls.n	80075c2 <prvInitialiseNewTask+0x66>
 80075ee:	e000      	b.n	80075f2 <prvInitialiseNewTask+0x96>
            {
                break;
 80075f0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80075fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d90b      	bls.n	8007618 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	613b      	str	r3, [r7, #16]
    }
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	2b04      	cmp	r3, #4
 800761c:	d901      	bls.n	8007622 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800761e:	2304      	movs	r3, #4
 8007620:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007626:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800762c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	3304      	adds	r3, #4
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff fbe3 	bl	8006dfe <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	3318      	adds	r3, #24
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fbde 	bl	8006dfe <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007646:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764a:	f1c3 0205 	rsb	r2, r3, #5
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007656:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	68f9      	ldr	r1, [r7, #12]
 800765c:	69b8      	ldr	r0, [r7, #24]
 800765e:	f001 f963 	bl	8008928 <pxPortInitialiseStack>
 8007662:	4602      	mov	r2, r0
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800766e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007672:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007674:	bf00      	nop
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007684:	f001 fa82 	bl	8008b8c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007688:	4b40      	ldr	r3, [pc, #256]	@ (800778c <prvAddNewTaskToReadyList+0x110>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3301      	adds	r3, #1
 800768e:	4a3f      	ldr	r2, [pc, #252]	@ (800778c <prvAddNewTaskToReadyList+0x110>)
 8007690:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007692:	4b3f      	ldr	r3, [pc, #252]	@ (8007790 <prvAddNewTaskToReadyList+0x114>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800769a:	4a3d      	ldr	r2, [pc, #244]	@ (8007790 <prvAddNewTaskToReadyList+0x114>)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076a0:	4b3a      	ldr	r3, [pc, #232]	@ (800778c <prvAddNewTaskToReadyList+0x110>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d110      	bne.n	80076ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80076a8:	f000 fd7a 	bl	80081a0 <prvInitialiseTaskLists>
 80076ac:	e00d      	b.n	80076ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80076ae:	4b39      	ldr	r3, [pc, #228]	@ (8007794 <prvAddNewTaskToReadyList+0x118>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076b6:	4b36      	ldr	r3, [pc, #216]	@ (8007790 <prvAddNewTaskToReadyList+0x114>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d802      	bhi.n	80076ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80076c4:	4a32      	ldr	r2, [pc, #200]	@ (8007790 <prvAddNewTaskToReadyList+0x114>)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80076ca:	4b33      	ldr	r3, [pc, #204]	@ (8007798 <prvAddNewTaskToReadyList+0x11c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	4a31      	ldr	r2, [pc, #196]	@ (8007798 <prvAddNewTaskToReadyList+0x11c>)
 80076d2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076d4:	4b30      	ldr	r3, [pc, #192]	@ (8007798 <prvAddNewTaskToReadyList+0x11c>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e0:	2201      	movs	r2, #1
 80076e2:	409a      	lsls	r2, r3
 80076e4:	4b2d      	ldr	r3, [pc, #180]	@ (800779c <prvAddNewTaskToReadyList+0x120>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	4a2c      	ldr	r2, [pc, #176]	@ (800779c <prvAddNewTaskToReadyList+0x120>)
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f2:	492b      	ldr	r1, [pc, #172]	@ (80077a0 <prvAddNewTaskToReadyList+0x124>)
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	3304      	adds	r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	609a      	str	r2, [r3, #8]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	3204      	adds	r2, #4
 800771a:	605a      	str	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <prvAddNewTaskToReadyList+0x124>)
 8007732:	441a      	add	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	615a      	str	r2, [r3, #20]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773c:	4918      	ldr	r1, [pc, #96]	@ (80077a0 <prvAddNewTaskToReadyList+0x124>)
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	1c59      	adds	r1, r3, #1
 800774c:	4814      	ldr	r0, [pc, #80]	@ (80077a0 <prvAddNewTaskToReadyList+0x124>)
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4403      	add	r3, r0
 8007758:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800775a:	f001 fa49 	bl	8008bf0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <prvAddNewTaskToReadyList+0x118>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007766:	4b0a      	ldr	r3, [pc, #40]	@ (8007790 <prvAddNewTaskToReadyList+0x114>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007770:	429a      	cmp	r2, r3
 8007772:	d207      	bcs.n	8007784 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007774:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <prvAddNewTaskToReadyList+0x128>)
 8007776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	200003c0 	.word	0x200003c0
 8007790:	200002e8 	.word	0x200002e8
 8007794:	200003cc 	.word	0x200003cc
 8007798:	200003dc 	.word	0x200003dc
 800779c:	200003c8 	.word	0x200003c8
 80077a0:	200002ec 	.word	0x200002ec
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d018      	beq.n	80077ec <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80077ba:	4b14      	ldr	r3, [pc, #80]	@ (800780c <vTaskDelay+0x64>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <vTaskDelay+0x32>
        __asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	60bb      	str	r3, [r7, #8]
    }
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	e7fd      	b.n	80077d6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80077da:	f000 f86d 	bl	80078b8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077de:	2100      	movs	r1, #0
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fd95 	bl	8008310 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80077e6:	f000 f875 	bl	80078d4 <xTaskResumeAll>
 80077ea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80077f2:	4b07      	ldr	r3, [pc, #28]	@ (8007810 <vTaskDelay+0x68>)
 80077f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200003e8 	.word	0x200003e8
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800781a:	4b20      	ldr	r3, [pc, #128]	@ (800789c <vTaskStartScheduler+0x88>)
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	2300      	movs	r3, #0
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	2282      	movs	r2, #130	@ 0x82
 8007826:	491e      	ldr	r1, [pc, #120]	@ (80078a0 <vTaskStartScheduler+0x8c>)
 8007828:	481e      	ldr	r0, [pc, #120]	@ (80078a4 <vTaskStartScheduler+0x90>)
 800782a:	f7ff fe51 	bl	80074d0 <xTaskCreate>
 800782e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d102      	bne.n	800783c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8007836:	f000 fdeb 	bl	8008410 <xTimerCreateTimerTask>
 800783a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d116      	bne.n	8007870 <vTaskStartScheduler+0x5c>
        __asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	60bb      	str	r3, [r7, #8]
    }
 8007854:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007856:	4b14      	ldr	r3, [pc, #80]	@ (80078a8 <vTaskStartScheduler+0x94>)
 8007858:	f04f 32ff 	mov.w	r2, #4294967295
 800785c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800785e:	4b13      	ldr	r3, [pc, #76]	@ (80078ac <vTaskStartScheduler+0x98>)
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007864:	4b12      	ldr	r3, [pc, #72]	@ (80078b0 <vTaskStartScheduler+0x9c>)
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800786a:	f001 f8eb 	bl	8008a44 <xPortStartScheduler>
 800786e:	e00f      	b.n	8007890 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007876:	d10b      	bne.n	8007890 <vTaskStartScheduler+0x7c>
        __asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	607b      	str	r3, [r7, #4]
    }
 800788a:	bf00      	nop
 800788c:	bf00      	nop
 800788e:	e7fd      	b.n	800788c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007890:	4b08      	ldr	r3, [pc, #32]	@ (80078b4 <vTaskStartScheduler+0xa0>)
 8007892:	681b      	ldr	r3, [r3, #0]
}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	200003e4 	.word	0x200003e4
 80078a0:	0800baac 	.word	0x0800baac
 80078a4:	08008171 	.word	0x08008171
 80078a8:	200003e0 	.word	0x200003e0
 80078ac:	200003cc 	.word	0x200003cc
 80078b0:	200003c4 	.word	0x200003c4
 80078b4:	2000000c 	.word	0x2000000c

080078b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80078bc:	4b04      	ldr	r3, [pc, #16]	@ (80078d0 <vTaskSuspendAll+0x18>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3301      	adds	r3, #1
 80078c2:	4a03      	ldr	r2, [pc, #12]	@ (80078d0 <vTaskSuspendAll+0x18>)
 80078c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80078c6:	bf00      	nop
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	200003e8 	.word	0x200003e8

080078d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80078de:	2300      	movs	r3, #0
 80078e0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80078e2:	4b71      	ldr	r3, [pc, #452]	@ (8007aa8 <xTaskResumeAll+0x1d4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <xTaskResumeAll+0x2e>
        __asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	607b      	str	r3, [r7, #4]
    }
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007902:	f001 f943 	bl	8008b8c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007906:	4b68      	ldr	r3, [pc, #416]	@ (8007aa8 <xTaskResumeAll+0x1d4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3b01      	subs	r3, #1
 800790c:	4a66      	ldr	r2, [pc, #408]	@ (8007aa8 <xTaskResumeAll+0x1d4>)
 800790e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007910:	4b65      	ldr	r3, [pc, #404]	@ (8007aa8 <xTaskResumeAll+0x1d4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 80c0 	bne.w	8007a9a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800791a:	4b64      	ldr	r3, [pc, #400]	@ (8007aac <xTaskResumeAll+0x1d8>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80bb 	beq.w	8007a9a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007924:	e08a      	b.n	8007a3c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007926:	4b62      	ldr	r3, [pc, #392]	@ (8007ab0 <xTaskResumeAll+0x1dc>)
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	6a12      	ldr	r2, [r2, #32]
 800793c:	609a      	str	r2, [r3, #8]
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	69d2      	ldr	r2, [r2, #28]
 8007946:	605a      	str	r2, [r3, #4]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	3318      	adds	r3, #24
 8007950:	429a      	cmp	r2, r3
 8007952:	d103      	bne.n	800795c <xTaskResumeAll+0x88>
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	6a1a      	ldr	r2, [r3, #32]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	605a      	str	r2, [r3, #4]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	2200      	movs	r2, #0
 8007960:	629a      	str	r2, [r3, #40]	@ 0x28
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	1e5a      	subs	r2, r3, #1
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	68d2      	ldr	r2, [r2, #12]
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	6892      	ldr	r2, [r2, #8]
 8007984:	605a      	str	r2, [r3, #4]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	3304      	adds	r3, #4
 800798e:	429a      	cmp	r2, r3
 8007990:	d103      	bne.n	800799a <xTaskResumeAll+0xc6>
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	2200      	movs	r2, #0
 800799e:	615a      	str	r2, [r3, #20]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	1e5a      	subs	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	2201      	movs	r2, #1
 80079b0:	409a      	lsls	r2, r3
 80079b2:	4b40      	ldr	r3, [pc, #256]	@ (8007ab4 <xTaskResumeAll+0x1e0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ab4 <xTaskResumeAll+0x1e0>)
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c0:	493d      	ldr	r1, [pc, #244]	@ (8007ab8 <xTaskResumeAll+0x1e4>)
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	440b      	add	r3, r1
 80079cc:	3304      	adds	r3, #4
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	609a      	str	r2, [r3, #8]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	60da      	str	r2, [r3, #12]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	3204      	adds	r2, #4
 80079e8:	605a      	str	r2, [r3, #4]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	1d1a      	adds	r2, r3, #4
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	609a      	str	r2, [r3, #8]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4a2e      	ldr	r2, [pc, #184]	@ (8007ab8 <xTaskResumeAll+0x1e4>)
 8007a00:	441a      	add	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	615a      	str	r2, [r3, #20]
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0a:	492b      	ldr	r1, [pc, #172]	@ (8007ab8 <xTaskResumeAll+0x1e4>)
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	1c59      	adds	r1, r3, #1
 8007a1a:	4827      	ldr	r0, [pc, #156]	@ (8007ab8 <xTaskResumeAll+0x1e4>)
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4403      	add	r3, r0
 8007a26:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2c:	4b23      	ldr	r3, [pc, #140]	@ (8007abc <xTaskResumeAll+0x1e8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d302      	bcc.n	8007a3c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8007a36:	4b22      	ldr	r3, [pc, #136]	@ (8007ac0 <xTaskResumeAll+0x1ec>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab0 <xTaskResumeAll+0x1dc>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f47f af70 	bne.w	8007926 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007a4c:	f000 fc26 	bl	800829c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a50:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac4 <xTaskResumeAll+0x1f0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d010      	beq.n	8007a7e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007a5c:	f000 f846 	bl	8007aec <xTaskIncrementTick>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8007a66:	4b16      	ldr	r3, [pc, #88]	@ (8007ac0 <xTaskResumeAll+0x1ec>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f1      	bne.n	8007a5c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8007a78:	4b12      	ldr	r3, [pc, #72]	@ (8007ac4 <xTaskResumeAll+0x1f0>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007a7e:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <xTaskResumeAll+0x1ec>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007a86:	2301      	movs	r3, #1
 8007a88:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac8 <xTaskResumeAll+0x1f4>)
 8007a8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007a9a:	f001 f8a9 	bl	8008bf0 <vPortExitCritical>

    return xAlreadyYielded;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3720      	adds	r7, #32
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	200003e8 	.word	0x200003e8
 8007aac:	200003c0 	.word	0x200003c0
 8007ab0:	20000380 	.word	0x20000380
 8007ab4:	200003c8 	.word	0x200003c8
 8007ab8:	200002ec 	.word	0x200002ec
 8007abc:	200002e8 	.word	0x200002e8
 8007ac0:	200003d4 	.word	0x200003d4
 8007ac4:	200003d0 	.word	0x200003d0
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007ad2:	4b05      	ldr	r3, [pc, #20]	@ (8007ae8 <xTaskGetTickCount+0x1c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007ad8:	687b      	ldr	r3, [r7, #4]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	200003c4 	.word	0x200003c4

08007aec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08a      	sub	sp, #40	@ 0x28
 8007af0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007af6:	4b7e      	ldr	r3, [pc, #504]	@ (8007cf0 <xTaskIncrementTick+0x204>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f040 80ed 	bne.w	8007cda <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b00:	4b7c      	ldr	r3, [pc, #496]	@ (8007cf4 <xTaskIncrementTick+0x208>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007b08:	4a7a      	ldr	r2, [pc, #488]	@ (8007cf4 <xTaskIncrementTick+0x208>)
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d121      	bne.n	8007b58 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007b14:	4b78      	ldr	r3, [pc, #480]	@ (8007cf8 <xTaskIncrementTick+0x20c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <xTaskIncrementTick+0x4a>
        __asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
    }
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <xTaskIncrementTick+0x46>
 8007b36:	4b70      	ldr	r3, [pc, #448]	@ (8007cf8 <xTaskIncrementTick+0x20c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8007cfc <xTaskIncrementTick+0x210>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a6d      	ldr	r2, [pc, #436]	@ (8007cf8 <xTaskIncrementTick+0x20c>)
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	4a6d      	ldr	r2, [pc, #436]	@ (8007cfc <xTaskIncrementTick+0x210>)
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8007d00 <xTaskIncrementTick+0x214>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	4a6b      	ldr	r2, [pc, #428]	@ (8007d00 <xTaskIncrementTick+0x214>)
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	f000 fba2 	bl	800829c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007b58:	4b6a      	ldr	r3, [pc, #424]	@ (8007d04 <xTaskIncrementTick+0x218>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6a3a      	ldr	r2, [r7, #32]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	f0c0 80a6 	bcc.w	8007cb0 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b64:	4b64      	ldr	r3, [pc, #400]	@ (8007cf8 <xTaskIncrementTick+0x20c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b6e:	4b65      	ldr	r3, [pc, #404]	@ (8007d04 <xTaskIncrementTick+0x218>)
 8007b70:	f04f 32ff 	mov.w	r2, #4294967295
 8007b74:	601a      	str	r2, [r3, #0]
                    break;
 8007b76:	e09b      	b.n	8007cb0 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b78:	4b5f      	ldr	r3, [pc, #380]	@ (8007cf8 <xTaskIncrementTick+0x20c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007b88:	6a3a      	ldr	r2, [r7, #32]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d203      	bcs.n	8007b98 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007b90:	4a5c      	ldr	r2, [pc, #368]	@ (8007d04 <xTaskIncrementTick+0x218>)
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007b96:	e08b      	b.n	8007cb0 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	613b      	str	r3, [r7, #16]
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	68d2      	ldr	r2, [r2, #12]
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	6892      	ldr	r2, [r2, #8]
 8007bb0:	605a      	str	r2, [r3, #4]
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d103      	bne.n	8007bc6 <xTaskIncrementTick+0xda>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	615a      	str	r2, [r3, #20]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	1e5a      	subs	r2, r3, #1
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01e      	beq.n	8007c1c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	6a12      	ldr	r2, [r2, #32]
 8007bec:	609a      	str	r2, [r3, #8]
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	69d2      	ldr	r2, [r2, #28]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	3318      	adds	r3, #24
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d103      	bne.n	8007c0c <xTaskIncrementTick+0x120>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	6a1a      	ldr	r2, [r3, #32]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	605a      	str	r2, [r3, #4]
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	1e5a      	subs	r2, r3, #1
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	2201      	movs	r2, #1
 8007c22:	409a      	lsls	r2, r3
 8007c24:	4b38      	ldr	r3, [pc, #224]	@ (8007d08 <xTaskIncrementTick+0x21c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	4a37      	ldr	r2, [pc, #220]	@ (8007d08 <xTaskIncrementTick+0x21c>)
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c32:	4936      	ldr	r1, [pc, #216]	@ (8007d0c <xTaskIncrementTick+0x220>)
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	3304      	adds	r3, #4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60bb      	str	r3, [r7, #8]
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	609a      	str	r2, [r3, #8]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	60da      	str	r2, [r3, #12]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	3204      	adds	r2, #4
 8007c5a:	605a      	str	r2, [r3, #4]
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	1d1a      	adds	r2, r3, #4
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	609a      	str	r2, [r3, #8]
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4a26      	ldr	r2, [pc, #152]	@ (8007d0c <xTaskIncrementTick+0x220>)
 8007c72:	441a      	add	r2, r3
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	615a      	str	r2, [r3, #20]
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7c:	4923      	ldr	r1, [pc, #140]	@ (8007d0c <xTaskIncrementTick+0x220>)
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	440b      	add	r3, r1
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1c59      	adds	r1, r3, #1
 8007c8c:	481f      	ldr	r0, [pc, #124]	@ (8007d0c <xTaskIncrementTick+0x220>)
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4403      	add	r3, r0
 8007c98:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8007d10 <xTaskIncrementTick+0x224>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	f67f af5d 	bls.w	8007b64 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8007caa:	2301      	movs	r3, #1
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cae:	e759      	b.n	8007b64 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cb0:	4b17      	ldr	r3, [pc, #92]	@ (8007d10 <xTaskIncrementTick+0x224>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb6:	4915      	ldr	r1, [pc, #84]	@ (8007d0c <xTaskIncrementTick+0x220>)
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d901      	bls.n	8007ccc <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007ccc:	4b11      	ldr	r3, [pc, #68]	@ (8007d14 <xTaskIncrementTick+0x228>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d007      	beq.n	8007ce4 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd8:	e004      	b.n	8007ce4 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007cda:	4b0f      	ldr	r3, [pc, #60]	@ (8007d18 <xTaskIncrementTick+0x22c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8007d18 <xTaskIncrementTick+0x22c>)
 8007ce2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3728      	adds	r7, #40	@ 0x28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	200003e8 	.word	0x200003e8
 8007cf4:	200003c4 	.word	0x200003c4
 8007cf8:	20000378 	.word	0x20000378
 8007cfc:	2000037c 	.word	0x2000037c
 8007d00:	200003d8 	.word	0x200003d8
 8007d04:	200003e0 	.word	0x200003e0
 8007d08:	200003c8 	.word	0x200003c8
 8007d0c:	200002ec 	.word	0x200002ec
 8007d10:	200002e8 	.word	0x200002e8
 8007d14:	200003d4 	.word	0x200003d4
 8007d18:	200003d0 	.word	0x200003d0

08007d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d22:	4b27      	ldr	r3, [pc, #156]	@ (8007dc0 <vTaskSwitchContext+0xa4>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007d2a:	4b26      	ldr	r3, [pc, #152]	@ (8007dc4 <vTaskSwitchContext+0xa8>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007d30:	e040      	b.n	8007db4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8007d32:	4b24      	ldr	r3, [pc, #144]	@ (8007dc4 <vTaskSwitchContext+0xa8>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d38:	4b23      	ldr	r3, [pc, #140]	@ (8007dc8 <vTaskSwitchContext+0xac>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	fab3 f383 	clz	r3, r3
 8007d44:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	f1c3 031f 	rsb	r3, r3, #31
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	491f      	ldr	r1, [pc, #124]	@ (8007dcc <vTaskSwitchContext+0xb0>)
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10b      	bne.n	8007d7a <vTaskSwitchContext+0x5e>
        __asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	607b      	str	r3, [r7, #4]
    }
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	e7fd      	b.n	8007d76 <vTaskSwitchContext+0x5a>
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4a11      	ldr	r2, [pc, #68]	@ (8007dcc <vTaskSwitchContext+0xb0>)
 8007d86:	4413      	add	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	605a      	str	r2, [r3, #4]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d104      	bne.n	8007daa <vTaskSwitchContext+0x8e>
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	605a      	str	r2, [r3, #4]
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	4a07      	ldr	r2, [pc, #28]	@ (8007dd0 <vTaskSwitchContext+0xb4>)
 8007db2:	6013      	str	r3, [r2, #0]
}
 8007db4:	bf00      	nop
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	200003e8 	.word	0x200003e8
 8007dc4:	200003d4 	.word	0x200003d4
 8007dc8:	200003c8 	.word	0x200003c8
 8007dcc:	200002ec 	.word	0x200002ec
 8007dd0:	200002e8 	.word	0x200002e8

08007dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	60fb      	str	r3, [r7, #12]
    }
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dfc:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <vTaskPlaceOnEventList+0x48>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3318      	adds	r3, #24
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff f807 	bl	8006e18 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	6838      	ldr	r0, [r7, #0]
 8007e0e:	f000 fa7f 	bl	8008310 <prvAddCurrentTaskToDelayedList>
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	200002e8 	.word	0x200002e8

08007e20 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10b      	bne.n	8007e4a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	613b      	str	r3, [r7, #16]
    }
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	e7fd      	b.n	8007e46 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	4b15      	ldr	r3, [pc, #84]	@ (8007ea8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	61da      	str	r2, [r3, #28]
 8007e58:	4b13      	ldr	r3, [pc, #76]	@ (8007ea8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	6892      	ldr	r2, [r2, #8]
 8007e60:	621a      	str	r2, [r3, #32]
 8007e62:	4b11      	ldr	r3, [pc, #68]	@ (8007ea8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	3218      	adds	r2, #24
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f103 0218 	add.w	r2, r3, #24
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	609a      	str	r2, [r3, #8]
 8007e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8007e92:	f04f 33ff 	mov.w	r3, #4294967295
 8007e96:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	68b8      	ldr	r0, [r7, #8]
 8007e9c:	f000 fa38 	bl	8008310 <prvAddCurrentTaskToDelayedList>
    }
 8007ea0:	bf00      	nop
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	200002e8 	.word	0x200002e8

08007eac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b08b      	sub	sp, #44	@ 0x2c
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10b      	bne.n	8007eda <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	60fb      	str	r3, [r7, #12]
    }
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ede:	61fb      	str	r3, [r7, #28]
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	6a3a      	ldr	r2, [r7, #32]
 8007ee6:	6a12      	ldr	r2, [r2, #32]
 8007ee8:	609a      	str	r2, [r3, #8]
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	69d2      	ldr	r2, [r2, #28]
 8007ef2:	605a      	str	r2, [r3, #4]
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	3318      	adds	r3, #24
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d103      	bne.n	8007f08 <xTaskRemoveFromEventList+0x5c>
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	6a1a      	ldr	r2, [r3, #32]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	605a      	str	r2, [r3, #4]
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	1e5a      	subs	r2, r3, #1
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f18:	4b4a      	ldr	r3, [pc, #296]	@ (8008044 <xTaskRemoveFromEventList+0x198>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d15e      	bne.n	8007fde <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	68d2      	ldr	r2, [r2, #12]
 8007f2e:	609a      	str	r2, [r3, #8]
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	6a3a      	ldr	r2, [r7, #32]
 8007f36:	6892      	ldr	r2, [r2, #8]
 8007f38:	605a      	str	r2, [r3, #4]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	3304      	adds	r3, #4
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d103      	bne.n	8007f4e <xTaskRemoveFromEventList+0xa2>
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	605a      	str	r2, [r3, #4]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	2200      	movs	r2, #0
 8007f52:	615a      	str	r2, [r3, #20]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	1e5a      	subs	r2, r3, #1
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f62:	2201      	movs	r2, #1
 8007f64:	409a      	lsls	r2, r3
 8007f66:	4b38      	ldr	r3, [pc, #224]	@ (8008048 <xTaskRemoveFromEventList+0x19c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	4a36      	ldr	r2, [pc, #216]	@ (8008048 <xTaskRemoveFromEventList+0x19c>)
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f74:	4935      	ldr	r1, [pc, #212]	@ (800804c <xTaskRemoveFromEventList+0x1a0>)
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	3304      	adds	r3, #4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	609a      	str	r2, [r3, #8]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	60da      	str	r2, [r3, #12]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	6a3a      	ldr	r2, [r7, #32]
 8007f9a:	3204      	adds	r2, #4
 8007f9c:	605a      	str	r2, [r3, #4]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	1d1a      	adds	r2, r3, #4
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	609a      	str	r2, [r3, #8]
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4a26      	ldr	r2, [pc, #152]	@ (800804c <xTaskRemoveFromEventList+0x1a0>)
 8007fb4:	441a      	add	r2, r3
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	615a      	str	r2, [r3, #20]
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fbe:	4923      	ldr	r1, [pc, #140]	@ (800804c <xTaskRemoveFromEventList+0x1a0>)
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	1c59      	adds	r1, r3, #1
 8007fce:	481f      	ldr	r0, [pc, #124]	@ (800804c <xTaskRemoveFromEventList+0x1a0>)
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4403      	add	r3, r0
 8007fda:	6019      	str	r1, [r3, #0]
 8007fdc:	e01b      	b.n	8008016 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fde:	4b1c      	ldr	r3, [pc, #112]	@ (8008050 <xTaskRemoveFromEventList+0x1a4>)
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	61da      	str	r2, [r3, #28]
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	621a      	str	r2, [r3, #32]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	6a3a      	ldr	r2, [r7, #32]
 8007ff8:	3218      	adds	r2, #24
 8007ffa:	605a      	str	r2, [r3, #4]
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	f103 0218 	add.w	r2, r3, #24
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	609a      	str	r2, [r3, #8]
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	4a11      	ldr	r2, [pc, #68]	@ (8008050 <xTaskRemoveFromEventList+0x1a4>)
 800800a:	629a      	str	r2, [r3, #40]	@ 0x28
 800800c:	4b10      	ldr	r3, [pc, #64]	@ (8008050 <xTaskRemoveFromEventList+0x1a4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	4a0f      	ldr	r2, [pc, #60]	@ (8008050 <xTaskRemoveFromEventList+0x1a4>)
 8008014:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801a:	4b0e      	ldr	r3, [pc, #56]	@ (8008054 <xTaskRemoveFromEventList+0x1a8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	429a      	cmp	r2, r3
 8008022:	d905      	bls.n	8008030 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008024:	2301      	movs	r3, #1
 8008026:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008028:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <xTaskRemoveFromEventList+0x1ac>)
 800802a:	2201      	movs	r2, #1
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e001      	b.n	8008034 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8008030:	2300      	movs	r3, #0
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008036:	4618      	mov	r0, r3
 8008038:	372c      	adds	r7, #44	@ 0x2c
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	200003e8 	.word	0x200003e8
 8008048:	200003c8 	.word	0x200003c8
 800804c:	200002ec 	.word	0x200002ec
 8008050:	20000380 	.word	0x20000380
 8008054:	200002e8 	.word	0x200002e8
 8008058:	200003d4 	.word	0x200003d4

0800805c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008064:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <vTaskInternalSetTimeOutState+0x24>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800806c:	4b05      	ldr	r3, [pc, #20]	@ (8008084 <vTaskInternalSetTimeOutState+0x28>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	605a      	str	r2, [r3, #4]
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	200003d8 	.word	0x200003d8
 8008084:	200003c4 	.word	0x200003c4

08008088 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	613b      	str	r3, [r7, #16]
    }
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60fb      	str	r3, [r7, #12]
    }
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80080ce:	f000 fd5d 	bl	8008b8c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80080d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008150 <xTaskCheckForTimeOut+0xc8>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d102      	bne.n	80080f2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61fb      	str	r3, [r7, #28]
 80080f0:	e026      	b.n	8008140 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b17      	ldr	r3, [pc, #92]	@ (8008154 <xTaskCheckForTimeOut+0xcc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d00a      	beq.n	8008114 <xTaskCheckForTimeOut+0x8c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	d305      	bcc.n	8008114 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	e015      	b.n	8008140 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	429a      	cmp	r2, r3
 800811c:	d20b      	bcs.n	8008136 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	1ad2      	subs	r2, r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff ff96 	bl	800805c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]
 8008134:	e004      	b.n	8008140 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800813c:	2301      	movs	r3, #1
 800813e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8008140:	f000 fd56 	bl	8008bf0 <vPortExitCritical>

    return xReturn;
 8008144:	69fb      	ldr	r3, [r7, #28]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200003c4 	.word	0x200003c4
 8008154:	200003d8 	.word	0x200003d8

08008158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800815c:	4b03      	ldr	r3, [pc, #12]	@ (800816c <vTaskMissedYield+0x14>)
 800815e:	2201      	movs	r2, #1
 8008160:	601a      	str	r2, [r3, #0]
}
 8008162:	bf00      	nop
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	200003d4 	.word	0x200003d4

08008170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008178:	f000 f852 	bl	8008220 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800817c:	4b06      	ldr	r3, [pc, #24]	@ (8008198 <prvIdleTask+0x28>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d9f9      	bls.n	8008178 <prvIdleTask+0x8>
            {
                taskYIELD();
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <prvIdleTask+0x2c>)
 8008186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8008194:	e7f0      	b.n	8008178 <prvIdleTask+0x8>
 8008196:	bf00      	nop
 8008198:	200002ec 	.word	0x200002ec
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081a6:	2300      	movs	r3, #0
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	e00c      	b.n	80081c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4a12      	ldr	r2, [pc, #72]	@ (8008200 <prvInitialiseTaskLists+0x60>)
 80081b8:	4413      	add	r3, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fdff 	bl	8006dbe <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3301      	adds	r3, #1
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d9ef      	bls.n	80081ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80081cc:	480d      	ldr	r0, [pc, #52]	@ (8008204 <prvInitialiseTaskLists+0x64>)
 80081ce:	f7fe fdf6 	bl	8006dbe <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80081d2:	480d      	ldr	r0, [pc, #52]	@ (8008208 <prvInitialiseTaskLists+0x68>)
 80081d4:	f7fe fdf3 	bl	8006dbe <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80081d8:	480c      	ldr	r0, [pc, #48]	@ (800820c <prvInitialiseTaskLists+0x6c>)
 80081da:	f7fe fdf0 	bl	8006dbe <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80081de:	480c      	ldr	r0, [pc, #48]	@ (8008210 <prvInitialiseTaskLists+0x70>)
 80081e0:	f7fe fded 	bl	8006dbe <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80081e4:	480b      	ldr	r0, [pc, #44]	@ (8008214 <prvInitialiseTaskLists+0x74>)
 80081e6:	f7fe fdea 	bl	8006dbe <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80081ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008218 <prvInitialiseTaskLists+0x78>)
 80081ec:	4a05      	ldr	r2, [pc, #20]	@ (8008204 <prvInitialiseTaskLists+0x64>)
 80081ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081f0:	4b0a      	ldr	r3, [pc, #40]	@ (800821c <prvInitialiseTaskLists+0x7c>)
 80081f2:	4a05      	ldr	r2, [pc, #20]	@ (8008208 <prvInitialiseTaskLists+0x68>)
 80081f4:	601a      	str	r2, [r3, #0]
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	200002ec 	.word	0x200002ec
 8008204:	20000350 	.word	0x20000350
 8008208:	20000364 	.word	0x20000364
 800820c:	20000380 	.word	0x20000380
 8008210:	20000394 	.word	0x20000394
 8008214:	200003ac 	.word	0x200003ac
 8008218:	20000378 	.word	0x20000378
 800821c:	2000037c 	.word	0x2000037c

08008220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008226:	e019      	b.n	800825c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008228:	f000 fcb0 	bl	8008b8c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800822c:	4b10      	ldr	r3, [pc, #64]	@ (8008270 <prvCheckTasksWaitingTermination+0x50>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3304      	adds	r3, #4
 8008238:	4618      	mov	r0, r3
 800823a:	f7fe fe26 	bl	8006e8a <uxListRemove>
                --uxCurrentNumberOfTasks;
 800823e:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <prvCheckTasksWaitingTermination+0x54>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3b01      	subs	r3, #1
 8008244:	4a0b      	ldr	r2, [pc, #44]	@ (8008274 <prvCheckTasksWaitingTermination+0x54>)
 8008246:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008248:	4b0b      	ldr	r3, [pc, #44]	@ (8008278 <prvCheckTasksWaitingTermination+0x58>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3b01      	subs	r3, #1
 800824e:	4a0a      	ldr	r2, [pc, #40]	@ (8008278 <prvCheckTasksWaitingTermination+0x58>)
 8008250:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008252:	f000 fccd 	bl	8008bf0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f810 	bl	800827c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800825c:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <prvCheckTasksWaitingTermination+0x58>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e1      	bne.n	8008228 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000394 	.word	0x20000394
 8008274:	200003c0 	.word	0x200003c0
 8008278:	200003a8 	.word	0x200003a8

0800827c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fe23 	bl	8008ed4 <vPortFree>
            vPortFree( pxTCB );
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fe20 	bl	8008ed4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a0:	4b0a      	ldr	r3, [pc, #40]	@ (80082cc <prvResetNextTaskUnblockTime+0x30>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80082aa:	4b09      	ldr	r3, [pc, #36]	@ (80082d0 <prvResetNextTaskUnblockTime+0x34>)
 80082ac:	f04f 32ff 	mov.w	r2, #4294967295
 80082b0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80082b2:	e005      	b.n	80082c0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80082b4:	4b05      	ldr	r3, [pc, #20]	@ (80082cc <prvResetNextTaskUnblockTime+0x30>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a04      	ldr	r2, [pc, #16]	@ (80082d0 <prvResetNextTaskUnblockTime+0x34>)
 80082be:	6013      	str	r3, [r2, #0]
}
 80082c0:	bf00      	nop
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	20000378 	.word	0x20000378
 80082d0:	200003e0 	.word	0x200003e0

080082d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80082da:	4b0b      	ldr	r3, [pc, #44]	@ (8008308 <xTaskGetSchedulerState+0x34>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80082e2:	2301      	movs	r3, #1
 80082e4:	607b      	str	r3, [r7, #4]
 80082e6:	e008      	b.n	80082fa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e8:	4b08      	ldr	r3, [pc, #32]	@ (800830c <xTaskGetSchedulerState+0x38>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80082f0:	2302      	movs	r3, #2
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e001      	b.n	80082fa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80082f6:	2300      	movs	r3, #0
 80082f8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80082fa:	687b      	ldr	r3, [r7, #4]
    }
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	200003cc 	.word	0x200003cc
 800830c:	200003e8 	.word	0x200003e8

08008310 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800831a:	4b36      	ldr	r3, [pc, #216]	@ (80083f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008320:	4b35      	ldr	r3, [pc, #212]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3304      	adds	r3, #4
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fdaf 	bl	8006e8a <uxListRemove>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10b      	bne.n	800834a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008332:	4b31      	ldr	r3, [pc, #196]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008338:	2201      	movs	r2, #1
 800833a:	fa02 f303 	lsl.w	r3, r2, r3
 800833e:	43da      	mvns	r2, r3
 8008340:	4b2e      	ldr	r3, [pc, #184]	@ (80083fc <prvAddCurrentTaskToDelayedList+0xec>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4013      	ands	r3, r2
 8008346:	4a2d      	ldr	r2, [pc, #180]	@ (80083fc <prvAddCurrentTaskToDelayedList+0xec>)
 8008348:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d124      	bne.n	800839c <prvAddCurrentTaskToDelayedList+0x8c>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d021      	beq.n	800839c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008358:	4b29      	ldr	r3, [pc, #164]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xf0>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	4b26      	ldr	r3, [pc, #152]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	609a      	str	r2, [r3, #8]
 8008366:	4b24      	ldr	r3, [pc, #144]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	6892      	ldr	r2, [r2, #8]
 800836e:	60da      	str	r2, [r3, #12]
 8008370:	4b21      	ldr	r3, [pc, #132]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	3204      	adds	r2, #4
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	4b1e      	ldr	r3, [pc, #120]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	1d1a      	adds	r2, r3, #4
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	609a      	str	r2, [r3, #8]
 8008386:	4b1c      	ldr	r3, [pc, #112]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1d      	ldr	r2, [pc, #116]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xf0>)
 800838c:	615a      	str	r2, [r3, #20]
 800838e:	4b1c      	ldr	r3, [pc, #112]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	4a1a      	ldr	r2, [pc, #104]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800839a:	e026      	b.n	80083ea <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4413      	add	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083a4:	4b14      	ldr	r3, [pc, #80]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d209      	bcs.n	80083c8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083b4:	4b13      	ldr	r3, [pc, #76]	@ (8008404 <prvAddCurrentTaskToDelayedList+0xf4>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	4b0f      	ldr	r3, [pc, #60]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3304      	adds	r3, #4
 80083be:	4619      	mov	r1, r3
 80083c0:	4610      	mov	r0, r2
 80083c2:	f7fe fd29 	bl	8006e18 <vListInsert>
}
 80083c6:	e010      	b.n	80083ea <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008408 <prvAddCurrentTaskToDelayedList+0xf8>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3304      	adds	r3, #4
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f7fe fd1f 	bl	8006e18 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80083da:	4b0c      	ldr	r3, [pc, #48]	@ (800840c <prvAddCurrentTaskToDelayedList+0xfc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d202      	bcs.n	80083ea <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80083e4:	4a09      	ldr	r2, [pc, #36]	@ (800840c <prvAddCurrentTaskToDelayedList+0xfc>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6013      	str	r3, [r2, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200003c4 	.word	0x200003c4
 80083f8:	200002e8 	.word	0x200002e8
 80083fc:	200003c8 	.word	0x200003c8
 8008400:	200003ac 	.word	0x200003ac
 8008404:	2000037c 	.word	0x2000037c
 8008408:	20000378 	.word	0x20000378
 800840c:	200003e0 	.word	0x200003e0

08008410 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8008416:	2300      	movs	r3, #0
 8008418:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800841a:	f000 fa4f 	bl	80088bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800841e:	4b12      	ldr	r3, [pc, #72]	@ (8008468 <xTimerCreateTimerTask+0x58>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8008426:	4b11      	ldr	r3, [pc, #68]	@ (800846c <xTimerCreateTimerTask+0x5c>)
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	2302      	movs	r3, #2
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008434:	490e      	ldr	r1, [pc, #56]	@ (8008470 <xTimerCreateTimerTask+0x60>)
 8008436:	480f      	ldr	r0, [pc, #60]	@ (8008474 <xTimerCreateTimerTask+0x64>)
 8008438:	f7ff f84a 	bl	80074d0 <xTaskCreate>
 800843c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10b      	bne.n	800845c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	603b      	str	r3, [r7, #0]
    }
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800845c:	687b      	ldr	r3, [r7, #4]
    }
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	2000041c 	.word	0x2000041c
 800846c:	20000420 	.word	0x20000420
 8008470:	0800bab4 	.word	0x0800bab4
 8008474:	0800851d 	.word	0x0800851d

08008478 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008484:	e008      	b.n	8008498 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4413      	add	r3, r2
 800848e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	699a      	ldr	r2, [r3, #24]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	18d1      	adds	r1, r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f8df 	bl	8008668 <prvInsertTimerInActiveList>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1ea      	bne.n	8008486 <prvReloadTimer+0xe>
        }
    }
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c6:	4b14      	ldr	r3, [pc, #80]	@ (8008518 <prvProcessExpiredTimer+0x5c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fcd8 	bl	8006e8a <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff ffc3 	bl	8008478 <prvReloadTimer>
 80084f2:	e008      	b.n	8008506 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084fa:	f023 0301 	bic.w	r3, r3, #1
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	4798      	blx	r3
    }
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000414 	.word	0x20000414

0800851c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008524:	f107 0308 	add.w	r3, r7, #8
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f859 	bl	80085e0 <prvGetNextExpireTime>
 800852e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f805 	bl	8008544 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800853a:	f000 f8d7 	bl	80086ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800853e:	bf00      	nop
 8008540:	e7f0      	b.n	8008524 <prvTimerTask+0x8>
	...

08008544 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800854e:	f7ff f9b3 	bl	80078b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008552:	f107 0308 	add.w	r3, r7, #8
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f866 	bl	8008628 <prvSampleTimeNow>
 800855c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d130      	bne.n	80085c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <prvProcessTimerOrBlockTask+0x3c>
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	429a      	cmp	r2, r3
 8008570:	d806      	bhi.n	8008580 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008572:	f7ff f9af 	bl	80078d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008576:	68f9      	ldr	r1, [r7, #12]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff ff9f 	bl	80084bc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800857e:	e024      	b.n	80085ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008586:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <prvProcessTimerOrBlockTask+0x90>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <prvProcessTimerOrBlockTask+0x50>
 8008590:	2301      	movs	r3, #1
 8008592:	e000      	b.n	8008596 <prvProcessTimerOrBlockTask+0x52>
 8008594:	2300      	movs	r3, #0
 8008596:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008598:	4b0f      	ldr	r3, [pc, #60]	@ (80085d8 <prvProcessTimerOrBlockTask+0x94>)
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4619      	mov	r1, r3
 80085a6:	f7fe ff5f 	bl	8007468 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80085aa:	f7ff f993 	bl	80078d4 <xTaskResumeAll>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80085b4:	4b09      	ldr	r3, [pc, #36]	@ (80085dc <prvProcessTimerOrBlockTask+0x98>)
 80085b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	f3bf 8f6f 	isb	sy
    }
 80085c4:	e001      	b.n	80085ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80085c6:	f7ff f985 	bl	80078d4 <xTaskResumeAll>
    }
 80085ca:	bf00      	nop
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000418 	.word	0x20000418
 80085d8:	2000041c 	.word	0x2000041c
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008624 <prvGetNextExpireTime+0x44>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <prvGetNextExpireTime+0x16>
 80085f2:	2201      	movs	r2, #1
 80085f4:	e000      	b.n	80085f8 <prvGetNextExpireTime+0x18>
 80085f6:	2200      	movs	r2, #0
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d105      	bne.n	8008610 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008604:	4b07      	ldr	r3, [pc, #28]	@ (8008624 <prvGetNextExpireTime+0x44>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	e001      	b.n	8008614 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008614:	68fb      	ldr	r3, [r7, #12]
    }
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20000414 	.word	0x20000414

08008628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008630:	f7ff fa4c 	bl	8007acc <xTaskGetTickCount>
 8008634:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008636:	4b0b      	ldr	r3, [pc, #44]	@ (8008664 <prvSampleTimeNow+0x3c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	429a      	cmp	r2, r3
 800863e:	d205      	bcs.n	800864c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008640:	f000 f916 	bl	8008870 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	e002      	b.n	8008652 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008652:	4a04      	ldr	r2, [pc, #16]	@ (8008664 <prvSampleTimeNow+0x3c>)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008658:	68fb      	ldr	r3, [r7, #12]
    }
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000424 	.word	0x20000424

08008668 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d812      	bhi.n	80086b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	429a      	cmp	r2, r3
 800869a:	d302      	bcc.n	80086a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800869c:	2301      	movs	r3, #1
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	e01b      	b.n	80086da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086a2:	4b10      	ldr	r3, [pc, #64]	@ (80086e4 <prvInsertTimerInActiveList+0x7c>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3304      	adds	r3, #4
 80086aa:	4619      	mov	r1, r3
 80086ac:	4610      	mov	r0, r2
 80086ae:	f7fe fbb3 	bl	8006e18 <vListInsert>
 80086b2:	e012      	b.n	80086da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d206      	bcs.n	80086ca <prvInsertTimerInActiveList+0x62>
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d302      	bcc.n	80086ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80086c4:	2301      	movs	r3, #1
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	e007      	b.n	80086da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086ca:	4b07      	ldr	r3, [pc, #28]	@ (80086e8 <prvInsertTimerInActiveList+0x80>)
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3304      	adds	r3, #4
 80086d2:	4619      	mov	r1, r3
 80086d4:	4610      	mov	r0, r2
 80086d6:	f7fe fb9f 	bl	8006e18 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80086da:	697b      	ldr	r3, [r7, #20]
    }
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000418 	.word	0x20000418
 80086e8:	20000414 	.word	0x20000414

080086ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086f2:	e0a9      	b.n	8008848 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f2c0 80a6 	blt.w	8008848 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	3304      	adds	r3, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe fbbc 	bl	8006e8a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008712:	1d3b      	adds	r3, r7, #4
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff ff87 	bl	8008628 <prvSampleTimeNow>
 800871a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	3b01      	subs	r3, #1
 8008720:	2b08      	cmp	r3, #8
 8008722:	f200 808e 	bhi.w	8008842 <prvProcessReceivedCommands+0x156>
 8008726:	a201      	add	r2, pc, #4	@ (adr r2, 800872c <prvProcessReceivedCommands+0x40>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	08008751 	.word	0x08008751
 8008730:	08008751 	.word	0x08008751
 8008734:	080087b9 	.word	0x080087b9
 8008738:	080087cd 	.word	0x080087cd
 800873c:	08008819 	.word	0x08008819
 8008740:	08008751 	.word	0x08008751
 8008744:	08008751 	.word	0x08008751
 8008748:	080087b9 	.word	0x080087b9
 800874c:	080087cd 	.word	0x080087cd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	b2da      	uxtb	r2, r3
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	18d1      	adds	r1, r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	69f8      	ldr	r0, [r7, #28]
 8008770:	f7ff ff7a 	bl	8008668 <prvInsertTimerInActiveList>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d065      	beq.n	8008846 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d009      	beq.n	800879c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	4413      	add	r3, r2
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	4619      	mov	r1, r3
 8008794:	69f8      	ldr	r0, [r7, #28]
 8008796:	f7ff fe6f 	bl	8008478 <prvReloadTimer>
 800879a:	e008      	b.n	80087ae <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087a2:	f023 0301 	bic.w	r3, r3, #1
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	69f8      	ldr	r0, [r7, #28]
 80087b4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80087b6:	e046      	b.n	8008846 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80087ca:	e03d      	b.n	8008848 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087d2:	f043 0301 	orr.w	r3, r3, #1
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10b      	bne.n	8008804 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	617b      	str	r3, [r7, #20]
    }
 80087fe:	bf00      	nop
 8008800:	bf00      	nop
 8008802:	e7fd      	b.n	8008800 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	18d1      	adds	r1, r2, r3
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	69f8      	ldr	r0, [r7, #28]
 8008812:	f7ff ff29 	bl	8008668 <prvInsertTimerInActiveList>
                        break;
 8008816:	e017      	b.n	8008848 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d103      	bne.n	800882e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8008826:	69f8      	ldr	r0, [r7, #28]
 8008828:	f000 fb54 	bl	8008ed4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800882c:	e00c      	b.n	8008848 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008834:	f023 0301 	bic.w	r3, r3, #1
 8008838:	b2da      	uxtb	r2, r3
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008840:	e002      	b.n	8008848 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008842:	bf00      	nop
 8008844:	e000      	b.n	8008848 <prvProcessReceivedCommands+0x15c>
                        break;
 8008846:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008848:	4b08      	ldr	r3, [pc, #32]	@ (800886c <prvProcessReceivedCommands+0x180>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f107 0108 	add.w	r1, r7, #8
 8008850:	2200      	movs	r2, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe fc48 	bl	80070e8 <xQueueReceive>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	f47f af4a 	bne.w	80086f4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	3720      	adds	r7, #32
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	2000041c 	.word	0x2000041c

08008870 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008876:	e009      	b.n	800888c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008878:	4b0e      	ldr	r3, [pc, #56]	@ (80088b4 <prvSwitchTimerLists+0x44>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008882:	f04f 31ff 	mov.w	r1, #4294967295
 8008886:	6838      	ldr	r0, [r7, #0]
 8008888:	f7ff fe18 	bl	80084bc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800888c:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <prvSwitchTimerLists+0x44>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f0      	bne.n	8008878 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008896:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <prvSwitchTimerLists+0x44>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800889c:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <prvSwitchTimerLists+0x48>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a04      	ldr	r2, [pc, #16]	@ (80088b4 <prvSwitchTimerLists+0x44>)
 80088a2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80088a4:	4a04      	ldr	r2, [pc, #16]	@ (80088b8 <prvSwitchTimerLists+0x48>)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6013      	str	r3, [r2, #0]
    }
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20000414 	.word	0x20000414
 80088b8:	20000418 	.word	0x20000418

080088bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80088c0:	f000 f964 	bl	8008b8c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80088c4:	4b12      	ldr	r3, [pc, #72]	@ (8008910 <prvCheckForValidListAndQueue+0x54>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11d      	bne.n	8008908 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80088cc:	4811      	ldr	r0, [pc, #68]	@ (8008914 <prvCheckForValidListAndQueue+0x58>)
 80088ce:	f7fe fa76 	bl	8006dbe <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80088d2:	4811      	ldr	r0, [pc, #68]	@ (8008918 <prvCheckForValidListAndQueue+0x5c>)
 80088d4:	f7fe fa73 	bl	8006dbe <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80088d8:	4b10      	ldr	r3, [pc, #64]	@ (800891c <prvCheckForValidListAndQueue+0x60>)
 80088da:	4a0e      	ldr	r2, [pc, #56]	@ (8008914 <prvCheckForValidListAndQueue+0x58>)
 80088dc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80088de:	4b10      	ldr	r3, [pc, #64]	@ (8008920 <prvCheckForValidListAndQueue+0x64>)
 80088e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008918 <prvCheckForValidListAndQueue+0x5c>)
 80088e2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80088e4:	2200      	movs	r2, #0
 80088e6:	210c      	movs	r1, #12
 80088e8:	200a      	movs	r0, #10
 80088ea:	f7fe fb8b 	bl	8007004 <xQueueGenericCreate>
 80088ee:	4603      	mov	r3, r0
 80088f0:	4a07      	ldr	r2, [pc, #28]	@ (8008910 <prvCheckForValidListAndQueue+0x54>)
 80088f2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80088f4:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <prvCheckForValidListAndQueue+0x54>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088fc:	4b04      	ldr	r3, [pc, #16]	@ (8008910 <prvCheckForValidListAndQueue+0x54>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4908      	ldr	r1, [pc, #32]	@ (8008924 <prvCheckForValidListAndQueue+0x68>)
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fd60 	bl	80073c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008908:	f000 f972 	bl	8008bf0 <vPortExitCritical>
    }
 800890c:	bf00      	nop
 800890e:	bd80      	pop	{r7, pc}
 8008910:	2000041c 	.word	0x2000041c
 8008914:	200003ec 	.word	0x200003ec
 8008918:	20000400 	.word	0x20000400
 800891c:	20000414 	.word	0x20000414
 8008920:	20000418 	.word	0x20000418
 8008924:	0800babc 	.word	0x0800babc

08008928 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3b04      	subs	r3, #4
 8008938:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008940:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b04      	subs	r3, #4
 8008946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3b04      	subs	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008958:	4a0c      	ldr	r2, [pc, #48]	@ (800898c <pxPortInitialiseStack+0x64>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b14      	subs	r3, #20
 8008962:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b04      	subs	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f06f 0202 	mvn.w	r2, #2
 8008976:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b20      	subs	r3, #32
 800897c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	08008991 	.word	0x08008991

08008990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800899a:	4b13      	ldr	r3, [pc, #76]	@ (80089e8 <prvTaskExitError+0x58>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d00b      	beq.n	80089bc <prvTaskExitError+0x2c>
        __asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60fb      	str	r3, [r7, #12]
    }
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <prvTaskExitError+0x28>
        __asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60bb      	str	r3, [r7, #8]
    }
 80089ce:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80089d0:	bf00      	nop
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0fc      	beq.n	80089d2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	20000010 	.word	0x20000010
 80089ec:	00000000 	.word	0x00000000

080089f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80089f0:	4b07      	ldr	r3, [pc, #28]	@ (8008a10 <pxCurrentTCBConst2>)
 80089f2:	6819      	ldr	r1, [r3, #0]
 80089f4:	6808      	ldr	r0, [r1, #0]
 80089f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fa:	f380 8809 	msr	PSP, r0
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8811 	msr	BASEPRI, r0
 8008a0a:	4770      	bx	lr
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst2>:
 8008a10:	200002e8 	.word	0x200002e8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008a18:	4808      	ldr	r0, [pc, #32]	@ (8008a3c <prvPortStartFirstTask+0x24>)
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f380 8808 	msr	MSP, r0
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8814 	msr	CONTROL, r0
 8008a2a:	b662      	cpsie	i
 8008a2c:	b661      	cpsie	f
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	df00      	svc	0
 8008a38:	bf00      	nop
 8008a3a:	0000      	.short	0x0000
 8008a3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008a40:	bf00      	nop
 8008a42:	bf00      	nop

08008a44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a4a:	4b47      	ldr	r3, [pc, #284]	@ (8008b68 <xPortStartScheduler+0x124>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a47      	ldr	r2, [pc, #284]	@ (8008b6c <xPortStartScheduler+0x128>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d10b      	bne.n	8008a6c <xPortStartScheduler+0x28>
        __asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	613b      	str	r3, [r7, #16]
    }
 8008a66:	bf00      	nop
 8008a68:	bf00      	nop
 8008a6a:	e7fd      	b.n	8008a68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8008b68 <xPortStartScheduler+0x124>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a3f      	ldr	r2, [pc, #252]	@ (8008b70 <xPortStartScheduler+0x12c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d10b      	bne.n	8008a8e <xPortStartScheduler+0x4a>
        __asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	60fb      	str	r3, [r7, #12]
    }
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a8e:	4b39      	ldr	r3, [pc, #228]	@ (8008b74 <xPortStartScheduler+0x130>)
 8008a90:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	22ff      	movs	r2, #255	@ 0xff
 8008a9e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	4b31      	ldr	r3, [pc, #196]	@ (8008b78 <xPortStartScheduler+0x134>)
 8008ab4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ab6:	4b31      	ldr	r3, [pc, #196]	@ (8008b7c <xPortStartScheduler+0x138>)
 8008ab8:	2207      	movs	r2, #7
 8008aba:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008abc:	e009      	b.n	8008ad2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8008abe:	4b2f      	ldr	r3, [pc, #188]	@ (8008b7c <xPortStartScheduler+0x138>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8008b7c <xPortStartScheduler+0x138>)
 8008ac6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ada:	2b80      	cmp	r3, #128	@ 0x80
 8008adc:	d0ef      	beq.n	8008abe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ade:	4b27      	ldr	r3, [pc, #156]	@ (8008b7c <xPortStartScheduler+0x138>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f1c3 0307 	rsb	r3, r3, #7
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d00b      	beq.n	8008b02 <xPortStartScheduler+0xbe>
        __asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	60bb      	str	r3, [r7, #8]
    }
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	e7fd      	b.n	8008afe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b02:	4b1e      	ldr	r3, [pc, #120]	@ (8008b7c <xPortStartScheduler+0x138>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	021b      	lsls	r3, r3, #8
 8008b08:	4a1c      	ldr	r2, [pc, #112]	@ (8008b7c <xPortStartScheduler+0x138>)
 8008b0a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008b7c <xPortStartScheduler+0x138>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b14:	4a19      	ldr	r2, [pc, #100]	@ (8008b7c <xPortStartScheduler+0x138>)
 8008b16:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008b20:	4b17      	ldr	r3, [pc, #92]	@ (8008b80 <xPortStartScheduler+0x13c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a16      	ldr	r2, [pc, #88]	@ (8008b80 <xPortStartScheduler+0x13c>)
 8008b26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008b2c:	4b14      	ldr	r3, [pc, #80]	@ (8008b80 <xPortStartScheduler+0x13c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a13      	ldr	r2, [pc, #76]	@ (8008b80 <xPortStartScheduler+0x13c>)
 8008b32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b36:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008b38:	f000 f8e0 	bl	8008cfc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008b3c:	4b11      	ldr	r3, [pc, #68]	@ (8008b84 <xPortStartScheduler+0x140>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008b42:	f000 f8ff 	bl	8008d44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b46:	4b10      	ldr	r3, [pc, #64]	@ (8008b88 <xPortStartScheduler+0x144>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8008b88 <xPortStartScheduler+0x144>)
 8008b4c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b50:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008b52:	f7ff ff61 	bl	8008a18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008b56:	f7ff f8e1 	bl	8007d1c <vTaskSwitchContext>
    prvTaskExitError();
 8008b5a:	f7ff ff19 	bl	8008990 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000ed00 	.word	0xe000ed00
 8008b6c:	410fc271 	.word	0x410fc271
 8008b70:	410fc270 	.word	0x410fc270
 8008b74:	e000e400 	.word	0xe000e400
 8008b78:	20000428 	.word	0x20000428
 8008b7c:	2000042c 	.word	0x2000042c
 8008b80:	e000ed20 	.word	0xe000ed20
 8008b84:	20000010 	.word	0x20000010
 8008b88:	e000ef34 	.word	0xe000ef34

08008b8c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
        __asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	607b      	str	r3, [r7, #4]
    }
 8008ba4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008ba6:	4b10      	ldr	r3, [pc, #64]	@ (8008be8 <vPortEnterCritical+0x5c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3301      	adds	r3, #1
 8008bac:	4a0e      	ldr	r2, [pc, #56]	@ (8008be8 <vPortEnterCritical+0x5c>)
 8008bae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8008be8 <vPortEnterCritical+0x5c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d110      	bne.n	8008bda <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008bec <vPortEnterCritical+0x60>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <vPortEnterCritical+0x4e>
        __asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	603b      	str	r3, [r7, #0]
    }
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop
 8008bd8:	e7fd      	b.n	8008bd6 <vPortEnterCritical+0x4a>
    }
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	20000010 	.word	0x20000010
 8008bec:	e000ed04 	.word	0xe000ed04

08008bf0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008bf6:	4b12      	ldr	r3, [pc, #72]	@ (8008c40 <vPortExitCritical+0x50>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10b      	bne.n	8008c16 <vPortExitCritical+0x26>
        __asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
    }
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	e7fd      	b.n	8008c12 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008c16:	4b0a      	ldr	r3, [pc, #40]	@ (8008c40 <vPortExitCritical+0x50>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	4a08      	ldr	r2, [pc, #32]	@ (8008c40 <vPortExitCritical+0x50>)
 8008c1e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008c20:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <vPortExitCritical+0x50>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <vPortExitCritical+0x44>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008c32:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000010 	.word	0x20000010
	...

08008c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008c50:	f3ef 8009 	mrs	r0, PSP
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	4b15      	ldr	r3, [pc, #84]	@ (8008cb0 <pxCurrentTCBConst>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	f01e 0f10 	tst.w	lr, #16
 8008c60:	bf08      	it	eq
 8008c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	6010      	str	r0, [r2, #0]
 8008c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c74:	f380 8811 	msr	BASEPRI, r0
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f7ff f84c 	bl	8007d1c <vTaskSwitchContext>
 8008c84:	f04f 0000 	mov.w	r0, #0
 8008c88:	f380 8811 	msr	BASEPRI, r0
 8008c8c:	bc09      	pop	{r0, r3}
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6808      	ldr	r0, [r1, #0]
 8008c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c96:	f01e 0f10 	tst.w	lr, #16
 8008c9a:	bf08      	it	eq
 8008c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ca0:	f380 8809 	msr	PSP, r0
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	f3af 8000 	nop.w

08008cb0 <pxCurrentTCBConst>:
 8008cb0:	200002e8 	.word	0x200002e8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop

08008cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
        __asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
    }
 8008cd0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008cd2:	f7fe ff0b 	bl	8007aec <xTaskIncrementTick>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cdc:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <SysTick_Handler+0x40>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f383 8811 	msr	BASEPRI, r3
    }
 8008cee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d00:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d06:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <vPortSetupTimerInterrupt+0x38>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <vPortSetupTimerInterrupt+0x3c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a0a      	ldr	r2, [pc, #40]	@ (8008d3c <vPortSetupTimerInterrupt+0x40>)
 8008d12:	fba2 2303 	umull	r2, r3, r2, r3
 8008d16:	099b      	lsrs	r3, r3, #6
 8008d18:	4a09      	ldr	r2, [pc, #36]	@ (8008d40 <vPortSetupTimerInterrupt+0x44>)
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d1e:	4b04      	ldr	r3, [pc, #16]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d20:	2207      	movs	r2, #7
 8008d22:	601a      	str	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	e000e010 	.word	0xe000e010
 8008d34:	e000e018 	.word	0xe000e018
 8008d38:	20000000 	.word	0x20000000
 8008d3c:	10624dd3 	.word	0x10624dd3
 8008d40:	e000e014 	.word	0xe000e014

08008d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d54 <vPortEnableVFP+0x10>
 8008d48:	6801      	ldr	r1, [r0, #0]
 8008d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d4e:	6001      	str	r1, [r0, #0]
 8008d50:	4770      	bx	lr
 8008d52:	0000      	.short	0x0000
 8008d54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop

08008d5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08a      	sub	sp, #40	@ 0x28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008d68:	f7fe fda6 	bl	80078b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008d6c:	4b54      	ldr	r3, [pc, #336]	@ (8008ec0 <pvPortMalloc+0x164>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008d74:	f000 f90c 	bl	8008f90 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d012      	beq.n	8008da4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8008d7e:	2208      	movs	r2, #8
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	3308      	adds	r3, #8
 8008d8a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	43db      	mvns	r3, r3
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d804      	bhi.n	8008da0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	e001      	b.n	8008da4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	db71      	blt.n	8008e8e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d06e      	beq.n	8008e8e <pvPortMalloc+0x132>
 8008db0:	4b44      	ldr	r3, [pc, #272]	@ (8008ec4 <pvPortMalloc+0x168>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d869      	bhi.n	8008e8e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008dba:	4b43      	ldr	r3, [pc, #268]	@ (8008ec8 <pvPortMalloc+0x16c>)
 8008dbc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008dbe:	4b42      	ldr	r3, [pc, #264]	@ (8008ec8 <pvPortMalloc+0x16c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dc4:	e004      	b.n	8008dd0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d903      	bls.n	8008de2 <pvPortMalloc+0x86>
 8008dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f1      	bne.n	8008dc6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008de2:	4b37      	ldr	r3, [pc, #220]	@ (8008ec0 <pvPortMalloc+0x164>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d050      	beq.n	8008e8e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2208      	movs	r2, #8
 8008df2:	4413      	add	r3, r2
 8008df4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	1ad2      	subs	r2, r2, r3
 8008e06:	2308      	movs	r3, #8
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d920      	bls.n	8008e50 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <pvPortMalloc+0xdc>
        __asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	613b      	str	r3, [r7, #16]
    }
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	e7fd      	b.n	8008e34 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e4a:	6978      	ldr	r0, [r7, #20]
 8008e4c:	f000 f8fc 	bl	8009048 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e50:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec4 <pvPortMalloc+0x168>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ec4 <pvPortMalloc+0x168>)
 8008e5c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e5e:	4b19      	ldr	r3, [pc, #100]	@ (8008ec4 <pvPortMalloc+0x168>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b1a      	ldr	r3, [pc, #104]	@ (8008ecc <pvPortMalloc+0x170>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d203      	bcs.n	8008e72 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e6a:	4b16      	ldr	r3, [pc, #88]	@ (8008ec4 <pvPortMalloc+0x168>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a17      	ldr	r2, [pc, #92]	@ (8008ecc <pvPortMalloc+0x170>)
 8008e70:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	2200      	movs	r2, #0
 8008e82:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008e84:	4b12      	ldr	r3, [pc, #72]	@ (8008ed0 <pvPortMalloc+0x174>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	4a11      	ldr	r2, [pc, #68]	@ (8008ed0 <pvPortMalloc+0x174>)
 8008e8c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008e8e:	f7fe fd21 	bl	80078d4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <pvPortMalloc+0x158>
        __asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	60fb      	str	r3, [r7, #12]
    }
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	e7fd      	b.n	8008eb0 <pvPortMalloc+0x154>
    return pvReturn;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3728      	adds	r7, #40	@ 0x28
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20013038 	.word	0x20013038
 8008ec4:	2001303c 	.word	0x2001303c
 8008ec8:	20013030 	.word	0x20013030
 8008ecc:	20013040 	.word	0x20013040
 8008ed0:	20013044 	.word	0x20013044

08008ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d04b      	beq.n	8008f7e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008ee6:	2308      	movs	r3, #8
 8008ee8:	425b      	negs	r3, r3
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4413      	add	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	db0b      	blt.n	8008f14 <vPortFree+0x40>
        __asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	60fb      	str	r3, [r7, #12]
    }
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	e7fd      	b.n	8008f10 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <vPortFree+0x60>
        __asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	60bb      	str	r3, [r7, #8]
    }
 8008f2e:	bf00      	nop
 8008f30:	bf00      	nop
 8008f32:	e7fd      	b.n	8008f30 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	0fdb      	lsrs	r3, r3, #31
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01c      	beq.n	8008f7e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d118      	bne.n	8008f7e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008f58:	f7fe fcae 	bl	80078b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	4b09      	ldr	r3, [pc, #36]	@ (8008f88 <vPortFree+0xb4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4413      	add	r3, r2
 8008f66:	4a08      	ldr	r2, [pc, #32]	@ (8008f88 <vPortFree+0xb4>)
 8008f68:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f6a:	6938      	ldr	r0, [r7, #16]
 8008f6c:	f000 f86c 	bl	8009048 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008f70:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <vPortFree+0xb8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	4a05      	ldr	r2, [pc, #20]	@ (8008f8c <vPortFree+0xb8>)
 8008f78:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008f7a:	f7fe fcab 	bl	80078d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008f7e:	bf00      	nop
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2001303c 	.word	0x2001303c
 8008f8c:	20013048 	.word	0x20013048

08008f90 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f96:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8008f9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008f9c:	4b25      	ldr	r3, [pc, #148]	@ (8009034 <prvHeapInit+0xa4>)
 8008f9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00c      	beq.n	8008fc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3307      	adds	r3, #7
 8008fae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0307 	bic.w	r3, r3, #7
 8008fb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8009034 <prvHeapInit+0xa4>)
 8008fc0:	4413      	add	r3, r2
 8008fc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8009038 <prvHeapInit+0xa8>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008fce:	4b1a      	ldr	r3, [pc, #104]	@ (8009038 <prvHeapInit+0xa8>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008fdc:	2208      	movs	r2, #8
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1a9b      	subs	r3, r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4a13      	ldr	r2, [pc, #76]	@ (800903c <prvHeapInit+0xac>)
 8008ff0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008ff2:	4b12      	ldr	r3, [pc, #72]	@ (800903c <prvHeapInit+0xac>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008ffa:	4b10      	ldr	r3, [pc, #64]	@ (800903c <prvHeapInit+0xac>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009010:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <prvHeapInit+0xac>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4a08      	ldr	r2, [pc, #32]	@ (8009040 <prvHeapInit+0xb0>)
 800901e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4a07      	ldr	r2, [pc, #28]	@ (8009044 <prvHeapInit+0xb4>)
 8009026:	6013      	str	r3, [r2, #0]
}
 8009028:	bf00      	nop
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20000430 	.word	0x20000430
 8009038:	20013030 	.word	0x20013030
 800903c:	20013038 	.word	0x20013038
 8009040:	20013040 	.word	0x20013040
 8009044:	2001303c 	.word	0x2001303c

08009048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009050:	4b28      	ldr	r3, [pc, #160]	@ (80090f4 <prvInsertBlockIntoFreeList+0xac>)
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e002      	b.n	800905c <prvInsertBlockIntoFreeList+0x14>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d8f7      	bhi.n	8009056 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4413      	add	r3, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d108      	bne.n	800908a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	441a      	add	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d118      	bne.n	80090d0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b15      	ldr	r3, [pc, #84]	@ (80090f8 <prvInsertBlockIntoFreeList+0xb0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d00d      	beq.n	80090c6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	441a      	add	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e008      	b.n	80090d8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090c6:	4b0c      	ldr	r3, [pc, #48]	@ (80090f8 <prvInsertBlockIntoFreeList+0xb0>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e003      	b.n	80090d8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d002      	beq.n	80090e6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80090e6:	bf00      	nop
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20013030 	.word	0x20013030
 80090f8:	20013038 	.word	0x20013038

080090fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009108:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800910c:	f002 fc3c 	bl	800b988 <USBD_static_malloc>
 8009110:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d109      	bne.n	800912c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32b0      	adds	r2, #176	@ 0xb0
 8009122:	2100      	movs	r1, #0
 8009124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009128:	2302      	movs	r3, #2
 800912a:	e0d4      	b.n	80092d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800912c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009130:	2100      	movs	r1, #0
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f002 fc6c 	bl	800ba10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	32b0      	adds	r2, #176	@ 0xb0
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	32b0      	adds	r2, #176	@ 0xb0
 8009152:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	7c1b      	ldrb	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d138      	bne.n	80091d6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009164:	4b5e      	ldr	r3, [pc, #376]	@ (80092e0 <USBD_CDC_Init+0x1e4>)
 8009166:	7819      	ldrb	r1, [r3, #0]
 8009168:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800916c:	2202      	movs	r2, #2
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f002 fae7 	bl	800b742 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009174:	4b5a      	ldr	r3, [pc, #360]	@ (80092e0 <USBD_CDC_Init+0x1e4>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 020f 	and.w	r2, r3, #15
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	3324      	adds	r3, #36	@ 0x24
 800918a:	2201      	movs	r2, #1
 800918c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800918e:	4b55      	ldr	r3, [pc, #340]	@ (80092e4 <USBD_CDC_Init+0x1e8>)
 8009190:	7819      	ldrb	r1, [r3, #0]
 8009192:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009196:	2202      	movs	r2, #2
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f002 fad2 	bl	800b742 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800919e:	4b51      	ldr	r3, [pc, #324]	@ (80092e4 <USBD_CDC_Init+0x1e8>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	f003 020f 	and.w	r2, r3, #15
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4613      	mov	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80091b6:	2201      	movs	r2, #1
 80091b8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80091ba:	4b4b      	ldr	r3, [pc, #300]	@ (80092e8 <USBD_CDC_Init+0x1ec>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f003 020f 	and.w	r2, r3, #15
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	3326      	adds	r3, #38	@ 0x26
 80091d0:	2210      	movs	r2, #16
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	e035      	b.n	8009242 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091d6:	4b42      	ldr	r3, [pc, #264]	@ (80092e0 <USBD_CDC_Init+0x1e4>)
 80091d8:	7819      	ldrb	r1, [r3, #0]
 80091da:	2340      	movs	r3, #64	@ 0x40
 80091dc:	2202      	movs	r2, #2
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f002 faaf 	bl	800b742 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091e4:	4b3e      	ldr	r3, [pc, #248]	@ (80092e0 <USBD_CDC_Init+0x1e4>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 020f 	and.w	r2, r3, #15
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	440b      	add	r3, r1
 80091f8:	3324      	adds	r3, #36	@ 0x24
 80091fa:	2201      	movs	r2, #1
 80091fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091fe:	4b39      	ldr	r3, [pc, #228]	@ (80092e4 <USBD_CDC_Init+0x1e8>)
 8009200:	7819      	ldrb	r1, [r3, #0]
 8009202:	2340      	movs	r3, #64	@ 0x40
 8009204:	2202      	movs	r2, #2
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f002 fa9b 	bl	800b742 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800920c:	4b35      	ldr	r3, [pc, #212]	@ (80092e4 <USBD_CDC_Init+0x1e8>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f003 020f 	and.w	r2, r3, #15
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	440b      	add	r3, r1
 8009220:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009224:	2201      	movs	r2, #1
 8009226:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009228:	4b2f      	ldr	r3, [pc, #188]	@ (80092e8 <USBD_CDC_Init+0x1ec>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 020f 	and.w	r2, r3, #15
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	4613      	mov	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	3326      	adds	r3, #38	@ 0x26
 800923e:	2210      	movs	r2, #16
 8009240:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009242:	4b29      	ldr	r3, [pc, #164]	@ (80092e8 <USBD_CDC_Init+0x1ec>)
 8009244:	7819      	ldrb	r1, [r3, #0]
 8009246:	2308      	movs	r3, #8
 8009248:	2203      	movs	r2, #3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f002 fa79 	bl	800b742 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009250:	4b25      	ldr	r3, [pc, #148]	@ (80092e8 <USBD_CDC_Init+0x1ec>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 020f 	and.w	r2, r3, #15
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	3324      	adds	r3, #36	@ 0x24
 8009266:	2201      	movs	r2, #1
 8009268:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	33b0      	adds	r3, #176	@ 0xb0
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80092a0:	2302      	movs	r3, #2
 80092a2:	e018      	b.n	80092d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7c1b      	ldrb	r3, [r3, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10a      	bne.n	80092c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092ac:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <USBD_CDC_Init+0x1e8>)
 80092ae:	7819      	ldrb	r1, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80092b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f002 fb30 	bl	800b920 <USBD_LL_PrepareReceive>
 80092c0:	e008      	b.n	80092d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092c2:	4b08      	ldr	r3, [pc, #32]	@ (80092e4 <USBD_CDC_Init+0x1e8>)
 80092c4:	7819      	ldrb	r1, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80092cc:	2340      	movs	r3, #64	@ 0x40
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f002 fb26 	bl	800b920 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	2000009b 	.word	0x2000009b
 80092e4:	2000009c 	.word	0x2000009c
 80092e8:	2000009d 	.word	0x2000009d

080092ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092f8:	4b3a      	ldr	r3, [pc, #232]	@ (80093e4 <USBD_CDC_DeInit+0xf8>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f002 fa45 	bl	800b78e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009304:	4b37      	ldr	r3, [pc, #220]	@ (80093e4 <USBD_CDC_DeInit+0xf8>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	f003 020f 	and.w	r2, r3, #15
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	440b      	add	r3, r1
 8009318:	3324      	adds	r3, #36	@ 0x24
 800931a:	2200      	movs	r2, #0
 800931c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800931e:	4b32      	ldr	r3, [pc, #200]	@ (80093e8 <USBD_CDC_DeInit+0xfc>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f002 fa32 	bl	800b78e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800932a:	4b2f      	ldr	r3, [pc, #188]	@ (80093e8 <USBD_CDC_DeInit+0xfc>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	f003 020f 	and.w	r2, r3, #15
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	4613      	mov	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	440b      	add	r3, r1
 800933e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009342:	2200      	movs	r2, #0
 8009344:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009346:	4b29      	ldr	r3, [pc, #164]	@ (80093ec <USBD_CDC_DeInit+0x100>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f002 fa1e 	bl	800b78e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009352:	4b26      	ldr	r3, [pc, #152]	@ (80093ec <USBD_CDC_DeInit+0x100>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	f003 020f 	and.w	r2, r3, #15
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	3324      	adds	r3, #36	@ 0x24
 8009368:	2200      	movs	r2, #0
 800936a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800936c:	4b1f      	ldr	r3, [pc, #124]	@ (80093ec <USBD_CDC_DeInit+0x100>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	3326      	adds	r3, #38	@ 0x26
 8009382:	2200      	movs	r2, #0
 8009384:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	32b0      	adds	r2, #176	@ 0xb0
 8009390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d01f      	beq.n	80093d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	33b0      	adds	r3, #176	@ 0xb0
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	32b0      	adds	r2, #176	@ 0xb0
 80093b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f002 faf2 	bl	800b9a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	32b0      	adds	r2, #176	@ 0xb0
 80093ca:	2100      	movs	r1, #0
 80093cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	2000009b 	.word	0x2000009b
 80093e8:	2000009c 	.word	0x2000009c
 80093ec:	2000009d 	.word	0x2000009d

080093f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	32b0      	adds	r2, #176	@ 0xb0
 8009404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009408:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800941c:	2303      	movs	r3, #3
 800941e:	e0bf      	b.n	80095a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009428:	2b00      	cmp	r3, #0
 800942a:	d050      	beq.n	80094ce <USBD_CDC_Setup+0xde>
 800942c:	2b20      	cmp	r3, #32
 800942e:	f040 80af 	bne.w	8009590 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	88db      	ldrh	r3, [r3, #6]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d03a      	beq.n	80094b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	b25b      	sxtb	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	da1b      	bge.n	800947c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	33b0      	adds	r3, #176	@ 0xb0
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800945a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	88d2      	ldrh	r2, [r2, #6]
 8009460:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	88db      	ldrh	r3, [r3, #6]
 8009466:	2b07      	cmp	r3, #7
 8009468:	bf28      	it	cs
 800946a:	2307      	movcs	r3, #7
 800946c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	89fa      	ldrh	r2, [r7, #14]
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 fd53 	bl	800af20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800947a:	e090      	b.n	800959e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	785a      	ldrb	r2, [r3, #1]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	88db      	ldrh	r3, [r3, #6]
 800948a:	2b3f      	cmp	r3, #63	@ 0x3f
 800948c:	d803      	bhi.n	8009496 <USBD_CDC_Setup+0xa6>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	88db      	ldrh	r3, [r3, #6]
 8009492:	b2da      	uxtb	r2, r3
 8009494:	e000      	b.n	8009498 <USBD_CDC_Setup+0xa8>
 8009496:	2240      	movs	r2, #64	@ 0x40
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800949e:	6939      	ldr	r1, [r7, #16]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80094a6:	461a      	mov	r2, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 fd65 	bl	800af78 <USBD_CtlPrepareRx>
      break;
 80094ae:	e076      	b.n	800959e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	33b0      	adds	r3, #176	@ 0xb0
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	7850      	ldrb	r0, [r2, #1]
 80094c6:	2200      	movs	r2, #0
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	4798      	blx	r3
      break;
 80094cc:	e067      	b.n	800959e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	2b0b      	cmp	r3, #11
 80094d4:	d851      	bhi.n	800957a <USBD_CDC_Setup+0x18a>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <USBD_CDC_Setup+0xec>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	0800950d 	.word	0x0800950d
 80094e0:	08009589 	.word	0x08009589
 80094e4:	0800957b 	.word	0x0800957b
 80094e8:	0800957b 	.word	0x0800957b
 80094ec:	0800957b 	.word	0x0800957b
 80094f0:	0800957b 	.word	0x0800957b
 80094f4:	0800957b 	.word	0x0800957b
 80094f8:	0800957b 	.word	0x0800957b
 80094fc:	0800957b 	.word	0x0800957b
 8009500:	0800957b 	.word	0x0800957b
 8009504:	08009537 	.word	0x08009537
 8009508:	08009561 	.word	0x08009561
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b03      	cmp	r3, #3
 8009516:	d107      	bne.n	8009528 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009518:	f107 030a 	add.w	r3, r7, #10
 800951c:	2202      	movs	r2, #2
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f001 fcfd 	bl	800af20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009526:	e032      	b.n	800958e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fc7b 	bl	800ae26 <USBD_CtlError>
            ret = USBD_FAIL;
 8009530:	2303      	movs	r3, #3
 8009532:	75fb      	strb	r3, [r7, #23]
          break;
 8009534:	e02b      	b.n	800958e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b03      	cmp	r3, #3
 8009540:	d107      	bne.n	8009552 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009542:	f107 030d 	add.w	r3, r7, #13
 8009546:	2201      	movs	r2, #1
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 fce8 	bl	800af20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009550:	e01d      	b.n	800958e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 fc66 	bl	800ae26 <USBD_CtlError>
            ret = USBD_FAIL;
 800955a:	2303      	movs	r3, #3
 800955c:	75fb      	strb	r3, [r7, #23]
          break;
 800955e:	e016      	b.n	800958e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b03      	cmp	r3, #3
 800956a:	d00f      	beq.n	800958c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 fc59 	bl	800ae26 <USBD_CtlError>
            ret = USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009578:	e008      	b.n	800958c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 fc52 	bl	800ae26 <USBD_CtlError>
          ret = USBD_FAIL;
 8009582:	2303      	movs	r3, #3
 8009584:	75fb      	strb	r3, [r7, #23]
          break;
 8009586:	e002      	b.n	800958e <USBD_CDC_Setup+0x19e>
          break;
 8009588:	bf00      	nop
 800958a:	e008      	b.n	800959e <USBD_CDC_Setup+0x1ae>
          break;
 800958c:	bf00      	nop
      }
      break;
 800958e:	e006      	b.n	800959e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 fc47 	bl	800ae26 <USBD_CtlError>
      ret = USBD_FAIL;
 8009598:	2303      	movs	r3, #3
 800959a:	75fb      	strb	r3, [r7, #23]
      break;
 800959c:	bf00      	nop
  }

  return (uint8_t)ret;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	32b0      	adds	r2, #176	@ 0xb0
 80095c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e065      	b.n	800969e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	32b0      	adds	r2, #176	@ 0xb0
 80095dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	f003 020f 	and.w	r2, r3, #15
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	440b      	add	r3, r1
 80095f4:	3318      	adds	r3, #24
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d02f      	beq.n	800965c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	f003 020f 	and.w	r2, r3, #15
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	3318      	adds	r3, #24
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	78fb      	ldrb	r3, [r7, #3]
 8009614:	f003 010f 	and.w	r1, r3, #15
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	460b      	mov	r3, r1
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	440b      	add	r3, r1
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4403      	add	r3, r0
 8009624:	331c      	adds	r3, #28
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	fbb2 f1f3 	udiv	r1, r2, r3
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009632:	2b00      	cmp	r3, #0
 8009634:	d112      	bne.n	800965c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	f003 020f 	and.w	r2, r3, #15
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	4613      	mov	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	440b      	add	r3, r1
 8009648:	3318      	adds	r3, #24
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800964e:	78f9      	ldrb	r1, [r7, #3]
 8009650:	2300      	movs	r3, #0
 8009652:	2200      	movs	r2, #0
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f002 f942 	bl	800b8de <USBD_LL_Transmit>
 800965a:	e01f      	b.n	800969c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2200      	movs	r2, #0
 8009660:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	33b0      	adds	r3, #176	@ 0xb0
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d010      	beq.n	800969c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	33b0      	adds	r3, #176	@ 0xb0
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009698:	78fa      	ldrb	r2, [r7, #3]
 800969a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	32b0      	adds	r2, #176	@ 0xb0
 80096bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	32b0      	adds	r2, #176	@ 0xb0
 80096cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e01a      	b.n	800970e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f002 f940 	bl	800b962 <USBD_LL_GetRxDataSize>
 80096e2:	4602      	mov	r2, r0
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	33b0      	adds	r3, #176	@ 0xb0
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009708:	4611      	mov	r1, r2
 800970a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	32b0      	adds	r2, #176	@ 0xb0
 8009728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	e024      	b.n	8009782 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	33b0      	adds	r3, #176	@ 0xb0
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d019      	beq.n	8009780 <USBD_CDC_EP0_RxReady+0x6a>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009752:	2bff      	cmp	r3, #255	@ 0xff
 8009754:	d014      	beq.n	8009780 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	33b0      	adds	r3, #176	@ 0xb0
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800976e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009776:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	22ff      	movs	r2, #255	@ 0xff
 800977c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009794:	2182      	movs	r1, #130	@ 0x82
 8009796:	4818      	ldr	r0, [pc, #96]	@ (80097f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009798:	f000 fd0f 	bl	800a1ba <USBD_GetEpDesc>
 800979c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800979e:	2101      	movs	r1, #1
 80097a0:	4815      	ldr	r0, [pc, #84]	@ (80097f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80097a2:	f000 fd0a 	bl	800a1ba <USBD_GetEpDesc>
 80097a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097a8:	2181      	movs	r1, #129	@ 0x81
 80097aa:	4813      	ldr	r0, [pc, #76]	@ (80097f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80097ac:	f000 fd05 	bl	800a1ba <USBD_GetEpDesc>
 80097b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2210      	movs	r2, #16
 80097bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d006      	beq.n	80097d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097cc:	711a      	strb	r2, [r3, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d006      	beq.n	80097e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097e0:	711a      	strb	r2, [r3, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2243      	movs	r2, #67	@ 0x43
 80097ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097ec:	4b02      	ldr	r3, [pc, #8]	@ (80097f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000058 	.word	0x20000058

080097fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009804:	2182      	movs	r1, #130	@ 0x82
 8009806:	4818      	ldr	r0, [pc, #96]	@ (8009868 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009808:	f000 fcd7 	bl	800a1ba <USBD_GetEpDesc>
 800980c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800980e:	2101      	movs	r1, #1
 8009810:	4815      	ldr	r0, [pc, #84]	@ (8009868 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009812:	f000 fcd2 	bl	800a1ba <USBD_GetEpDesc>
 8009816:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009818:	2181      	movs	r1, #129	@ 0x81
 800981a:	4813      	ldr	r0, [pc, #76]	@ (8009868 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800981c:	f000 fccd 	bl	800a1ba <USBD_GetEpDesc>
 8009820:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	2210      	movs	r2, #16
 800982c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d006      	beq.n	8009842 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2200      	movs	r2, #0
 8009838:	711a      	strb	r2, [r3, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f042 0202 	orr.w	r2, r2, #2
 8009840:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d006      	beq.n	8009856 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	711a      	strb	r2, [r3, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f042 0202 	orr.w	r2, r2, #2
 8009854:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2243      	movs	r2, #67	@ 0x43
 800985a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800985c:	4b02      	ldr	r3, [pc, #8]	@ (8009868 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20000058 	.word	0x20000058

0800986c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009874:	2182      	movs	r1, #130	@ 0x82
 8009876:	4818      	ldr	r0, [pc, #96]	@ (80098d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009878:	f000 fc9f 	bl	800a1ba <USBD_GetEpDesc>
 800987c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800987e:	2101      	movs	r1, #1
 8009880:	4815      	ldr	r0, [pc, #84]	@ (80098d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009882:	f000 fc9a 	bl	800a1ba <USBD_GetEpDesc>
 8009886:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009888:	2181      	movs	r1, #129	@ 0x81
 800988a:	4813      	ldr	r0, [pc, #76]	@ (80098d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800988c:	f000 fc95 	bl	800a1ba <USBD_GetEpDesc>
 8009890:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	2210      	movs	r2, #16
 800989c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d006      	beq.n	80098b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098ac:	711a      	strb	r2, [r3, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d006      	beq.n	80098c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098c0:	711a      	strb	r2, [r3, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2243      	movs	r2, #67	@ 0x43
 80098ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098cc:	4b02      	ldr	r3, [pc, #8]	@ (80098d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000058 	.word	0x20000058

080098dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	220a      	movs	r2, #10
 80098e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80098ea:	4b03      	ldr	r3, [pc, #12]	@ (80098f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	20000014 	.word	0x20000014

080098fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800990c:	2303      	movs	r3, #3
 800990e:	e009      	b.n	8009924 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	33b0      	adds	r3, #176	@ 0xb0
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	32b0      	adds	r2, #176	@ 0xb0
 8009946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009952:	2303      	movs	r3, #3
 8009954:	e008      	b.n	8009968 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	32b0      	adds	r2, #176	@ 0xb0
 8009988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009994:	2303      	movs	r3, #3
 8009996:	e004      	b.n	80099a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
	...

080099b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	32b0      	adds	r2, #176	@ 0xb0
 80099c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	32b0      	adds	r2, #176	@ 0xb0
 80099d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80099da:	2303      	movs	r3, #3
 80099dc:	e018      	b.n	8009a10 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	7c1b      	ldrb	r3, [r3, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10a      	bne.n	80099fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009a18 <USBD_CDC_ReceivePacket+0x68>)
 80099e8:	7819      	ldrb	r1, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 ff93 	bl	800b920 <USBD_LL_PrepareReceive>
 80099fa:	e008      	b.n	8009a0e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099fc:	4b06      	ldr	r3, [pc, #24]	@ (8009a18 <USBD_CDC_ReceivePacket+0x68>)
 80099fe:	7819      	ldrb	r1, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a06:	2340      	movs	r3, #64	@ 0x40
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 ff89 	bl	800b920 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	2000009c 	.word	0x2000009c

08009a1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	4613      	mov	r3, r2
 8009a28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e01f      	b.n	8009a74 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	79fa      	ldrb	r2, [r7, #7]
 8009a66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f001 fe03 	bl	800b674 <USBD_LL_Init>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e025      	b.n	8009ae0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	32ae      	adds	r2, #174	@ 0xae
 8009aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00f      	beq.n	8009ad0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	32ae      	adds	r2, #174	@ 0xae
 8009aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac0:	f107 020e 	add.w	r2, r7, #14
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	4798      	blx	r3
 8009ac8:	4602      	mov	r2, r0
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 fe0b 	bl	800b70c <USBD_LL_Start>
 8009af6:	4603      	mov	r3, r0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d009      	beq.n	8009b44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
 8009b40:	4603      	mov	r3, r0
 8009b42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	460b      	mov	r3, r1
 8009b58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	4611      	mov	r1, r2
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009b74:	2303      	movs	r3, #3
 8009b76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 f90c 	bl	800adb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ba8:	461a      	mov	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009bb6:	f003 031f 	and.w	r3, r3, #31
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d01a      	beq.n	8009bf4 <USBD_LL_SetupStage+0x72>
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d822      	bhi.n	8009c08 <USBD_LL_SetupStage+0x86>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <USBD_LL_SetupStage+0x4a>
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d00a      	beq.n	8009be0 <USBD_LL_SetupStage+0x5e>
 8009bca:	e01d      	b.n	8009c08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fb63 	bl	800a2a0 <USBD_StdDevReq>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bde:	e020      	b.n	8009c22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fbcb 	bl	800a384 <USBD_StdItfReq>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf2:	e016      	b.n	8009c22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fc2d 	bl	800a45c <USBD_StdEPReq>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
      break;
 8009c06:	e00c      	b.n	8009c22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009c0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 fdd8 	bl	800b7cc <USBD_LL_StallEP>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c20:	bf00      	nop
  }

  return ret;
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	460b      	mov	r3, r1
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c3e:	7afb      	ldrb	r3, [r7, #11]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d16e      	bne.n	8009d22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009c4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	f040 8098 	bne.w	8009d88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d913      	bls.n	8009c8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	1ad2      	subs	r2, r2, r3
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	bf28      	it	cs
 8009c7e:	4613      	movcs	r3, r2
 8009c80:	461a      	mov	r2, r3
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f001 f994 	bl	800afb2 <USBD_CtlContinueRx>
 8009c8a:	e07d      	b.n	8009d88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009c92:	f003 031f 	and.w	r3, r3, #31
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d014      	beq.n	8009cc4 <USBD_LL_DataOutStage+0x98>
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d81d      	bhi.n	8009cda <USBD_LL_DataOutStage+0xae>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <USBD_LL_DataOutStage+0x7c>
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d003      	beq.n	8009cae <USBD_LL_DataOutStage+0x82>
 8009ca6:	e018      	b.n	8009cda <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	75bb      	strb	r3, [r7, #22]
            break;
 8009cac:	e018      	b.n	8009ce0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fa64 	bl	800a186 <USBD_CoreFindIF>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	75bb      	strb	r3, [r7, #22]
            break;
 8009cc2:	e00d      	b.n	8009ce0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	4619      	mov	r1, r3
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fa66 	bl	800a1a0 <USBD_CoreFindEP>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	75bb      	strb	r3, [r7, #22]
            break;
 8009cd8:	e002      	b.n	8009ce0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	75bb      	strb	r3, [r7, #22]
            break;
 8009cde:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ce0:	7dbb      	ldrb	r3, [r7, #22]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d119      	bne.n	8009d1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d113      	bne.n	8009d1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009cf2:	7dba      	ldrb	r2, [r7, #22]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	32ae      	adds	r2, #174	@ 0xae
 8009cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00b      	beq.n	8009d1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d02:	7dba      	ldrb	r2, [r7, #22]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009d0a:	7dba      	ldrb	r2, [r7, #22]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	32ae      	adds	r2, #174	@ 0xae
 8009d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f001 f95a 	bl	800afd4 <USBD_CtlSendStatus>
 8009d20:	e032      	b.n	8009d88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009d22:	7afb      	ldrb	r3, [r7, #11]
 8009d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fa37 	bl	800a1a0 <USBD_CoreFindEP>
 8009d32:	4603      	mov	r3, r0
 8009d34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d36:	7dbb      	ldrb	r3, [r7, #22]
 8009d38:	2bff      	cmp	r3, #255	@ 0xff
 8009d3a:	d025      	beq.n	8009d88 <USBD_LL_DataOutStage+0x15c>
 8009d3c:	7dbb      	ldrb	r3, [r7, #22]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d122      	bne.n	8009d88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d117      	bne.n	8009d7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009d4e:	7dba      	ldrb	r2, [r7, #22]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	32ae      	adds	r2, #174	@ 0xae
 8009d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00f      	beq.n	8009d7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009d5e:	7dba      	ldrb	r2, [r7, #22]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009d66:	7dba      	ldrb	r2, [r7, #22]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	32ae      	adds	r2, #174	@ 0xae
 8009d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	7afa      	ldrb	r2, [r7, #11]
 8009d74:	4611      	mov	r1, r2
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	4798      	blx	r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	e000      	b.n	8009d8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b086      	sub	sp, #24
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	607a      	str	r2, [r7, #4]
 8009d9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009da0:	7afb      	ldrb	r3, [r7, #11]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d16f      	bne.n	8009e86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3314      	adds	r3, #20
 8009daa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d15a      	bne.n	8009e6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d914      	bls.n	8009dec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	689a      	ldr	r2, [r3, #8]
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	1ad2      	subs	r2, r2, r3
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6879      	ldr	r1, [r7, #4]
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f001 f8bc 	bl	800af56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dde:	2300      	movs	r3, #0
 8009de0:	2200      	movs	r2, #0
 8009de2:	2100      	movs	r1, #0
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f001 fd9b 	bl	800b920 <USBD_LL_PrepareReceive>
 8009dea:	e03f      	b.n	8009e6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d11c      	bne.n	8009e32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d316      	bcc.n	8009e32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d20f      	bcs.n	8009e32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e12:	2200      	movs	r2, #0
 8009e14:	2100      	movs	r1, #0
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f001 f89d 	bl	800af56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e24:	2300      	movs	r3, #0
 8009e26:	2200      	movs	r2, #0
 8009e28:	2100      	movs	r1, #0
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f001 fd78 	bl	800b920 <USBD_LL_PrepareReceive>
 8009e30:	e01c      	b.n	8009e6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d10f      	bne.n	8009e5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d009      	beq.n	8009e5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e5e:	2180      	movs	r1, #128	@ 0x80
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f001 fcb3 	bl	800b7cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f001 f8c7 	bl	800affa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d03a      	beq.n	8009eec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff fe42 	bl	8009b00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009e84:	e032      	b.n	8009eec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009e86:	7afb      	ldrb	r3, [r7, #11]
 8009e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	4619      	mov	r1, r3
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f985 	bl	800a1a0 <USBD_CoreFindEP>
 8009e96:	4603      	mov	r3, r0
 8009e98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	2bff      	cmp	r3, #255	@ 0xff
 8009e9e:	d025      	beq.n	8009eec <USBD_LL_DataInStage+0x15a>
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d122      	bne.n	8009eec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d11c      	bne.n	8009eec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009eb2:	7dfa      	ldrb	r2, [r7, #23]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	32ae      	adds	r2, #174	@ 0xae
 8009eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d014      	beq.n	8009eec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009ec2:	7dfa      	ldrb	r2, [r7, #23]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009eca:	7dfa      	ldrb	r2, [r7, #23]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	32ae      	adds	r2, #174	@ 0xae
 8009ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	7afa      	ldrb	r2, [r7, #11]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	4798      	blx	r3
 8009ede:	4603      	mov	r3, r0
 8009ee0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009ee2:	7dbb      	ldrb	r3, [r7, #22]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009ee8:	7dbb      	ldrb	r3, [r7, #22]
 8009eea:	e000      	b.n	8009eee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d014      	beq.n	8009f5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00e      	beq.n	8009f5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6852      	ldr	r2, [r2, #4]
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	4798      	blx	r3
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f5c:	2340      	movs	r3, #64	@ 0x40
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2100      	movs	r1, #0
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 fbed 	bl	800b742 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2240      	movs	r2, #64	@ 0x40
 8009f74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f78:	2340      	movs	r3, #64	@ 0x40
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2180      	movs	r1, #128	@ 0x80
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 fbdf 	bl	800b742 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2240      	movs	r2, #64	@ 0x40
 8009f8e:	621a      	str	r2, [r3, #32]

  return ret;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b083      	sub	sp, #12
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	78fa      	ldrb	r2, [r7, #3]
 8009faa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d006      	beq.n	8009fdc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2204      	movs	r2, #4
 8009fe0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b04      	cmp	r3, #4
 800a004:	d106      	bne.n	800a014 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b082      	sub	sp, #8
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b03      	cmp	r3, #3
 800a034:	d110      	bne.n	800a058 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00b      	beq.n	800a058 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d005      	beq.n	800a058 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	460b      	mov	r3, r1
 800a06c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	32ae      	adds	r2, #174	@ 0xae
 800a078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	e01c      	b.n	800a0be <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d115      	bne.n	800a0bc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	32ae      	adds	r2, #174	@ 0xae
 800a09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00b      	beq.n	800a0bc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	32ae      	adds	r2, #174	@ 0xae
 800a0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	32ae      	adds	r2, #174	@ 0xae
 800a0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e01c      	b.n	800a122 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d115      	bne.n	800a120 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	32ae      	adds	r2, #174	@ 0xae
 800a0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	32ae      	adds	r2, #174	@ 0xae
 800a112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a118:	78fa      	ldrb	r2, [r7, #3]
 800a11a:	4611      	mov	r1, r2
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00e      	beq.n	800a17c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	6852      	ldr	r2, [r2, #4]
 800a16a:	b2d2      	uxtb	r2, r2
 800a16c:	4611      	mov	r1, r2
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	4798      	blx	r3
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a178:	2303      	movs	r3, #3
 800a17a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a186:	b480      	push	{r7}
 800a188:	b083      	sub	sp, #12
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a192:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	885b      	ldrh	r3, [r3, #2]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	7812      	ldrb	r2, [r2, #0]
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d91f      	bls.n	800a220 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a1e6:	e013      	b.n	800a210 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a1e8:	f107 030a 	add.w	r3, r7, #10
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6978      	ldr	r0, [r7, #20]
 800a1f0:	f000 f81b 	bl	800a22a <USBD_GetNextDesc>
 800a1f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	d108      	bne.n	800a210 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	789b      	ldrb	r3, [r3, #2]
 800a206:	78fa      	ldrb	r2, [r7, #3]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d008      	beq.n	800a21e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	885b      	ldrh	r3, [r3, #2]
 800a214:	b29a      	uxth	r2, r3
 800a216:	897b      	ldrh	r3, [r7, #10]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d8e5      	bhi.n	800a1e8 <USBD_GetEpDesc+0x2e>
 800a21c:	e000      	b.n	800a220 <USBD_GetEpDesc+0x66>
          break;
 800a21e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a220:	693b      	ldr	r3, [r7, #16]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b085      	sub	sp, #20
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	7812      	ldrb	r2, [r2, #0]
 800a240:	4413      	add	r3, r2
 800a242:	b29a      	uxth	r2, r3
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4413      	add	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a254:	68fb      	ldr	r3, [r7, #12]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a262:	b480      	push	{r7}
 800a264:	b087      	sub	sp, #28
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	3301      	adds	r3, #1
 800a278:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a280:	8a3b      	ldrh	r3, [r7, #16]
 800a282:	021b      	lsls	r3, r3, #8
 800a284:	b21a      	sxth	r2, r3
 800a286:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	b21b      	sxth	r3, r3
 800a28e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a290:	89fb      	ldrh	r3, [r7, #14]
}
 800a292:	4618      	mov	r0, r3
 800a294:	371c      	adds	r7, #28
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
	...

0800a2a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a2b6:	2b40      	cmp	r3, #64	@ 0x40
 800a2b8:	d005      	beq.n	800a2c6 <USBD_StdDevReq+0x26>
 800a2ba:	2b40      	cmp	r3, #64	@ 0x40
 800a2bc:	d857      	bhi.n	800a36e <USBD_StdDevReq+0xce>
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00f      	beq.n	800a2e2 <USBD_StdDevReq+0x42>
 800a2c2:	2b20      	cmp	r3, #32
 800a2c4:	d153      	bne.n	800a36e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	32ae      	adds	r2, #174	@ 0xae
 800a2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	4798      	blx	r3
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e0:	e04a      	b.n	800a378 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	2b09      	cmp	r3, #9
 800a2e8:	d83b      	bhi.n	800a362 <USBD_StdDevReq+0xc2>
 800a2ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f0 <USBD_StdDevReq+0x50>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a345 	.word	0x0800a345
 800a2f4:	0800a359 	.word	0x0800a359
 800a2f8:	0800a363 	.word	0x0800a363
 800a2fc:	0800a34f 	.word	0x0800a34f
 800a300:	0800a363 	.word	0x0800a363
 800a304:	0800a323 	.word	0x0800a323
 800a308:	0800a319 	.word	0x0800a319
 800a30c:	0800a363 	.word	0x0800a363
 800a310:	0800a33b 	.word	0x0800a33b
 800a314:	0800a32d 	.word	0x0800a32d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fa3c 	bl	800a798 <USBD_GetDescriptor>
          break;
 800a320:	e024      	b.n	800a36c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fba1 	bl	800aa6c <USBD_SetAddress>
          break;
 800a32a:	e01f      	b.n	800a36c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fbe0 	bl	800aaf4 <USBD_SetConfig>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
          break;
 800a338:	e018      	b.n	800a36c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fc83 	bl	800ac48 <USBD_GetConfig>
          break;
 800a342:	e013      	b.n	800a36c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 fcb4 	bl	800acb4 <USBD_GetStatus>
          break;
 800a34c:	e00e      	b.n	800a36c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fce3 	bl	800ad1c <USBD_SetFeature>
          break;
 800a356:	e009      	b.n	800a36c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fd07 	bl	800ad6e <USBD_ClrFeature>
          break;
 800a360:	e004      	b.n	800a36c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fd5e 	bl	800ae26 <USBD_CtlError>
          break;
 800a36a:	bf00      	nop
      }
      break;
 800a36c:	e004      	b.n	800a378 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fd58 	bl	800ae26 <USBD_CtlError>
      break;
 800a376:	bf00      	nop
  }

  return ret;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop

0800a384 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a39a:	2b40      	cmp	r3, #64	@ 0x40
 800a39c:	d005      	beq.n	800a3aa <USBD_StdItfReq+0x26>
 800a39e:	2b40      	cmp	r3, #64	@ 0x40
 800a3a0:	d852      	bhi.n	800a448 <USBD_StdItfReq+0xc4>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <USBD_StdItfReq+0x26>
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	d14e      	bne.n	800a448 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d840      	bhi.n	800a43a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	889b      	ldrh	r3, [r3, #4]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d836      	bhi.n	800a430 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	889b      	ldrh	r3, [r3, #4]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff fedb 	bl	800a186 <USBD_CoreFindIF>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
 800a3d6:	2bff      	cmp	r3, #255	@ 0xff
 800a3d8:	d01d      	beq.n	800a416 <USBD_StdItfReq+0x92>
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11a      	bne.n	800a416 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a3e0:	7bba      	ldrb	r2, [r7, #14]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	32ae      	adds	r2, #174	@ 0xae
 800a3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00f      	beq.n	800a410 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a3f0:	7bba      	ldrb	r2, [r7, #14]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a3f8:	7bba      	ldrb	r2, [r7, #14]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	32ae      	adds	r2, #174	@ 0xae
 800a3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	4798      	blx	r3
 800a40a:	4603      	mov	r3, r0
 800a40c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a40e:	e004      	b.n	800a41a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a410:	2303      	movs	r3, #3
 800a412:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a414:	e001      	b.n	800a41a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a416:	2303      	movs	r3, #3
 800a418:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	88db      	ldrh	r3, [r3, #6]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d110      	bne.n	800a444 <USBD_StdItfReq+0xc0>
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10d      	bne.n	800a444 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fdd3 	bl	800afd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a42e:	e009      	b.n	800a444 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fcf7 	bl	800ae26 <USBD_CtlError>
          break;
 800a438:	e004      	b.n	800a444 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fcf2 	bl	800ae26 <USBD_CtlError>
          break;
 800a442:	e000      	b.n	800a446 <USBD_StdItfReq+0xc2>
          break;
 800a444:	bf00      	nop
      }
      break;
 800a446:	e004      	b.n	800a452 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fceb 	bl	800ae26 <USBD_CtlError>
      break;
 800a450:	bf00      	nop
  }

  return ret;
 800a452:	7bfb      	ldrb	r3, [r7, #15]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	889b      	ldrh	r3, [r3, #4]
 800a46e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a478:	2b40      	cmp	r3, #64	@ 0x40
 800a47a:	d007      	beq.n	800a48c <USBD_StdEPReq+0x30>
 800a47c:	2b40      	cmp	r3, #64	@ 0x40
 800a47e:	f200 817f 	bhi.w	800a780 <USBD_StdEPReq+0x324>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d02a      	beq.n	800a4dc <USBD_StdEPReq+0x80>
 800a486:	2b20      	cmp	r3, #32
 800a488:	f040 817a 	bne.w	800a780 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff fe85 	bl	800a1a0 <USBD_CoreFindEP>
 800a496:	4603      	mov	r3, r0
 800a498:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a49a:	7b7b      	ldrb	r3, [r7, #13]
 800a49c:	2bff      	cmp	r3, #255	@ 0xff
 800a49e:	f000 8174 	beq.w	800a78a <USBD_StdEPReq+0x32e>
 800a4a2:	7b7b      	ldrb	r3, [r7, #13]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f040 8170 	bne.w	800a78a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a4aa:	7b7a      	ldrb	r2, [r7, #13]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a4b2:	7b7a      	ldrb	r2, [r7, #13]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	32ae      	adds	r2, #174	@ 0xae
 800a4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 8163 	beq.w	800a78a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a4c4:	7b7a      	ldrb	r2, [r7, #13]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	32ae      	adds	r2, #174	@ 0xae
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a4da:	e156      	b.n	800a78a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d008      	beq.n	800a4f6 <USBD_StdEPReq+0x9a>
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	f300 8145 	bgt.w	800a774 <USBD_StdEPReq+0x318>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 809b 	beq.w	800a626 <USBD_StdEPReq+0x1ca>
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d03c      	beq.n	800a56e <USBD_StdEPReq+0x112>
 800a4f4:	e13e      	b.n	800a774 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d002      	beq.n	800a508 <USBD_StdEPReq+0xac>
 800a502:	2b03      	cmp	r3, #3
 800a504:	d016      	beq.n	800a534 <USBD_StdEPReq+0xd8>
 800a506:	e02c      	b.n	800a562 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00d      	beq.n	800a52a <USBD_StdEPReq+0xce>
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	2b80      	cmp	r3, #128	@ 0x80
 800a512:	d00a      	beq.n	800a52a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 f957 	bl	800b7cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a51e:	2180      	movs	r1, #128	@ 0x80
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 f953 	bl	800b7cc <USBD_LL_StallEP>
 800a526:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a528:	e020      	b.n	800a56c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fc7a 	bl	800ae26 <USBD_CtlError>
              break;
 800a532:	e01b      	b.n	800a56c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	885b      	ldrh	r3, [r3, #2]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10e      	bne.n	800a55a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00b      	beq.n	800a55a <USBD_StdEPReq+0xfe>
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b80      	cmp	r3, #128	@ 0x80
 800a546:	d008      	beq.n	800a55a <USBD_StdEPReq+0xfe>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	88db      	ldrh	r3, [r3, #6]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f939 	bl	800b7cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fd3a 	bl	800afd4 <USBD_CtlSendStatus>

              break;
 800a560:	e004      	b.n	800a56c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fc5e 	bl	800ae26 <USBD_CtlError>
              break;
 800a56a:	bf00      	nop
          }
          break;
 800a56c:	e107      	b.n	800a77e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b02      	cmp	r3, #2
 800a578:	d002      	beq.n	800a580 <USBD_StdEPReq+0x124>
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d016      	beq.n	800a5ac <USBD_StdEPReq+0x150>
 800a57e:	e04b      	b.n	800a618 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00d      	beq.n	800a5a2 <USBD_StdEPReq+0x146>
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	2b80      	cmp	r3, #128	@ 0x80
 800a58a:	d00a      	beq.n	800a5a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 f91b 	bl	800b7cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a596:	2180      	movs	r1, #128	@ 0x80
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 f917 	bl	800b7cc <USBD_LL_StallEP>
 800a59e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5a0:	e040      	b.n	800a624 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fc3e 	bl	800ae26 <USBD_CtlError>
              break;
 800a5aa:	e03b      	b.n	800a624 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	885b      	ldrh	r3, [r3, #2]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d136      	bne.n	800a622 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
 800a5b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d004      	beq.n	800a5c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 f921 	bl	800b80a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fd03 	bl	800afd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff fde4 	bl	800a1a0 <USBD_CoreFindEP>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5dc:	7b7b      	ldrb	r3, [r7, #13]
 800a5de:	2bff      	cmp	r3, #255	@ 0xff
 800a5e0:	d01f      	beq.n	800a622 <USBD_StdEPReq+0x1c6>
 800a5e2:	7b7b      	ldrb	r3, [r7, #13]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d11c      	bne.n	800a622 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a5e8:	7b7a      	ldrb	r2, [r7, #13]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a5f0:	7b7a      	ldrb	r2, [r7, #13]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	32ae      	adds	r2, #174	@ 0xae
 800a5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d010      	beq.n	800a622 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a600:	7b7a      	ldrb	r2, [r7, #13]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32ae      	adds	r2, #174	@ 0xae
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	4798      	blx	r3
 800a612:	4603      	mov	r3, r0
 800a614:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a616:	e004      	b.n	800a622 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fc03 	bl	800ae26 <USBD_CtlError>
              break;
 800a620:	e000      	b.n	800a624 <USBD_StdEPReq+0x1c8>
              break;
 800a622:	bf00      	nop
          }
          break;
 800a624:	e0ab      	b.n	800a77e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d002      	beq.n	800a638 <USBD_StdEPReq+0x1dc>
 800a632:	2b03      	cmp	r3, #3
 800a634:	d032      	beq.n	800a69c <USBD_StdEPReq+0x240>
 800a636:	e097      	b.n	800a768 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d007      	beq.n	800a64e <USBD_StdEPReq+0x1f2>
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	2b80      	cmp	r3, #128	@ 0x80
 800a642:	d004      	beq.n	800a64e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fbed 	bl	800ae26 <USBD_CtlError>
                break;
 800a64c:	e091      	b.n	800a772 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a64e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a652:	2b00      	cmp	r3, #0
 800a654:	da0b      	bge.n	800a66e <USBD_StdEPReq+0x212>
 800a656:	7bbb      	ldrb	r3, [r7, #14]
 800a658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a65c:	4613      	mov	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	3310      	adds	r3, #16
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	4413      	add	r3, r2
 800a66a:	3304      	adds	r3, #4
 800a66c:	e00b      	b.n	800a686 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a674:	4613      	mov	r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	4413      	add	r3, r2
 800a684:	3304      	adds	r3, #4
 800a686:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2200      	movs	r2, #0
 800a68c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2202      	movs	r2, #2
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc43 	bl	800af20 <USBD_CtlSendData>
              break;
 800a69a:	e06a      	b.n	800a772 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a69c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	da11      	bge.n	800a6c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	f003 020f 	and.w	r2, r3, #15
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	440b      	add	r3, r1
 800a6b6:	3324      	adds	r3, #36	@ 0x24
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d117      	bne.n	800a6ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fbb0 	bl	800ae26 <USBD_CtlError>
                  break;
 800a6c6:	e054      	b.n	800a772 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	f003 020f 	and.w	r2, r3, #15
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	440b      	add	r3, r1
 800a6da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fb9d 	bl	800ae26 <USBD_CtlError>
                  break;
 800a6ec:	e041      	b.n	800a772 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	da0b      	bge.n	800a70e <USBD_StdEPReq+0x2b2>
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	3310      	adds	r3, #16
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	4413      	add	r3, r2
 800a70a:	3304      	adds	r3, #4
 800a70c:	e00b      	b.n	800a726 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	4413      	add	r3, r2
 800a724:	3304      	adds	r3, #4
 800a726:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <USBD_StdEPReq+0x2d8>
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
 800a730:	2b80      	cmp	r3, #128	@ 0x80
 800a732:	d103      	bne.n	800a73c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2200      	movs	r2, #0
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	e00e      	b.n	800a75a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 f881 	bl	800b848 <USBD_LL_IsStallEP>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2201      	movs	r2, #1
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	e002      	b.n	800a75a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2200      	movs	r2, #0
 800a758:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2202      	movs	r2, #2
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fbdd 	bl	800af20 <USBD_CtlSendData>
              break;
 800a766:	e004      	b.n	800a772 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fb5b 	bl	800ae26 <USBD_CtlError>
              break;
 800a770:	bf00      	nop
          }
          break;
 800a772:	e004      	b.n	800a77e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fb55 	bl	800ae26 <USBD_CtlError>
          break;
 800a77c:	bf00      	nop
      }
      break;
 800a77e:	e005      	b.n	800a78c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fb4f 	bl	800ae26 <USBD_CtlError>
      break;
 800a788:	e000      	b.n	800a78c <USBD_StdEPReq+0x330>
      break;
 800a78a:	bf00      	nop
  }

  return ret;
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	885b      	ldrh	r3, [r3, #2]
 800a7b2:	0a1b      	lsrs	r3, r3, #8
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	2b06      	cmp	r3, #6
 800a7ba:	f200 8128 	bhi.w	800aa0e <USBD_GetDescriptor+0x276>
 800a7be:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c4 <USBD_GetDescriptor+0x2c>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a7e1 	.word	0x0800a7e1
 800a7c8:	0800a7f9 	.word	0x0800a7f9
 800a7cc:	0800a839 	.word	0x0800a839
 800a7d0:	0800aa0f 	.word	0x0800aa0f
 800a7d4:	0800aa0f 	.word	0x0800aa0f
 800a7d8:	0800a9af 	.word	0x0800a9af
 800a7dc:	0800a9db 	.word	0x0800a9db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	7c12      	ldrb	r2, [r2, #16]
 800a7ec:	f107 0108 	add.w	r1, r7, #8
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	60f8      	str	r0, [r7, #12]
      break;
 800a7f6:	e112      	b.n	800aa1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7c1b      	ldrb	r3, [r3, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10d      	bne.n	800a81c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a808:	f107 0208 	add.w	r2, r7, #8
 800a80c:	4610      	mov	r0, r2
 800a80e:	4798      	blx	r3
 800a810:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3301      	adds	r3, #1
 800a816:	2202      	movs	r2, #2
 800a818:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a81a:	e100      	b.n	800aa1e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a824:	f107 0208 	add.w	r2, r7, #8
 800a828:	4610      	mov	r0, r2
 800a82a:	4798      	blx	r3
 800a82c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3301      	adds	r3, #1
 800a832:	2202      	movs	r2, #2
 800a834:	701a      	strb	r2, [r3, #0]
      break;
 800a836:	e0f2      	b.n	800aa1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	885b      	ldrh	r3, [r3, #2]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b05      	cmp	r3, #5
 800a840:	f200 80ac 	bhi.w	800a99c <USBD_GetDescriptor+0x204>
 800a844:	a201      	add	r2, pc, #4	@ (adr r2, 800a84c <USBD_GetDescriptor+0xb4>)
 800a846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84a:	bf00      	nop
 800a84c:	0800a865 	.word	0x0800a865
 800a850:	0800a899 	.word	0x0800a899
 800a854:	0800a8cd 	.word	0x0800a8cd
 800a858:	0800a901 	.word	0x0800a901
 800a85c:	0800a935 	.word	0x0800a935
 800a860:	0800a969 	.word	0x0800a969
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00b      	beq.n	800a888 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	7c12      	ldrb	r2, [r2, #16]
 800a87c:	f107 0108 	add.w	r1, r7, #8
 800a880:	4610      	mov	r0, r2
 800a882:	4798      	blx	r3
 800a884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a886:	e091      	b.n	800a9ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 facb 	bl	800ae26 <USBD_CtlError>
            err++;
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	3301      	adds	r3, #1
 800a894:	72fb      	strb	r3, [r7, #11]
          break;
 800a896:	e089      	b.n	800a9ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00b      	beq.n	800a8bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	7c12      	ldrb	r2, [r2, #16]
 800a8b0:	f107 0108 	add.w	r1, r7, #8
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	4798      	blx	r3
 800a8b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ba:	e077      	b.n	800a9ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fab1 	bl	800ae26 <USBD_CtlError>
            err++;
 800a8c4:	7afb      	ldrb	r3, [r7, #11]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8ca:	e06f      	b.n	800a9ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00b      	beq.n	800a8f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	7c12      	ldrb	r2, [r2, #16]
 800a8e4:	f107 0108 	add.w	r1, r7, #8
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4798      	blx	r3
 800a8ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ee:	e05d      	b.n	800a9ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fa97 	bl	800ae26 <USBD_CtlError>
            err++;
 800a8f8:	7afb      	ldrb	r3, [r7, #11]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a8fe:	e055      	b.n	800a9ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00b      	beq.n	800a924 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	7c12      	ldrb	r2, [r2, #16]
 800a918:	f107 0108 	add.w	r1, r7, #8
 800a91c:	4610      	mov	r0, r2
 800a91e:	4798      	blx	r3
 800a920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a922:	e043      	b.n	800a9ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fa7d 	bl	800ae26 <USBD_CtlError>
            err++;
 800a92c:	7afb      	ldrb	r3, [r7, #11]
 800a92e:	3301      	adds	r3, #1
 800a930:	72fb      	strb	r3, [r7, #11]
          break;
 800a932:	e03b      	b.n	800a9ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00b      	beq.n	800a958 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	7c12      	ldrb	r2, [r2, #16]
 800a94c:	f107 0108 	add.w	r1, r7, #8
 800a950:	4610      	mov	r0, r2
 800a952:	4798      	blx	r3
 800a954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a956:	e029      	b.n	800a9ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fa63 	bl	800ae26 <USBD_CtlError>
            err++;
 800a960:	7afb      	ldrb	r3, [r7, #11]
 800a962:	3301      	adds	r3, #1
 800a964:	72fb      	strb	r3, [r7, #11]
          break;
 800a966:	e021      	b.n	800a9ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00b      	beq.n	800a98c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	7c12      	ldrb	r2, [r2, #16]
 800a980:	f107 0108 	add.w	r1, r7, #8
 800a984:	4610      	mov	r0, r2
 800a986:	4798      	blx	r3
 800a988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a98a:	e00f      	b.n	800a9ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fa49 	bl	800ae26 <USBD_CtlError>
            err++;
 800a994:	7afb      	ldrb	r3, [r7, #11]
 800a996:	3301      	adds	r3, #1
 800a998:	72fb      	strb	r3, [r7, #11]
          break;
 800a99a:	e007      	b.n	800a9ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fa41 	bl	800ae26 <USBD_CtlError>
          err++;
 800a9a4:	7afb      	ldrb	r3, [r7, #11]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a9aa:	bf00      	nop
      }
      break;
 800a9ac:	e037      	b.n	800aa1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	7c1b      	ldrb	r3, [r3, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d109      	bne.n	800a9ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9be:	f107 0208 	add.w	r2, r7, #8
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4798      	blx	r3
 800a9c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9c8:	e029      	b.n	800aa1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fa2a 	bl	800ae26 <USBD_CtlError>
        err++;
 800a9d2:	7afb      	ldrb	r3, [r7, #11]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	72fb      	strb	r3, [r7, #11]
      break;
 800a9d8:	e021      	b.n	800aa1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	7c1b      	ldrb	r3, [r3, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10d      	bne.n	800a9fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9ea:	f107 0208 	add.w	r2, r7, #8
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	4798      	blx	r3
 800a9f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	2207      	movs	r2, #7
 800a9fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9fc:	e00f      	b.n	800aa1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fa10 	bl	800ae26 <USBD_CtlError>
        err++;
 800aa06:	7afb      	ldrb	r3, [r7, #11]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	72fb      	strb	r3, [r7, #11]
      break;
 800aa0c:	e007      	b.n	800aa1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fa08 	bl	800ae26 <USBD_CtlError>
      err++;
 800aa16:	7afb      	ldrb	r3, [r7, #11]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	72fb      	strb	r3, [r7, #11]
      break;
 800aa1c:	bf00      	nop
  }

  if (err != 0U)
 800aa1e:	7afb      	ldrb	r3, [r7, #11]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d11e      	bne.n	800aa62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	88db      	ldrh	r3, [r3, #6]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d016      	beq.n	800aa5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa2c:	893b      	ldrh	r3, [r7, #8]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00e      	beq.n	800aa50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	88da      	ldrh	r2, [r3, #6]
 800aa36:	893b      	ldrh	r3, [r7, #8]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	bf28      	it	cs
 800aa3c:	4613      	movcs	r3, r2
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa42:	893b      	ldrh	r3, [r7, #8]
 800aa44:	461a      	mov	r2, r3
 800aa46:	68f9      	ldr	r1, [r7, #12]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fa69 	bl	800af20 <USBD_CtlSendData>
 800aa4e:	e009      	b.n	800aa64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f9e7 	bl	800ae26 <USBD_CtlError>
 800aa58:	e004      	b.n	800aa64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 faba 	bl	800afd4 <USBD_CtlSendStatus>
 800aa60:	e000      	b.n	800aa64 <USBD_GetDescriptor+0x2cc>
    return;
 800aa62:	bf00      	nop
  }
}
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop

0800aa6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	889b      	ldrh	r3, [r3, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d131      	bne.n	800aae2 <USBD_SetAddress+0x76>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	88db      	ldrh	r3, [r3, #6]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d12d      	bne.n	800aae2 <USBD_SetAddress+0x76>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	885b      	ldrh	r3, [r3, #2]
 800aa8a:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa8c:	d829      	bhi.n	800aae2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	885b      	ldrh	r3, [r3, #2]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d104      	bne.n	800aab0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9bc 	bl	800ae26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaae:	e01d      	b.n	800aaec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	7bfa      	ldrb	r2, [r7, #15]
 800aab4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 feef 	bl	800b8a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fa86 	bl	800afd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2202      	movs	r2, #2
 800aad2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad6:	e009      	b.n	800aaec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aae0:	e004      	b.n	800aaec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f99e 	bl	800ae26 <USBD_CtlError>
  }
}
 800aaea:	bf00      	nop
 800aaec:	bf00      	nop
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	885b      	ldrh	r3, [r3, #2]
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	4b4e      	ldr	r3, [pc, #312]	@ (800ac44 <USBD_SetConfig+0x150>)
 800ab0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab0c:	4b4d      	ldr	r3, [pc, #308]	@ (800ac44 <USBD_SetConfig+0x150>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d905      	bls.n	800ab20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f985 	bl	800ae26 <USBD_CtlError>
    return USBD_FAIL;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e08c      	b.n	800ac3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d002      	beq.n	800ab32 <USBD_SetConfig+0x3e>
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d029      	beq.n	800ab84 <USBD_SetConfig+0x90>
 800ab30:	e075      	b.n	800ac1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab32:	4b44      	ldr	r3, [pc, #272]	@ (800ac44 <USBD_SetConfig+0x150>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d020      	beq.n	800ab7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ab3a:	4b42      	ldr	r3, [pc, #264]	@ (800ac44 <USBD_SetConfig+0x150>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab44:	4b3f      	ldr	r3, [pc, #252]	@ (800ac44 <USBD_SetConfig+0x150>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7fe ffe3 	bl	8009b16 <USBD_SetClassConfig>
 800ab50:	4603      	mov	r3, r0
 800ab52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d008      	beq.n	800ab6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f962 	bl	800ae26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2202      	movs	r2, #2
 800ab66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab6a:	e065      	b.n	800ac38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fa31 	bl	800afd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2203      	movs	r2, #3
 800ab76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ab7a:	e05d      	b.n	800ac38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fa29 	bl	800afd4 <USBD_CtlSendStatus>
      break;
 800ab82:	e059      	b.n	800ac38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab84:	4b2f      	ldr	r3, [pc, #188]	@ (800ac44 <USBD_SetConfig+0x150>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d112      	bne.n	800abb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ab94:	4b2b      	ldr	r3, [pc, #172]	@ (800ac44 <USBD_SetConfig+0x150>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab9e:	4b29      	ldr	r3, [pc, #164]	@ (800ac44 <USBD_SetConfig+0x150>)
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7fe ffd2 	bl	8009b4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa12 	bl	800afd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abb0:	e042      	b.n	800ac38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800abb2:	4b24      	ldr	r3, [pc, #144]	@ (800ac44 <USBD_SetConfig+0x150>)
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d02a      	beq.n	800ac16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7fe ffc0 	bl	8009b4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800abce:	4b1d      	ldr	r3, [pc, #116]	@ (800ac44 <USBD_SetConfig+0x150>)
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800abd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac44 <USBD_SetConfig+0x150>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7fe ff99 	bl	8009b16 <USBD_SetClassConfig>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00f      	beq.n	800ac0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f918 	bl	800ae26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	4619      	mov	r1, r3
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7fe ffa5 	bl	8009b4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ac0c:	e014      	b.n	800ac38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f9e0 	bl	800afd4 <USBD_CtlSendStatus>
      break;
 800ac14:	e010      	b.n	800ac38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f9dc 	bl	800afd4 <USBD_CtlSendStatus>
      break;
 800ac1c:	e00c      	b.n	800ac38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f900 	bl	800ae26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac26:	4b07      	ldr	r3, [pc, #28]	@ (800ac44 <USBD_SetConfig+0x150>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7fe ff8e 	bl	8009b4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac32:	2303      	movs	r3, #3
 800ac34:	73fb      	strb	r3, [r7, #15]
      break;
 800ac36:	bf00      	nop
  }

  return ret;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	2001304c 	.word	0x2001304c

0800ac48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	88db      	ldrh	r3, [r3, #6]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d004      	beq.n	800ac64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f8e2 	bl	800ae26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac62:	e023      	b.n	800acac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	dc02      	bgt.n	800ac76 <USBD_GetConfig+0x2e>
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	dc03      	bgt.n	800ac7c <USBD_GetConfig+0x34>
 800ac74:	e015      	b.n	800aca2 <USBD_GetConfig+0x5a>
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d00b      	beq.n	800ac92 <USBD_GetConfig+0x4a>
 800ac7a:	e012      	b.n	800aca2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3308      	adds	r3, #8
 800ac86:	2201      	movs	r2, #1
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f948 	bl	800af20 <USBD_CtlSendData>
        break;
 800ac90:	e00c      	b.n	800acac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	3304      	adds	r3, #4
 800ac96:	2201      	movs	r2, #1
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f940 	bl	800af20 <USBD_CtlSendData>
        break;
 800aca0:	e004      	b.n	800acac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f8be 	bl	800ae26 <USBD_CtlError>
        break;
 800acaa:	bf00      	nop
}
 800acac:	bf00      	nop
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	3b01      	subs	r3, #1
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d81e      	bhi.n	800ad0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	88db      	ldrh	r3, [r3, #6]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d004      	beq.n	800acde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f8a5 	bl	800ae26 <USBD_CtlError>
        break;
 800acdc:	e01a      	b.n	800ad14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800acea:	2b00      	cmp	r3, #0
 800acec:	d005      	beq.n	800acfa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	f043 0202 	orr.w	r2, r3, #2
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	330c      	adds	r3, #12
 800acfe:	2202      	movs	r2, #2
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f90c 	bl	800af20 <USBD_CtlSendData>
      break;
 800ad08:	e004      	b.n	800ad14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f88a 	bl	800ae26 <USBD_CtlError>
      break;
 800ad12:	bf00      	nop
  }
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	885b      	ldrh	r3, [r3, #2]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d107      	bne.n	800ad3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f94c 	bl	800afd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ad3c:	e013      	b.n	800ad66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	885b      	ldrh	r3, [r3, #2]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d10b      	bne.n	800ad5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	889b      	ldrh	r3, [r3, #4]
 800ad4a:	0a1b      	lsrs	r3, r3, #8
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f93c 	bl	800afd4 <USBD_CtlSendStatus>
}
 800ad5c:	e003      	b.n	800ad66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f860 	bl	800ae26 <USBD_CtlError>
}
 800ad66:	bf00      	nop
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	3b01      	subs	r3, #1
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d80b      	bhi.n	800ad9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	885b      	ldrh	r3, [r3, #2]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d10c      	bne.n	800ada8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f91c 	bl	800afd4 <USBD_CtlSendStatus>
      }
      break;
 800ad9c:	e004      	b.n	800ada8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f840 	bl	800ae26 <USBD_CtlError>
      break;
 800ada6:	e000      	b.n	800adaa <USBD_ClrFeature+0x3c>
      break;
 800ada8:	bf00      	nop
  }
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3301      	adds	r3, #1
 800adcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	3301      	adds	r3, #1
 800adda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7ff fa40 	bl	800a262 <SWAPBYTE>
 800ade2:	4603      	mov	r3, r0
 800ade4:	461a      	mov	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3301      	adds	r3, #1
 800adee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3301      	adds	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7ff fa33 	bl	800a262 <SWAPBYTE>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	3301      	adds	r3, #1
 800ae08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f7ff fa26 	bl	800a262 <SWAPBYTE>
 800ae16:	4603      	mov	r3, r0
 800ae18:	461a      	mov	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	80da      	strh	r2, [r3, #6]
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b082      	sub	sp, #8
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae30:	2180      	movs	r1, #128	@ 0x80
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fcca 	bl	800b7cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae38:	2100      	movs	r1, #0
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fcc6 	bl	800b7cc <USBD_LL_StallEP>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d042      	beq.n	800aee4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ae62:	6938      	ldr	r0, [r7, #16]
 800ae64:	f000 f842 	bl	800aeec <USBD_GetLen>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae72:	d808      	bhi.n	800ae86 <USBD_GetString+0x3e>
 800ae74:	6938      	ldr	r0, [r7, #16]
 800ae76:	f000 f839 	bl	800aeec <USBD_GetLen>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	e001      	b.n	800ae8a <USBD_GetString+0x42>
 800ae86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	4413      	add	r3, r2
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	7812      	ldrb	r2, [r2, #0]
 800ae98:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae9a:	7dfb      	ldrb	r3, [r7, #23]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	4413      	add	r3, r2
 800aea6:	2203      	movs	r2, #3
 800aea8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
 800aeac:	3301      	adds	r3, #1
 800aeae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aeb0:	e013      	b.n	800aeda <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	7812      	ldrb	r2, [r2, #0]
 800aebc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	3301      	adds	r3, #1
 800aec2:	613b      	str	r3, [r7, #16]
    idx++;
 800aec4:	7dfb      	ldrb	r3, [r7, #23]
 800aec6:	3301      	adds	r3, #1
 800aec8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	4413      	add	r3, r2
 800aed0:	2200      	movs	r2, #0
 800aed2:	701a      	strb	r2, [r3, #0]
    idx++;
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
 800aed6:	3301      	adds	r3, #1
 800aed8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e7      	bne.n	800aeb2 <USBD_GetString+0x6a>
 800aee2:	e000      	b.n	800aee6 <USBD_GetString+0x9e>
    return;
 800aee4:	bf00      	nop
  }
}
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aefc:	e005      	b.n	800af0a <USBD_GetLen+0x1e>
  {
    len++;
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	3301      	adds	r3, #1
 800af02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	3301      	adds	r3, #1
 800af08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1f5      	bne.n	800aefe <USBD_GetLen+0x12>
  }

  return len;
 800af12:	7bfb      	ldrb	r3, [r7, #15]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2202      	movs	r2, #2
 800af30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	2100      	movs	r1, #0
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f000 fcc9 	bl	800b8de <USBD_LL_Transmit>

  return USBD_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	2100      	movs	r1, #0
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 fcb8 	bl	800b8de <USBD_LL_Transmit>

  return USBD_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2203      	movs	r2, #3
 800af88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	2100      	movs	r1, #0
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 fcbc 	bl	800b920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	2100      	movs	r1, #0
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 fcab 	bl	800b920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2204      	movs	r2, #4
 800afe0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800afe4:	2300      	movs	r3, #0
 800afe6:	2200      	movs	r2, #0
 800afe8:	2100      	movs	r1, #0
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fc77 	bl	800b8de <USBD_LL_Transmit>

  return USBD_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2205      	movs	r2, #5
 800b006:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b00a:	2300      	movs	r3, #0
 800b00c:	2200      	movs	r2, #0
 800b00e:	2100      	movs	r1, #0
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fc85 	bl	800b920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b024:	2200      	movs	r2, #0
 800b026:	4912      	ldr	r1, [pc, #72]	@ (800b070 <MX_USB_DEVICE_Init+0x50>)
 800b028:	4812      	ldr	r0, [pc, #72]	@ (800b074 <MX_USB_DEVICE_Init+0x54>)
 800b02a:	f7fe fcf7 	bl	8009a1c <USBD_Init>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b034:	f7f5 fd9a 	bl	8000b6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b038:	490f      	ldr	r1, [pc, #60]	@ (800b078 <MX_USB_DEVICE_Init+0x58>)
 800b03a:	480e      	ldr	r0, [pc, #56]	@ (800b074 <MX_USB_DEVICE_Init+0x54>)
 800b03c:	f7fe fd1e 	bl	8009a7c <USBD_RegisterClass>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b046:	f7f5 fd91 	bl	8000b6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b04a:	490c      	ldr	r1, [pc, #48]	@ (800b07c <MX_USB_DEVICE_Init+0x5c>)
 800b04c:	4809      	ldr	r0, [pc, #36]	@ (800b074 <MX_USB_DEVICE_Init+0x54>)
 800b04e:	f7fe fc55 	bl	80098fc <USBD_CDC_RegisterInterface>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b058:	f7f5 fd88 	bl	8000b6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b05c:	4805      	ldr	r0, [pc, #20]	@ (800b074 <MX_USB_DEVICE_Init+0x54>)
 800b05e:	f7fe fd43 	bl	8009ae8 <USBD_Start>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b068:	f7f5 fd80 	bl	8000b6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b06c:	bf00      	nop
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	200000b4 	.word	0x200000b4
 800b074:	20013050 	.word	0x20013050
 800b078:	20000020 	.word	0x20000020
 800b07c:	200000a0 	.word	0x200000a0

0800b080 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b084:	2200      	movs	r2, #0
 800b086:	4905      	ldr	r1, [pc, #20]	@ (800b09c <CDC_Init_FS+0x1c>)
 800b088:	4805      	ldr	r0, [pc, #20]	@ (800b0a0 <CDC_Init_FS+0x20>)
 800b08a:	f7fe fc51 	bl	8009930 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b08e:	4905      	ldr	r1, [pc, #20]	@ (800b0a4 <CDC_Init_FS+0x24>)
 800b090:	4803      	ldr	r0, [pc, #12]	@ (800b0a0 <CDC_Init_FS+0x20>)
 800b092:	f7fe fc6f 	bl	8009974 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b096:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b098:	4618      	mov	r0, r3
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	20013b2c 	.word	0x20013b2c
 800b0a0:	20013050 	.word	0x20013050
 800b0a4:	2001332c 	.word	0x2001332c

0800b0a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b0ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	6039      	str	r1, [r7, #0]
 800b0c2:	71fb      	strb	r3, [r7, #7]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b0c8:	79fb      	ldrb	r3, [r7, #7]
 800b0ca:	2b23      	cmp	r3, #35	@ 0x23
 800b0cc:	d84a      	bhi.n	800b164 <CDC_Control_FS+0xac>
 800b0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d4 <CDC_Control_FS+0x1c>)
 800b0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d4:	0800b165 	.word	0x0800b165
 800b0d8:	0800b165 	.word	0x0800b165
 800b0dc:	0800b165 	.word	0x0800b165
 800b0e0:	0800b165 	.word	0x0800b165
 800b0e4:	0800b165 	.word	0x0800b165
 800b0e8:	0800b165 	.word	0x0800b165
 800b0ec:	0800b165 	.word	0x0800b165
 800b0f0:	0800b165 	.word	0x0800b165
 800b0f4:	0800b165 	.word	0x0800b165
 800b0f8:	0800b165 	.word	0x0800b165
 800b0fc:	0800b165 	.word	0x0800b165
 800b100:	0800b165 	.word	0x0800b165
 800b104:	0800b165 	.word	0x0800b165
 800b108:	0800b165 	.word	0x0800b165
 800b10c:	0800b165 	.word	0x0800b165
 800b110:	0800b165 	.word	0x0800b165
 800b114:	0800b165 	.word	0x0800b165
 800b118:	0800b165 	.word	0x0800b165
 800b11c:	0800b165 	.word	0x0800b165
 800b120:	0800b165 	.word	0x0800b165
 800b124:	0800b165 	.word	0x0800b165
 800b128:	0800b165 	.word	0x0800b165
 800b12c:	0800b165 	.word	0x0800b165
 800b130:	0800b165 	.word	0x0800b165
 800b134:	0800b165 	.word	0x0800b165
 800b138:	0800b165 	.word	0x0800b165
 800b13c:	0800b165 	.word	0x0800b165
 800b140:	0800b165 	.word	0x0800b165
 800b144:	0800b165 	.word	0x0800b165
 800b148:	0800b165 	.word	0x0800b165
 800b14c:	0800b165 	.word	0x0800b165
 800b150:	0800b165 	.word	0x0800b165
 800b154:	0800b165 	.word	0x0800b165
 800b158:	0800b165 	.word	0x0800b165
 800b15c:	0800b165 	.word	0x0800b165
 800b160:	0800b165 	.word	0x0800b165
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b164:	bf00      	nop
  }

  return (USBD_OK);
 800b166:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b168:	4618      	mov	r0, r3
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	4805      	ldr	r0, [pc, #20]	@ (800b198 <CDC_Receive_FS+0x24>)
 800b182:	f7fe fbf7 	bl	8009974 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b186:	4804      	ldr	r0, [pc, #16]	@ (800b198 <CDC_Receive_FS+0x24>)
 800b188:	f7fe fc12 	bl	80099b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b18c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20013050 	.word	0x20013050

0800b19c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b1ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	371c      	adds	r7, #28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	6039      	str	r1, [r7, #0]
 800b1ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2212      	movs	r2, #18
 800b1d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b1d2:	4b03      	ldr	r3, [pc, #12]	@ (800b1e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	200000d0 	.word	0x200000d0

0800b1e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	6039      	str	r1, [r7, #0]
 800b1ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b1f6:	4b03      	ldr	r3, [pc, #12]	@ (800b204 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	200000e4 	.word	0x200000e4

0800b208 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	4603      	mov	r3, r0
 800b210:	6039      	str	r1, [r7, #0]
 800b212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b214:	79fb      	ldrb	r3, [r7, #7]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d105      	bne.n	800b226 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	4907      	ldr	r1, [pc, #28]	@ (800b23c <USBD_FS_ProductStrDescriptor+0x34>)
 800b21e:	4808      	ldr	r0, [pc, #32]	@ (800b240 <USBD_FS_ProductStrDescriptor+0x38>)
 800b220:	f7ff fe12 	bl	800ae48 <USBD_GetString>
 800b224:	e004      	b.n	800b230 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	4904      	ldr	r1, [pc, #16]	@ (800b23c <USBD_FS_ProductStrDescriptor+0x34>)
 800b22a:	4805      	ldr	r0, [pc, #20]	@ (800b240 <USBD_FS_ProductStrDescriptor+0x38>)
 800b22c:	f7ff fe0c 	bl	800ae48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b230:	4b02      	ldr	r3, [pc, #8]	@ (800b23c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	2001432c 	.word	0x2001432c
 800b240:	0800bac4 	.word	0x0800bac4

0800b244 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	6039      	str	r1, [r7, #0]
 800b24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	4904      	ldr	r1, [pc, #16]	@ (800b264 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b254:	4804      	ldr	r0, [pc, #16]	@ (800b268 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b256:	f7ff fdf7 	bl	800ae48 <USBD_GetString>
  return USBD_StrDesc;
 800b25a:	4b02      	ldr	r3, [pc, #8]	@ (800b264 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	2001432c 	.word	0x2001432c
 800b268:	0800bad4 	.word	0x0800bad4

0800b26c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	6039      	str	r1, [r7, #0]
 800b276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	221a      	movs	r2, #26
 800b27c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b27e:	f000 f843 	bl	800b308 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b282:	4b02      	ldr	r3, [pc, #8]	@ (800b28c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200000e8 	.word	0x200000e8

0800b290 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	6039      	str	r1, [r7, #0]
 800b29a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b29c:	79fb      	ldrb	r3, [r7, #7]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d105      	bne.n	800b2ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	4907      	ldr	r1, [pc, #28]	@ (800b2c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2a6:	4808      	ldr	r0, [pc, #32]	@ (800b2c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2a8:	f7ff fdce 	bl	800ae48 <USBD_GetString>
 800b2ac:	e004      	b.n	800b2b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	4904      	ldr	r1, [pc, #16]	@ (800b2c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2b2:	4805      	ldr	r0, [pc, #20]	@ (800b2c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2b4:	f7ff fdc8 	bl	800ae48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2b8:	4b02      	ldr	r3, [pc, #8]	@ (800b2c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	2001432c 	.word	0x2001432c
 800b2c8:	0800bae8 	.word	0x0800bae8

0800b2cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	6039      	str	r1, [r7, #0]
 800b2d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d105      	bne.n	800b2ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	4907      	ldr	r1, [pc, #28]	@ (800b300 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2e2:	4808      	ldr	r0, [pc, #32]	@ (800b304 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2e4:	f7ff fdb0 	bl	800ae48 <USBD_GetString>
 800b2e8:	e004      	b.n	800b2f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	4904      	ldr	r1, [pc, #16]	@ (800b300 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2ee:	4805      	ldr	r0, [pc, #20]	@ (800b304 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2f0:	f7ff fdaa 	bl	800ae48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2f4:	4b02      	ldr	r3, [pc, #8]	@ (800b300 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	2001432c 	.word	0x2001432c
 800b304:	0800baf4 	.word	0x0800baf4

0800b308 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b30e:	4b0f      	ldr	r3, [pc, #60]	@ (800b34c <Get_SerialNum+0x44>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b314:	4b0e      	ldr	r3, [pc, #56]	@ (800b350 <Get_SerialNum+0x48>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b31a:	4b0e      	ldr	r3, [pc, #56]	@ (800b354 <Get_SerialNum+0x4c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4413      	add	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d009      	beq.n	800b342 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b32e:	2208      	movs	r2, #8
 800b330:	4909      	ldr	r1, [pc, #36]	@ (800b358 <Get_SerialNum+0x50>)
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f000 f814 	bl	800b360 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b338:	2204      	movs	r2, #4
 800b33a:	4908      	ldr	r1, [pc, #32]	@ (800b35c <Get_SerialNum+0x54>)
 800b33c:	68b8      	ldr	r0, [r7, #8]
 800b33e:	f000 f80f 	bl	800b360 <IntToUnicode>
  }
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	1fff7a10 	.word	0x1fff7a10
 800b350:	1fff7a14 	.word	0x1fff7a14
 800b354:	1fff7a18 	.word	0x1fff7a18
 800b358:	200000ea 	.word	0x200000ea
 800b35c:	200000fa 	.word	0x200000fa

0800b360 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b360:	b480      	push	{r7}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	4613      	mov	r3, r2
 800b36c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b372:	2300      	movs	r3, #0
 800b374:	75fb      	strb	r3, [r7, #23]
 800b376:	e027      	b.n	800b3c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	0f1b      	lsrs	r3, r3, #28
 800b37c:	2b09      	cmp	r3, #9
 800b37e:	d80b      	bhi.n	800b398 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	0f1b      	lsrs	r3, r3, #28
 800b384:	b2da      	uxtb	r2, r3
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	4619      	mov	r1, r3
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	440b      	add	r3, r1
 800b390:	3230      	adds	r2, #48	@ 0x30
 800b392:	b2d2      	uxtb	r2, r2
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	e00a      	b.n	800b3ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	0f1b      	lsrs	r3, r3, #28
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	7dfb      	ldrb	r3, [r7, #23]
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	440b      	add	r3, r1
 800b3a8:	3237      	adds	r2, #55	@ 0x37
 800b3aa:	b2d2      	uxtb	r2, r2
 800b3ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	011b      	lsls	r3, r3, #4
 800b3b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b3b4:	7dfb      	ldrb	r3, [r7, #23]
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	4413      	add	r3, r2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	75fb      	strb	r3, [r7, #23]
 800b3c8:	7dfa      	ldrb	r2, [r7, #23]
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d3d3      	bcc.n	800b378 <IntToUnicode+0x18>
  }
}
 800b3d0:	bf00      	nop
 800b3d2:	bf00      	nop
 800b3d4:	371c      	adds	r7, #28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08a      	sub	sp, #40	@ 0x28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3e8:	f107 0314 	add.w	r3, r7, #20
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	605a      	str	r2, [r3, #4]
 800b3f2:	609a      	str	r2, [r3, #8]
 800b3f4:	60da      	str	r2, [r3, #12]
 800b3f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b400:	d147      	bne.n	800b492 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b402:	2300      	movs	r3, #0
 800b404:	613b      	str	r3, [r7, #16]
 800b406:	4b25      	ldr	r3, [pc, #148]	@ (800b49c <HAL_PCD_MspInit+0xbc>)
 800b408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b40a:	4a24      	ldr	r2, [pc, #144]	@ (800b49c <HAL_PCD_MspInit+0xbc>)
 800b40c:	f043 0301 	orr.w	r3, r3, #1
 800b410:	6313      	str	r3, [r2, #48]	@ 0x30
 800b412:	4b22      	ldr	r3, [pc, #136]	@ (800b49c <HAL_PCD_MspInit+0xbc>)
 800b414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	613b      	str	r3, [r7, #16]
 800b41c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b41e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b424:	2300      	movs	r3, #0
 800b426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b42c:	f107 0314 	add.w	r3, r7, #20
 800b430:	4619      	mov	r1, r3
 800b432:	481b      	ldr	r0, [pc, #108]	@ (800b4a0 <HAL_PCD_MspInit+0xc0>)
 800b434:	f7f5 ff56 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b438:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b43c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43e:	2302      	movs	r3, #2
 800b440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b442:	2300      	movs	r3, #0
 800b444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b446:	2303      	movs	r3, #3
 800b448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b44a:	230a      	movs	r3, #10
 800b44c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b44e:	f107 0314 	add.w	r3, r7, #20
 800b452:	4619      	mov	r1, r3
 800b454:	4812      	ldr	r0, [pc, #72]	@ (800b4a0 <HAL_PCD_MspInit+0xc0>)
 800b456:	f7f5 ff45 	bl	80012e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b45a:	4b10      	ldr	r3, [pc, #64]	@ (800b49c <HAL_PCD_MspInit+0xbc>)
 800b45c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b45e:	4a0f      	ldr	r2, [pc, #60]	@ (800b49c <HAL_PCD_MspInit+0xbc>)
 800b460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b464:	6353      	str	r3, [r2, #52]	@ 0x34
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	4b0c      	ldr	r3, [pc, #48]	@ (800b49c <HAL_PCD_MspInit+0xbc>)
 800b46c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b46e:	4a0b      	ldr	r2, [pc, #44]	@ (800b49c <HAL_PCD_MspInit+0xbc>)
 800b470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b474:	6453      	str	r3, [r2, #68]	@ 0x44
 800b476:	4b09      	ldr	r3, [pc, #36]	@ (800b49c <HAL_PCD_MspInit+0xbc>)
 800b478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b47a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b482:	2200      	movs	r2, #0
 800b484:	2100      	movs	r1, #0
 800b486:	2043      	movs	r0, #67	@ 0x43
 800b488:	f7f5 ff02 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b48c:	2043      	movs	r0, #67	@ 0x43
 800b48e:	f7f5 ff1b 	bl	80012c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b492:	bf00      	nop
 800b494:	3728      	adds	r7, #40	@ 0x28
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	40023800 	.word	0x40023800
 800b4a0:	40020000 	.word	0x40020000

0800b4a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	4610      	mov	r0, r2
 800b4bc:	f7fe fb61 	bl	8009b82 <USBD_LL_SetupStage>
}
 800b4c0:	bf00      	nop
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b4da:	78fa      	ldrb	r2, [r7, #3]
 800b4dc:	6879      	ldr	r1, [r7, #4]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	00db      	lsls	r3, r3, #3
 800b4e2:	4413      	add	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	440b      	add	r3, r1
 800b4e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	78fb      	ldrb	r3, [r7, #3]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	f7fe fb9b 	bl	8009c2c <USBD_LL_DataOutStage>
}
 800b4f6:	bf00      	nop
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	460b      	mov	r3, r1
 800b508:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b510:	78fa      	ldrb	r2, [r7, #3]
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	4613      	mov	r3, r2
 800b516:	00db      	lsls	r3, r3, #3
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	440b      	add	r3, r1
 800b51e:	3320      	adds	r3, #32
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	4619      	mov	r1, r3
 800b526:	f7fe fc34 	bl	8009d92 <USBD_LL_DataInStage>
}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fd6e 	bl	800a022 <USBD_LL_SOF>
}
 800b546:	bf00      	nop
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b084      	sub	sp, #16
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b556:	2301      	movs	r3, #1
 800b558:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	79db      	ldrb	r3, [r3, #7]
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d001      	beq.n	800b566 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b562:	f7f5 fb03 	bl	8000b6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b56c:	7bfa      	ldrb	r2, [r7, #15]
 800b56e:	4611      	mov	r1, r2
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe fd12 	bl	8009f9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fe fcba 	bl	8009ef6 <USBD_LL_Reset>
}
 800b582:	bf00      	nop
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fd0d 	bl	8009fba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	6812      	ldr	r2, [r2, #0]
 800b5ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b5b2:	f043 0301 	orr.w	r3, r3, #1
 800b5b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7adb      	ldrb	r3, [r3, #11]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d005      	beq.n	800b5cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5c0:	4b04      	ldr	r3, [pc, #16]	@ (800b5d4 <HAL_PCD_SuspendCallback+0x48>)
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	4a03      	ldr	r2, [pc, #12]	@ (800b5d4 <HAL_PCD_SuspendCallback+0x48>)
 800b5c6:	f043 0306 	orr.w	r3, r3, #6
 800b5ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b5cc:	bf00      	nop
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	e000ed00 	.word	0xe000ed00

0800b5d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fe fd03 	bl	8009ff2 <USBD_LL_Resume>
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b606:	78fa      	ldrb	r2, [r7, #3]
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe fd5b 	bl	800a0c6 <USBD_LL_IsoOUTIncomplete>
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b62a:	78fa      	ldrb	r2, [r7, #3]
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe fd17 	bl	800a062 <USBD_LL_IsoINIncomplete>
}
 800b634:	bf00      	nop
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe fd6d 	bl	800a12a <USBD_LL_DevConnected>
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b666:	4618      	mov	r0, r3
 800b668:	f7fe fd6a 	bl	800a140 <USBD_LL_DevDisconnected>
}
 800b66c:	bf00      	nop
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d13c      	bne.n	800b6fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b684:	4a20      	ldr	r2, [pc, #128]	@ (800b708 <USBD_LL_Init+0x94>)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a1e      	ldr	r2, [pc, #120]	@ (800b708 <USBD_LL_Init+0x94>)
 800b690:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b694:	4b1c      	ldr	r3, [pc, #112]	@ (800b708 <USBD_LL_Init+0x94>)
 800b696:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b69a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b69c:	4b1a      	ldr	r3, [pc, #104]	@ (800b708 <USBD_LL_Init+0x94>)
 800b69e:	2204      	movs	r2, #4
 800b6a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b6a2:	4b19      	ldr	r3, [pc, #100]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b6a8:	4b17      	ldr	r3, [pc, #92]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b6ae:	4b16      	ldr	r3, [pc, #88]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6b0:	2202      	movs	r2, #2
 800b6b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b6b4:	4b14      	ldr	r3, [pc, #80]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b6ba:	4b13      	ldr	r3, [pc, #76]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b6c0:	4b11      	ldr	r3, [pc, #68]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b6c6:	4b10      	ldr	r3, [pc, #64]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b6d2:	480d      	ldr	r0, [pc, #52]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6d4:	f7f7 f90c 	bl	80028f0 <HAL_PCD_Init>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b6de:	f7f5 fa45 	bl	8000b6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b6e2:	2180      	movs	r1, #128	@ 0x80
 800b6e4:	4808      	ldr	r0, [pc, #32]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6e6:	f7f8 fb38 	bl	8003d5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b6ea:	2240      	movs	r2, #64	@ 0x40
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	4806      	ldr	r0, [pc, #24]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6f0:	f7f8 faec 	bl	8003ccc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b6f4:	2280      	movs	r2, #128	@ 0x80
 800b6f6:	2101      	movs	r1, #1
 800b6f8:	4803      	ldr	r0, [pc, #12]	@ (800b708 <USBD_LL_Init+0x94>)
 800b6fa:	f7f8 fae7 	bl	8003ccc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	2001452c 	.word	0x2001452c

0800b70c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b718:	2300      	movs	r3, #0
 800b71a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b722:	4618      	mov	r0, r3
 800b724:	f7f7 f9f3 	bl	8002b0e <HAL_PCD_Start>
 800b728:	4603      	mov	r3, r0
 800b72a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 f942 	bl	800b9b8 <USBD_Get_USB_Status>
 800b734:	4603      	mov	r3, r0
 800b736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b738:	7bbb      	ldrb	r3, [r7, #14]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	4608      	mov	r0, r1
 800b74c:	4611      	mov	r1, r2
 800b74e:	461a      	mov	r2, r3
 800b750:	4603      	mov	r3, r0
 800b752:	70fb      	strb	r3, [r7, #3]
 800b754:	460b      	mov	r3, r1
 800b756:	70bb      	strb	r3, [r7, #2]
 800b758:	4613      	mov	r3, r2
 800b75a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b760:	2300      	movs	r3, #0
 800b762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b76a:	78bb      	ldrb	r3, [r7, #2]
 800b76c:	883a      	ldrh	r2, [r7, #0]
 800b76e:	78f9      	ldrb	r1, [r7, #3]
 800b770:	f7f7 fec7 	bl	8003502 <HAL_PCD_EP_Open>
 800b774:	4603      	mov	r3, r0
 800b776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b778:	7bfb      	ldrb	r3, [r7, #15]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 f91c 	bl	800b9b8 <USBD_Get_USB_Status>
 800b780:	4603      	mov	r3, r0
 800b782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b784:	7bbb      	ldrb	r3, [r7, #14]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	460b      	mov	r3, r1
 800b798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7a8:	78fa      	ldrb	r2, [r7, #3]
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7f7 ff12 	bl	80035d6 <HAL_PCD_EP_Close>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 f8fd 	bl	800b9b8 <USBD_Get_USB_Status>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7e6:	78fa      	ldrb	r2, [r7, #3]
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7f7 ffca 	bl	8003784 <HAL_PCD_EP_SetStall>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 f8de 	bl	800b9b8 <USBD_Get_USB_Status>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b800:	7bbb      	ldrb	r3, [r7, #14]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	460b      	mov	r3, r1
 800b814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b824:	78fa      	ldrb	r2, [r7, #3]
 800b826:	4611      	mov	r1, r2
 800b828:	4618      	mov	r0, r3
 800b82a:	f7f8 f80e 	bl	800384a <HAL_PCD_EP_ClrStall>
 800b82e:	4603      	mov	r3, r0
 800b830:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b832:	7bfb      	ldrb	r3, [r7, #15]
 800b834:	4618      	mov	r0, r3
 800b836:	f000 f8bf 	bl	800b9b8 <USBD_Get_USB_Status>
 800b83a:	4603      	mov	r3, r0
 800b83c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b83e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	460b      	mov	r3, r1
 800b852:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b85a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b85c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b860:	2b00      	cmp	r3, #0
 800b862:	da0b      	bge.n	800b87c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b864:	78fb      	ldrb	r3, [r7, #3]
 800b866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b86a:	68f9      	ldr	r1, [r7, #12]
 800b86c:	4613      	mov	r3, r2
 800b86e:	00db      	lsls	r3, r3, #3
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	440b      	add	r3, r1
 800b876:	3316      	adds	r3, #22
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	e00b      	b.n	800b894 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b87c:	78fb      	ldrb	r3, [r7, #3]
 800b87e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b882:	68f9      	ldr	r1, [r7, #12]
 800b884:	4613      	mov	r3, r2
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	440b      	add	r3, r1
 800b88e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b892:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b894:	4618      	mov	r0, r3
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8ba:	78fa      	ldrb	r2, [r7, #3]
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7f7 fdfb 	bl	80034ba <HAL_PCD_SetAddress>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 f874 	bl	800b9b8 <USBD_Get_USB_Status>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b086      	sub	sp, #24
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b8fc:	7af9      	ldrb	r1, [r7, #11]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	f7f7 ff05 	bl	8003710 <HAL_PCD_EP_Transmit>
 800b906:	4603      	mov	r3, r0
 800b908:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 f853 	bl	800b9b8 <USBD_Get_USB_Status>
 800b912:	4603      	mov	r3, r0
 800b914:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b916:	7dbb      	ldrb	r3, [r7, #22]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	460b      	mov	r3, r1
 800b92e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b93e:	7af9      	ldrb	r1, [r7, #11]
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	f7f7 fe91 	bl	800366a <HAL_PCD_EP_Receive>
 800b948:	4603      	mov	r3, r0
 800b94a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 f832 	bl	800b9b8 <USBD_Get_USB_Status>
 800b954:	4603      	mov	r3, r0
 800b956:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b958:	7dbb      	ldrb	r3, [r7, #22]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b082      	sub	sp, #8
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	460b      	mov	r3, r1
 800b96c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b974:	78fa      	ldrb	r2, [r7, #3]
 800b976:	4611      	mov	r1, r2
 800b978:	4618      	mov	r0, r3
 800b97a:	f7f7 feb1 	bl	80036e0 <HAL_PCD_EP_GetRxCount>
 800b97e:	4603      	mov	r3, r0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b990:	4b03      	ldr	r3, [pc, #12]	@ (800b9a0 <USBD_static_malloc+0x18>)
}
 800b992:	4618      	mov	r0, r3
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	20014a10 	.word	0x20014a10

0800b9a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]

}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	4603      	mov	r3, r0
 800b9c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	2b03      	cmp	r3, #3
 800b9ca:	d817      	bhi.n	800b9fc <USBD_Get_USB_Status+0x44>
 800b9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d4 <USBD_Get_USB_Status+0x1c>)
 800b9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d2:	bf00      	nop
 800b9d4:	0800b9e5 	.word	0x0800b9e5
 800b9d8:	0800b9eb 	.word	0x0800b9eb
 800b9dc:	0800b9f1 	.word	0x0800b9f1
 800b9e0:	0800b9f7 	.word	0x0800b9f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e8:	e00b      	b.n	800ba02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ee:	e008      	b.n	800ba02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f4:	e005      	b.n	800ba02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9fa:	e002      	b.n	800ba02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800ba00:	bf00      	nop
  }
  return usb_status;
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <memset>:
 800ba10:	4402      	add	r2, r0
 800ba12:	4603      	mov	r3, r0
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d100      	bne.n	800ba1a <memset+0xa>
 800ba18:	4770      	bx	lr
 800ba1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba1e:	e7f9      	b.n	800ba14 <memset+0x4>

0800ba20 <__libc_init_array>:
 800ba20:	b570      	push	{r4, r5, r6, lr}
 800ba22:	4d0d      	ldr	r5, [pc, #52]	@ (800ba58 <__libc_init_array+0x38>)
 800ba24:	4c0d      	ldr	r4, [pc, #52]	@ (800ba5c <__libc_init_array+0x3c>)
 800ba26:	1b64      	subs	r4, r4, r5
 800ba28:	10a4      	asrs	r4, r4, #2
 800ba2a:	2600      	movs	r6, #0
 800ba2c:	42a6      	cmp	r6, r4
 800ba2e:	d109      	bne.n	800ba44 <__libc_init_array+0x24>
 800ba30:	4d0b      	ldr	r5, [pc, #44]	@ (800ba60 <__libc_init_array+0x40>)
 800ba32:	4c0c      	ldr	r4, [pc, #48]	@ (800ba64 <__libc_init_array+0x44>)
 800ba34:	f000 f826 	bl	800ba84 <_init>
 800ba38:	1b64      	subs	r4, r4, r5
 800ba3a:	10a4      	asrs	r4, r4, #2
 800ba3c:	2600      	movs	r6, #0
 800ba3e:	42a6      	cmp	r6, r4
 800ba40:	d105      	bne.n	800ba4e <__libc_init_array+0x2e>
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba48:	4798      	blx	r3
 800ba4a:	3601      	adds	r6, #1
 800ba4c:	e7ee      	b.n	800ba2c <__libc_init_array+0xc>
 800ba4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba52:	4798      	blx	r3
 800ba54:	3601      	adds	r6, #1
 800ba56:	e7f2      	b.n	800ba3e <__libc_init_array+0x1e>
 800ba58:	0800bb24 	.word	0x0800bb24
 800ba5c:	0800bb24 	.word	0x0800bb24
 800ba60:	0800bb24 	.word	0x0800bb24
 800ba64:	0800bb28 	.word	0x0800bb28

0800ba68 <memcpy>:
 800ba68:	440a      	add	r2, r1
 800ba6a:	4291      	cmp	r1, r2
 800ba6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba70:	d100      	bne.n	800ba74 <memcpy+0xc>
 800ba72:	4770      	bx	lr
 800ba74:	b510      	push	{r4, lr}
 800ba76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba7e:	4291      	cmp	r1, r2
 800ba80:	d1f9      	bne.n	800ba76 <memcpy+0xe>
 800ba82:	bd10      	pop	{r4, pc}

0800ba84 <_init>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	bf00      	nop
 800ba88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8a:	bc08      	pop	{r3}
 800ba8c:	469e      	mov	lr, r3
 800ba8e:	4770      	bx	lr

0800ba90 <_fini>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	bf00      	nop
 800ba94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba96:	bc08      	pop	{r3}
 800ba98:	469e      	mov	lr, r3
 800ba9a:	4770      	bx	lr
