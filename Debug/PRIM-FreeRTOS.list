
PRIM-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800e478  0800e478  0000f478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e54c  0800e54c  00010104  2**0
                  CONTENTS
  4 .ARM          00000008  0800e54c  0800e54c  0000f54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e554  0800e554  00010104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e554  0800e554  0000f554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e558  0800e558  0000f558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800e55c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014ba4  20000104  0800e660  00010104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014ca8  0800e660  00010ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fed2  00000000  00000000  00010134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f39  00000000  00000000  00030006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d30  00000000  00000000  00034f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000168c  00000000  00000000  00036c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfb0  00000000  00000000  000382fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025391  00000000  00000000  000542ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd7c  00000000  00000000  0007963d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001193b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b44  00000000  00000000  001193fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00120f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e460 	.word	0x0800e460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800e460 	.word	0x0800e460

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <i2c1_pisiRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af04      	add	r7, sp, #16
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	460b      	mov	r3, r1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	4613      	mov	r3, r2
 80004f0:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	b299      	uxth	r1, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	230a      	movs	r3, #10
 8000502:	9302      	str	r3, [sp, #8]
 8000504:	2301      	movs	r3, #1
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	1d7b      	adds	r3, r7, #5
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	4804      	ldr	r0, [pc, #16]	@ (8000520 <i2c1_pisiRegister+0x40>)
 8000510:	f001 fe5a 	bl	80021c8 <HAL_I2C_Mem_Write>
 8000514:	4603      	mov	r3, r0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000120 	.word	0x20000120

08000524 <i2c1_beriRegistre>:

HAL_StatusTypeDef i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af04      	add	r7, sp, #16
 800052a:	603a      	str	r2, [r7, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	460b      	mov	r3, r1
 8000534:	71bb      	strb	r3, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800053a:	797b      	ldrb	r3, [r7, #5]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d906      	bls.n	800054e <i2c1_beriRegistre+0x2a>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b19      	cmp	r3, #25
 8000544:	d103      	bne.n	800054e <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800054c:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	b299      	uxth	r1, r3
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	b298      	uxth	r0, r3
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	b29b      	uxth	r3, r3
 8000560:	797a      	ldrb	r2, [r7, #5]
 8000562:	9202      	str	r2, [sp, #8]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4602      	mov	r2, r0
 800056e:	4805      	ldr	r0, [pc, #20]	@ (8000584 <i2c1_beriRegistre+0x60>)
 8000570:	f001 ff24 	bl	80023bc <HAL_I2C_Mem_Read>
 8000574:	4603      	mov	r3, r0
 8000576:	73fb      	strb	r3, [r7, #15]

	return status;
 8000578:	7bfb      	ldrb	r3, [r7, #15]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000120 	.word	0x20000120

08000588 <initOrientation>:

void initOrientation() { // ne pozabit klicati te funkcije
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 800058c:	2227      	movs	r2, #39	@ 0x27
 800058e:	2120      	movs	r1, #32
 8000590:	2019      	movs	r0, #25
 8000592:	f7ff ffa5 	bl	80004e0 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000596:	2288      	movs	r2, #136	@ 0x88
 8000598:	2123      	movs	r1, #35	@ 0x23
 800059a:	2019      	movs	r0, #25
 800059c:	f7ff ffa0 	bl	80004e0 <i2c1_pisiRegister>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005b4:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2108      	movs	r1, #8
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <spi1_beriRegister+0x50>)
 80005c2:	f001 fc89 	bl	8001ed8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 80005c6:	f107 020c 	add.w	r2, r7, #12
 80005ca:	f107 010e 	add.w	r1, r7, #14
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2302      	movs	r3, #2
 80005d4:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <spi1_beriRegister+0x54>)
 80005d6:	f005 fcb7 	bl	8005f48 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2108      	movs	r1, #8
 80005de:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <spi1_beriRegister+0x50>)
 80005e0:	f001 fc7a 	bl	8001ed8 <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 80005e4:	89bb      	ldrh	r3, [r7, #12]
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	20000204 	.word	0x20000204

080005fc <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	b21a      	sxth	r2, r3
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	b21b      	sxth	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b21b      	sxth	r3, r3
 800061a:	b29b      	uxth	r3, r3
 800061c:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4809      	ldr	r0, [pc, #36]	@ (8000648 <spi1_pisiRegister+0x4c>)
 8000624:	f001 fc58 	bl	8001ed8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000628:	f107 010e 	add.w	r1, r7, #14
 800062c:	2302      	movs	r3, #2
 800062e:	2202      	movs	r2, #2
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <spi1_pisiRegister+0x50>)
 8000632:	f005 fa2c 	bl	8005a8e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2108      	movs	r1, #8
 800063a:	4803      	ldr	r0, [pc, #12]	@ (8000648 <spi1_pisiRegister+0x4c>)
 800063c:	f001 fc4c 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	20000204 	.word	0x20000204

08000650 <spi1_beriRegistre>:

HAL_StatusTypeDef spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000666:	b2db      	uxtb	r3, r3
 8000668:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2108      	movs	r1, #8
 800066e:	4813      	ldr	r0, [pc, #76]	@ (80006bc <spi1_beriRegistre+0x6c>)
 8000670:	f001 fc32 	bl	8001ed8 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status_SPI_Transmit = HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8000674:	1df9      	adds	r1, r7, #7
 8000676:	230a      	movs	r3, #10
 8000678:	2201      	movs	r2, #1
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <spi1_beriRegistre+0x70>)
 800067c:	f005 fa07 	bl	8005a8e <HAL_SPI_Transmit>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status_SPI_Receive = HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	b29a      	uxth	r2, r3
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	6839      	ldr	r1, [r7, #0]
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <spi1_beriRegistre+0x70>)
 800068e:	f005 fb42 	bl	8005d16 <HAL_SPI_Receive>
 8000692:	4603      	mov	r3, r0
 8000694:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2108      	movs	r1, #8
 800069a:	4808      	ldr	r0, [pc, #32]	@ (80006bc <spi1_beriRegistre+0x6c>)
 800069c:	f001 fc1c 	bl	8001ed8 <HAL_GPIO_WritePin>

    return status_SPI_Transmit != HAL_OK ? HAL_ERROR : status_SPI_Receive != HAL_OK ? HAL_ERROR : HAL_OK;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <spi1_beriRegistre+0x5c>
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <spi1_beriRegistre+0x60>
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <spi1_beriRegistre+0x62>
 80006b0:	2300      	movs	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	20000204 	.word	0x20000204

080006c4 <initGyro>:

void initGyro() { // ne pozabit klicat te funkcije
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
    // preverimo ali smo "poklicali" pravi senzor
    uint8_t cip = spi1_beriRegister(0x0F);
 80006ca:	200f      	movs	r0, #15
 80006cc:	f7ff ff6a 	bl	80005a4 <spi1_beriRegister>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2bd4      	cmp	r3, #212	@ 0xd4
 80006d8:	d004      	beq.n	80006e4 <initGyro+0x20>
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2bd3      	cmp	r3, #211	@ 0xd3
 80006de:	d001      	beq.n	80006e4 <initGyro+0x20>
        for (;;);
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x0F); // zbudi ziroskop in omogoci osi
 80006e4:	210f      	movs	r1, #15
 80006e6:	2020      	movs	r0, #32
 80006e8:	f7ff ff88 	bl	80005fc <spi1_pisiRegister>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <initMutex>:

void initMutex(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    dataMutex = xSemaphoreCreateMutex();
 80006f8:	2001      	movs	r0, #1
 80006fa:	f008 fc19 	bl	8008f30 <xQueueCreateMutex>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <initMutex+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
    if (dataMutex == NULL) {
 8000704:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <initMutex+0x20>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d101      	bne.n	8000710 <initMutex+0x1c>
        Error_Handler(); // Handle error if mutex creation fails
 800070c:	f000 fe30 	bl	8001370 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200002b4 	.word	0x200002b4

08000718 <getGyroData>:

void getGyroData(void *pvParameters) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	while (1) {
		int16_t gyro[3];
		if (spi1_beriRegistre(0x28, (uint8_t *)gyro, 6) == HAL_OK) {
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2206      	movs	r2, #6
 8000726:	4619      	mov	r1, r3
 8000728:	2028      	movs	r0, #40	@ 0x28
 800072a:	f7ff ff91 	bl	8000650 <spi1_beriRegistre>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d11f      	bne.n	8000774 <getGyroData+0x5c>
			// Protect shared data with mutex
			if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <getGyroData+0xc8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2164      	movs	r1, #100	@ 0x64
 800073a:	4618      	mov	r0, r3
 800073c:	f008 fdf4 	bl	8009328 <xQueueSemaphoreTake>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d112      	bne.n	800076c <getGyroData+0x54>
				memcpy(sharedSensorData.gyroData, gyro, sizeof(gyro));
 8000746:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <getGyroData+0xcc>)
 8000748:	f107 0208 	add.w	r2, r7, #8
 800074c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000750:	6018      	str	r0, [r3, #0]
 8000752:	3304      	adds	r3, #4
 8000754:	8019      	strh	r1, [r3, #0]
				xSemaphoreGive(dataMutex);
 8000756:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <getGyroData+0xc8>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	2300      	movs	r3, #0
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	f008 fbfe 	bl	8008f60 <xQueueGenericSend>
				sharedStatus.gyroStatus = 0; // Update status to OK
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <getGyroData+0xd0>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e035      	b.n	80007d8 <getGyroData+0xc0>
			} else {
				sharedStatus.gyroStatus = 2; // Mutex acquisition error
 800076c:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <getGyroData+0xd0>)
 800076e:	2202      	movs	r2, #2
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e031      	b.n	80007d8 <getGyroData+0xc0>
			}
		} else {
			sharedStatus.gyroStatus = 1; // Sensor read error
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <getGyroData+0xd0>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 3; i++)
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e009      	b.n	8000794 <getGyroData+0x7c>
				gyro[i] = 0;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	3310      	adds	r3, #16
 8000786:	443b      	add	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	f823 2c08 	strh.w	r2, [r3, #-8]
			for(uint8_t i = 0; i < 3; i++)
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d9f2      	bls.n	8000780 <getGyroData+0x68>
			if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <getGyroData+0xc8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2164      	movs	r1, #100	@ 0x64
 80007a0:	4618      	mov	r0, r3
 80007a2:	f008 fdc1 	bl	8009328 <xQueueSemaphoreTake>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d112      	bne.n	80007d2 <getGyroData+0xba>
				memcpy(sharedSensorData.gyroData, gyro, sizeof(gyro));
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <getGyroData+0xcc>)
 80007ae:	f107 0208 	add.w	r2, r7, #8
 80007b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b6:	6018      	str	r0, [r3, #0]
 80007b8:	3304      	adds	r3, #4
 80007ba:	8019      	strh	r1, [r3, #0]
				xSemaphoreGive(dataMutex);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <getGyroData+0xc8>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	2300      	movs	r3, #0
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	f008 fbcb 	bl	8008f60 <xQueueGenericSend>
				sharedStatus.gyroStatus = 0; // Update status to OK
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <getGyroData+0xd0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	e002      	b.n	80007d8 <getGyroData+0xc0>
			} else {
				sharedStatus.gyroStatus = 2; // Mutex acquisition error
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <getGyroData+0xd0>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	701a      	strb	r2, [r3, #0]
			}
		}
		vTaskDelay(pdMS_TO_TICKS(50)); // Adjust delay as needed
 80007d8:	2032      	movs	r0, #50	@ 0x32
 80007da:	f009 f9bd 	bl	8009b58 <vTaskDelay>
	while (1) {
 80007de:	e79f      	b.n	8000720 <getGyroData+0x8>
 80007e0:	200002b4 	.word	0x200002b4
 80007e4:	200002a8 	.word	0x200002a8
 80007e8:	200002b8 	.word	0x200002b8

080007ec <getAccelData>:
	}
}

void getAccelData(void *pvParameters) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	while (1) {
		int16_t accel[3];
		if (i2c1_beriRegistre(0x19, 0x28, (uint8_t *)accel, 6) == HAL_OK) {
 80007f4:	f107 0208 	add.w	r2, r7, #8
 80007f8:	2306      	movs	r3, #6
 80007fa:	2128      	movs	r1, #40	@ 0x28
 80007fc:	2019      	movs	r0, #25
 80007fe:	f7ff fe91 	bl	8000524 <i2c1_beriRegistre>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d11f      	bne.n	8000848 <getAccelData+0x5c>
			// Protect shared data with mutex
			if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <getAccelData+0xc8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2164      	movs	r1, #100	@ 0x64
 800080e:	4618      	mov	r0, r3
 8000810:	f008 fd8a 	bl	8009328 <xQueueSemaphoreTake>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d112      	bne.n	8000840 <getAccelData+0x54>
				memcpy(sharedSensorData.accelData, accel, sizeof(accel));
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <getAccelData+0xcc>)
 800081c:	3306      	adds	r3, #6
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	6810      	ldr	r0, [r2, #0]
 8000824:	6018      	str	r0, [r3, #0]
 8000826:	8892      	ldrh	r2, [r2, #4]
 8000828:	809a      	strh	r2, [r3, #4]
				xSemaphoreGive(dataMutex);
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <getAccelData+0xc8>)
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	f008 fb94 	bl	8008f60 <xQueueGenericSend>
				sharedStatus.accelStatus = 0; // Update status to OK
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <getAccelData+0xd0>)
 800083a:	2200      	movs	r2, #0
 800083c:	705a      	strb	r2, [r3, #1]
 800083e:	e035      	b.n	80008ac <getAccelData+0xc0>
			} else {
				sharedStatus.accelStatus = 2; // Mutex acquisition error
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <getAccelData+0xd0>)
 8000842:	2202      	movs	r2, #2
 8000844:	705a      	strb	r2, [r3, #1]
 8000846:	e031      	b.n	80008ac <getAccelData+0xc0>
			}
		} else {
			sharedStatus.accelStatus = 1; // Sensor read error
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <getAccelData+0xd0>)
 800084a:	2201      	movs	r2, #1
 800084c:	705a      	strb	r2, [r3, #1]
			for(uint8_t i = 0; i < 3; i++)
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	e009      	b.n	8000868 <getAccelData+0x7c>
				accel[i] = 0;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	3310      	adds	r3, #16
 800085a:	443b      	add	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	f823 2c08 	strh.w	r2, [r3, #-8]
			for(uint8_t i = 0; i < 3; i++)
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	3301      	adds	r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d9f2      	bls.n	8000854 <getAccelData+0x68>
			if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <getAccelData+0xc8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2164      	movs	r1, #100	@ 0x64
 8000874:	4618      	mov	r0, r3
 8000876:	f008 fd57 	bl	8009328 <xQueueSemaphoreTake>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d112      	bne.n	80008a6 <getAccelData+0xba>
				memcpy(sharedSensorData.accelData, accel, sizeof(accel));
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <getAccelData+0xcc>)
 8000882:	3306      	adds	r3, #6
 8000884:	f107 0208 	add.w	r2, r7, #8
 8000888:	6810      	ldr	r0, [r2, #0]
 800088a:	6018      	str	r0, [r3, #0]
 800088c:	8892      	ldrh	r2, [r2, #4]
 800088e:	809a      	strh	r2, [r3, #4]
				xSemaphoreGive(dataMutex);
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <getAccelData+0xc8>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	f008 fb61 	bl	8008f60 <xQueueGenericSend>
				sharedStatus.accelStatus = 0; // Update status to OK
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <getAccelData+0xd0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	705a      	strb	r2, [r3, #1]
 80008a4:	e002      	b.n	80008ac <getAccelData+0xc0>
			} else {
				sharedStatus.accelStatus = 2; // Mutex acquisition error
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <getAccelData+0xd0>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	705a      	strb	r2, [r3, #1]
			}
		}
		vTaskDelay(pdMS_TO_TICKS(50)); // Adjust delay as needed
 80008ac:	2032      	movs	r0, #50	@ 0x32
 80008ae:	f009 f953 	bl	8009b58 <vTaskDelay>
	while (1) {
 80008b2:	e79f      	b.n	80007f4 <getAccelData+0x8>
 80008b4:	200002b4 	.word	0x200002b4
 80008b8:	200002a8 	.word	0x200002a8
 80008bc:	200002b8 	.word	0x200002b8

080008c0 <sendData>:
	}
}

void sendData(void *pvParameters) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	SensorPacket packet;

	while (1) {
		// Safely copy shared sensor data
		xSemaphoreTake(dataMutex, portMAX_DELAY);
 80008c8:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <sendData+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	4618      	mov	r0, r3
 80008d2:	f008 fd29 	bl	8009328 <xQueueSemaphoreTake>
		packet.data = sharedSensorData;
 80008d6:	4a14      	ldr	r2, [pc, #80]	@ (8000928 <sendData+0x68>)
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80008de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		xSemaphoreGive(dataMutex);
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <sendData+0x64>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	f008 fb38 	bl	8008f60 <xQueueGenericSend>

		// Populate the header
		packet.header.packetID = 0xab;
 80008f0:	23ab      	movs	r3, #171	@ 0xab
 80008f2:	733b      	strb	r3, [r7, #12]
		packet.header.dataSize = sizeof(SensorData);
 80008f4:	2314      	movs	r3, #20
 80008f6:	81fb      	strh	r3, [r7, #14]
		packet.header.timestamp = xTaskGetTickCount();
 80008f8:	f009 fac0 	bl	8009e7c <xTaskGetTickCount>
 80008fc:	4603      	mov	r3, r0
 80008fe:	613b      	str	r3, [r7, #16]

		// Send the complete packet (header + data)
		while (CDC_Transmit_FS((uint8_t *)&packet, sizeof(SensorPacket)));
 8000900:	bf00      	nop
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2114      	movs	r1, #20
 8000908:	4618      	mov	r0, r3
 800090a:	f00d f90f 	bl	800db2c <CDC_Transmit_FS>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f6      	bne.n	8000902 <sendData+0x42>
		sharedStatus.sending = 1;
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <sendData+0x6c>)
 8000916:	2201      	movs	r2, #1
 8000918:	709a      	strb	r2, [r3, #2]

		vTaskDelay(100 / portTICK_PERIOD_MS); // Adjust delay as needed
 800091a:	2064      	movs	r0, #100	@ 0x64
 800091c:	f009 f91c 	bl	8009b58 <vTaskDelay>
		xSemaphoreTake(dataMutex, portMAX_DELAY);
 8000920:	e7d2      	b.n	80008c8 <sendData+0x8>
 8000922:	bf00      	nop
 8000924:	200002b4 	.word	0x200002b4
 8000928:	200002a8 	.word	0x200002a8
 800092c:	200002b8 	.word	0x200002b8

08000930 <update_pwm_brightness>:
	}
}

void update_pwm_brightness(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t brightness_level) {
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	4613      	mov	r3, r2
 800093c:	71fb      	strb	r3, [r7, #7]
    uint32_t ccr_value = (brightness_level * (999 + 1)) / 100;
 800093e:	79fa      	ldrb	r2, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	617b      	str	r3, [r7, #20]

    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d104      	bne.n	800095a <update_pwm_brightness+0x2a>
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000958:	e013      	b.n	8000982 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	2b04      	cmp	r3, #4
 800095e:	d104      	bne.n	800096a <update_pwm_brightness+0x3a>
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000968:	e00b      	b.n	8000982 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	2b08      	cmp	r3, #8
 800096e:	d104      	bne.n	800097a <update_pwm_brightness+0x4a>
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000978:	e003      	b.n	8000982 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000982:	bf00      	nop
 8000984:	371c      	adds	r7, #28
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <checkDir>:

void checkDir(uint8_t value, int8_t *dir, int8_t max, int8_t min){
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	4611      	mov	r1, r2
 8000998:	461a      	mov	r2, r3
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	460b      	mov	r3, r1
 80009a0:	71bb      	strb	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	717b      	strb	r3, [r7, #5]
	if(value >= max)
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	db03      	blt.n	80009b8 <checkDir+0x2a>
		*dir = -1;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	22ff      	movs	r2, #255	@ 0xff
 80009b4:	701a      	strb	r2, [r3, #0]
	else if(value <= min)
		*dir = 1;
}
 80009b6:	e007      	b.n	80009c8 <checkDir+0x3a>
	else if(value <= min)
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009be:	429a      	cmp	r2, r3
 80009c0:	dc02      	bgt.n	80009c8 <checkDir+0x3a>
		*dir = 1;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <GPIO_control>:

void GPIO_control(void *pvParameters){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	GPIOControlParams *params = (GPIOControlParams *)pvParameters;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	613b      	str	r3, [r7, #16]

	int8_t dir_status = params->dir_status;
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	f993 3000 	ldrsb.w	r3, [r3]
 80009e6:	73fb      	strb	r3, [r7, #15]
	int8_t dir_RoadType = params->dir_RoadType;
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009ee:	73bb      	strb	r3, [r7, #14]
	uint8_t status = params->status;
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	789b      	ldrb	r3, [r3, #2]
 80009f4:	75fb      	strb	r3, [r7, #23]
	uint8_t roadType = params->roadType;
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	78db      	ldrb	r3, [r3, #3]
 80009fa:	75bb      	strb	r3, [r7, #22]
    uint8_t toggle = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	757b      	strb	r3, [r7, #21]

	while(1){
		if (currentMode == DISPLAY_MODE) {
 8000a00:	4b85      	ldr	r3, [pc, #532]	@ (8000c18 <GPIO_control+0x244>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 809f 	bne.w	8000b4a <GPIO_control+0x176>
			if(isDefined){
 8000a0c:	4b83      	ldr	r3, [pc, #524]	@ (8000c1c <GPIO_control+0x248>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d078      	beq.n	8000b06 <GPIO_control+0x132>
				// Update LED for danger status
				update_pwm_brightness(&htim4, TIM_CHANNEL_3, recivedData.danger ? 100 : 0);
 8000a14:	4b82      	ldr	r3, [pc, #520]	@ (8000c20 <GPIO_control+0x24c>)
 8000a16:	f993 3000 	ldrsb.w	r3, [r3]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <GPIO_control+0x4e>
 8000a1e:	2364      	movs	r3, #100	@ 0x64
 8000a20:	e000      	b.n	8000a24 <GPIO_control+0x50>
 8000a22:	2300      	movs	r3, #0
 8000a24:	461a      	mov	r2, r3
 8000a26:	2108      	movs	r1, #8
 8000a28:	487e      	ldr	r0, [pc, #504]	@ (8000c24 <GPIO_control+0x250>)
 8000a2a:	f7ff ff81 	bl	8000930 <update_pwm_brightness>

				// Update LED for status
				update_pwm_brightness(&htim4, TIM_CHANNEL_2, (uint8_t)status);
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	461a      	mov	r2, r3
 8000a32:	2104      	movs	r1, #4
 8000a34:	487b      	ldr	r0, [pc, #492]	@ (8000c24 <GPIO_control+0x250>)
 8000a36:	f7ff ff7b 	bl	8000930 <update_pwm_brightness>

				// Update LEDs for road type based on the first character
				if (recivedData.roadType[0] == 'A') {
 8000a3a:	4b79      	ldr	r3, [pc, #484]	@ (8000c20 <GPIO_control+0x24c>)
 8000a3c:	7a1b      	ldrb	r3, [r3, #8]
 8000a3e:	2b41      	cmp	r3, #65	@ 0x41
 8000a40:	d10b      	bne.n	8000a5a <GPIO_control+0x86>
					update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	4877      	ldr	r0, [pc, #476]	@ (8000c24 <GPIO_control+0x250>)
 8000a48:	f7ff ff72 	bl	8000930 <update_pwm_brightness>
					update_pwm_brightness(&htim4, TIM_CHANNEL_4, (uint8_t)roadType);
 8000a4c:	7dbb      	ldrb	r3, [r7, #22]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	210c      	movs	r1, #12
 8000a52:	4874      	ldr	r0, [pc, #464]	@ (8000c24 <GPIO_control+0x250>)
 8000a54:	f7ff ff6c 	bl	8000930 <update_pwm_brightness>
 8000a58:	e00a      	b.n	8000a70 <GPIO_control+0x9c>
				} else {
					update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4871      	ldr	r0, [pc, #452]	@ (8000c24 <GPIO_control+0x250>)
 8000a60:	f7ff ff66 	bl	8000930 <update_pwm_brightness>
					update_pwm_brightness(&htim4, TIM_CHANNEL_1, (uint8_t)roadType);
 8000a64:	7dbb      	ldrb	r3, [r7, #22]
 8000a66:	461a      	mov	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	486e      	ldr	r0, [pc, #440]	@ (8000c24 <GPIO_control+0x250>)
 8000a6c:	f7ff ff60 	bl	8000930 <update_pwm_brightness>
				}

				// Update status and roadType values dynamically
				status += recivedData.danger
 8000a70:	4b6b      	ldr	r3, [pc, #428]	@ (8000c20 <GPIO_control+0x24c>)
 8000a72:	f993 3000 	ldrsb.w	r3, [r3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d014      	beq.n	8000aa4 <GPIO_control+0xd0>
							  ? 10 * (recivedData.dangerProximity / 20) * dir_status
 8000a7a:	4b69      	ldr	r3, [pc, #420]	@ (8000c20 <GPIO_control+0x24c>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a6a      	ldr	r2, [pc, #424]	@ (8000c28 <GPIO_control+0x254>)
 8000a80:	fb82 1203 	smull	r1, r2, r2, r3
 8000a84:	10d2      	asrs	r2, r2, #3
 8000a86:	17db      	asrs	r3, r3, #31
 8000a88:	1ad3      	subs	r3, r2, r3
				status += recivedData.danger
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	fb12 f303 	smulbb	r3, r2, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	e007      	b.n	8000ab4 <GPIO_control+0xe0>
							  : 10 * dir_status;
 8000aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa8:	b2db      	uxtb	r3, r3
				status += recivedData.danger
 8000aaa:	461a      	mov	r2, r3
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	7dfa      	ldrb	r2, [r7, #23]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	75fb      	strb	r3, [r7, #23]
				roadType += 10 * ((100 - recivedData.roadQuality) / 20) * dir_RoadType;
 8000aba:	4b59      	ldr	r3, [pc, #356]	@ (8000c20 <GPIO_control+0x24c>)
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000ac2:	4a5a      	ldr	r2, [pc, #360]	@ (8000c2c <GPIO_control+0x258>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	091b      	lsrs	r3, r3, #4
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	fb12 f303 	smulbb	r3, r2, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	7dbb      	ldrb	r3, [r7, #22]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	75bb      	strb	r3, [r7, #22]

				// Ensure values remain within bounds
				checkDir(status, &dir_status, 100, 0);
 8000ae8:	f107 010f 	add.w	r1, r7, #15
 8000aec:	7df8      	ldrb	r0, [r7, #23]
 8000aee:	2300      	movs	r3, #0
 8000af0:	2264      	movs	r2, #100	@ 0x64
 8000af2:	f7ff ff4c 	bl	800098e <checkDir>
				checkDir(roadType, &dir_RoadType, 100, 0);
 8000af6:	f107 010e 	add.w	r1, r7, #14
 8000afa:	7db8      	ldrb	r0, [r7, #22]
 8000afc:	2300      	movs	r3, #0
 8000afe:	2264      	movs	r2, #100	@ 0x64
 8000b00:	f7ff ff45 	bl	800098e <checkDir>
 8000b04:	e083      	b.n	8000c0e <GPIO_control+0x23a>
			}
			else {
				// Fallback behavior: Toggle TIM_CHANNEL_3
				toggle = !toggle;
 8000b06:	7d7b      	ldrb	r3, [r7, #21]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf0c      	ite	eq
 8000b0c:	2301      	moveq	r3, #1
 8000b0e:	2300      	movne	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	757b      	strb	r3, [r7, #21]
				update_pwm_brightness(&htim4, TIM_CHANNEL_3, toggle ? 100 : 0);
 8000b14:	7d7b      	ldrb	r3, [r7, #21]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <GPIO_control+0x14a>
 8000b1a:	2364      	movs	r3, #100	@ 0x64
 8000b1c:	e000      	b.n	8000b20 <GPIO_control+0x14c>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	461a      	mov	r2, r3
 8000b22:	2108      	movs	r1, #8
 8000b24:	483f      	ldr	r0, [pc, #252]	@ (8000c24 <GPIO_control+0x250>)
 8000b26:	f7ff ff03 	bl	8000930 <update_pwm_brightness>

				update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	210c      	movs	r1, #12
 8000b2e:	483d      	ldr	r0, [pc, #244]	@ (8000c24 <GPIO_control+0x250>)
 8000b30:	f7ff fefe 	bl	8000930 <update_pwm_brightness>
				update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	483a      	ldr	r0, [pc, #232]	@ (8000c24 <GPIO_control+0x250>)
 8000b3a:	f7ff fef9 	bl	8000930 <update_pwm_brightness>
				update_pwm_brightness(&htim4, TIM_CHANNEL_2, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2104      	movs	r1, #4
 8000b42:	4838      	ldr	r0, [pc, #224]	@ (8000c24 <GPIO_control+0x250>)
 8000b44:	f7ff fef4 	bl	8000930 <update_pwm_brightness>
 8000b48:	e061      	b.n	8000c0e <GPIO_control+0x23a>
			}
		}
		else if(currentMode == DEBUG_MODE){
 8000b4a:	4b33      	ldr	r3, [pc, #204]	@ (8000c18 <GPIO_control+0x244>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d13b      	bne.n	8000bcc <GPIO_control+0x1f8>
			update_pwm_brightness(&htim4, TIM_CHANNEL_1, (sharedStatus.accelStatus == 0 && sharedStatus.gyroStatus == 0) ? 100 : 0);
 8000b54:	4b36      	ldr	r3, [pc, #216]	@ (8000c30 <GPIO_control+0x25c>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <GPIO_control+0x194>
 8000b5c:	4b34      	ldr	r3, [pc, #208]	@ (8000c30 <GPIO_control+0x25c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <GPIO_control+0x194>
 8000b64:	2364      	movs	r3, #100	@ 0x64
 8000b66:	e000      	b.n	8000b6a <GPIO_control+0x196>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	482d      	ldr	r0, [pc, #180]	@ (8000c24 <GPIO_control+0x250>)
 8000b70:	f7ff fede 	bl	8000930 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_2, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2104      	movs	r1, #4
 8000b78:	482a      	ldr	r0, [pc, #168]	@ (8000c24 <GPIO_control+0x250>)
 8000b7a:	f7ff fed9 	bl	8000930 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_3, (sharedStatus.accelStatus != 0 || sharedStatus.gyroStatus != 0) ? 100 : 0);
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <GPIO_control+0x25c>)
 8000b80:	785b      	ldrb	r3, [r3, #1]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <GPIO_control+0x1ba>
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <GPIO_control+0x25c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <GPIO_control+0x1be>
 8000b8e:	2364      	movs	r3, #100	@ 0x64
 8000b90:	e000      	b.n	8000b94 <GPIO_control+0x1c0>
 8000b92:	2300      	movs	r3, #0
 8000b94:	461a      	mov	r2, r3
 8000b96:	2108      	movs	r1, #8
 8000b98:	4822      	ldr	r0, [pc, #136]	@ (8000c24 <GPIO_control+0x250>)
 8000b9a:	f7ff fec9 	bl	8000930 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_4, sharedStatus.sending != 0 ? 100 : 0);
 8000b9e:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <GPIO_control+0x25c>)
 8000ba0:	789b      	ldrb	r3, [r3, #2]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <GPIO_control+0x1d6>
 8000ba6:	2364      	movs	r3, #100	@ 0x64
 8000ba8:	e000      	b.n	8000bac <GPIO_control+0x1d8>
 8000baa:	2300      	movs	r3, #0
 8000bac:	461a      	mov	r2, r3
 8000bae:	210c      	movs	r1, #12
 8000bb0:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <GPIO_control+0x250>)
 8000bb2:	f7ff febd 	bl	8000930 <update_pwm_brightness>
			sharedStatus.sending = sharedStatus.sending == 1 ? 0 : sharedStatus.sending;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <GPIO_control+0x25c>)
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d002      	beq.n	8000bc4 <GPIO_control+0x1f0>
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <GPIO_control+0x25c>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	e000      	b.n	8000bc6 <GPIO_control+0x1f2>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c30 <GPIO_control+0x25c>)
 8000bc8:	7093      	strb	r3, [r2, #2]
 8000bca:	e020      	b.n	8000c0e <GPIO_control+0x23a>
		}
		else{
			toggle = !toggle;
 8000bcc:	7d7b      	ldrb	r3, [r7, #21]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	757b      	strb	r3, [r7, #21]
			update_pwm_brightness(&htim4, TIM_CHANNEL_2, toggle ? 100 : 0);
 8000bda:	7d7b      	ldrb	r3, [r7, #21]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <GPIO_control+0x210>
 8000be0:	2364      	movs	r3, #100	@ 0x64
 8000be2:	e000      	b.n	8000be6 <GPIO_control+0x212>
 8000be4:	2300      	movs	r3, #0
 8000be6:	461a      	mov	r2, r3
 8000be8:	2104      	movs	r1, #4
 8000bea:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <GPIO_control+0x250>)
 8000bec:	f7ff fea0 	bl	8000930 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	210c      	movs	r1, #12
 8000bf4:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <GPIO_control+0x250>)
 8000bf6:	f7ff fe9b 	bl	8000930 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <GPIO_control+0x250>)
 8000c00:	f7ff fe96 	bl	8000930 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_3, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2108      	movs	r1, #8
 8000c08:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <GPIO_control+0x250>)
 8000c0a:	f7ff fe91 	bl	8000930 <update_pwm_brightness>
		}
		// Delay for consistent updates
		vTaskDelay(pdMS_TO_TICKS(100));
 8000c0e:	2064      	movs	r0, #100	@ 0x64
 8000c10:	f008 ffa2 	bl	8009b58 <vTaskDelay>
		if (currentMode == DISPLAY_MODE) {
 8000c14:	e6f4      	b.n	8000a00 <GPIO_control+0x2c>
 8000c16:	bf00      	nop
 8000c18:	200002a4 	.word	0x200002a4
 8000c1c:	2001438c 	.word	0x2001438c
 8000c20:	20014390 	.word	0x20014390
 8000c24:	2000025c 	.word	0x2000025c
 8000c28:	66666667 	.word	0x66666667
 8000c2c:	cccccccd 	.word	0xcccccccd
 8000c30:	200002b8 	.word	0x200002b8

08000c34 <buttonInterupt>:
	}
}

void buttonInterupt(void * pvParameters){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	GPIO_PinState button_prev = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4810      	ldr	r0, [pc, #64]	@ (8000c80 <buttonInterupt+0x4c>)
 8000c40:	f001 f932 	bl	8001ea8 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
	while(1){
		GPIO_PinState button_curr = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c48:	2101      	movs	r1, #1
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <buttonInterupt+0x4c>)
 8000c4c:	f001 f92c 	bl	8001ea8 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73bb      	strb	r3, [r7, #14]
		if(button_prev != button_curr && button_curr == GPIO_PIN_SET){
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d00e      	beq.n	8000c7a <buttonInterupt+0x46>
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d10b      	bne.n	8000c7a <buttonInterupt+0x46>
			if(currentMode == DISPLAY_MODE)
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <buttonInterupt+0x50>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <buttonInterupt+0x40>
				currentMode = DEBUG_MODE;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <buttonInterupt+0x50>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e002      	b.n	8000c7a <buttonInterupt+0x46>
			else
				currentMode = DISPLAY_MODE;
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <buttonInterupt+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
		}
		button_prev = button_curr;
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	73fb      	strb	r3, [r7, #15]
	while(1){
 8000c7e:	e7e3      	b.n	8000c48 <buttonInterupt+0x14>
 8000c80:	40020000 	.word	0x40020000
 8000c84:	200002a4 	.word	0x200002a4

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f000 fe3f 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c92:	f000 f89f 	bl	8000dd4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c96:	f000 f905 	bl	8000ea4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9a:	f000 fa7f 	bl	800119c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c9e:	f000 f921 	bl	8000ee4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000ca2:	f000 f94f 	bl	8000f44 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000ca6:	f000 f97b 	bl	8000fa0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000caa:	f000 f9a9 	bl	8001000 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000cae:	f00c fddf 	bl	800d870 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000cb2:	f000 f9db 	bl	800106c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  GPIOControlParams gpioParams = {
 8000cb6:	4b38      	ldr	r3, [pc, #224]	@ (8000d98 <main+0x110>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	607b      	str	r3, [r7, #4]
      .dir_RoadType = 1,
      .status = 0,
      .roadType = 0
  };

  initMutex();
 8000cbc:	f7ff fd1a 	bl	80006f4 <initMutex>

  __HAL_I2C_ENABLE(&hi2c1);
 8000cc0:	4b36      	ldr	r3, [pc, #216]	@ (8000d9c <main+0x114>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <main+0x114>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
  initOrientation();
 8000cd0:	f7ff fc5a 	bl	8000588 <initOrientation>

  __HAL_SPI_ENABLE(&hspi1);
 8000cd4:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <main+0x118>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b31      	ldr	r3, [pc, #196]	@ (8000da0 <main+0x118>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ce2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	482e      	ldr	r0, [pc, #184]	@ (8000da4 <main+0x11c>)
 8000cea:	f001 f8f5 	bl	8001ed8 <HAL_GPIO_WritePin>
  initGyro();
 8000cee:	f7ff fce9 	bl	80006c4 <initGyro>

  // zazenemo casovnik
  HAL_TIM_Base_Start(&htim4);
 8000cf2:	482d      	ldr	r0, [pc, #180]	@ (8000da8 <main+0x120>)
 8000cf4:	f005 fc64 	bl	80065c0 <HAL_TIM_Base_Start>

  // zazenemo PWM - neinvertirani izhodi
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	482b      	ldr	r0, [pc, #172]	@ (8000da8 <main+0x120>)
 8000cfc:	f005 fd76 	bl	80067ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000d00:	2104      	movs	r1, #4
 8000d02:	4829      	ldr	r0, [pc, #164]	@ (8000da8 <main+0x120>)
 8000d04:	f005 fd72 	bl	80067ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000d08:	2108      	movs	r1, #8
 8000d0a:	4827      	ldr	r0, [pc, #156]	@ (8000da8 <main+0x120>)
 8000d0c:	f005 fd6e 	bl	80067ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000d10:	210c      	movs	r1, #12
 8000d12:	4825      	ldr	r0, [pc, #148]	@ (8000da8 <main+0x120>)
 8000d14:	f005 fd6a 	bl	80067ec <HAL_TIM_PWM_Start>

  xTaskCreate(
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	4921      	ldr	r1, [pc, #132]	@ (8000dac <main+0x124>)
 8000d26:	4822      	ldr	r0, [pc, #136]	@ (8000db0 <main+0x128>)
 8000d28:	f008 fdaa 	bl	8009880 <xTaskCreate>
		"getGyroData",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  xTaskCreate(getAccelData, "getAccelData", 128, NULL, 1, NULL);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	2301      	movs	r3, #1
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2300      	movs	r3, #0
 8000d36:	2280      	movs	r2, #128	@ 0x80
 8000d38:	491e      	ldr	r1, [pc, #120]	@ (8000db4 <main+0x12c>)
 8000d3a:	481f      	ldr	r0, [pc, #124]	@ (8000db8 <main+0x130>)
 8000d3c:	f008 fda0 	bl	8009880 <xTaskCreate>
  xTaskCreate(getAccelData, "getAccelData", 128, NULL, 1, NULL);
 8000d40:	2300      	movs	r3, #0
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	2301      	movs	r3, #1
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2280      	movs	r2, #128	@ 0x80
 8000d4c:	4919      	ldr	r1, [pc, #100]	@ (8000db4 <main+0x12c>)
 8000d4e:	481a      	ldr	r0, [pc, #104]	@ (8000db8 <main+0x130>)
 8000d50:	f008 fd96 	bl	8009880 <xTaskCreate>
  xTaskCreate(sendData, "sendData", 128, NULL, 1, NULL);
 8000d54:	2300      	movs	r3, #0
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	2280      	movs	r2, #128	@ 0x80
 8000d60:	4916      	ldr	r1, [pc, #88]	@ (8000dbc <main+0x134>)
 8000d62:	4817      	ldr	r0, [pc, #92]	@ (8000dc0 <main+0x138>)
 8000d64:	f008 fd8c 	bl	8009880 <xTaskCreate>
  xTaskCreate(GPIO_control, "GPIO_control", 128, (void *)&gpioParams, 1, NULL);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	9201      	str	r2, [sp, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	9200      	str	r2, [sp, #0]
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	4913      	ldr	r1, [pc, #76]	@ (8000dc4 <main+0x13c>)
 8000d76:	4814      	ldr	r0, [pc, #80]	@ (8000dc8 <main+0x140>)
 8000d78:	f008 fd82 	bl	8009880 <xTaskCreate>
  xTaskCreate(buttonInterupt, "buttonInterupt", 128, NULL, 1, NULL);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	2301      	movs	r3, #1
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2280      	movs	r2, #128	@ 0x80
 8000d88:	4910      	ldr	r1, [pc, #64]	@ (8000dcc <main+0x144>)
 8000d8a:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <main+0x148>)
 8000d8c:	f008 fd78 	bl	8009880 <xTaskCreate>

  vTaskStartScheduler();
 8000d90:	f008 ff18 	bl	8009bc4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <main+0x10c>
 8000d98:	0800e4c0 	.word	0x0800e4c0
 8000d9c:	20000120 	.word	0x20000120
 8000da0:	20000204 	.word	0x20000204
 8000da4:	40021000 	.word	0x40021000
 8000da8:	2000025c 	.word	0x2000025c
 8000dac:	0800e478 	.word	0x0800e478
 8000db0:	08000719 	.word	0x08000719
 8000db4:	0800e484 	.word	0x0800e484
 8000db8:	080007ed 	.word	0x080007ed
 8000dbc:	0800e494 	.word	0x0800e494
 8000dc0:	080008c1 	.word	0x080008c1
 8000dc4:	0800e4a0 	.word	0x0800e4a0
 8000dc8:	080009d5 	.word	0x080009d5
 8000dcc:	0800e4b0 	.word	0x0800e4b0
 8000dd0:	08000c35 	.word	0x08000c35

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	@ 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2230      	movs	r2, #48	@ 0x30
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00d fb02 	bl	800e3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <SystemClock_Config+0xc8>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	4a26      	ldr	r2, [pc, #152]	@ (8000e9c <SystemClock_Config+0xc8>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <SystemClock_Config+0xc8>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <SystemClock_Config+0xcc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a20      	ldr	r2, [pc, #128]	@ (8000ea0 <SystemClock_Config+0xcc>)
 8000e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <SystemClock_Config+0xcc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e30:	2301      	movs	r3, #1
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e48:	23c0      	movs	r3, #192	@ 0xc0
 8000e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e50:	2308      	movs	r3, #8
 8000e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 ff87 	bl	8004d6c <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e64:	f000 fa84 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e74:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2103      	movs	r1, #3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 f9e9 	bl	800525c <HAL_RCC_ClockConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e90:	f000 fa6e 	bl	8001370 <Error_Handler>
  }
}
 8000e94:	bf00      	nop
 8000e96:	3750      	adds	r7, #80	@ 0x50
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000ebe:	23c8      	movs	r3, #200	@ 0xc8
 8000ec0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 fc03 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000ed8:	f000 fa4a 	bl	8001370 <Error_Handler>
  }
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000eea:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <MX_I2C1_Init+0x58>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000eee:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000ef0:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <MX_I2C1_Init+0x5c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000ef6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000efa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000f04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000f24:	f001 f80c 	bl	8001f40 <HAL_I2C_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000f2e:	f000 fa1f 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000120 	.word	0x20000120
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	00061a80 	.word	0x00061a80

08000f44 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <MX_I2S2_Init+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f54:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <MX_I2S2_Init+0x58>)
 8000f6c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_I2S2_Init+0x50>)
 8000f82:	f002 f801 	bl	8002f88 <HAL_I2S_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000f8c:	f000 f9f0 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000174 	.word	0x20000174
 8000f98:	40003800 	.word	0x40003800
 8000f9c:	00017700 	.word	0x00017700

08000fa0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fa6:	4a14      	ldr	r2, [pc, #80]	@ (8000ff8 <MX_I2S3_Init+0x58>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ffc <MX_I2S3_Init+0x5c>)
 8000fca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_I2S3_Init+0x54>)
 8000fe0:	f001 ffd2 	bl	8002f88 <HAL_I2S_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000fea:	f000 f9c1 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001bc 	.word	0x200001bc
 8000ff8:	40003c00 	.word	0x40003c00
 8000ffc:	00017700 	.word	0x00017700

08001000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_SPI1_Init+0x64>)
 8001006:	4a18      	ldr	r2, [pc, #96]	@ (8001068 <MX_SPI1_Init+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <MX_SPI1_Init+0x64>)
 800100c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_SPI1_Init+0x64>)
 8001020:	2202      	movs	r2, #2
 8001022:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_SPI1_Init+0x64>)
 8001026:	2201      	movs	r2, #1
 8001028:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_SPI1_Init+0x64>)
 800102c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001030:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_SPI1_Init+0x64>)
 8001034:	2218      	movs	r2, #24
 8001036:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001038:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_SPI1_Init+0x64>)
 800104c:	220a      	movs	r2, #10
 800104e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <MX_SPI1_Init+0x64>)
 8001052:	f004 fc93 	bl	800597c <HAL_SPI_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800105c:	f000 f988 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000204 	.word	0x20000204
 8001068:	40013000 	.word	0x40013000

0800106c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800109c:	4b3d      	ldr	r3, [pc, #244]	@ (8001194 <MX_TIM4_Init+0x128>)
 800109e:	4a3e      	ldr	r2, [pc, #248]	@ (8001198 <MX_TIM4_Init+0x12c>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80010a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010a4:	2253      	movs	r2, #83	@ 0x53
 80010a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80010ae:	4b39      	ldr	r3, [pc, #228]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010c2:	4834      	ldr	r0, [pc, #208]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010c4:	f005 fa2c 	bl	8006520 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 f94f 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	482d      	ldr	r0, [pc, #180]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010e0:	f005 fde6 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 f941 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010ee:	4829      	ldr	r0, [pc, #164]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010f0:	f005 fb22 	bl	8006738 <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 f939 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4619      	mov	r1, r3
 800110c:	4821      	ldr	r0, [pc, #132]	@ (8001194 <MX_TIM4_Init+0x128>)
 800110e:	f006 f997 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001118:	f000 f92a 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111c:	2360      	movs	r3, #96	@ 0x60
 800111e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM4_Init+0x128>)
 8001134:	f005 fcfa 	bl	8006b2c <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800113e:	f000 f917 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2204      	movs	r2, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4812      	ldr	r0, [pc, #72]	@ (8001194 <MX_TIM4_Init+0x128>)
 800114a:	f005 fcef 	bl	8006b2c <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001154:	f000 f90c 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2208      	movs	r2, #8
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <MX_TIM4_Init+0x128>)
 8001160:	f005 fce4 	bl	8006b2c <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800116a:	f000 f901 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	220c      	movs	r2, #12
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM4_Init+0x128>)
 8001176:	f005 fcd9 	bl	8006b2c <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001180:	f000 f8f6 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM4_Init+0x128>)
 8001186:	f000 faa1 	bl	80016cc <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	@ 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000025c 	.word	0x2000025c
 8001198:	40000800 	.word	0x40000800

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	@ 0x30
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	4b60      	ldr	r3, [pc, #384]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	4b59      	ldr	r3, [pc, #356]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a58      	ldr	r2, [pc, #352]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b56      	ldr	r3, [pc, #344]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b52      	ldr	r3, [pc, #328]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a51      	ldr	r2, [pc, #324]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001338 <MX_GPIO_Init+0x19c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b4b      	ldr	r3, [pc, #300]	@ (8001338 <MX_GPIO_Init+0x19c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a4a      	ldr	r2, [pc, #296]	@ (8001338 <MX_GPIO_Init+0x19c>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b48      	ldr	r3, [pc, #288]	@ (8001338 <MX_GPIO_Init+0x19c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b44      	ldr	r3, [pc, #272]	@ (8001338 <MX_GPIO_Init+0x19c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a43      	ldr	r2, [pc, #268]	@ (8001338 <MX_GPIO_Init+0x19c>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b41      	ldr	r3, [pc, #260]	@ (8001338 <MX_GPIO_Init+0x19c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b3d      	ldr	r3, [pc, #244]	@ (8001338 <MX_GPIO_Init+0x19c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a3c      	ldr	r2, [pc, #240]	@ (8001338 <MX_GPIO_Init+0x19c>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <MX_GPIO_Init+0x19c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2108      	movs	r1, #8
 800125e:	4837      	ldr	r0, [pc, #220]	@ (800133c <MX_GPIO_Init+0x1a0>)
 8001260:	f000 fe3a 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2101      	movs	r1, #1
 8001268:	4835      	ldr	r0, [pc, #212]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 800126a:	f000 fe35 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2110      	movs	r1, #16
 8001272:	4834      	ldr	r0, [pc, #208]	@ (8001344 <MX_GPIO_Init+0x1a8>)
 8001274:	f000 fe30 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001278:	2304      	movs	r3, #4
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	482c      	ldr	r0, [pc, #176]	@ (800133c <MX_GPIO_Init+0x1a0>)
 800128c:	f000 fc88 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001290:	2308      	movs	r3, #8
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129c:	2302      	movs	r3, #2
 800129e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4825      	ldr	r0, [pc, #148]	@ (800133c <MX_GPIO_Init+0x1a0>)
 80012a8:	f000 fc7a 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80012ac:	2332      	movs	r3, #50	@ 0x32
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	481e      	ldr	r0, [pc, #120]	@ (800133c <MX_GPIO_Init+0x1a0>)
 80012c2:	f000 fc6d 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	4818      	ldr	r0, [pc, #96]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80012de:	f000 fc5f 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4814      	ldr	r0, [pc, #80]	@ (8001348 <MX_GPIO_Init+0x1ac>)
 80012f8:	f000 fc52 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80012fc:	2310      	movs	r3, #16
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	@ (8001344 <MX_GPIO_Init+0x1a8>)
 8001314:	f000 fc44 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001318:	2320      	movs	r3, #32
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_GPIO_Init+0x1a8>)
 800132c:	f000 fc38 	bl	8001ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	@ 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40021000 	.word	0x40021000
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135e:	f000 faf9 	bl	8001954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40000c00 	.word	0x40000c00

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001390:	6453      	str	r3, [r2, #68]	@ 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_I2C_MspInit+0x84>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12c      	bne.n	8001448 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800140a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001410:	2312      	movs	r3, #18
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001414:	2301      	movs	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141c:	2304      	movs	r3, #4
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	480c      	ldr	r0, [pc, #48]	@ (8001458 <HAL_I2C_MspInit+0x8c>)
 8001428:	f000 fbba 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001436:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800143a:	6413      	str	r3, [r2, #64]	@ 0x40
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	@ 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40005400 	.word	0x40005400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020400 	.word	0x40020400

0800145c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	@ 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a59      	ldr	r2, [pc, #356]	@ (80015e0 <HAL_I2S_MspInit+0x184>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d15b      	bne.n	8001536 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
 8001482:	4b58      	ldr	r3, [pc, #352]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a57      	ldr	r2, [pc, #348]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b55      	ldr	r3, [pc, #340]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001496:	623b      	str	r3, [r7, #32]
 8001498:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	4b51      	ldr	r3, [pc, #324]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a50      	ldr	r2, [pc, #320]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b4e      	ldr	r3, [pc, #312]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a49      	ldr	r2, [pc, #292]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b47      	ldr	r3, [pc, #284]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d2:	2304      	movs	r3, #4
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80014e2:	2306      	movs	r3, #6
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	483e      	ldr	r0, [pc, #248]	@ (80015e8 <HAL_I2S_MspInit+0x18c>)
 80014ee:	f000 fb57 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014f2:	2308      	movs	r3, #8
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001502:	2305      	movs	r3, #5
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4836      	ldr	r0, [pc, #216]	@ (80015e8 <HAL_I2S_MspInit+0x18c>)
 800150e:	f000 fb47 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001512:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001524:	2305      	movs	r3, #5
 8001526:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	482f      	ldr	r0, [pc, #188]	@ (80015ec <HAL_I2S_MspInit+0x190>)
 8001530:	f000 fb36 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001534:	e04f      	b.n	80015d6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a2d      	ldr	r2, [pc, #180]	@ (80015f0 <HAL_I2S_MspInit+0x194>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d14a      	bne.n	80015d6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	4a26      	ldr	r2, [pc, #152]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 800154a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800154e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6313      	str	r3, [r2, #48]	@ 0x30
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6313      	str	r3, [r2, #48]	@ 0x30
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_I2S_MspInit+0x188>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001594:	2310      	movs	r3, #16
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a4:	2306      	movs	r3, #6
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4811      	ldr	r0, [pc, #68]	@ (80015f4 <HAL_I2S_MspInit+0x198>)
 80015b0:	f000 faf6 	bl	8001ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015b4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c6:	2306      	movs	r3, #6
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <HAL_I2S_MspInit+0x18c>)
 80015d2:	f000 fae5 	bl	8001ba0 <HAL_GPIO_Init>
}
 80015d6:	bf00      	nop
 80015d8:	3738      	adds	r7, #56	@ 0x38
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40003800 	.word	0x40003800
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40003c00 	.word	0x40003c00
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	@ (800167c <HAL_SPI_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12b      	bne.n	8001672 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_SPI_MspInit+0x88>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_SPI_MspInit+0x88>)
 8001624:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_SPI_MspInit+0x88>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_SPI_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	@ (8001680 <HAL_SPI_MspInit+0x88>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <HAL_SPI_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001652:	23e0      	movs	r3, #224	@ 0xe0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001662:	2305      	movs	r3, #5
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	@ (8001684 <HAL_SPI_MspInit+0x8c>)
 800166e:	f000 fa97 	bl	8001ba0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40013000 	.word	0x40013000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <HAL_TIM_Base_MspInit+0x3c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10d      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_TIM_Base_MspInit+0x40>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_TIM_Base_MspInit+0x40>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <HAL_TIM_Base_MspInit+0x40>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40000800 	.word	0x40000800
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <HAL_TIM_MspPostInit+0x68>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11e      	bne.n	800172c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a10      	ldr	r2, [pc, #64]	@ (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800170a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800170e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_TIM_MspPostInit+0x70>)
 8001728:	f000 fa3a 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40000800 	.word	0x40000800
 8001738:	40023800 	.word	0x40023800
 800173c:	40020c00 	.word	0x40020c00

08001740 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	@ 0x38
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b33      	ldr	r3, [pc, #204]	@ (8001824 <HAL_InitTick+0xe4>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	4a32      	ldr	r2, [pc, #200]	@ (8001824 <HAL_InitTick+0xe4>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001760:	4b30      	ldr	r3, [pc, #192]	@ (8001824 <HAL_InitTick+0xe4>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f003 ff7c 	bl	8005674 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001786:	f003 ff61 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 800178a:	6378      	str	r0, [r7, #52]	@ 0x34
 800178c:	e004      	b.n	8001798 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800178e:	f003 ff5d 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 8001792:	4603      	mov	r3, r0
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800179a:	4a23      	ldr	r2, [pc, #140]	@ (8001828 <HAL_InitTick+0xe8>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	3b01      	subs	r3, #1
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80017a6:	4b21      	ldr	r3, [pc, #132]	@ (800182c <HAL_InitTick+0xec>)
 80017a8:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <HAL_InitTick+0xf0>)
 80017aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <HAL_InitTick+0xec>)
 80017ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017b2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80017b4:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <HAL_InitTick+0xec>)
 80017b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <HAL_InitTick+0xec>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_InitTick+0xec>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_InitTick+0xec>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80017cc:	4817      	ldr	r0, [pc, #92]	@ (800182c <HAL_InitTick+0xec>)
 80017ce:	f004 fea7 	bl	8006520 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11b      	bne.n	8001818 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80017e0:	4812      	ldr	r0, [pc, #72]	@ (800182c <HAL_InitTick+0xec>)
 80017e2:	f004 ff47 	bl	8006674 <HAL_TIM_Base_Start_IT>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017f4:	2032      	movs	r0, #50	@ 0x32
 80017f6:	f000 f9c5 	bl	8001b84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d808      	bhi.n	8001812 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	2032      	movs	r0, #50	@ 0x32
 8001806:	f000 f9a1 	bl	8001b4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <HAL_InitTick+0xf4>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e002      	b.n	8001818 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800181c:	4618      	mov	r0, r3
 800181e:	3738      	adds	r7, #56	@ 0x38
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	431bde83 	.word	0x431bde83
 800182c:	200002bc 	.word	0x200002bc
 8001830:	40000c00 	.word	0x40000c00
 8001834:	20000004 	.word	0x20000004

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <NMI_Handler+0x4>

08001840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <MemManage_Handler+0x4>

08001850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <UsageFault_Handler+0x4>

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <TIM5_IRQHandler+0x10>)
 8001876:	f005 f869 	bl	800694c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200002bc 	.word	0x200002bc

08001884 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <OTG_FS_IRQHandler+0x10>)
 800188a:	f002 f961 	bl	8003b50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200145a4 	.word	0x200145a4

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c0:	f7ff ffea 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	@ (80018fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f00c fd87 	bl	800e3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff f9cb 	bl	8000c88 <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001900:	0800e55c 	.word	0x0800e55c
  ldr r2, =_sbss
 8001904:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001908:	20014ca8 	.word	0x20014ca8

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f8fc 	bl	8001b36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f7ff fefe 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fd1a 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008
 8001978:	20000304 	.word	0x20000304

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000304 	.word	0x20000304

08001994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff ffee 	bl	800197c <HAL_GetTick>
 80019a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d005      	beq.n	80019ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_Delay+0x44>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ba:	bf00      	nop
 80019bc:	f7ff ffde 	bl	800197c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d8f7      	bhi.n	80019bc <HAL_Delay+0x28>
  {
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008

080019dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0b      	blt.n	8001a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4907      	ldr	r1, [pc, #28]	@ (8001a78 <__NVIC_EnableIRQ+0x38>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2001      	movs	r0, #1
 8001a62:	fa00 f202 	lsl.w	r2, r0, r2
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	@ (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	@ (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff4c 	bl	80019dc <__NVIC_SetPriorityGrouping>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5e:	f7ff ff61 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001b62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	6978      	ldr	r0, [r7, #20]
 8001b6a:	f7ff ffb1 	bl	8001ad0 <NVIC_EncodePriority>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff80 	bl	8001a7c <__NVIC_SetPriority>
}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff54 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e159      	b.n	8001e70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8148 	bne.w	8001e6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a2 	beq.w	8001e6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b57      	ldr	r3, [pc, #348]	@ (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a56      	ldr	r2, [pc, #344]	@ (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b54      	ldr	r3, [pc, #336]	@ (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d42:	4a52      	ldr	r2, [pc, #328]	@ (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a49      	ldr	r2, [pc, #292]	@ (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x202>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a48      	ldr	r2, [pc, #288]	@ (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x1fe>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a47      	ldr	r2, [pc, #284]	@ (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a46      	ldr	r2, [pc, #280]	@ (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x1f6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a45      	ldr	r2, [pc, #276]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x1f2>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	@ (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a24      	ldr	r2, [pc, #144]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e16:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e40:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f aea2 	bls.w	8001bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e001      	b.n	8001eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	619a      	str	r2, [r3, #24]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f1c:	887a      	ldrh	r2, [r7, #2]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	041a      	lsls	r2, r3, #16
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	400b      	ands	r3, r1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	619a      	str	r2, [r3, #24]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e12b      	b.n	80021aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fa30 	bl	80013cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	@ 0x24
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fa4:	f003 fb52 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 8001fa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a81      	ldr	r2, [pc, #516]	@ (80021b4 <HAL_I2C_Init+0x274>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d807      	bhi.n	8001fc4 <HAL_I2C_Init+0x84>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a80      	ldr	r2, [pc, #512]	@ (80021b8 <HAL_I2C_Init+0x278>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	bf94      	ite	ls
 8001fbc:	2301      	movls	r3, #1
 8001fbe:	2300      	movhi	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e006      	b.n	8001fd2 <HAL_I2C_Init+0x92>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a7d      	ldr	r2, [pc, #500]	@ (80021bc <HAL_I2C_Init+0x27c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	bf94      	ite	ls
 8001fcc:	2301      	movls	r3, #1
 8001fce:	2300      	movhi	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0e7      	b.n	80021aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a78      	ldr	r2, [pc, #480]	@ (80021c0 <HAL_I2C_Init+0x280>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0c9b      	lsrs	r3, r3, #18
 8001fe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a6a      	ldr	r2, [pc, #424]	@ (80021b4 <HAL_I2C_Init+0x274>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d802      	bhi.n	8002014 <HAL_I2C_Init+0xd4>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3301      	adds	r3, #1
 8002012:	e009      	b.n	8002028 <HAL_I2C_Init+0xe8>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a69      	ldr	r2, [pc, #420]	@ (80021c4 <HAL_I2C_Init+0x284>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	3301      	adds	r3, #1
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	430b      	orrs	r3, r1
 800202e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800203a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	495c      	ldr	r1, [pc, #368]	@ (80021b4 <HAL_I2C_Init+0x274>)
 8002044:	428b      	cmp	r3, r1
 8002046:	d819      	bhi.n	800207c <HAL_I2C_Init+0x13c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e59      	subs	r1, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fbb1 f3f3 	udiv	r3, r1, r3
 8002056:	1c59      	adds	r1, r3, #1
 8002058:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800205c:	400b      	ands	r3, r1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_I2C_Init+0x138>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e59      	subs	r1, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002076:	e051      	b.n	800211c <HAL_I2C_Init+0x1dc>
 8002078:	2304      	movs	r3, #4
 800207a:	e04f      	b.n	800211c <HAL_I2C_Init+0x1dc>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d111      	bne.n	80020a8 <HAL_I2C_Init+0x168>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e012      	b.n	80020ce <HAL_I2C_Init+0x18e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e58      	subs	r0, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	0099      	lsls	r1, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Init+0x196>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e022      	b.n	800211c <HAL_I2C_Init+0x1dc>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10e      	bne.n	80020fc <HAL_I2C_Init+0x1bc>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1e58      	subs	r0, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	440b      	add	r3, r1
 80020ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020fa:	e00f      	b.n	800211c <HAL_I2C_Init+0x1dc>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	0099      	lsls	r1, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	6809      	ldr	r1, [r1, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800214a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6911      	ldr	r1, [r2, #16]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68d2      	ldr	r2, [r2, #12]
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	430b      	orrs	r3, r1
 800215e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	000186a0 	.word	0x000186a0
 80021b8:	001e847f 	.word	0x001e847f
 80021bc:	003d08ff 	.word	0x003d08ff
 80021c0:	431bde83 	.word	0x431bde83
 80021c4:	10624dd3 	.word	0x10624dd3

080021c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	817b      	strh	r3, [r7, #10]
 80021da:	460b      	mov	r3, r1
 80021dc:	813b      	strh	r3, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e2:	f7ff fbcb 	bl	800197c <HAL_GetTick>
 80021e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	f040 80d9 	bne.w	80023a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2319      	movs	r3, #25
 80021fc:	2201      	movs	r2, #1
 80021fe:	496d      	ldr	r1, [pc, #436]	@ (80023b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fc8b 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	e0cc      	b.n	80023aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_I2C_Mem_Write+0x56>
 800221a:	2302      	movs	r3, #2
 800221c:	e0c5      	b.n	80023aa <HAL_I2C_Mem_Write+0x1e2>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d007      	beq.n	8002244 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2221      	movs	r2, #33	@ 0x21
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a3a      	ldr	r2, [r7, #32]
 800226e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002274:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a4d      	ldr	r2, [pc, #308]	@ (80023b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002284:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002286:	88f8      	ldrh	r0, [r7, #6]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	8979      	ldrh	r1, [r7, #10]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4603      	mov	r3, r0
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fac2 	bl	8002820 <I2C_RequestMemoryWrite>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d052      	beq.n	8002348 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e081      	b.n	80023aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fd50 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00d      	beq.n	80022d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d107      	bne.n	80022ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06b      	b.n	80023aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b04      	cmp	r3, #4
 800230e:	d11b      	bne.n	8002348 <HAL_I2C_Mem_Write+0x180>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	d017      	beq.n	8002348 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1aa      	bne.n	80022a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fd43 	bl	8002de0 <I2C_WaitOnBTFFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	2b04      	cmp	r3, #4
 8002366:	d107      	bne.n	8002378 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e016      	b.n	80023aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	00100002 	.word	0x00100002
 80023b8:	ffff0000 	.word	0xffff0000

080023bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	@ 0x30
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	817b      	strh	r3, [r7, #10]
 80023ce:	460b      	mov	r3, r1
 80023d0:	813b      	strh	r3, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d6:	f7ff fad1 	bl	800197c <HAL_GetTick>
 80023da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	f040 8214 	bne.w	8002812 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2319      	movs	r3, #25
 80023f0:	2201      	movs	r2, #1
 80023f2:	497b      	ldr	r1, [pc, #492]	@ (80025e0 <HAL_I2C_Mem_Read+0x224>)
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fb91 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
 8002402:	e207      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_I2C_Mem_Read+0x56>
 800240e:	2302      	movs	r3, #2
 8002410:	e200      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d007      	beq.n	8002438 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2222      	movs	r2, #34	@ 0x22
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2240      	movs	r2, #64	@ 0x40
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002462:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002468:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a5b      	ldr	r2, [pc, #364]	@ (80025e4 <HAL_I2C_Mem_Read+0x228>)
 8002478:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800247a:	88f8      	ldrh	r0, [r7, #6]
 800247c:	893a      	ldrh	r2, [r7, #8]
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4603      	mov	r3, r0
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fa5e 	bl	800294c <I2C_RequestMemoryRead>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e1bc      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d113      	bne.n	80024ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e190      	b.n	80027ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d11b      	bne.n	800250a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e170      	b.n	80027ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250e:	2b02      	cmp	r3, #2
 8002510:	d11b      	bne.n	800254a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002520:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	e150      	b.n	80027ec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002560:	e144      	b.n	80027ec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	2b03      	cmp	r3, #3
 8002568:	f200 80f1 	bhi.w	800274e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	2b01      	cmp	r3, #1
 8002572:	d123      	bne.n	80025bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002576:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fc79 	bl	8002e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e145      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025ba:	e117      	b.n	80027ec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d14e      	bne.n	8002662 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ca:	2200      	movs	r2, #0
 80025cc:	4906      	ldr	r1, [pc, #24]	@ (80025e8 <HAL_I2C_Mem_Read+0x22c>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 faa4 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e11a      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
 80025de:	bf00      	nop
 80025e0:	00100002 	.word	0x00100002
 80025e4:	ffff0000 	.word	0xffff0000
 80025e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002660:	e0c4      	b.n	80027ec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002668:	2200      	movs	r2, #0
 800266a:	496c      	ldr	r1, [pc, #432]	@ (800281c <HAL_I2C_Mem_Read+0x460>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fa55 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0cb      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800268a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c4:	2200      	movs	r2, #0
 80026c6:	4955      	ldr	r1, [pc, #340]	@ (800281c <HAL_I2C_Mem_Read+0x460>)
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fa27 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e09d      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800274c:	e04e      	b.n	80027ec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002750:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fb8c 	bl	8002e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e058      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d124      	bne.n	80027ec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d107      	bne.n	80027ba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f47f aeb6 	bne.w	8002562 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	3728      	adds	r7, #40	@ 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	00010004 	.word	0x00010004

08002820 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	817b      	strh	r3, [r7, #10]
 8002832:	460b      	mov	r3, r1
 8002834:	813b      	strh	r3, [r7, #8]
 8002836:	4613      	mov	r3, r2
 8002838:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	2200      	movs	r2, #0
 8002852:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f960 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002870:	d103      	bne.n	800287a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e05f      	b.n	800293e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800288c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	492d      	ldr	r1, [pc, #180]	@ (8002948 <I2C_RequestMemoryWrite+0x128>)
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f9bb 	bl	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04c      	b.n	800293e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028bc:	6a39      	ldr	r1, [r7, #32]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fa46 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d107      	bne.n	80028e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e02b      	b.n	800293e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ec:	893b      	ldrh	r3, [r7, #8]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]
 80028f6:	e021      	b.n	800293c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa20 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	2b04      	cmp	r3, #4
 800291c:	d107      	bne.n	800292e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e005      	b.n	800293e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002932:	893b      	ldrh	r3, [r7, #8]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	00010002 	.word	0x00010002

0800294c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4603      	mov	r3, r0
 800295c:	817b      	strh	r3, [r7, #10]
 800295e:	460b      	mov	r3, r1
 8002960:	813b      	strh	r3, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002974:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002984:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2200      	movs	r2, #0
 800298e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f8c2 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ac:	d103      	bne.n	80029b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e0aa      	b.n	8002b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	6a3a      	ldr	r2, [r7, #32]
 80029ce:	4952      	ldr	r1, [pc, #328]	@ (8002b18 <I2C_RequestMemoryRead+0x1cc>)
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f91d 	bl	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e097      	b.n	8002b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f8:	6a39      	ldr	r1, [r7, #32]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f9a8 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d107      	bne.n	8002a1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e076      	b.n	8002b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a28:	893b      	ldrh	r3, [r7, #8]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	e021      	b.n	8002a78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a34:	893b      	ldrh	r3, [r7, #8]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a44:	6a39      	ldr	r1, [r7, #32]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f982 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d107      	bne.n	8002a6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e050      	b.n	8002b10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6e:	893b      	ldrh	r3, [r7, #8]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7a:	6a39      	ldr	r1, [r7, #32]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f967 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00d      	beq.n	8002aa4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d107      	bne.n	8002aa0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e035      	b.n	8002b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f82b 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ada:	d103      	bne.n	8002ae4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ae2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e013      	b.n	8002b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ae8:	897b      	ldrh	r3, [r7, #10]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	6a3a      	ldr	r2, [r7, #32]
 8002afc:	4906      	ldr	r1, [pc, #24]	@ (8002b18 <I2C_RequestMemoryRead+0x1cc>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f886 	bl	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	00010002 	.word	0x00010002

08002b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b2c:	e048      	b.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d044      	beq.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7fe ff21 	bl	800197c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d139      	bne.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10d      	bne.n	8002b72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	e00c      	b.n	8002b8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d116      	bne.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e023      	b.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10d      	bne.n	8002be6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	e00c      	b.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d093      	beq.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c1e:	e071      	b.n	8002d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2e:	d123      	bne.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e067      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d041      	beq.n	8002d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7fe fe7c 	bl	800197c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d136      	bne.n	8002d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d10c      	bne.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4013      	ands	r3, r2
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	e00b      	b.n	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e021      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10c      	bne.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e00b      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f47f af6d 	bne.w	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d5c:	e034      	b.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f8e3 	bl	8002f2a <I2C_IsAcknowledgeFailed>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e034      	b.n	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d028      	beq.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7fe fe01 	bl	800197c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11d      	bne.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d96:	2b80      	cmp	r3, #128	@ 0x80
 8002d98:	d016      	beq.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e007      	b.n	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd2:	2b80      	cmp	r3, #128	@ 0x80
 8002dd4:	d1c3      	bne.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dec:	e034      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f89b 	bl	8002f2a <I2C_IsAcknowledgeFailed>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e034      	b.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d028      	beq.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fe fdb9 	bl	800197c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11d      	bne.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d016      	beq.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e007      	b.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d1c3      	bne.n	8002dee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e7c:	e049      	b.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d119      	bne.n	8002ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0210 	mvn.w	r2, #16
 8002e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e030      	b.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec0:	f7fe fd5c 	bl	800197c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d302      	bcc.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11d      	bne.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee0:	2b40      	cmp	r3, #64	@ 0x40
 8002ee2:	d016      	beq.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e007      	b.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1c:	2b40      	cmp	r3, #64	@ 0x40
 8002f1e:	d1ae      	bne.n	8002e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f40:	d11b      	bne.n	8002f7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f043 0204 	orr.w	r2, r3, #4
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e128      	b.n	80031ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a90      	ldr	r2, [pc, #576]	@ (80031f4 <HAL_I2S_Init+0x26c>)
 8002fb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7fe fa51 	bl	800145c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002fd0:	f023 030f 	bic.w	r3, r3, #15
 8002fd4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d060      	beq.n	80030a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fee:	2310      	movs	r3, #16
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e001      	b.n	8002ff8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d802      	bhi.n	8003006 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003006:	2001      	movs	r0, #1
 8003008:	f002 fc56 	bl	80058b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800300c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003016:	d125      	bne.n	8003064 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	fbb2 f2f3 	udiv	r2, r2, r3
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	3305      	adds	r3, #5
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	e01f      	b.n	8003082 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	fbb2 f2f3 	udiv	r2, r2, r3
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	3305      	adds	r3, #5
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	e00e      	b.n	8003082 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	fbb2 f2f3 	udiv	r2, r2, r3
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	3305      	adds	r3, #5
 8003080:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4a5c      	ldr	r2, [pc, #368]	@ (80031f8 <HAL_I2S_Init+0x270>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e003      	b.n	80030b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030a8:	2302      	movs	r3, #2
 80030aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d902      	bls.n	80030bc <HAL_I2S_Init+0x134>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2bff      	cmp	r3, #255	@ 0xff
 80030ba:	d907      	bls.n	80030cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	f043 0210 	orr.w	r2, r3, #16
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e08f      	b.n	80031ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	ea42 0103 	orr.w	r1, r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	430a      	orrs	r2, r1
 80030de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80030ea:	f023 030f 	bic.w	r3, r3, #15
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6851      	ldr	r1, [r2, #4]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6892      	ldr	r2, [r2, #8]
 80030f6:	4311      	orrs	r1, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68d2      	ldr	r2, [r2, #12]
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6992      	ldr	r2, [r2, #24]
 8003102:	430a      	orrs	r2, r1
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d161      	bne.n	80031dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a38      	ldr	r2, [pc, #224]	@ (80031fc <HAL_I2S_Init+0x274>)
 800311c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a37      	ldr	r2, [pc, #220]	@ (8003200 <HAL_I2S_Init+0x278>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_I2S_Init+0x1a4>
 8003128:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <HAL_I2S_Init+0x27c>)
 800312a:	e001      	b.n	8003130 <HAL_I2S_Init+0x1a8>
 800312c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	4932      	ldr	r1, [pc, #200]	@ (8003200 <HAL_I2S_Init+0x278>)
 8003138:	428a      	cmp	r2, r1
 800313a:	d101      	bne.n	8003140 <HAL_I2S_Init+0x1b8>
 800313c:	4a31      	ldr	r2, [pc, #196]	@ (8003204 <HAL_I2S_Init+0x27c>)
 800313e:	e001      	b.n	8003144 <HAL_I2S_Init+0x1bc>
 8003140:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003144:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003148:	f023 030f 	bic.w	r3, r3, #15
 800314c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2b      	ldr	r2, [pc, #172]	@ (8003200 <HAL_I2S_Init+0x278>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_I2S_Init+0x1d4>
 8003158:	4b2a      	ldr	r3, [pc, #168]	@ (8003204 <HAL_I2S_Init+0x27c>)
 800315a:	e001      	b.n	8003160 <HAL_I2S_Init+0x1d8>
 800315c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003160:	2202      	movs	r2, #2
 8003162:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a25      	ldr	r2, [pc, #148]	@ (8003200 <HAL_I2S_Init+0x278>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_I2S_Init+0x1ea>
 800316e:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <HAL_I2S_Init+0x27c>)
 8003170:	e001      	b.n	8003176 <HAL_I2S_Init+0x1ee>
 8003172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003182:	d003      	beq.n	800318c <HAL_I2S_Init+0x204>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d103      	bne.n	8003194 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800318c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	e001      	b.n	8003198 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031a2:	4313      	orrs	r3, r2
 80031a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031b6:	4313      	orrs	r3, r2
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	897b      	ldrh	r3, [r7, #10]
 80031bc:	4313      	orrs	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <HAL_I2S_Init+0x278>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_I2S_Init+0x24c>
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <HAL_I2S_Init+0x27c>)
 80031d2:	e001      	b.n	80031d8 <HAL_I2S_Init+0x250>
 80031d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031d8:	897a      	ldrh	r2, [r7, #10]
 80031da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	080032ff 	.word	0x080032ff
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	08003415 	.word	0x08003415
 8003200:	40003800 	.word	0x40003800
 8003204:	40003400 	.word	0x40003400

08003208 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	1c9a      	adds	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10e      	bne.n	8003298 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003288:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ffb8 	bl	8003208 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	b292      	uxth	r2, r2
 80032b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10e      	bne.n	80032f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff93 	bl	800321c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b04      	cmp	r3, #4
 8003318:	d13a      	bne.n	8003390 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d109      	bne.n	8003338 <I2S_IRQHandler+0x3a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332e:	2b40      	cmp	r3, #64	@ 0x40
 8003330:	d102      	bne.n	8003338 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ffb4 	bl	80032a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b40      	cmp	r3, #64	@ 0x40
 8003340:	d126      	bne.n	8003390 <I2S_IRQHandler+0x92>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b20      	cmp	r3, #32
 800334e:	d11f      	bne.n	8003390 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800335e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f043 0202 	orr.w	r2, r3, #2
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff50 	bl	8003230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b03      	cmp	r3, #3
 800339a:	d136      	bne.n	800340a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d109      	bne.n	80033ba <I2S_IRQHandler+0xbc>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b0:	2b80      	cmp	r3, #128	@ 0x80
 80033b2:	d102      	bne.n	80033ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff45 	bl	8003244 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d122      	bne.n	800340a <I2S_IRQHandler+0x10c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d11b      	bne.n	800340a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff ff13 	bl	8003230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a92      	ldr	r2, [pc, #584]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800342e:	4b92      	ldr	r3, [pc, #584]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003430:	e001      	b.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003432:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a8b      	ldr	r2, [pc, #556]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800344c:	4b8a      	ldr	r3, [pc, #552]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800344e:	e001      	b.n	8003454 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003450:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003460:	d004      	beq.n	800346c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8099 	bne.w	800359e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d107      	bne.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f925 	bl	80036d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d107      	bne.n	80034a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f9c8 	bl	8003830 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b40      	cmp	r3, #64	@ 0x40
 80034a8:	d13a      	bne.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d035      	beq.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034be:	4b6e      	ldr	r3, [pc, #440]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034c0:	e001      	b.n	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4969      	ldr	r1, [pc, #420]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ce:	428b      	cmp	r3, r1
 80034d0:	d101      	bne.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034d2:	4b69      	ldr	r3, [pc, #420]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034d4:	e001      	b.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f043 0202 	orr.w	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fe88 	bl	8003230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b08      	cmp	r3, #8
 8003528:	f040 80c3 	bne.w	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80bd 	beq.w	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003546:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a49      	ldr	r2, [pc, #292]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003552:	4b49      	ldr	r3, [pc, #292]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003554:	e001      	b.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003556:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4944      	ldr	r1, [pc, #272]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003562:	428b      	cmp	r3, r1
 8003564:	d101      	bne.n	800356a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003566:	4b44      	ldr	r3, [pc, #272]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003568:	e001      	b.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800356a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800356e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003572:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	f043 0204 	orr.w	r2, r3, #4
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fe4a 	bl	8003230 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800359c:	e089      	b.n	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d107      	bne.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8be 	bl	8003734 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d107      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8fd 	bl	80037cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d8:	2b40      	cmp	r3, #64	@ 0x40
 80035da:	d12f      	bne.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02a      	beq.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003600:	4b1d      	ldr	r3, [pc, #116]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003602:	e001      	b.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003604:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4919      	ldr	r1, [pc, #100]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003610:	428b      	cmp	r3, r1
 8003612:	d101      	bne.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003614:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003616:	e001      	b.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003618:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800361c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003620:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f043 0202 	orr.w	r2, r3, #2
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fdfa 	bl	8003230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	d136      	bne.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d031      	beq.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a07      	ldr	r2, [pc, #28]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800365a:	4b07      	ldr	r3, [pc, #28]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800365c:	e001      	b.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800365e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4902      	ldr	r1, [pc, #8]	@ (8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800366a:	428b      	cmp	r3, r1
 800366c:	d106      	bne.n	800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800366e:	4b02      	ldr	r3, [pc, #8]	@ (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003670:	e006      	b.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003672:	bf00      	nop
 8003674:	40003800 	.word	0x40003800
 8003678:	40003400 	.word	0x40003400
 800367c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003680:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003684:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003694:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	f043 0204 	orr.w	r2, r3, #4
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fdc0 	bl	8003230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b0:	e000      	b.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036b2:	bf00      	nop
}
 80036b4:	bf00      	nop
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	1c99      	adds	r1, r3, #2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003710:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ffc9 	bl	80036bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	1c99      	adds	r1, r3, #2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6251      	str	r1, [r2, #36]	@ 0x24
 8003746:	8819      	ldrh	r1, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1d      	ldr	r2, [pc, #116]	@ (80037c4 <I2SEx_TxISR_I2SExt+0x90>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <I2SEx_TxISR_I2SExt+0x22>
 8003752:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003754:	e001      	b.n	800375a <I2SEx_TxISR_I2SExt+0x26>
 8003756:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800375a:	460a      	mov	r2, r1
 800375c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d121      	bne.n	80037ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a12      	ldr	r2, [pc, #72]	@ (80037c4 <I2SEx_TxISR_I2SExt+0x90>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <I2SEx_TxISR_I2SExt+0x50>
 8003780:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003782:	e001      	b.n	8003788 <I2SEx_TxISR_I2SExt+0x54>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	490d      	ldr	r1, [pc, #52]	@ (80037c4 <I2SEx_TxISR_I2SExt+0x90>)
 8003790:	428b      	cmp	r3, r1
 8003792:	d101      	bne.n	8003798 <I2SEx_TxISR_I2SExt+0x64>
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003796:	e001      	b.n	800379c <I2SEx_TxISR_I2SExt+0x68>
 8003798:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800379c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff81 	bl	80036bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40003800 	.word	0x40003800
 80037c8:	40003400 	.word	0x40003400

080037cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68d8      	ldr	r0, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037de:	1c99      	adds	r1, r3, #2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80037e4:	b282      	uxth	r2, r0
 80037e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d113      	bne.n	8003828 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800380e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff4a 	bl	80036bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a20      	ldr	r2, [pc, #128]	@ (80038c0 <I2SEx_RxISR_I2SExt+0x90>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <I2SEx_RxISR_I2SExt+0x16>
 8003842:	4b20      	ldr	r3, [pc, #128]	@ (80038c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003844:	e001      	b.n	800384a <I2SEx_RxISR_I2SExt+0x1a>
 8003846:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800384a:	68d8      	ldr	r0, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	1c99      	adds	r1, r3, #2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003856:	b282      	uxth	r2, r0
 8003858:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d121      	bne.n	80038b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a12      	ldr	r2, [pc, #72]	@ (80038c0 <I2SEx_RxISR_I2SExt+0x90>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <I2SEx_RxISR_I2SExt+0x50>
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <I2SEx_RxISR_I2SExt+0x94>)
 800387e:	e001      	b.n	8003884 <I2SEx_RxISR_I2SExt+0x54>
 8003880:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	490d      	ldr	r1, [pc, #52]	@ (80038c0 <I2SEx_RxISR_I2SExt+0x90>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d101      	bne.n	8003894 <I2SEx_RxISR_I2SExt+0x64>
 8003890:	4b0c      	ldr	r3, [pc, #48]	@ (80038c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003892:	e001      	b.n	8003898 <I2SEx_RxISR_I2SExt+0x68>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003898:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800389c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff03 	bl	80036bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40003800 	.word	0x40003800
 80038c4:	40003400 	.word	0x40003400

080038c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e101      	b.n	8003ade <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f00a fa61 	bl	800ddbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003908:	d102      	bne.n	8003910 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f003 ff2c 	bl	8007772 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7c1a      	ldrb	r2, [r3, #16]
 8003922:	f88d 2000 	strb.w	r2, [sp]
 8003926:	3304      	adds	r3, #4
 8003928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800392a:	f003 fe0b 	bl	8007544 <USB_CoreInit>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0ce      	b.n	8003ade <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f003 ff24 	bl	8007794 <USB_SetCurrentMode>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0bf      	b.n	8003ade <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e04a      	b.n	80039fa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3315      	adds	r3, #21
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3314      	adds	r3, #20
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	b298      	uxth	r0, r3
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	332e      	adds	r3, #46	@ 0x2e
 80039a0:	4602      	mov	r2, r0
 80039a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3318      	adds	r3, #24
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	331c      	adds	r3, #28
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039cc:	7bfa      	ldrb	r2, [r7, #15]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	3320      	adds	r3, #32
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	3324      	adds	r3, #36	@ 0x24
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	3301      	adds	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	791b      	ldrb	r3, [r3, #4]
 80039fe:	7bfa      	ldrb	r2, [r7, #15]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d3af      	bcc.n	8003964 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e044      	b.n	8003a94 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	3301      	adds	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	791b      	ldrb	r3, [r3, #4]
 8003a98:	7bfa      	ldrb	r2, [r7, #15]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d3b5      	bcc.n	8003a0a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7c1a      	ldrb	r2, [r3, #16]
 8003aa6:	f88d 2000 	strb.w	r2, [sp]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aae:	f003 febd 	bl	800782c <USB_DevInit>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e00c      	b.n	8003ade <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 ff07 	bl	80088ea <USB_DevDisconnect>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_PCD_Start+0x1c>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e022      	b.n	8003b48 <HAL_PCD_Start+0x62>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f003 fe0e 	bl	8007750 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 feb5 	bl	80088a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b08d      	sub	sp, #52	@ 0x34
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 ff73 	bl	8008a52 <USB_GetMode>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f040 848c 	bne.w	800448c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fed7 	bl	800892c <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8482 	beq.w	800448a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f004 fec4 	bl	800892c <USB_ReadInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d107      	bne.n	8003bbe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 0202 	and.w	r2, r2, #2
 8003bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f004 feb2 	bl	800892c <USB_ReadInterrupts>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d161      	bne.n	8003c96 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0210 	bic.w	r2, r2, #16
 8003be0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3304      	adds	r3, #4
 8003c00:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	0c5b      	lsrs	r3, r3, #17
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d124      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d035      	beq.n	8003c86 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6a38      	ldr	r0, [r7, #32]
 8003c2e:	f004 fce9 	bl	8008604 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c3e:	441a      	add	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c50:	441a      	add	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	615a      	str	r2, [r3, #20]
 8003c56:	e016      	b.n	8003c86 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	0c5b      	lsrs	r3, r3, #17
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	2b06      	cmp	r3, #6
 8003c62:	d110      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6a38      	ldr	r0, [r7, #32]
 8003c70:	f004 fcc8 	bl	8008604 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c80:	441a      	add	r2, r3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0210 	orr.w	r2, r2, #16
 8003c94:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f004 fe46 	bl	800892c <USB_ReadInterrupts>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ca6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003caa:	f040 80a7 	bne.w	8003dfc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 fe4b 	bl	8008952 <USB_ReadDevAllOutEpInterrupt>
 8003cbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003cbe:	e099      	b.n	8003df4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 808e 	beq.w	8003de8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 fe6f 	bl	80089ba <USB_ReadDevOutEPInterrupt>
 8003cdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00c      	beq.n	8003d02 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fea3 	bl	8004a48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 ff79 	bl	8004c18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2310      	movs	r3, #16
 8003d40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d030      	beq.n	8003dae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d54:	2b80      	cmp	r3, #128	@ 0x80
 8003d56:	d109      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d6a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	78db      	ldrb	r3, [r3, #3]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d108      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f00a f91a 	bl	800dfd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da8:	461a      	mov	r2, r3
 8003daa:	2302      	movs	r3, #2
 8003dac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de0:	461a      	mov	r2, r3
 8003de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003de6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	3301      	adds	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f47f af62 	bne.w	8003cc0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f004 fd93 	bl	800892c <USB_ReadInterrupts>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e10:	f040 80db 	bne.w	8003fca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 fdb4 	bl	8008986 <USB_ReadDevAllInEpInterrupt>
 8003e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003e24:	e0cd      	b.n	8003fc2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80c2 	beq.w	8003fb6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f004 fdda 	bl	80089f6 <USB_ReadDevInEPInterrupt>
 8003e42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d057      	beq.n	8003efe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	2201      	movs	r2, #1
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	69f9      	ldr	r1, [r7, #28]
 8003e6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e6e:	4013      	ands	r3, r2
 8003e70:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2301      	movs	r3, #1
 8003e82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	799b      	ldrb	r3, [r3, #6]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d132      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3320      	adds	r3, #32
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4403      	add	r3, r0
 8003eac:	331c      	adds	r3, #28
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4419      	add	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4403      	add	r3, r0
 8003ec0:	3320      	adds	r3, #32
 8003ec2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d113      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x3a2>
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	3324      	adds	r3, #36	@ 0x24
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eea:	461a      	mov	r2, r3
 8003eec:	2101      	movs	r1, #1
 8003eee:	f004 fde1 	bl	8008ab4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f009 ffee 	bl	800deda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f14:	461a      	mov	r2, r3
 8003f16:	2308      	movs	r3, #8
 8003f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f30:	461a      	mov	r2, r3
 8003f32:	2310      	movs	r3, #16
 8003f34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2340      	movs	r3, #64	@ 0x40
 8003f50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d023      	beq.n	8003fa4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f5e:	6a38      	ldr	r0, [r7, #32]
 8003f60:	f003 fdc8 	bl	8007af4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3310      	adds	r3, #16
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	3304      	adds	r3, #4
 8003f76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	78db      	ldrb	r3, [r3, #3]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d108      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f00a f831 	bl	800dff4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fcbd 	bl	8004930 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	3301      	adds	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f47f af2e 	bne.w	8003e26 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f004 fcac 	bl	800892c <USB_ReadInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fde:	d122      	bne.n	8004026 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d108      	bne.n	8004010 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004006:	2100      	movs	r1, #0
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fea3 	bl	8004d54 <HAL_PCDEx_LPM_Callback>
 800400e:	e002      	b.n	8004016 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f009 ffcf 	bl	800dfb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f004 fc7e 	bl	800892c <USB_ReadInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403a:	d112      	bne.n	8004062 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d102      	bne.n	8004052 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f009 ff8b 	bl	800df68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004060:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f004 fc60 	bl	800892c <USB_ReadInterrupts>
 800406c:	4603      	mov	r3, r0
 800406e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004076:	f040 80b7 	bne.w	80041e8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2110      	movs	r1, #16
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fd2d 	bl	8007af4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409e:	e046      	b.n	800412e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80040a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ac:	461a      	mov	r2, r3
 80040ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80040d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e0:	461a      	mov	r2, r3
 80040e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004102:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004106:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004122:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004126:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412a:	3301      	adds	r3, #1
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	791b      	ldrb	r3, [r3, #4]
 8004132:	461a      	mov	r2, r3
 8004134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004136:	4293      	cmp	r3, r2
 8004138:	d3b2      	bcc.n	80040a0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004148:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800414c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7bdb      	ldrb	r3, [r3, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004166:	f043 030b 	orr.w	r3, r3, #11
 800416a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800417c:	f043 030b 	orr.w	r3, r3, #11
 8004180:	6453      	str	r3, [r2, #68]	@ 0x44
 8004182:	e015      	b.n	80041b0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004192:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004196:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800419a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041aa:	f043 030b 	orr.w	r3, r3, #11
 80041ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041d2:	461a      	mov	r2, r3
 80041d4:	f004 fc6e 	bl	8008ab4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80041e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 fb9d 	bl	800892c <USB_ReadInterrupts>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041fc:	d123      	bne.n	8004246 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f004 fc33 	bl	8008a6e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f003 fcea 	bl	8007be6 <USB_GetDevSpeed>
 8004212:	4603      	mov	r3, r0
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681c      	ldr	r4, [r3, #0]
 800421e:	f001 fa09 	bl	8005634 <HAL_RCC_GetHCLKFreq>
 8004222:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004228:	461a      	mov	r2, r3
 800422a:	4620      	mov	r0, r4
 800422c:	f003 f9ee 	bl	800760c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f009 fe7a 	bl	800df2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004244:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f004 fb6e 	bl	800892c <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	d10a      	bne.n	8004270 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f009 fe57 	bl	800df0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f002 0208 	and.w	r2, r2, #8
 800426e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f004 fb59 	bl	800892c <USB_ReadInterrupts>
 800427a:	4603      	mov	r3, r0
 800427c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004280:	2b80      	cmp	r3, #128	@ 0x80
 8004282:	d123      	bne.n	80042cc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004290:	2301      	movs	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
 8004294:	e014      	b.n	80042c0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fb0a 	bl	80048ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	3301      	adds	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	461a      	mov	r2, r3
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d3e4      	bcc.n	8004296 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fb2b 	bl	800892c <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042e0:	d13c      	bne.n	800435c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042e2:	2301      	movs	r3, #1
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e6:	e02b      	b.n	8004340 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	3318      	adds	r3, #24
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d115      	bne.n	800433a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800430e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004310:	2b00      	cmp	r3, #0
 8004312:	da12      	bge.n	800433a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3317      	adds	r3, #23
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004330:	b2db      	uxtb	r3, r3
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 faca 	bl	80048ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	3301      	adds	r3, #1
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	461a      	mov	r2, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	4293      	cmp	r3, r2
 800434a:	d3cd      	bcc.n	80042e8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800435a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f004 fae3 	bl	800892c <USB_ReadInterrupts>
 8004366:	4603      	mov	r3, r0
 8004368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800436c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004370:	d156      	bne.n	8004420 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004372:	2301      	movs	r3, #1
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
 8004376:	e045      	b.n	8004404 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d12e      	bne.n	80043fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da2b      	bge.n	80043fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80043b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d121      	bne.n	80043fe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043fa:	6053      	str	r3, [r2, #4]
            break;
 80043fc:	e008      	b.n	8004410 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	3301      	adds	r3, #1
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	791b      	ldrb	r3, [r3, #4]
 8004408:	461a      	mov	r2, r3
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	4293      	cmp	r3, r2
 800440e:	d3b3      	bcc.n	8004378 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800441e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f004 fa81 	bl	800892c <USB_ReadInterrupts>
 800442a:	4603      	mov	r3, r0
 800442c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004434:	d10a      	bne.n	800444c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f009 fdee 	bl	800e018 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800444a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f004 fa6b 	bl	800892c <USB_ReadInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b04      	cmp	r3, #4
 800445e:	d115      	bne.n	800448c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f009 fdde 	bl	800e034 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	e000      	b.n	800448c <HAL_PCD_IRQHandler+0x93c>
      return;
 800448a:	bf00      	nop
    }
  }
}
 800448c:	3734      	adds	r7, #52	@ 0x34
 800448e:	46bd      	mov	sp, r7
 8004490:	bd90      	pop	{r4, r7, pc}

08004492 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_PCD_SetAddress+0x1a>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e012      	b.n	80044d2 <HAL_PCD_SetAddress+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	4611      	mov	r1, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f004 f9ca 	bl	800885c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	4608      	mov	r0, r1
 80044e4:	4611      	mov	r1, r2
 80044e6:	461a      	mov	r2, r3
 80044e8:	4603      	mov	r3, r0
 80044ea:	70fb      	strb	r3, [r7, #3]
 80044ec:	460b      	mov	r3, r1
 80044ee:	803b      	strh	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	da0f      	bge.n	8004520 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	f003 020f 	and.w	r2, r3, #15
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	3310      	adds	r3, #16
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	705a      	strb	r2, [r3, #1]
 800451e:	e00f      	b.n	8004540 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	f003 020f 	and.w	r2, r3, #15
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	3304      	adds	r3, #4
 8004538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800454c:	883b      	ldrh	r3, [r7, #0]
 800454e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	78ba      	ldrb	r2, [r7, #2]
 800455a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800456e:	78bb      	ldrb	r3, [r7, #2]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d102      	bne.n	800457a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_PCD_EP_Open+0xae>
 8004584:	2302      	movs	r3, #2
 8004586:	e00e      	b.n	80045a6 <HAL_PCD_EP_Open+0xcc>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	4618      	mov	r0, r3
 8004598:	f003 fb4a 	bl	8007c30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80045a4:	7afb      	ldrb	r3, [r7, #11]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da0f      	bge.n	80045e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 020f 	and.w	r2, r3, #15
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	3310      	adds	r3, #16
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	3304      	adds	r3, #4
 80045d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	705a      	strb	r2, [r3, #1]
 80045e0:	e00f      	b.n	8004602 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	f003 020f 	and.w	r2, r3, #15
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_PCD_EP_Close+0x6e>
 8004618:	2302      	movs	r3, #2
 800461a:	e00e      	b.n	800463a <HAL_PCD_EP_Close+0x8c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	4618      	mov	r0, r3
 800462c:	f003 fb88 	bl	8007d40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	460b      	mov	r3, r1
 8004650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004652:	7afb      	ldrb	r3, [r7, #11]
 8004654:	f003 020f 	and.w	r2, r3, #15
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	3304      	adds	r3, #4
 800466a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2200      	movs	r2, #0
 8004682:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004684:	7afb      	ldrb	r3, [r7, #11]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	b2da      	uxtb	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	799b      	ldrb	r3, [r3, #6]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d102      	bne.n	800469e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	799b      	ldrb	r3, [r3, #6]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6979      	ldr	r1, [r7, #20]
 80046aa:	f003 fc25 	bl	8007ef8 <USB_EPStartXfer>

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	f003 020f 	and.w	r2, r3, #15
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	460b      	mov	r3, r1
 80046f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f8:	7afb      	ldrb	r3, [r7, #11]
 80046fa:	f003 020f 	and.w	r2, r3, #15
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	3310      	adds	r3, #16
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	3304      	adds	r3, #4
 800470e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2200      	movs	r2, #0
 8004720:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2201      	movs	r2, #1
 8004726:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004728:	7afb      	ldrb	r3, [r7, #11]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	b2da      	uxtb	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	799b      	ldrb	r3, [r3, #6]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d102      	bne.n	8004742 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	799b      	ldrb	r3, [r3, #6]
 800474a:	461a      	mov	r2, r3
 800474c:	6979      	ldr	r1, [r7, #20]
 800474e:	f003 fbd3 	bl	8007ef8 <USB_EPStartXfer>

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	7912      	ldrb	r2, [r2, #4]
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e04f      	b.n	800481a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800477a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800477e:	2b00      	cmp	r3, #0
 8004780:	da0f      	bge.n	80047a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	f003 020f 	and.w	r2, r3, #15
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	3310      	adds	r3, #16
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	3304      	adds	r3, #4
 8004798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	705a      	strb	r2, [r3, #1]
 80047a0:	e00d      	b.n	80047be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	3304      	adds	r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_PCD_EP_SetStall+0x82>
 80047da:	2302      	movs	r3, #2
 80047dc:	e01d      	b.n	800481a <HAL_PCD_EP_SetStall+0xbe>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f003 ff61 	bl	80086b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	7999      	ldrb	r1, [r3, #6]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800480a:	461a      	mov	r2, r3
 800480c:	f004 f952 	bl	8008ab4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	7912      	ldrb	r2, [r2, #4]
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e042      	b.n	80048c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004844:	2b00      	cmp	r3, #0
 8004846:	da0f      	bge.n	8004868 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	f003 020f 	and.w	r2, r3, #15
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	3310      	adds	r3, #16
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	3304      	adds	r3, #4
 800485e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	705a      	strb	r2, [r3, #1]
 8004866:	e00f      	b.n	8004888 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	f003 020f 	and.w	r2, r3, #15
 800486e:	4613      	mov	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	3304      	adds	r3, #4
 8004880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	b2da      	uxtb	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_PCD_EP_ClrStall+0x86>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e00e      	b.n	80048c6 <HAL_PCD_EP_ClrStall+0xa4>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f003 ff6a 	bl	8008790 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da0c      	bge.n	80048fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	f003 020f 	and.w	r2, r3, #15
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	3310      	adds	r3, #16
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	3304      	adds	r3, #4
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e00c      	b.n	8004916 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f003 020f 	and.w	r2, r3, #15
 8004902:	4613      	mov	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	3304      	adds	r3, #4
 8004914:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	4618      	mov	r0, r3
 800491e:	f003 fd89 	bl	8008434 <USB_EPStopXfer>
 8004922:	4603      	mov	r3, r0
 8004924:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004926:	7afb      	ldrb	r3, [r7, #11]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	@ 0x28
 8004934:	af02      	add	r7, sp, #8
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	3310      	adds	r3, #16
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4413      	add	r3, r2
 8004954:	3304      	adds	r3, #4
 8004956:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	429a      	cmp	r2, r3
 8004962:	d901      	bls.n	8004968 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e06b      	b.n	8004a40 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	429a      	cmp	r2, r3
 800497c:	d902      	bls.n	8004984 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	3303      	adds	r3, #3
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800498c:	e02a      	b.n	80049e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d902      	bls.n	80049aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3303      	adds	r3, #3
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	68d9      	ldr	r1, [r3, #12]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4603      	mov	r3, r0
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f003 fdde 	bl	8008588 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	695a      	ldr	r2, [r3, #20]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	441a      	add	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d809      	bhi.n	8004a0e <PCD_WriteEmptyTxFifo+0xde>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d203      	bcs.n	8004a0e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1bf      	bne.n	800498e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d811      	bhi.n	8004a3e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	2201      	movs	r2, #1
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	6939      	ldr	r1, [r7, #16]
 8004a36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	333c      	adds	r3, #60	@ 0x3c
 8004a60:	3304      	adds	r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	799b      	ldrb	r3, [r3, #6]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d17b      	bne.n	8004b76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d015      	beq.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	4a61      	ldr	r2, [pc, #388]	@ (8004c10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	f240 80b9 	bls.w	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80b3 	beq.w	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ab0:	6093      	str	r3, [r2, #8]
 8004ab2:	e0a7      	b.n	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aca:	461a      	mov	r2, r3
 8004acc:	2320      	movs	r3, #32
 8004ace:	6093      	str	r3, [r2, #8]
 8004ad0:	e098      	b.n	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 8093 	bne.w	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8004c10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d90f      	bls.n	8004b06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b02:	6093      	str	r3, [r2, #8]
 8004b04:	e07e      	b.n	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4413      	add	r3, r2
 8004b18:	3304      	adds	r3, #4
 8004b1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1a      	ldr	r2, [r3, #32]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	0159      	lsls	r1, r3, #5
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	440b      	add	r3, r1
 8004b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b32:	1ad2      	subs	r2, r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d114      	bne.n	8004b68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b50:	461a      	mov	r2, r3
 8004b52:	2101      	movs	r1, #1
 8004b54:	f003 ffae 	bl	8008ab4 <USB_EP0_OutStart>
 8004b58:	e006      	b.n	8004b68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	441a      	add	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f009 f998 	bl	800dea4 <HAL_PCD_DataOutStageCallback>
 8004b74:	e046      	b.n	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	4a26      	ldr	r2, [pc, #152]	@ (8004c14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d124      	bne.n	8004bc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b94:	461a      	mov	r2, r3
 8004b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b9a:	6093      	str	r3, [r2, #8]
 8004b9c:	e032      	b.n	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2320      	movs	r3, #32
 8004bb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f009 f96f 	bl	800dea4 <HAL_PCD_DataOutStageCallback>
 8004bc6:	e01d      	b.n	8004c04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d114      	bne.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	f003 ff5e 	bl	8008ab4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f009 f950 	bl	800dea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	4f54300a 	.word	0x4f54300a
 8004c14:	4f54310a 	.word	0x4f54310a

08004c18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	333c      	adds	r3, #60	@ 0x3c
 8004c30:	3304      	adds	r3, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a15      	ldr	r2, [pc, #84]	@ (8004ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d90e      	bls.n	8004c6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c64:	461a      	mov	r2, r3
 8004c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f009 f907 	bl	800de80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d90c      	bls.n	8004c94 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	799b      	ldrb	r3, [r3, #6]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d108      	bne.n	8004c94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2101      	movs	r1, #1
 8004c90:	f003 ff10 	bl	8008ab4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	4f54300a 	.word	0x4f54300a

08004ca4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d107      	bne.n	8004cd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cc2:	883b      	ldrh	r3, [r7, #0]
 8004cc4:	0419      	lsls	r1, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cd0:	e028      	b.n	8004d24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e00d      	b.n	8004d02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	3340      	adds	r3, #64	@ 0x40
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d3ec      	bcc.n	8004ce6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d0c:	883b      	ldrh	r3, [r7, #0]
 8004d0e:	0418      	lsls	r0, r3, #16
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6819      	ldr	r1, [r3, #0]
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	4302      	orrs	r2, r0
 8004d1c:	3340      	adds	r3, #64	@ 0x40
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e267      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d075      	beq.n	8004e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d8a:	4b88      	ldr	r3, [pc, #544]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d00c      	beq.n	8004db0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d96:	4b85      	ldr	r3, [pc, #532]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d112      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004da2:	4b82      	ldr	r3, [pc, #520]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dae:	d10b      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	4b7e      	ldr	r3, [pc, #504]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d05b      	beq.n	8004e74 <HAL_RCC_OscConfig+0x108>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d157      	bne.n	8004e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e242      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCC_OscConfig+0x74>
 8004dd2:	4b76      	ldr	r3, [pc, #472]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a75      	ldr	r2, [pc, #468]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e01d      	b.n	8004e1c <HAL_RCC_OscConfig+0xb0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x98>
 8004dea:	4b70      	ldr	r3, [pc, #448]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6f      	ldr	r2, [pc, #444]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b6d      	ldr	r3, [pc, #436]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6c      	ldr	r2, [pc, #432]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e00b      	b.n	8004e1c <HAL_RCC_OscConfig+0xb0>
 8004e04:	4b69      	ldr	r3, [pc, #420]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a68      	ldr	r2, [pc, #416]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	4b66      	ldr	r3, [pc, #408]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a65      	ldr	r2, [pc, #404]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d013      	beq.n	8004e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fc fdaa 	bl	800197c <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e2c:	f7fc fda6 	bl	800197c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	@ 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e207      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0xc0>
 8004e4a:	e014      	b.n	8004e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7fc fd96 	bl	800197c <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e54:	f7fc fd92 	bl	800197c <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	@ 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e1f3      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e66:	4b51      	ldr	r3, [pc, #324]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0xe8>
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d063      	beq.n	8004f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e82:	4b4a      	ldr	r3, [pc, #296]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8e:	4b47      	ldr	r3, [pc, #284]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d11c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e9a:	4b44      	ldr	r3, [pc, #272]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d116      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea6:	4b41      	ldr	r3, [pc, #260]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_RCC_OscConfig+0x152>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e1c7      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4937      	ldr	r1, [pc, #220]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed2:	e03a      	b.n	8004f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d020      	beq.n	8004f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004edc:	4b34      	ldr	r3, [pc, #208]	@ (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fc fd4b 	bl	800197c <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eea:	f7fc fd47 	bl	800197c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e1a8      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efc:	4b2b      	ldr	r3, [pc, #172]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f08:	4b28      	ldr	r3, [pc, #160]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	4925      	ldr	r1, [pc, #148]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]
 8004f1c:	e015      	b.n	8004f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fc fd2a 	bl	800197c <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2c:	f7fc fd26 	bl	800197c <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e187      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d036      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d016      	beq.n	8004f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5e:	4b15      	ldr	r3, [pc, #84]	@ (8004fb4 <HAL_RCC_OscConfig+0x248>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fc fd0a 	bl	800197c <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6c:	f7fc fd06 	bl	800197c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e167      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <HAL_RCC_OscConfig+0x240>)
 8004f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x200>
 8004f8a:	e01b      	b.n	8004fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f8c:	4b09      	ldr	r3, [pc, #36]	@ (8004fb4 <HAL_RCC_OscConfig+0x248>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f92:	f7fc fcf3 	bl	800197c <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f98:	e00e      	b.n	8004fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9a:	f7fc fcef 	bl	800197c <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d907      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e150      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	42470000 	.word	0x42470000
 8004fb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb8:	4b88      	ldr	r3, [pc, #544]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8004fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1ea      	bne.n	8004f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8097 	beq.w	8005100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fd6:	4b81      	ldr	r3, [pc, #516]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10f      	bne.n	8005002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	4a7c      	ldr	r2, [pc, #496]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffe:	2301      	movs	r3, #1
 8005000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005002:	4b77      	ldr	r3, [pc, #476]	@ (80051e0 <HAL_RCC_OscConfig+0x474>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d118      	bne.n	8005040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800500e:	4b74      	ldr	r3, [pc, #464]	@ (80051e0 <HAL_RCC_OscConfig+0x474>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a73      	ldr	r2, [pc, #460]	@ (80051e0 <HAL_RCC_OscConfig+0x474>)
 8005014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501a:	f7fc fcaf 	bl	800197c <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005022:	f7fc fcab 	bl	800197c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e10c      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	4b6a      	ldr	r3, [pc, #424]	@ (80051e0 <HAL_RCC_OscConfig+0x474>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d106      	bne.n	8005056 <HAL_RCC_OscConfig+0x2ea>
 8005048:	4b64      	ldr	r3, [pc, #400]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504c:	4a63      	ldr	r2, [pc, #396]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6713      	str	r3, [r2, #112]	@ 0x70
 8005054:	e01c      	b.n	8005090 <HAL_RCC_OscConfig+0x324>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b05      	cmp	r3, #5
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x30c>
 800505e:	4b5f      	ldr	r3, [pc, #380]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	4a5e      	ldr	r2, [pc, #376]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8005064:	f043 0304 	orr.w	r3, r3, #4
 8005068:	6713      	str	r3, [r2, #112]	@ 0x70
 800506a:	4b5c      	ldr	r3, [pc, #368]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	4a5b      	ldr	r2, [pc, #364]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6713      	str	r3, [r2, #112]	@ 0x70
 8005076:	e00b      	b.n	8005090 <HAL_RCC_OscConfig+0x324>
 8005078:	4b58      	ldr	r3, [pc, #352]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	4a57      	ldr	r2, [pc, #348]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6713      	str	r3, [r2, #112]	@ 0x70
 8005084:	4b55      	ldr	r3, [pc, #340]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005088:	4a54      	ldr	r2, [pc, #336]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 800508a:	f023 0304 	bic.w	r3, r3, #4
 800508e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d015      	beq.n	80050c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005098:	f7fc fc70 	bl	800197c <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a0:	f7fc fc6c 	bl	800197c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e0cb      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b6:	4b49      	ldr	r3, [pc, #292]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ee      	beq.n	80050a0 <HAL_RCC_OscConfig+0x334>
 80050c2:	e014      	b.n	80050ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c4:	f7fc fc5a 	bl	800197c <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fc fc56 	bl	800197c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0b5      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e2:	4b3e      	ldr	r3, [pc, #248]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ee      	bne.n	80050cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f4:	4b39      	ldr	r3, [pc, #228]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	4a38      	ldr	r2, [pc, #224]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80a1 	beq.w	800524c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800510a:	4b34      	ldr	r3, [pc, #208]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b08      	cmp	r3, #8
 8005114:	d05c      	beq.n	80051d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d141      	bne.n	80051a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511e:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <HAL_RCC_OscConfig+0x478>)
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fc fc2a 	bl	800197c <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512c:	f7fc fc26 	bl	800197c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e087      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513e:	4b27      	ldr	r3, [pc, #156]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	019b      	lsls	r3, r3, #6
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	3b01      	subs	r3, #1
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	061b      	lsls	r3, r3, #24
 800516e:	491b      	ldr	r1, [pc, #108]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005174:	4b1b      	ldr	r3, [pc, #108]	@ (80051e4 <HAL_RCC_OscConfig+0x478>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517a:	f7fc fbff 	bl	800197c <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005182:	f7fc fbfb 	bl	800197c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e05c      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005194:	4b11      	ldr	r3, [pc, #68]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x416>
 80051a0:	e054      	b.n	800524c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a2:	4b10      	ldr	r3, [pc, #64]	@ (80051e4 <HAL_RCC_OscConfig+0x478>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fc fbe8 	bl	800197c <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fc fbe4 	bl	800197c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e045      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <HAL_RCC_OscConfig+0x470>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x444>
 80051ce:	e03d      	b.n	800524c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d107      	bne.n	80051e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e038      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40007000 	.word	0x40007000
 80051e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <HAL_RCC_OscConfig+0x4ec>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d028      	beq.n	8005248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d121      	bne.n	8005248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d11a      	bne.n	8005248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005218:	4013      	ands	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800521e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005220:	4293      	cmp	r3, r2
 8005222:	d111      	bne.n	8005248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	3b01      	subs	r3, #1
 8005232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d107      	bne.n	8005248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800

0800525c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0cc      	b.n	800540a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005270:	4b68      	ldr	r3, [pc, #416]	@ (8005414 <HAL_RCC_ClockConfig+0x1b8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d90c      	bls.n	8005298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b65      	ldr	r3, [pc, #404]	@ (8005414 <HAL_RCC_ClockConfig+0x1b8>)
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005286:	4b63      	ldr	r3, [pc, #396]	@ (8005414 <HAL_RCC_ClockConfig+0x1b8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d001      	beq.n	8005298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0b8      	b.n	800540a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b0:	4b59      	ldr	r3, [pc, #356]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	4a58      	ldr	r2, [pc, #352]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c8:	4b53      	ldr	r3, [pc, #332]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4a52      	ldr	r2, [pc, #328]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d4:	4b50      	ldr	r3, [pc, #320]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	494d      	ldr	r1, [pc, #308]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d044      	beq.n	800537c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fa:	4b47      	ldr	r3, [pc, #284]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d119      	bne.n	800533a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07f      	b.n	800540a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d003      	beq.n	800531a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005316:	2b03      	cmp	r3, #3
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531a:	4b3f      	ldr	r3, [pc, #252]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e06f      	b.n	800540a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532a:	4b3b      	ldr	r3, [pc, #236]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e067      	b.n	800540a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800533a:	4b37      	ldr	r3, [pc, #220]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f023 0203 	bic.w	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4934      	ldr	r1, [pc, #208]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800534c:	f7fc fb16 	bl	800197c <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fc fb12 	bl	800197c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e04f      	b.n	800540a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	4b2b      	ldr	r3, [pc, #172]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 020c 	and.w	r2, r3, #12
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	429a      	cmp	r2, r3
 800537a:	d1eb      	bne.n	8005354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800537c:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <HAL_RCC_ClockConfig+0x1b8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d20c      	bcs.n	80053a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b22      	ldr	r3, [pc, #136]	@ (8005414 <HAL_RCC_ClockConfig+0x1b8>)
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b20      	ldr	r3, [pc, #128]	@ (8005414 <HAL_RCC_ClockConfig+0x1b8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e032      	b.n	800540a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b0:	4b19      	ldr	r3, [pc, #100]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4916      	ldr	r1, [pc, #88]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ce:	4b12      	ldr	r3, [pc, #72]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	490e      	ldr	r1, [pc, #56]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053e2:	f000 f821 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 80053e6:	4602      	mov	r2, r0
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	490a      	ldr	r1, [pc, #40]	@ (800541c <HAL_RCC_ClockConfig+0x1c0>)
 80053f4:	5ccb      	ldrb	r3, [r1, r3]
 80053f6:	fa22 f303 	lsr.w	r3, r2, r3
 80053fa:	4a09      	ldr	r2, [pc, #36]	@ (8005420 <HAL_RCC_ClockConfig+0x1c4>)
 80053fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053fe:	4b09      	ldr	r3, [pc, #36]	@ (8005424 <HAL_RCC_ClockConfig+0x1c8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7fc f99c 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023c00 	.word	0x40023c00
 8005418:	40023800 	.word	0x40023800
 800541c:	0800e534 	.word	0x0800e534
 8005420:	20000000 	.word	0x20000000
 8005424:	20000004 	.word	0x20000004

08005428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800542c:	b094      	sub	sp, #80	@ 0x50
 800542e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005440:	4b79      	ldr	r3, [pc, #484]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x200>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 030c 	and.w	r3, r3, #12
 8005448:	2b08      	cmp	r3, #8
 800544a:	d00d      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x40>
 800544c:	2b08      	cmp	r3, #8
 800544e:	f200 80e1 	bhi.w	8005614 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0x34>
 8005456:	2b04      	cmp	r3, #4
 8005458:	d003      	beq.n	8005462 <HAL_RCC_GetSysClockFreq+0x3a>
 800545a:	e0db      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800545c:	4b73      	ldr	r3, [pc, #460]	@ (800562c <HAL_RCC_GetSysClockFreq+0x204>)
 800545e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005460:	e0db      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005462:	4b73      	ldr	r3, [pc, #460]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x208>)
 8005464:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005466:	e0d8      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005468:	4b6f      	ldr	r3, [pc, #444]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x200>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005470:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005472:	4b6d      	ldr	r3, [pc, #436]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x200>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d063      	beq.n	8005546 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547e:	4b6a      	ldr	r3, [pc, #424]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x200>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	099b      	lsrs	r3, r3, #6
 8005484:	2200      	movs	r2, #0
 8005486:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005488:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005490:	633b      	str	r3, [r7, #48]	@ 0x30
 8005492:	2300      	movs	r3, #0
 8005494:	637b      	str	r3, [r7, #52]	@ 0x34
 8005496:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800549a:	4622      	mov	r2, r4
 800549c:	462b      	mov	r3, r5
 800549e:	f04f 0000 	mov.w	r0, #0
 80054a2:	f04f 0100 	mov.w	r1, #0
 80054a6:	0159      	lsls	r1, r3, #5
 80054a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054ac:	0150      	lsls	r0, r2, #5
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4621      	mov	r1, r4
 80054b4:	1a51      	subs	r1, r2, r1
 80054b6:	6139      	str	r1, [r7, #16]
 80054b8:	4629      	mov	r1, r5
 80054ba:	eb63 0301 	sbc.w	r3, r3, r1
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054cc:	4659      	mov	r1, fp
 80054ce:	018b      	lsls	r3, r1, #6
 80054d0:	4651      	mov	r1, sl
 80054d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054d6:	4651      	mov	r1, sl
 80054d8:	018a      	lsls	r2, r1, #6
 80054da:	4651      	mov	r1, sl
 80054dc:	ebb2 0801 	subs.w	r8, r2, r1
 80054e0:	4659      	mov	r1, fp
 80054e2:	eb63 0901 	sbc.w	r9, r3, r1
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054fa:	4690      	mov	r8, r2
 80054fc:	4699      	mov	r9, r3
 80054fe:	4623      	mov	r3, r4
 8005500:	eb18 0303 	adds.w	r3, r8, r3
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	462b      	mov	r3, r5
 8005508:	eb49 0303 	adc.w	r3, r9, r3
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800551a:	4629      	mov	r1, r5
 800551c:	024b      	lsls	r3, r1, #9
 800551e:	4621      	mov	r1, r4
 8005520:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005524:	4621      	mov	r1, r4
 8005526:	024a      	lsls	r2, r1, #9
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800552e:	2200      	movs	r2, #0
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005534:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005538:	f7fa fe5a 	bl	80001f0 <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4613      	mov	r3, r2
 8005542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005544:	e058      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005546:	4b38      	ldr	r3, [pc, #224]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x200>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	099b      	lsrs	r3, r3, #6
 800554c:	2200      	movs	r2, #0
 800554e:	4618      	mov	r0, r3
 8005550:	4611      	mov	r1, r2
 8005552:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005556:	623b      	str	r3, [r7, #32]
 8005558:	2300      	movs	r3, #0
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
 800555c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	f04f 0000 	mov.w	r0, #0
 8005568:	f04f 0100 	mov.w	r1, #0
 800556c:	0159      	lsls	r1, r3, #5
 800556e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005572:	0150      	lsls	r0, r2, #5
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4641      	mov	r1, r8
 800557a:	ebb2 0a01 	subs.w	sl, r2, r1
 800557e:	4649      	mov	r1, r9
 8005580:	eb63 0b01 	sbc.w	fp, r3, r1
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005590:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005594:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005598:	ebb2 040a 	subs.w	r4, r2, sl
 800559c:	eb63 050b 	sbc.w	r5, r3, fp
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	00eb      	lsls	r3, r5, #3
 80055aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ae:	00e2      	lsls	r2, r4, #3
 80055b0:	4614      	mov	r4, r2
 80055b2:	461d      	mov	r5, r3
 80055b4:	4643      	mov	r3, r8
 80055b6:	18e3      	adds	r3, r4, r3
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	464b      	mov	r3, r9
 80055bc:	eb45 0303 	adc.w	r3, r5, r3
 80055c0:	607b      	str	r3, [r7, #4]
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ce:	4629      	mov	r1, r5
 80055d0:	028b      	lsls	r3, r1, #10
 80055d2:	4621      	mov	r1, r4
 80055d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055d8:	4621      	mov	r1, r4
 80055da:	028a      	lsls	r2, r1, #10
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e2:	2200      	movs	r2, #0
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	61fa      	str	r2, [r7, #28]
 80055e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ec:	f7fa fe00 	bl	80001f0 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4613      	mov	r3, r2
 80055f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x200>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	3301      	adds	r3, #1
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005608:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800560a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005612:	e002      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005614:	4b05      	ldr	r3, [pc, #20]	@ (800562c <HAL_RCC_GetSysClockFreq+0x204>)
 8005616:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800561a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800561c:	4618      	mov	r0, r3
 800561e:	3750      	adds	r7, #80	@ 0x50
 8005620:	46bd      	mov	sp, r7
 8005622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005626:	bf00      	nop
 8005628:	40023800 	.word	0x40023800
 800562c:	00f42400 	.word	0x00f42400
 8005630:	007a1200 	.word	0x007a1200

08005634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005638:	4b03      	ldr	r3, [pc, #12]	@ (8005648 <HAL_RCC_GetHCLKFreq+0x14>)
 800563a:	681b      	ldr	r3, [r3, #0]
}
 800563c:	4618      	mov	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20000000 	.word	0x20000000

0800564c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005650:	f7ff fff0 	bl	8005634 <HAL_RCC_GetHCLKFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b05      	ldr	r3, [pc, #20]	@ (800566c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	0a9b      	lsrs	r3, r3, #10
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	4903      	ldr	r1, [pc, #12]	@ (8005670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40023800 	.word	0x40023800
 8005670:	0800e544 	.word	0x0800e544

08005674 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	220f      	movs	r2, #15
 8005682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005684:	4b12      	ldr	r3, [pc, #72]	@ (80056d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0203 	and.w	r2, r3, #3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005690:	4b0f      	ldr	r3, [pc, #60]	@ (80056d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800569c:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <HAL_RCC_GetClockConfig+0x5c>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80056a8:	4b09      	ldr	r3, [pc, #36]	@ (80056d0 <HAL_RCC_GetClockConfig+0x5c>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	08db      	lsrs	r3, r3, #3
 80056ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80056b6:	4b07      	ldr	r3, [pc, #28]	@ (80056d4 <HAL_RCC_GetClockConfig+0x60>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0207 	and.w	r2, r3, #7
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	601a      	str	r2, [r3, #0]
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	40023c00 	.word	0x40023c00

080056d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d105      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d038      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005700:	4b68      	ldr	r3, [pc, #416]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005706:	f7fc f939 	bl	800197c <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800570e:	f7fc f935 	bl	800197c <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e0bd      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005720:	4b61      	ldr	r3, [pc, #388]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f0      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	019b      	lsls	r3, r3, #6
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	071b      	lsls	r3, r3, #28
 800573e:	495a      	ldr	r1, [pc, #360]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005746:	4b57      	ldr	r3, [pc, #348]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800574c:	f7fc f916 	bl	800197c <HAL_GetTick>
 8005750:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005754:	f7fc f912 	bl	800197c <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e09a      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005766:	4b50      	ldr	r3, [pc, #320]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8083 	beq.w	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	4b48      	ldr	r3, [pc, #288]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005788:	4a47      	ldr	r2, [pc, #284]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005790:	4b45      	ldr	r3, [pc, #276]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800579c:	4b43      	ldr	r3, [pc, #268]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a42      	ldr	r2, [pc, #264]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057a8:	f7fc f8e8 	bl	800197c <HAL_GetTick>
 80057ac:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b0:	f7fc f8e4 	bl	800197c <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e06c      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80057c2:	4b3a      	ldr	r3, [pc, #232]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ce:	4b36      	ldr	r3, [pc, #216]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d02f      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d028      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ec:	4b2e      	ldr	r3, [pc, #184]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057f6:	4b2e      	ldr	r3, [pc, #184]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057fc:	4b2c      	ldr	r3, [pc, #176]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005802:	4a29      	ldr	r2, [pc, #164]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005808:	4b27      	ldr	r3, [pc, #156]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b01      	cmp	r3, #1
 8005812:	d114      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005814:	f7fc f8b2 	bl	800197c <HAL_GetTick>
 8005818:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581a:	e00a      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800581c:	f7fc f8ae 	bl	800197c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e034      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005832:	4b1d      	ldr	r3, [pc, #116]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0ee      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584a:	d10d      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800584c:	4b16      	ldr	r3, [pc, #88]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800585c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005860:	4911      	ldr	r1, [pc, #68]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
 8005866:	e005      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005868:	4b0f      	ldr	r3, [pc, #60]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a0e      	ldr	r2, [pc, #56]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005872:	6093      	str	r3, [r2, #8]
 8005874:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005876:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005880:	4909      	ldr	r1, [pc, #36]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	4313      	orrs	r3, r2
 8005884:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	7d1a      	ldrb	r2, [r3, #20]
 8005896:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005898:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	42470068 	.word	0x42470068
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40007000 	.word	0x40007000
 80058b0:	42470e40 	.word	0x42470e40
 80058b4:	424711e0 	.word	0x424711e0

080058b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d141      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058d6:	4b25      	ldr	r3, [pc, #148]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058ec:	d131      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058ee:	4b20      	ldr	r3, [pc, #128]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80058f0:	617b      	str	r3, [r7, #20]
          break;
 80058f2:	e031      	b.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058f4:	4b1d      	ldr	r3, [pc, #116]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005900:	d109      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005902:	4b1a      	ldr	r3, [pc, #104]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800590c:	4a19      	ldr	r2, [pc, #100]	@ (8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	e008      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005916:	4b15      	ldr	r3, [pc, #84]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800591c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005920:	4a15      	ldr	r2, [pc, #84]	@ (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005928:	4b10      	ldr	r3, [pc, #64]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800592a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800592e:	099b      	lsrs	r3, r3, #6
 8005930:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800593c:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800593e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005942:	0f1b      	lsrs	r3, r3, #28
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	617b      	str	r3, [r7, #20]
          break;
 8005950:	e002      	b.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
          break;
 8005956:	bf00      	nop
        }
      }
      break;
 8005958:	e000      	b.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800595a:	bf00      	nop
    }
  }
  return frequency;
 800595c:	697b      	ldr	r3, [r7, #20]
}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800
 8005970:	00bb8000 	.word	0x00bb8000
 8005974:	007a1200 	.word	0x007a1200
 8005978:	00f42400 	.word	0x00f42400

0800597c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e07b      	b.n	8005a86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	d108      	bne.n	80059a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800599e:	d009      	beq.n	80059b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	61da      	str	r2, [r3, #28]
 80059a6:	e005      	b.n	80059b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fb fe12 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a38:	ea42 0103 	orr.w	r1, r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	0c1b      	lsrs	r3, r3, #16
 8005a52:	f003 0104 	and.w	r1, r3, #4
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	f003 0210 	and.w	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b088      	sub	sp, #32
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a9e:	f7fb ff6d 	bl	800197c <HAL_GetTick>
 8005aa2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005aa4:	88fb      	ldrh	r3, [r7, #6]
 8005aa6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d001      	beq.n	8005ab8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e12a      	b.n	8005d0e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_SPI_Transmit+0x36>
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e122      	b.n	8005d0e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_SPI_Transmit+0x48>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e11b      	b.n	8005d0e <HAL_SPI_Transmit+0x280>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2203      	movs	r2, #3
 8005ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	88fa      	ldrh	r2, [r7, #6]
 8005af6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b24:	d10f      	bne.n	8005b46 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b50:	2b40      	cmp	r3, #64	@ 0x40
 8005b52:	d007      	beq.n	8005b64 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b6c:	d152      	bne.n	8005c14 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_SPI_Transmit+0xee>
 8005b76:	8b7b      	ldrh	r3, [r7, #26]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d145      	bne.n	8005c08 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	881a      	ldrh	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ba0:	e032      	b.n	8005c08 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d112      	bne.n	8005bd6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	881a      	ldrh	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	1c9a      	adds	r2, r3, #2
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bd4:	e018      	b.n	8005c08 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd6:	f7fb fed1 	bl	800197c <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d803      	bhi.n	8005bee <HAL_SPI_Transmit+0x160>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d102      	bne.n	8005bf4 <HAL_SPI_Transmit+0x166>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e082      	b.n	8005d0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1c7      	bne.n	8005ba2 <HAL_SPI_Transmit+0x114>
 8005c12:	e053      	b.n	8005cbc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_SPI_Transmit+0x194>
 8005c1c:	8b7b      	ldrh	r3, [r7, #26]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d147      	bne.n	8005cb2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c48:	e033      	b.n	8005cb2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d113      	bne.n	8005c80 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	7812      	ldrb	r2, [r2, #0]
 8005c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c7e:	e018      	b.n	8005cb2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c80:	f7fb fe7c 	bl	800197c <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d803      	bhi.n	8005c98 <HAL_SPI_Transmit+0x20a>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d102      	bne.n	8005c9e <HAL_SPI_Transmit+0x210>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e02d      	b.n	8005d0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1c6      	bne.n	8005c4a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fbd9 	bl	8006478 <SPI_EndRxTxTransaction>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b088      	sub	sp, #32
 8005d1a:	af02      	add	r7, sp, #8
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d001      	beq.n	8005d36 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005d32:	2302      	movs	r3, #2
 8005d34:	e104      	b.n	8005f40 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d3e:	d112      	bne.n	8005d66 <HAL_SPI_Receive+0x50>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10e      	bne.n	8005d66 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d50:	88fa      	ldrh	r2, [r7, #6]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4613      	mov	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f8f3 	bl	8005f48 <HAL_SPI_TransmitReceive>
 8005d62:	4603      	mov	r3, r0
 8005d64:	e0ec      	b.n	8005f40 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d66:	f7fb fe09 	bl	800197c <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_SPI_Receive+0x62>
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0e1      	b.n	8005f40 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_SPI_Receive+0x74>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e0da      	b.n	8005f40 <HAL_SPI_Receive+0x22a>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2204      	movs	r2, #4
 8005d96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	88fa      	ldrh	r2, [r7, #6]
 8005daa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	88fa      	ldrh	r2, [r7, #6]
 8005db0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd8:	d10f      	bne.n	8005dfa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005df8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d007      	beq.n	8005e18 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d170      	bne.n	8005f02 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e20:	e035      	b.n	8005e8e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d115      	bne.n	8005e5c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f103 020c 	add.w	r2, r3, #12
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e5a:	e018      	b.n	8005e8e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5c:	f7fb fd8e 	bl	800197c <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d803      	bhi.n	8005e74 <HAL_SPI_Receive+0x15e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d102      	bne.n	8005e7a <HAL_SPI_Receive+0x164>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e058      	b.n	8005f40 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1c4      	bne.n	8005e22 <HAL_SPI_Receive+0x10c>
 8005e98:	e038      	b.n	8005f0c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d113      	bne.n	8005ed0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	b292      	uxth	r2, r2
 8005eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	1c9a      	adds	r2, r3, #2
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ece:	e018      	b.n	8005f02 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed0:	f7fb fd54 	bl	800197c <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d803      	bhi.n	8005ee8 <HAL_SPI_Receive+0x1d2>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d102      	bne.n	8005eee <HAL_SPI_Receive+0x1d8>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e01e      	b.n	8005f40 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1c6      	bne.n	8005e9a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fa4b 	bl	80063ac <SPI_EndRxTransaction>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	@ 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f56:	2301      	movs	r3, #1
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f5a:	f7fb fd0f 	bl	800197c <HAL_GetTick>
 8005f5e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f66:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f6e:	887b      	ldrh	r3, [r7, #2]
 8005f70:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f72:	7ffb      	ldrb	r3, [r7, #31]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d00c      	beq.n	8005f92 <HAL_SPI_TransmitReceive+0x4a>
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f7e:	d106      	bne.n	8005f8e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d102      	bne.n	8005f8e <HAL_SPI_TransmitReceive+0x46>
 8005f88:	7ffb      	ldrb	r3, [r7, #31]
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d001      	beq.n	8005f92 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e17f      	b.n	8006292 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_SPI_TransmitReceive+0x5c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_SPI_TransmitReceive+0x5c>
 8005f9e:	887b      	ldrh	r3, [r7, #2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e174      	b.n	8006292 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_SPI_TransmitReceive+0x6e>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e16d      	b.n	8006292 <HAL_SPI_TransmitReceive+0x34a>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d003      	beq.n	8005fd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2205      	movs	r2, #5
 8005fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	887a      	ldrh	r2, [r7, #2]
 8005fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	887a      	ldrh	r2, [r7, #2]
 8005ff4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	887a      	ldrh	r2, [r7, #2]
 8005ffa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006012:	2b40      	cmp	r3, #64	@ 0x40
 8006014:	d007      	beq.n	8006026 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800602e:	d17e      	bne.n	800612e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_SPI_TransmitReceive+0xf6>
 8006038:	8afb      	ldrh	r3, [r7, #22]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d16c      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	881a      	ldrh	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	1c9a      	adds	r2, r3, #2
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006062:	e059      	b.n	8006118 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d11b      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x162>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d016      	beq.n	80060aa <HAL_SPI_TransmitReceive+0x162>
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	2b01      	cmp	r3, #1
 8006080:	d113      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006086:	881a      	ldrh	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	1c9a      	adds	r2, r3, #2
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d119      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x1a4>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d014      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060cc:	b292      	uxth	r2, r2
 80060ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060e8:	2301      	movs	r3, #1
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060ec:	f7fb fc46 	bl	800197c <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d80d      	bhi.n	8006118 <HAL_SPI_TransmitReceive+0x1d0>
 80060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d009      	beq.n	8006118 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e0bc      	b.n	8006292 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1a0      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x11c>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d19b      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x11c>
 800612c:	e082      	b.n	8006234 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_SPI_TransmitReceive+0x1f4>
 8006136:	8afb      	ldrh	r3, [r7, #22]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d171      	bne.n	8006220 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	7812      	ldrb	r2, [r2, #0]
 8006148:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006162:	e05d      	b.n	8006220 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d11c      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x264>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d017      	beq.n	80061ac <HAL_SPI_TransmitReceive+0x264>
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	2b01      	cmp	r3, #1
 8006180:	d114      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	330c      	adds	r3, #12
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d119      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x2a6>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d014      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ea:	2301      	movs	r3, #1
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061ee:	f7fb fbc5 	bl	800197c <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d803      	bhi.n	8006206 <HAL_SPI_TransmitReceive+0x2be>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d102      	bne.n	800620c <HAL_SPI_TransmitReceive+0x2c4>
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e038      	b.n	8006292 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d19c      	bne.n	8006164 <HAL_SPI_TransmitReceive+0x21c>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d197      	bne.n	8006164 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f91d 	bl	8006478 <SPI_EndRxTxTransaction>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e01d      	b.n	8006292 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006290:	2300      	movs	r3, #0
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3728      	adds	r7, #40	@ 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	4613      	mov	r3, r2
 80062aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062ac:	f7fb fb66 	bl	800197c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	4413      	add	r3, r2
 80062ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062bc:	f7fb fb5e 	bl	800197c <HAL_GetTick>
 80062c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062c2:	4b39      	ldr	r3, [pc, #228]	@ (80063a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	015b      	lsls	r3, r3, #5
 80062c8:	0d1b      	lsrs	r3, r3, #20
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	fb02 f303 	mul.w	r3, r2, r3
 80062d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062d2:	e054      	b.n	800637e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d050      	beq.n	800637e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062dc:	f7fb fb4e 	bl	800197c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d902      	bls.n	80062f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d13d      	bne.n	800636e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800630a:	d111      	bne.n	8006330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006314:	d004      	beq.n	8006320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800631e:	d107      	bne.n	8006330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800632e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006338:	d10f      	bne.n	800635a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e017      	b.n	800639e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	3b01      	subs	r3, #1
 800637c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4013      	ands	r3, r2
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	429a      	cmp	r2, r3
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	429a      	cmp	r2, r3
 800639a:	d19b      	bne.n	80062d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000000 	.word	0x20000000

080063ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c0:	d111      	bne.n	80063e6 <SPI_EndRxTransaction+0x3a>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ca:	d004      	beq.n	80063d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d4:	d107      	bne.n	80063e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063ee:	d12a      	bne.n	8006446 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d012      	beq.n	8006420 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	2180      	movs	r1, #128	@ 0x80
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff ff49 	bl	800629c <SPI_WaitFlagStateUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02d      	beq.n	800646c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006414:	f043 0220 	orr.w	r2, r3, #32
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e026      	b.n	800646e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2200      	movs	r2, #0
 8006428:	2101      	movs	r1, #1
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff ff36 	bl	800629c <SPI_WaitFlagStateUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01a      	beq.n	800646c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643a:	f043 0220 	orr.w	r2, r3, #32
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e013      	b.n	800646e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	2101      	movs	r1, #1
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff ff23 	bl	800629c <SPI_WaitFlagStateUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006460:	f043 0220 	orr.w	r2, r3, #32
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e000      	b.n	800646e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2201      	movs	r2, #1
 800648c:	2102      	movs	r1, #2
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff ff04 	bl	800629c <SPI_WaitFlagStateUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649e:	f043 0220 	orr.w	r2, r3, #32
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e032      	b.n	8006510 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006518 <SPI_EndRxTxTransaction+0xa0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1b      	ldr	r2, [pc, #108]	@ (800651c <SPI_EndRxTxTransaction+0xa4>)
 80064b0:	fba2 2303 	umull	r2, r3, r2, r3
 80064b4:	0d5b      	lsrs	r3, r3, #21
 80064b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064c8:	d112      	bne.n	80064f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	@ 0x80
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff fee1 	bl	800629c <SPI_WaitFlagStateUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d016      	beq.n	800650e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e4:	f043 0220 	orr.w	r2, r3, #32
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e00f      	b.n	8006510 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006506:	2b80      	cmp	r3, #128	@ 0x80
 8006508:	d0f2      	beq.n	80064f0 <SPI_EndRxTxTransaction+0x78>
 800650a:	e000      	b.n	800650e <SPI_EndRxTxTransaction+0x96>
        break;
 800650c:	bf00      	nop
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000000 	.word	0x20000000
 800651c:	165e9f81 	.word	0x165e9f81

08006520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e041      	b.n	80065b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fb f89e 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f000 fc96 	bl	8006e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d001      	beq.n	80065d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e03c      	b.n	8006652 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006660 <HAL_TIM_Base_Start+0xa0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d018      	beq.n	800661c <HAL_TIM_Base_Start+0x5c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f2:	d013      	beq.n	800661c <HAL_TIM_Base_Start+0x5c>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006664 <HAL_TIM_Base_Start+0xa4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00e      	beq.n	800661c <HAL_TIM_Base_Start+0x5c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a19      	ldr	r2, [pc, #100]	@ (8006668 <HAL_TIM_Base_Start+0xa8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d009      	beq.n	800661c <HAL_TIM_Base_Start+0x5c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a17      	ldr	r2, [pc, #92]	@ (800666c <HAL_TIM_Base_Start+0xac>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d004      	beq.n	800661c <HAL_TIM_Base_Start+0x5c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a16      	ldr	r2, [pc, #88]	@ (8006670 <HAL_TIM_Base_Start+0xb0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d111      	bne.n	8006640 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b06      	cmp	r3, #6
 800662c:	d010      	beq.n	8006650 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663e:	e007      	b.n	8006650 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40010000 	.word	0x40010000
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40014000 	.word	0x40014000

08006674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	d001      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e044      	b.n	8006716 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006724 <HAL_TIM_Base_Start_IT+0xb0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x6c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b6:	d013      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x6c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006728 <HAL_TIM_Base_Start_IT+0xb4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x6c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a19      	ldr	r2, [pc, #100]	@ (800672c <HAL_TIM_Base_Start_IT+0xb8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x6c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a17      	ldr	r2, [pc, #92]	@ (8006730 <HAL_TIM_Base_Start_IT+0xbc>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x6c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a16      	ldr	r2, [pc, #88]	@ (8006734 <HAL_TIM_Base_Start_IT+0xc0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d111      	bne.n	8006704 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b06      	cmp	r3, #6
 80066f0:	d010      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0201 	orr.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006702:	e007      	b.n	8006714 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40014000 	.word	0x40014000

08006738 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e041      	b.n	80067ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f839 	bl	80067d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f000 fb8a 	bl	8006e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <HAL_TIM_PWM_Start+0x24>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e022      	b.n	8006856 <HAL_TIM_PWM_Start+0x6a>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b04      	cmp	r3, #4
 8006814:	d109      	bne.n	800682a <HAL_TIM_PWM_Start+0x3e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b01      	cmp	r3, #1
 8006820:	bf14      	ite	ne
 8006822:	2301      	movne	r3, #1
 8006824:	2300      	moveq	r3, #0
 8006826:	b2db      	uxtb	r3, r3
 8006828:	e015      	b.n	8006856 <HAL_TIM_PWM_Start+0x6a>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b08      	cmp	r3, #8
 800682e:	d109      	bne.n	8006844 <HAL_TIM_PWM_Start+0x58>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e008      	b.n	8006856 <HAL_TIM_PWM_Start+0x6a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b01      	cmp	r3, #1
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e068      	b.n	8006930 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <HAL_TIM_PWM_Start+0x82>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800686c:	e013      	b.n	8006896 <HAL_TIM_PWM_Start+0xaa>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b04      	cmp	r3, #4
 8006872:	d104      	bne.n	800687e <HAL_TIM_PWM_Start+0x92>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800687c:	e00b      	b.n	8006896 <HAL_TIM_PWM_Start+0xaa>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b08      	cmp	r3, #8
 8006882:	d104      	bne.n	800688e <HAL_TIM_PWM_Start+0xa2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800688c:	e003      	b.n	8006896 <HAL_TIM_PWM_Start+0xaa>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2201      	movs	r2, #1
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fda8 	bl	80073f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a23      	ldr	r2, [pc, #140]	@ (8006938 <HAL_TIM_PWM_Start+0x14c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d107      	bne.n	80068be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006938 <HAL_TIM_PWM_Start+0x14c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d018      	beq.n	80068fa <HAL_TIM_PWM_Start+0x10e>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d0:	d013      	beq.n	80068fa <HAL_TIM_PWM_Start+0x10e>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a19      	ldr	r2, [pc, #100]	@ (800693c <HAL_TIM_PWM_Start+0x150>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00e      	beq.n	80068fa <HAL_TIM_PWM_Start+0x10e>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a17      	ldr	r2, [pc, #92]	@ (8006940 <HAL_TIM_PWM_Start+0x154>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d009      	beq.n	80068fa <HAL_TIM_PWM_Start+0x10e>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a16      	ldr	r2, [pc, #88]	@ (8006944 <HAL_TIM_PWM_Start+0x158>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d004      	beq.n	80068fa <HAL_TIM_PWM_Start+0x10e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a14      	ldr	r2, [pc, #80]	@ (8006948 <HAL_TIM_PWM_Start+0x15c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d111      	bne.n	800691e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b06      	cmp	r3, #6
 800690a:	d010      	beq.n	800692e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691c:	e007      	b.n	800692e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40010000 	.word	0x40010000
 800693c:	40000400 	.word	0x40000400
 8006940:	40000800 	.word	0x40000800
 8006944:	40000c00 	.word	0x40000c00
 8006948:	40014000 	.word	0x40014000

0800694c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d020      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01b      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0202 	mvn.w	r2, #2
 8006980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa5b 	bl	8006e52 <HAL_TIM_IC_CaptureCallback>
 800699c:	e005      	b.n	80069aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fa4d 	bl	8006e3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fa5e 	bl	8006e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d020      	beq.n	80069fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01b      	beq.n	80069fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f06f 0204 	mvn.w	r2, #4
 80069cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2202      	movs	r2, #2
 80069d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa35 	bl	8006e52 <HAL_TIM_IC_CaptureCallback>
 80069e8:	e005      	b.n	80069f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa27 	bl	8006e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa38 	bl	8006e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d020      	beq.n	8006a48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01b      	beq.n	8006a48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0208 	mvn.w	r2, #8
 8006a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa0f 	bl	8006e52 <HAL_TIM_IC_CaptureCallback>
 8006a34:	e005      	b.n	8006a42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa01 	bl	8006e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fa12 	bl	8006e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d020      	beq.n	8006a94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01b      	beq.n	8006a94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0210 	mvn.w	r2, #16
 8006a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2208      	movs	r2, #8
 8006a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f9e9 	bl	8006e52 <HAL_TIM_IC_CaptureCallback>
 8006a80:	e005      	b.n	8006a8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9db 	bl	8006e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f9ec 	bl	8006e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0201 	mvn.w	r2, #1
 8006ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fa fc4a 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fd2a 	bl	8007530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00c      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9bd 	bl	8006e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00c      	beq.n	8006b24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0220 	mvn.w	r2, #32
 8006b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fcfc 	bl	800751c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e0ae      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b0c      	cmp	r3, #12
 8006b56:	f200 809f 	bhi.w	8006c98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b95 	.word	0x08006b95
 8006b64:	08006c99 	.word	0x08006c99
 8006b68:	08006c99 	.word	0x08006c99
 8006b6c:	08006c99 	.word	0x08006c99
 8006b70:	08006bd5 	.word	0x08006bd5
 8006b74:	08006c99 	.word	0x08006c99
 8006b78:	08006c99 	.word	0x08006c99
 8006b7c:	08006c99 	.word	0x08006c99
 8006b80:	08006c17 	.word	0x08006c17
 8006b84:	08006c99 	.word	0x08006c99
 8006b88:	08006c99 	.word	0x08006c99
 8006b8c:	08006c99 	.word	0x08006c99
 8006b90:	08006c57 	.word	0x08006c57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fa04 	bl	8006fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0208 	orr.w	r2, r2, #8
 8006bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0204 	bic.w	r2, r2, #4
 8006bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6999      	ldr	r1, [r3, #24]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	619a      	str	r2, [r3, #24]
      break;
 8006bd2:	e064      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fa4a 	bl	8007074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	021a      	lsls	r2, r3, #8
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	619a      	str	r2, [r3, #24]
      break;
 8006c14:	e043      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fa95 	bl	800714c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0208 	orr.w	r2, r2, #8
 8006c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0204 	bic.w	r2, r2, #4
 8006c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69d9      	ldr	r1, [r3, #28]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	61da      	str	r2, [r3, #28]
      break;
 8006c54:	e023      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fadf 	bl	8007220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69d9      	ldr	r1, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	021a      	lsls	r2, r3, #8
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	61da      	str	r2, [r3, #28]
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIM_ConfigClockSource+0x1c>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e0b4      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x186>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d04:	d03e      	beq.n	8006d84 <HAL_TIM_ConfigClockSource+0xd4>
 8006d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d0a:	f200 8087 	bhi.w	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d12:	f000 8086 	beq.w	8006e22 <HAL_TIM_ConfigClockSource+0x172>
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d1a:	d87f      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b70      	cmp	r3, #112	@ 0x70
 8006d1e:	d01a      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0xa6>
 8006d20:	2b70      	cmp	r3, #112	@ 0x70
 8006d22:	d87b      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b60      	cmp	r3, #96	@ 0x60
 8006d26:	d050      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x11a>
 8006d28:	2b60      	cmp	r3, #96	@ 0x60
 8006d2a:	d877      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b50      	cmp	r3, #80	@ 0x50
 8006d2e:	d03c      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0xfa>
 8006d30:	2b50      	cmp	r3, #80	@ 0x50
 8006d32:	d873      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b40      	cmp	r3, #64	@ 0x40
 8006d36:	d058      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x13a>
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d86f      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d3c:	2b30      	cmp	r3, #48	@ 0x30
 8006d3e:	d064      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x15a>
 8006d40:	2b30      	cmp	r3, #48	@ 0x30
 8006d42:	d86b      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d060      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x15a>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d867      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d05c      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x15a>
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d05a      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x15a>
 8006d54:	e062      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d66:	f000 fb25 	bl	80073b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	609a      	str	r2, [r3, #8]
      break;
 8006d82:	e04f      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d94:	f000 fb0e 	bl	80073b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006da6:	609a      	str	r2, [r3, #8]
      break;
 8006da8:	e03c      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db6:	461a      	mov	r2, r3
 8006db8:	f000 fa82 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2150      	movs	r1, #80	@ 0x50
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fadb 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006dc8:	e02c      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f000 faa1 	bl	800731e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2160      	movs	r1, #96	@ 0x60
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 facb 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006de8:	e01c      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df6:	461a      	mov	r2, r3
 8006df8:	f000 fa62 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2140      	movs	r1, #64	@ 0x40
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fabb 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006e08:	e00c      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f000 fab2 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006e1a:	e003      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e20:	e000      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3a      	ldr	r2, [pc, #232]	@ (8006f8c <TIM_Base_SetConfig+0xfc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00f      	beq.n	8006ec8 <TIM_Base_SetConfig+0x38>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eae:	d00b      	beq.n	8006ec8 <TIM_Base_SetConfig+0x38>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a37      	ldr	r2, [pc, #220]	@ (8006f90 <TIM_Base_SetConfig+0x100>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d007      	beq.n	8006ec8 <TIM_Base_SetConfig+0x38>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a36      	ldr	r2, [pc, #216]	@ (8006f94 <TIM_Base_SetConfig+0x104>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d003      	beq.n	8006ec8 <TIM_Base_SetConfig+0x38>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a35      	ldr	r2, [pc, #212]	@ (8006f98 <TIM_Base_SetConfig+0x108>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d108      	bne.n	8006eda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2b      	ldr	r2, [pc, #172]	@ (8006f8c <TIM_Base_SetConfig+0xfc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d01b      	beq.n	8006f1a <TIM_Base_SetConfig+0x8a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee8:	d017      	beq.n	8006f1a <TIM_Base_SetConfig+0x8a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a28      	ldr	r2, [pc, #160]	@ (8006f90 <TIM_Base_SetConfig+0x100>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <TIM_Base_SetConfig+0x8a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a27      	ldr	r2, [pc, #156]	@ (8006f94 <TIM_Base_SetConfig+0x104>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00f      	beq.n	8006f1a <TIM_Base_SetConfig+0x8a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a26      	ldr	r2, [pc, #152]	@ (8006f98 <TIM_Base_SetConfig+0x108>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00b      	beq.n	8006f1a <TIM_Base_SetConfig+0x8a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a25      	ldr	r2, [pc, #148]	@ (8006f9c <TIM_Base_SetConfig+0x10c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d007      	beq.n	8006f1a <TIM_Base_SetConfig+0x8a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a24      	ldr	r2, [pc, #144]	@ (8006fa0 <TIM_Base_SetConfig+0x110>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_Base_SetConfig+0x8a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a23      	ldr	r2, [pc, #140]	@ (8006fa4 <TIM_Base_SetConfig+0x114>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d108      	bne.n	8006f2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a0e      	ldr	r2, [pc, #56]	@ (8006f8c <TIM_Base_SetConfig+0xfc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d103      	bne.n	8006f60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d105      	bne.n	8006f7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40014400 	.word	0x40014400
 8006fa4:	40014800 	.word	0x40014800

08006fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	f023 0201 	bic.w	r2, r3, #1
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f023 0302 	bic.w	r3, r3, #2
 8006ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8007070 <TIM_OC1_SetConfig+0xc8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d10c      	bne.n	800701e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0308 	bic.w	r3, r3, #8
 800700a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 0304 	bic.w	r3, r3, #4
 800701c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a13      	ldr	r2, [pc, #76]	@ (8007070 <TIM_OC1_SetConfig+0xc8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d111      	bne.n	800704a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800702c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	621a      	str	r2, [r3, #32]
}
 8007064:	bf00      	nop
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	40010000 	.word	0x40010000

08007074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	f023 0210 	bic.w	r2, r3, #16
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f023 0320 	bic.w	r3, r3, #32
 80070be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007148 <TIM_OC2_SetConfig+0xd4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d10d      	bne.n	80070f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <TIM_OC2_SetConfig+0xd4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d113      	bne.n	8007120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000

0800714c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a1d      	ldr	r2, [pc, #116]	@ (800721c <TIM_OC3_SetConfig+0xd0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10d      	bne.n	80071c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a14      	ldr	r2, [pc, #80]	@ (800721c <TIM_OC3_SetConfig+0xd0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d113      	bne.n	80071f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	40010000 	.word	0x40010000

08007220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800726a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a10      	ldr	r2, [pc, #64]	@ (80072bc <TIM_OC4_SetConfig+0x9c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d109      	bne.n	8007294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	019b      	lsls	r3, r3, #6
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40010000 	.word	0x40010000

080072c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0201 	bic.w	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f023 030a 	bic.w	r3, r3, #10
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731e:	b480      	push	{r7}
 8007320:	b087      	sub	sp, #28
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f023 0210 	bic.w	r2, r3, #16
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	031b      	lsls	r3, r3, #12
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800735a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	f043 0307 	orr.w	r3, r3, #7
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	609a      	str	r2, [r3, #8]
}
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	021a      	lsls	r2, r3, #8
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	609a      	str	r2, [r3, #8]
}
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2201      	movs	r2, #1
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1a      	ldr	r2, [r3, #32]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	43db      	mvns	r3, r3
 8007416:	401a      	ands	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
}
 8007432:	bf00      	nop
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007454:	2302      	movs	r3, #2
 8007456:	e050      	b.n	80074fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1c      	ldr	r2, [pc, #112]	@ (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d018      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a4:	d013      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a18      	ldr	r2, [pc, #96]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00e      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a16      	ldr	r2, [pc, #88]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d009      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a15      	ldr	r2, [pc, #84]	@ (8007514 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a13      	ldr	r2, [pc, #76]	@ (8007518 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d10c      	bne.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40010000 	.word	0x40010000
 800750c:	40000400 	.word	0x40000400
 8007510:	40000800 	.word	0x40000800
 8007514:	40000c00 	.word	0x40000c00
 8007518:	40014000 	.word	0x40014000

0800751c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007544:	b084      	sub	sp, #16
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	f107 001c 	add.w	r0, r7, #28
 8007552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007556:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800755a:	2b01      	cmp	r3, #1
 800755c:	d123      	bne.n	80075a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007562:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007586:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800758a:	2b01      	cmp	r3, #1
 800758c:	d105      	bne.n	800759a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 fae8 	bl	8008b70 <USB_CoreReset>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	e01b      	b.n	80075de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 fadc 	bl	8008b70 <USB_CoreReset>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80075d0:	e005      	b.n	80075de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075de:	7fbb      	ldrb	r3, [r7, #30]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d10b      	bne.n	80075fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f043 0206 	orr.w	r2, r3, #6
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f043 0220 	orr.w	r2, r3, #32
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007608:	b004      	add	sp, #16
 800760a:	4770      	bx	lr

0800760c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d165      	bne.n	80076ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4a41      	ldr	r2, [pc, #260]	@ (8007728 <USB_SetTurnaroundTime+0x11c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d906      	bls.n	8007636 <USB_SetTurnaroundTime+0x2a>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4a40      	ldr	r2, [pc, #256]	@ (800772c <USB_SetTurnaroundTime+0x120>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d202      	bcs.n	8007636 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007630:	230f      	movs	r3, #15
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e062      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	4a3c      	ldr	r2, [pc, #240]	@ (800772c <USB_SetTurnaroundTime+0x120>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d306      	bcc.n	800764c <USB_SetTurnaroundTime+0x40>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4a3b      	ldr	r2, [pc, #236]	@ (8007730 <USB_SetTurnaroundTime+0x124>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d202      	bcs.n	800764c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007646:	230e      	movs	r3, #14
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e057      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4a38      	ldr	r2, [pc, #224]	@ (8007730 <USB_SetTurnaroundTime+0x124>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d306      	bcc.n	8007662 <USB_SetTurnaroundTime+0x56>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4a37      	ldr	r2, [pc, #220]	@ (8007734 <USB_SetTurnaroundTime+0x128>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d202      	bcs.n	8007662 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800765c:	230d      	movs	r3, #13
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e04c      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4a33      	ldr	r2, [pc, #204]	@ (8007734 <USB_SetTurnaroundTime+0x128>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d306      	bcc.n	8007678 <USB_SetTurnaroundTime+0x6c>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4a32      	ldr	r2, [pc, #200]	@ (8007738 <USB_SetTurnaroundTime+0x12c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d802      	bhi.n	8007678 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007672:	230c      	movs	r3, #12
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e041      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4a2f      	ldr	r2, [pc, #188]	@ (8007738 <USB_SetTurnaroundTime+0x12c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d906      	bls.n	800768e <USB_SetTurnaroundTime+0x82>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4a2e      	ldr	r2, [pc, #184]	@ (800773c <USB_SetTurnaroundTime+0x130>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d802      	bhi.n	800768e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007688:	230b      	movs	r3, #11
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e036      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4a2a      	ldr	r2, [pc, #168]	@ (800773c <USB_SetTurnaroundTime+0x130>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d906      	bls.n	80076a4 <USB_SetTurnaroundTime+0x98>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4a29      	ldr	r2, [pc, #164]	@ (8007740 <USB_SetTurnaroundTime+0x134>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d802      	bhi.n	80076a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800769e:	230a      	movs	r3, #10
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	e02b      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4a26      	ldr	r2, [pc, #152]	@ (8007740 <USB_SetTurnaroundTime+0x134>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d906      	bls.n	80076ba <USB_SetTurnaroundTime+0xae>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4a25      	ldr	r2, [pc, #148]	@ (8007744 <USB_SetTurnaroundTime+0x138>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d202      	bcs.n	80076ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80076b4:	2309      	movs	r3, #9
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	e020      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	4a21      	ldr	r2, [pc, #132]	@ (8007744 <USB_SetTurnaroundTime+0x138>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d306      	bcc.n	80076d0 <USB_SetTurnaroundTime+0xc4>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4a20      	ldr	r2, [pc, #128]	@ (8007748 <USB_SetTurnaroundTime+0x13c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d802      	bhi.n	80076d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80076ca:	2308      	movs	r3, #8
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	e015      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007748 <USB_SetTurnaroundTime+0x13c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d906      	bls.n	80076e6 <USB_SetTurnaroundTime+0xda>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4a1c      	ldr	r2, [pc, #112]	@ (800774c <USB_SetTurnaroundTime+0x140>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d202      	bcs.n	80076e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80076e0:	2307      	movs	r3, #7
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	e00a      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80076e6:	2306      	movs	r3, #6
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e007      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80076ec:	79fb      	ldrb	r3, [r7, #7]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80076f2:	2309      	movs	r3, #9
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e001      	b.n	80076fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80076f8:	2309      	movs	r3, #9
 80076fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	029b      	lsls	r3, r3, #10
 8007710:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007714:	431a      	orrs	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	00d8acbf 	.word	0x00d8acbf
 800772c:	00e4e1c0 	.word	0x00e4e1c0
 8007730:	00f42400 	.word	0x00f42400
 8007734:	01067380 	.word	0x01067380
 8007738:	011a499f 	.word	0x011a499f
 800773c:	01312cff 	.word	0x01312cff
 8007740:	014ca43f 	.word	0x014ca43f
 8007744:	016e3600 	.word	0x016e3600
 8007748:	01a6ab1f 	.word	0x01a6ab1f
 800774c:	01e84800 	.word	0x01e84800

08007750 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f043 0201 	orr.w	r2, r3, #1
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f023 0201 	bic.w	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d115      	bne.n	80077e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077c2:	200a      	movs	r0, #10
 80077c4:	f7fa f8e6 	bl	8001994 <HAL_Delay>
      ms += 10U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	330a      	adds	r3, #10
 80077cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 f93f 	bl	8008a52 <USB_GetMode>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d01e      	beq.n	8007818 <USB_SetCurrentMode+0x84>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80077de:	d9f0      	bls.n	80077c2 <USB_SetCurrentMode+0x2e>
 80077e0:	e01a      	b.n	8007818 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d115      	bne.n	8007814 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077f4:	200a      	movs	r0, #10
 80077f6:	f7fa f8cd 	bl	8001994 <HAL_Delay>
      ms += 10U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	330a      	adds	r3, #10
 80077fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 f926 	bl	8008a52 <USB_GetMode>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <USB_SetCurrentMode+0x84>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007810:	d9f0      	bls.n	80077f4 <USB_SetCurrentMode+0x60>
 8007812:	e001      	b.n	8007818 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e005      	b.n	8007824 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2bc8      	cmp	r3, #200	@ 0xc8
 800781c:	d101      	bne.n	8007822 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800782c:	b084      	sub	sp, #16
 800782e:	b580      	push	{r7, lr}
 8007830:	b086      	sub	sp, #24
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800783a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	e009      	b.n	8007860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	3340      	adds	r3, #64	@ 0x40
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	2200      	movs	r2, #0
 8007858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	3301      	adds	r3, #1
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b0e      	cmp	r3, #14
 8007864:	d9f2      	bls.n	800784c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007866:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800786a:	2b00      	cmp	r3, #0
 800786c:	d11c      	bne.n	80078a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007886:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007892:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80078a6:	e00b      	b.n	80078c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078c6:	461a      	mov	r2, r3
 80078c8:	2300      	movs	r3, #0
 80078ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d10d      	bne.n	80078f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d104      	bne.n	80078e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078dc:	2100      	movs	r1, #0
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f968 	bl	8007bb4 <USB_SetDevSpeed>
 80078e4:	e008      	b.n	80078f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078e6:	2101      	movs	r1, #1
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f963 	bl	8007bb4 <USB_SetDevSpeed>
 80078ee:	e003      	b.n	80078f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078f0:	2103      	movs	r1, #3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f95e 	bl	8007bb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078f8:	2110      	movs	r1, #16
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f8fa 	bl	8007af4 <USB_FlushTxFifo>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f924 	bl	8007b58 <USB_FlushRxFifo>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007920:	461a      	mov	r2, r3
 8007922:	2300      	movs	r3, #0
 8007924:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792c:	461a      	mov	r2, r3
 800792e:	2300      	movs	r3, #0
 8007930:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007938:	461a      	mov	r2, r3
 800793a:	2300      	movs	r3, #0
 800793c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	e043      	b.n	80079cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800795a:	d118      	bne.n	800798e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796e:	461a      	mov	r2, r3
 8007970:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	e013      	b.n	80079a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007984:	461a      	mov	r2, r3
 8007986:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	e008      	b.n	80079a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799a:	461a      	mov	r2, r3
 800799c:	2300      	movs	r3, #0
 800799e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ac:	461a      	mov	r2, r3
 80079ae:	2300      	movs	r3, #0
 80079b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079be:	461a      	mov	r2, r3
 80079c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3301      	adds	r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079d0:	461a      	mov	r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d3b5      	bcc.n	8007944 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d8:	2300      	movs	r3, #0
 80079da:	613b      	str	r3, [r7, #16]
 80079dc:	e043      	b.n	8007a66 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079f4:	d118      	bne.n	8007a28 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	e013      	b.n	8007a3a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e008      	b.n	8007a3a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a34:	461a      	mov	r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a46:	461a      	mov	r2, r3
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3301      	adds	r3, #1
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d3b5      	bcc.n	80079de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f043 0210 	orr.w	r2, r3, #16
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699a      	ldr	r2, [r3, #24]
 8007aac:	4b10      	ldr	r3, [pc, #64]	@ (8007af0 <USB_DevInit+0x2c4>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ab4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f043 0208 	orr.w	r2, r3, #8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ac8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d107      	bne.n	8007ae0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ad8:	f043 0304 	orr.w	r3, r3, #4
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aec:	b004      	add	sp, #16
 8007aee:	4770      	bx	lr
 8007af0:	803c3800 	.word	0x803c3800

08007af4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3301      	adds	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b0e:	d901      	bls.n	8007b14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e01b      	b.n	8007b4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	daf2      	bge.n	8007b02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	019b      	lsls	r3, r3, #6
 8007b24:	f043 0220 	orr.w	r2, r3, #32
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b38:	d901      	bls.n	8007b3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e006      	b.n	8007b4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b20      	cmp	r3, #32
 8007b48:	d0f0      	beq.n	8007b2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3301      	adds	r3, #1
 8007b68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b70:	d901      	bls.n	8007b76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e018      	b.n	8007ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	daf2      	bge.n	8007b64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2210      	movs	r2, #16
 8007b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b94:	d901      	bls.n	8007b9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e006      	b.n	8007ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f003 0310 	and.w	r3, r3, #16
 8007ba2:	2b10      	cmp	r3, #16
 8007ba4:	d0f0      	beq.n	8007b88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	68f9      	ldr	r1, [r7, #12]
 8007bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b087      	sub	sp, #28
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 0306 	and.w	r3, r3, #6
 8007bfe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c06:	2300      	movs	r3, #0
 8007c08:	75fb      	strb	r3, [r7, #23]
 8007c0a:	e00a      	b.n	8007c22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d002      	beq.n	8007c18 <USB_GetDevSpeed+0x32>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b06      	cmp	r3, #6
 8007c16:	d102      	bne.n	8007c1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	75fb      	strb	r3, [r7, #23]
 8007c1c:	e001      	b.n	8007c22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c1e:	230f      	movs	r3, #15
 8007c20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d13a      	bne.n	8007cc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c52:	69da      	ldr	r2, [r3, #28]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	68f9      	ldr	r1, [r7, #12]
 8007c66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d155      	bne.n	8007d30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	791b      	ldrb	r3, [r3, #4]
 8007c9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ca0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	059b      	lsls	r3, r3, #22
 8007ca6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	e036      	b.n	8007d30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc8:	69da      	ldr	r2, [r3, #28]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd8:	041b      	lsls	r3, r3, #16
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d11a      	bne.n	8007d30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	791b      	ldrb	r3, [r3, #4]
 8007d14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d16:	430b      	orrs	r3, r1
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
	...

08007d40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d161      	bne.n	8007e20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d72:	d11f      	bne.n	8007db4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007db2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dde:	69da      	ldr	r2, [r3, #28]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f003 030f 	and.w	r3, r3, #15
 8007de8:	2101      	movs	r1, #1
 8007dea:	fa01 f303 	lsl.w	r3, r1, r3
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	43db      	mvns	r3, r3
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007df8:	4013      	ands	r3, r2
 8007dfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	0159      	lsls	r1, r3, #5
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	440b      	add	r3, r1
 8007e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e16:	4619      	mov	r1, r3
 8007e18:	4b35      	ldr	r3, [pc, #212]	@ (8007ef0 <USB_DeactivateEndpoint+0x1b0>)
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	600b      	str	r3, [r1, #0]
 8007e1e:	e060      	b.n	8007ee2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e36:	d11f      	bne.n	8007e78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	0151      	lsls	r1, r2, #5
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	440a      	add	r2, r1
 8007e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	0151      	lsls	r1, r2, #5
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	440a      	add	r2, r1
 8007e6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	2101      	movs	r1, #1
 8007e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	43db      	mvns	r3, r3
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e98:	4013      	ands	r3, r2
 8007e9a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea2:	69da      	ldr	r2, [r3, #28]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	2101      	movs	r1, #1
 8007eae:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	43db      	mvns	r3, r3
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	0159      	lsls	r1, r3, #5
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	440b      	add	r3, r1
 8007ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eda:	4619      	mov	r1, r3
 8007edc:	4b05      	ldr	r3, [pc, #20]	@ (8007ef4 <USB_DeactivateEndpoint+0x1b4>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	ec337800 	.word	0xec337800
 8007ef4:	eff37800 	.word	0xeff37800

08007ef8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	@ 0x28
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	f040 817f 	bne.w	8008218 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d132      	bne.n	8007f88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	0151      	lsls	r1, r2, #5
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f80:	0cdb      	lsrs	r3, r3, #19
 8007f82:	04db      	lsls	r3, r3, #19
 8007f84:	6113      	str	r3, [r2, #16]
 8007f86:	e097      	b.n	80080b8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fa2:	0cdb      	lsrs	r3, r3, #19
 8007fa4:	04db      	lsls	r3, r3, #19
 8007fa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fc2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007fc6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007fca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d11a      	bne.n	8008008 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	691a      	ldr	r2, [r3, #16]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d903      	bls.n	8007fe6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008000:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008004:	6113      	str	r3, [r2, #16]
 8008006:	e044      	b.n	8008092 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	4413      	add	r3, r2
 8008012:	1e5a      	subs	r2, r3, #1
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	fbb2 f3f3 	udiv	r3, r2, r3
 800801c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	8afb      	ldrh	r3, [r7, #22]
 800802e:	04d9      	lsls	r1, r3, #19
 8008030:	4ba4      	ldr	r3, [pc, #656]	@ (80082c4 <USB_EPStartXfer+0x3cc>)
 8008032:	400b      	ands	r3, r1
 8008034:	69b9      	ldr	r1, [r7, #24]
 8008036:	0148      	lsls	r0, r1, #5
 8008038:	69f9      	ldr	r1, [r7, #28]
 800803a:	4401      	add	r1, r0
 800803c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008040:	4313      	orrs	r3, r2
 8008042:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	791b      	ldrb	r3, [r3, #4]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d122      	bne.n	8008092 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	4413      	add	r3, r2
 8008054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	0151      	lsls	r1, r2, #5
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	440a      	add	r2, r1
 8008062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008066:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800806a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008078:	691a      	ldr	r2, [r3, #16]
 800807a:	8afb      	ldrh	r3, [r7, #22]
 800807c:	075b      	lsls	r3, r3, #29
 800807e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008082:	69b9      	ldr	r1, [r7, #24]
 8008084:	0148      	lsls	r0, r1, #5
 8008086:	69f9      	ldr	r1, [r7, #28]
 8008088:	4401      	add	r1, r0
 800808a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800808e:	4313      	orrs	r3, r2
 8008090:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809e:	691a      	ldr	r2, [r3, #16]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080a8:	69b9      	ldr	r1, [r7, #24]
 80080aa:	0148      	lsls	r0, r1, #5
 80080ac:	69f9      	ldr	r1, [r7, #28]
 80080ae:	4401      	add	r1, r0
 80080b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080b4:	4313      	orrs	r3, r2
 80080b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d14b      	bne.n	8008156 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d2:	461a      	mov	r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d128      	bne.n	8008134 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d110      	bne.n	8008114 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800810c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	e00f      	b.n	8008134 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	0151      	lsls	r1, r2, #5
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	440a      	add	r2, r1
 800812a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800812e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008132:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	0151      	lsls	r1, r2, #5
 8008146:	69fa      	ldr	r2, [r7, #28]
 8008148:	440a      	add	r2, r1
 800814a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800814e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	e166      	b.n	8008424 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	0151      	lsls	r1, r2, #5
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	440a      	add	r2, r1
 800816c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008170:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008174:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	791b      	ldrb	r3, [r3, #4]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d015      	beq.n	80081aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 814e 	beq.w	8008424 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800818e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	2101      	movs	r1, #1
 800819a:	fa01 f303 	lsl.w	r3, r1, r3
 800819e:	69f9      	ldr	r1, [r7, #28]
 80081a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081a4:	4313      	orrs	r3, r2
 80081a6:	634b      	str	r3, [r1, #52]	@ 0x34
 80081a8:	e13c      	b.n	8008424 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d110      	bne.n	80081dc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	e00f      	b.n	80081fc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	68d9      	ldr	r1, [r3, #12]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	781a      	ldrb	r2, [r3, #0]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	b298      	uxth	r0, r3
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	4603      	mov	r3, r0
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 f9b9 	bl	8008588 <USB_WritePacket>
 8008216:	e105      	b.n	8008424 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	0151      	lsls	r1, r2, #5
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	440a      	add	r2, r1
 800822e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008232:	0cdb      	lsrs	r3, r3, #19
 8008234:	04db      	lsls	r3, r3, #19
 8008236:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	0151      	lsls	r1, r2, #5
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	440a      	add	r2, r1
 800824e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008252:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008256:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800825a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d132      	bne.n	80082c8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008290:	69b9      	ldr	r1, [r7, #24]
 8008292:	0148      	lsls	r0, r1, #5
 8008294:	69f9      	ldr	r1, [r7, #28]
 8008296:	4401      	add	r1, r0
 8008298:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800829c:	4313      	orrs	r3, r2
 800829e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082be:	6113      	str	r3, [r2, #16]
 80082c0:	e062      	b.n	8008388 <USB_EPStartXfer+0x490>
 80082c2:	bf00      	nop
 80082c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d123      	bne.n	8008318 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082e6:	69b9      	ldr	r1, [r7, #24]
 80082e8:	0148      	lsls	r0, r1, #5
 80082ea:	69f9      	ldr	r1, [r7, #28]
 80082ec:	4401      	add	r1, r0
 80082ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082f2:	4313      	orrs	r3, r2
 80082f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	0151      	lsls	r1, r2, #5
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	440a      	add	r2, r1
 800830c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008310:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008314:	6113      	str	r3, [r2, #16]
 8008316:	e037      	b.n	8008388 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	4413      	add	r3, r2
 8008322:	1e5a      	subs	r2, r3, #1
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	fbb2 f3f3 	udiv	r3, r2, r3
 800832c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	8afa      	ldrh	r2, [r7, #22]
 8008334:	fb03 f202 	mul.w	r2, r3, r2
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008348:	691a      	ldr	r2, [r3, #16]
 800834a:	8afb      	ldrh	r3, [r7, #22]
 800834c:	04d9      	lsls	r1, r3, #19
 800834e:	4b38      	ldr	r3, [pc, #224]	@ (8008430 <USB_EPStartXfer+0x538>)
 8008350:	400b      	ands	r3, r1
 8008352:	69b9      	ldr	r1, [r7, #24]
 8008354:	0148      	lsls	r0, r1, #5
 8008356:	69f9      	ldr	r1, [r7, #28]
 8008358:	4401      	add	r1, r0
 800835a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800835e:	4313      	orrs	r3, r2
 8008360:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008378:	69b9      	ldr	r1, [r7, #24]
 800837a:	0148      	lsls	r0, r1, #5
 800837c:	69f9      	ldr	r1, [r7, #28]
 800837e:	4401      	add	r1, r0
 8008380:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008384:	4313      	orrs	r3, r2
 8008386:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d10d      	bne.n	80083aa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d009      	beq.n	80083aa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	68d9      	ldr	r1, [r3, #12]
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a6:	460a      	mov	r2, r1
 80083a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	791b      	ldrb	r3, [r3, #4]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d128      	bne.n	8008404 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d110      	bne.n	80083e4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	0151      	lsls	r1, r2, #5
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	440a      	add	r2, r1
 80083d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	e00f      	b.n	8008404 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	0151      	lsls	r1, r2, #5
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	440a      	add	r2, r1
 80083fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008402:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	0151      	lsls	r1, r2, #5
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	440a      	add	r2, r1
 800841a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800841e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3720      	adds	r7, #32
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	1ff80000 	.word	0x1ff80000

08008434 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	785b      	ldrb	r3, [r3, #1]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d14a      	bne.n	80084e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008466:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800846a:	f040 8086 	bne.w	800857a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	7812      	ldrb	r2, [r2, #0]
 8008482:	0151      	lsls	r1, r2, #5
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	440a      	add	r2, r1
 8008488:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800848c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008490:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	7812      	ldrb	r2, [r2, #0]
 80084a6:	0151      	lsls	r1, r2, #5
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	440a      	add	r2, r1
 80084ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3301      	adds	r3, #1
 80084ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d902      	bls.n	80084cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]
          break;
 80084ca:	e056      	b.n	800857a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084e4:	d0e7      	beq.n	80084b6 <USB_EPStopXfer+0x82>
 80084e6:	e048      	b.n	800857a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008500:	d13b      	bne.n	800857a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	7812      	ldrb	r2, [r2, #0]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008520:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008524:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	7812      	ldrb	r2, [r2, #0]
 800853a:	0151      	lsls	r1, r2, #5
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	440a      	add	r2, r1
 8008540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008544:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008548:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3301      	adds	r3, #1
 800854e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008556:	4293      	cmp	r3, r2
 8008558:	d902      	bls.n	8008560 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	75fb      	strb	r3, [r7, #23]
          break;
 800855e:	e00c      	b.n	800857a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008578:	d0e7      	beq.n	800854a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800857a:	7dfb      	ldrb	r3, [r7, #23]
}
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008588:	b480      	push	{r7}
 800858a:	b089      	sub	sp, #36	@ 0x24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4611      	mov	r1, r2
 8008594:	461a      	mov	r2, r3
 8008596:	460b      	mov	r3, r1
 8008598:	71fb      	strb	r3, [r7, #7]
 800859a:	4613      	mov	r3, r2
 800859c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d123      	bne.n	80085f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085ae:	88bb      	ldrh	r3, [r7, #4]
 80085b0:	3303      	adds	r3, #3
 80085b2:	089b      	lsrs	r3, r3, #2
 80085b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085b6:	2300      	movs	r3, #0
 80085b8:	61bb      	str	r3, [r7, #24]
 80085ba:	e018      	b.n	80085ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	031a      	lsls	r2, r3, #12
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085c8:	461a      	mov	r2, r3
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	3301      	adds	r3, #1
 80085d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	3301      	adds	r3, #1
 80085da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	3301      	adds	r3, #1
 80085e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	3301      	adds	r3, #1
 80085e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	3301      	adds	r3, #1
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d3e2      	bcc.n	80085bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3724      	adds	r7, #36	@ 0x24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008604:	b480      	push	{r7}
 8008606:	b08b      	sub	sp, #44	@ 0x2c
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4613      	mov	r3, r2
 8008610:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800861a:	88fb      	ldrh	r3, [r7, #6]
 800861c:	089b      	lsrs	r3, r3, #2
 800861e:	b29b      	uxth	r3, r3
 8008620:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	f003 0303 	and.w	r3, r3, #3
 8008628:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800862a:	2300      	movs	r3, #0
 800862c:	623b      	str	r3, [r7, #32]
 800862e:	e014      	b.n	800865a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863a:	601a      	str	r2, [r3, #0]
    pDest++;
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	3301      	adds	r3, #1
 8008640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	3301      	adds	r3, #1
 8008646:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864a:	3301      	adds	r3, #1
 800864c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	3301      	adds	r3, #1
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	3301      	adds	r3, #1
 8008658:	623b      	str	r3, [r7, #32]
 800865a:	6a3a      	ldr	r2, [r7, #32]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	429a      	cmp	r2, r3
 8008660:	d3e6      	bcc.n	8008630 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008662:	8bfb      	ldrh	r3, [r7, #30]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01e      	beq.n	80086a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008672:	461a      	mov	r2, r3
 8008674:	f107 0310 	add.w	r3, r7, #16
 8008678:	6812      	ldr	r2, [r2, #0]
 800867a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	b2da      	uxtb	r2, r3
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	701a      	strb	r2, [r3, #0]
      i++;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	3301      	adds	r3, #1
 8008692:	623b      	str	r3, [r7, #32]
      pDest++;
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	3301      	adds	r3, #1
 8008698:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800869a:	8bfb      	ldrh	r3, [r7, #30]
 800869c:	3b01      	subs	r3, #1
 800869e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086a0:	8bfb      	ldrh	r3, [r7, #30]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1ea      	bne.n	800867c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	372c      	adds	r7, #44	@ 0x2c
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	785b      	ldrb	r3, [r3, #1]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d12c      	bne.n	800872a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	db12      	blt.n	8008708 <USB_EPSetStall+0x54>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00f      	beq.n	8008708 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	0151      	lsls	r1, r2, #5
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	440a      	add	r2, r1
 80086fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008702:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008706:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	0151      	lsls	r1, r2, #5
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	440a      	add	r2, r1
 800871e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008722:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	e02b      	b.n	8008782 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	db12      	blt.n	8008762 <USB_EPSetStall+0xae>
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00f      	beq.n	8008762 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	440a      	add	r2, r1
 8008758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800875c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008760:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	440a      	add	r2, r1
 8008778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800877c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008780:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	785b      	ldrb	r3, [r3, #1]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d128      	bne.n	80087fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	0151      	lsls	r1, r2, #5
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	440a      	add	r2, r1
 80087c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	791b      	ldrb	r3, [r3, #4]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d003      	beq.n	80087dc <USB_EPClearStall+0x4c>
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	791b      	ldrb	r3, [r3, #4]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d138      	bne.n	800884e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	e027      	b.n	800884e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	440a      	add	r2, r1
 8008814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008818:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800881c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	791b      	ldrb	r3, [r3, #4]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d003      	beq.n	800882e <USB_EPClearStall+0x9e>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	791b      	ldrb	r3, [r3, #4]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d10f      	bne.n	800884e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	440a      	add	r2, r1
 8008844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800884c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800887a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800887e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008890:	68f9      	ldr	r1, [r7, #12]
 8008892:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008896:	4313      	orrs	r3, r2
 8008898:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80088c2:	f023 0303 	bic.w	r3, r3, #3
 80088c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088d6:	f023 0302 	bic.w	r3, r3, #2
 80088da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b085      	sub	sp, #20
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008904:	f023 0303 	bic.w	r3, r3, #3
 8008908:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008918:	f043 0302 	orr.w	r3, r3, #2
 800891c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4013      	ands	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008944:	68fb      	ldr	r3, [r7, #12]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008952:	b480      	push	{r7}
 8008954:	b085      	sub	sp, #20
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	4013      	ands	r3, r2
 8008974:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	0c1b      	lsrs	r3, r3, #16
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008986:	b480      	push	{r7}
 8008988:	b085      	sub	sp, #20
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	4013      	ands	r3, r2
 80089a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	b29b      	uxth	r3, r3
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80089ca:	78fb      	ldrb	r3, [r7, #3]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4013      	ands	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089e8:	68bb      	ldr	r3, [r7, #8]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b087      	sub	sp, #28
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a18:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	fa22 f303 	lsr.w	r3, r2, r3
 8008a26:	01db      	lsls	r3, r3, #7
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4013      	ands	r3, r2
 8008a42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a44:	68bb      	ldr	r3, [r7, #8]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b085      	sub	sp, #20
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008a8c:	f023 0307 	bic.w	r3, r3, #7
 8008a90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008aa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	460b      	mov	r3, r1
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	333c      	adds	r3, #60	@ 0x3c
 8008aca:	3304      	adds	r3, #4
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4a26      	ldr	r2, [pc, #152]	@ (8008b6c <USB_EP0_OutStart+0xb8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d90a      	bls.n	8008aee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ae8:	d101      	bne.n	8008aee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e037      	b.n	8008b5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af4:	461a      	mov	r2, r3
 8008af6:	2300      	movs	r3, #0
 8008af8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b1c:	f043 0318 	orr.w	r3, r3, #24
 8008b20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b30:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008b34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d10f      	bne.n	8008b5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b56:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	4f54300a 	.word	0x4f54300a

08008b70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b88:	d901      	bls.n	8008b8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e01b      	b.n	8008bc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	daf2      	bge.n	8008b7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f043 0201 	orr.w	r2, r3, #1
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bb2:	d901      	bls.n	8008bb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e006      	b.n	8008bc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d0f0      	beq.n	8008ba6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f103 0208 	add.w	r2, r3, #8
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bea:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f103 0208 	add.w	r2, r3, #8
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f103 0208 	add.w	r2, r3, #8
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d103      	bne.n	8008c4c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	e00c      	b.n	8008c66 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e002      	b.n	8008c5a <vListInsert+0x2e>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d2f6      	bcs.n	8008c54 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	601a      	str	r2, [r3, #0]
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6892      	ldr	r2, [r2, #8]
 8008cb4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6852      	ldr	r2, [r2, #4]
 8008cbe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d103      	bne.n	8008cd2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	1e5a      	subs	r2, r3, #1
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10b      	bne.n	8008d24 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008d1e:	bf00      	nop
 8008d20:	bf00      	nop
 8008d22:	e7fd      	b.n	8008d20 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d05d      	beq.n	8008de6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d059      	beq.n	8008de6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d000      	beq.n	8008d46 <xQueueGenericReset+0x52>
 8008d44:	2101      	movs	r1, #1
 8008d46:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d14c      	bne.n	8008de6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8008d4c:	f002 fb06 	bl	800b35c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d58:	6939      	ldr	r1, [r7, #16]
 8008d5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d5c:	fb01 f303 	mul.w	r3, r1, r3
 8008d60:	441a      	add	r2, r3
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	6939      	ldr	r1, [r7, #16]
 8008d80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d82:	fb01 f303 	mul.w	r3, r1, r3
 8008d86:	441a      	add	r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	22ff      	movs	r2, #255	@ 0xff
 8008d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	22ff      	movs	r2, #255	@ 0xff
 8008d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d114      	bne.n	8008dcc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01a      	beq.n	8008de0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3310      	adds	r3, #16
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fa54 	bl	800a25c <xTaskRemoveFromEventList>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d012      	beq.n	8008de0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008dba:	4b16      	ldr	r3, [pc, #88]	@ (8008e14 <xQueueGenericReset+0x120>)
 8008dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	e009      	b.n	8008de0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	3310      	adds	r3, #16
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff fefe 	bl	8008bd2 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3324      	adds	r3, #36	@ 0x24
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff fef9 	bl	8008bd2 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008de0:	f002 faee 	bl	800b3c0 <vPortExitCritical>
 8008de4:	e001      	b.n	8008dea <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10b      	bne.n	8008e08 <xQueueGenericReset+0x114>
        __asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60bb      	str	r3, [r7, #8]
    }
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8008e08:	697b      	ldr	r3, [r7, #20]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	e000ed04 	.word	0xe000ed04

08008e18 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	@ 0x28
 8008e1c:	af02      	add	r7, sp, #8
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d02e      	beq.n	8008e8e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008e30:	2100      	movs	r1, #0
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	fba3 2302 	umull	r2, r3, r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d000      	beq.n	8008e40 <xQueueGenericCreate+0x28>
 8008e3e:	2101      	movs	r1, #1
 8008e40:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d123      	bne.n	8008e8e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008e4e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008e52:	d81c      	bhi.n	8008e8e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	fb02 f303 	mul.w	r3, r2, r3
 8008e5c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	3350      	adds	r3, #80	@ 0x50
 8008e62:	4618      	mov	r0, r3
 8008e64:	f002 fb62 	bl	800b52c <pvPortMalloc>
 8008e68:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01d      	beq.n	8008eac <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	3350      	adds	r3, #80	@ 0x50
 8008e78:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e7a:	79fa      	ldrb	r2, [r7, #7]
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 f815 	bl	8008eb6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008e8c:	e00e      	b.n	8008eac <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10b      	bne.n	8008eac <xQueueGenericCreate+0x94>
        __asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	613b      	str	r3, [r7, #16]
    }
 8008ea6:	bf00      	nop
 8008ea8:	bf00      	nop
 8008eaa:	e7fd      	b.n	8008ea8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008eac:	69fb      	ldr	r3, [r7, #28]
    }
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3720      	adds	r7, #32
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
 8008ec2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d103      	bne.n	8008ed2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e002      	b.n	8008ed8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	69b8      	ldr	r0, [r7, #24]
 8008ee8:	f7ff ff04 	bl	8008cf4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2100      	movs	r1, #0
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f81c 	bl	8008f60 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	617b      	str	r3, [r7, #20]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6939      	ldr	r1, [r7, #16]
 8008f48:	6978      	ldr	r0, [r7, #20]
 8008f4a:	f7ff ff65 	bl	8008e18 <xQueueGenericCreate>
 8008f4e:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff ffd3 	bl	8008efc <prvInitialiseMutex>

        return xNewQueue;
 8008f56:	68fb      	ldr	r3, [r7, #12]
    }
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08e      	sub	sp, #56	@ 0x38
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8008f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10b      	bne.n	8008f94 <xQueueGenericSend+0x34>
        __asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	e7fd      	b.n	8008f90 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d103      	bne.n	8008fa2 <xQueueGenericSend+0x42>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <xQueueGenericSend+0x46>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <xQueueGenericSend+0x48>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10b      	bne.n	8008fc4 <xQueueGenericSend+0x64>
        __asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008fbe:	bf00      	nop
 8008fc0:	bf00      	nop
 8008fc2:	e7fd      	b.n	8008fc0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d103      	bne.n	8008fd2 <xQueueGenericSend+0x72>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d101      	bne.n	8008fd6 <xQueueGenericSend+0x76>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <xQueueGenericSend+0x78>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10b      	bne.n	8008ff4 <xQueueGenericSend+0x94>
        __asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	623b      	str	r3, [r7, #32]
    }
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	e7fd      	b.n	8008ff0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ff4:	f001 fb46 	bl	800a684 <xTaskGetSchedulerState>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <xQueueGenericSend+0xa4>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <xQueueGenericSend+0xa8>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <xQueueGenericSend+0xaa>
 8009008:	2300      	movs	r3, #0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <xQueueGenericSend+0xc6>
        __asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	61fb      	str	r3, [r7, #28]
    }
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	e7fd      	b.n	8009022 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009026:	f002 f999 	bl	800b35c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800902e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009032:	429a      	cmp	r2, r3
 8009034:	d302      	bcc.n	800903c <xQueueGenericSend+0xdc>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b02      	cmp	r3, #2
 800903a:	d129      	bne.n	8009090 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009042:	f000 fa89 	bl	8009558 <prvCopyDataToQueue>
 8009046:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	d010      	beq.n	8009072 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009052:	3324      	adds	r3, #36	@ 0x24
 8009054:	4618      	mov	r0, r3
 8009056:	f001 f901 	bl	800a25c <xTaskRemoveFromEventList>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d013      	beq.n	8009088 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8009060:	4b3f      	ldr	r3, [pc, #252]	@ (8009160 <xQueueGenericSend+0x200>)
 8009062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	e00a      	b.n	8009088 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8009072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d007      	beq.n	8009088 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8009078:	4b39      	ldr	r3, [pc, #228]	@ (8009160 <xQueueGenericSend+0x200>)
 800907a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8009088:	f002 f99a 	bl	800b3c0 <vPortExitCritical>
                return pdPASS;
 800908c:	2301      	movs	r3, #1
 800908e:	e063      	b.n	8009158 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d103      	bne.n	800909e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009096:	f002 f993 	bl	800b3c0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800909a:	2300      	movs	r3, #0
 800909c:	e05c      	b.n	8009158 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800909e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d106      	bne.n	80090b2 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80090a4:	f107 0314 	add.w	r3, r7, #20
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 f9af 	bl	800a40c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80090ae:	2301      	movs	r3, #1
 80090b0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80090b2:	f002 f985 	bl	800b3c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80090b6:	f000 fdd7 	bl	8009c68 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80090ba:	f002 f94f 	bl	800b35c <vPortEnterCritical>
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090c4:	b25b      	sxtb	r3, r3
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d103      	bne.n	80090d4 <xQueueGenericSend+0x174>
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090da:	b25b      	sxtb	r3, r3
 80090dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e0:	d103      	bne.n	80090ea <xQueueGenericSend+0x18a>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090ea:	f002 f969 	bl	800b3c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090ee:	1d3a      	adds	r2, r7, #4
 80090f0:	f107 0314 	add.w	r3, r7, #20
 80090f4:	4611      	mov	r1, r2
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 f99e 	bl	800a438 <xTaskCheckForTimeOut>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d124      	bne.n	800914c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009102:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009104:	f000 fb20 	bl	8009748 <prvIsQueueFull>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d018      	beq.n	8009140 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	3310      	adds	r3, #16
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f001 f834 	bl	800a184 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800911c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800911e:	f000 faab 	bl	8009678 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009122:	f000 fdaf 	bl	8009c84 <xTaskResumeAll>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	f47f af7c 	bne.w	8009026 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800912e:	4b0c      	ldr	r3, [pc, #48]	@ (8009160 <xQueueGenericSend+0x200>)
 8009130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	e772      	b.n	8009026 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009142:	f000 fa99 	bl	8009678 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009146:	f000 fd9d 	bl	8009c84 <xTaskResumeAll>
 800914a:	e76c      	b.n	8009026 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800914c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800914e:	f000 fa93 	bl	8009678 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009152:	f000 fd97 	bl	8009c84 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8009156:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009158:	4618      	mov	r0, r3
 800915a:	3738      	adds	r7, #56	@ 0x38
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08c      	sub	sp, #48	@ 0x30
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009170:	2300      	movs	r3, #0
 8009172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <xQueueReceive+0x32>
        __asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	623b      	str	r3, [r7, #32]
    }
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d103      	bne.n	80091a4 <xQueueReceive+0x40>
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <xQueueReceive+0x44>
 80091a4:	2301      	movs	r3, #1
 80091a6:	e000      	b.n	80091aa <xQueueReceive+0x46>
 80091a8:	2300      	movs	r3, #0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10b      	bne.n	80091c6 <xQueueReceive+0x62>
        __asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	61fb      	str	r3, [r7, #28]
    }
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	e7fd      	b.n	80091c2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091c6:	f001 fa5d 	bl	800a684 <xTaskGetSchedulerState>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <xQueueReceive+0x72>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <xQueueReceive+0x76>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <xQueueReceive+0x78>
 80091da:	2300      	movs	r3, #0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <xQueueReceive+0x94>
        __asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	61bb      	str	r3, [r7, #24]
    }
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80091f8:	f002 f8b0 	bl	800b35c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009200:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01f      	beq.n	8009248 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009208:	68b9      	ldr	r1, [r7, #8]
 800920a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800920c:	f000 fa0e 	bl	800962c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	1e5a      	subs	r2, r3, #1
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00f      	beq.n	8009240 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	3310      	adds	r3, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f001 f819 	bl	800a25c <xTaskRemoveFromEventList>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d007      	beq.n	8009240 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009230:	4b3c      	ldr	r3, [pc, #240]	@ (8009324 <xQueueReceive+0x1c0>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009240:	f002 f8be 	bl	800b3c0 <vPortExitCritical>
                return pdPASS;
 8009244:	2301      	movs	r3, #1
 8009246:	e069      	b.n	800931c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d103      	bne.n	8009256 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800924e:	f002 f8b7 	bl	800b3c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8009252:	2300      	movs	r3, #0
 8009254:	e062      	b.n	800931c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800925c:	f107 0310 	add.w	r3, r7, #16
 8009260:	4618      	mov	r0, r3
 8009262:	f001 f8d3 	bl	800a40c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009266:	2301      	movs	r3, #1
 8009268:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800926a:	f002 f8a9 	bl	800b3c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800926e:	f000 fcfb 	bl	8009c68 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009272:	f002 f873 	bl	800b35c <vPortEnterCritical>
 8009276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800927c:	b25b      	sxtb	r3, r3
 800927e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009282:	d103      	bne.n	800928c <xQueueReceive+0x128>
 8009284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800928c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009292:	b25b      	sxtb	r3, r3
 8009294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009298:	d103      	bne.n	80092a2 <xQueueReceive+0x13e>
 800929a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092a2:	f002 f88d 	bl	800b3c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092a6:	1d3a      	adds	r2, r7, #4
 80092a8:	f107 0310 	add.w	r3, r7, #16
 80092ac:	4611      	mov	r1, r2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f001 f8c2 	bl	800a438 <xTaskCheckForTimeOut>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d123      	bne.n	8009302 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092bc:	f000 fa2e 	bl	800971c <prvIsQueueEmpty>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d017      	beq.n	80092f6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c8:	3324      	adds	r3, #36	@ 0x24
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	4611      	mov	r1, r2
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 ff58 	bl	800a184 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80092d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092d6:	f000 f9cf 	bl	8009678 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80092da:	f000 fcd3 	bl	8009c84 <xTaskResumeAll>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d189      	bne.n	80091f8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80092e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009324 <xQueueReceive+0x1c0>)
 80092e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	e780      	b.n	80091f8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80092f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092f8:	f000 f9be 	bl	8009678 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80092fc:	f000 fcc2 	bl	8009c84 <xTaskResumeAll>
 8009300:	e77a      	b.n	80091f8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009304:	f000 f9b8 	bl	8009678 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009308:	f000 fcbc 	bl	8009c84 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800930c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800930e:	f000 fa05 	bl	800971c <prvIsQueueEmpty>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	f43f af6f 	beq.w	80091f8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800931a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800931c:	4618      	mov	r0, r3
 800931e:	3730      	adds	r7, #48	@ 0x30
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	e000ed04 	.word	0xe000ed04

08009328 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08c      	sub	sp, #48	@ 0x30
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009332:	2300      	movs	r3, #0
 8009334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10b      	bne.n	800935c <xQueueSemaphoreTake+0x34>
        __asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	61bb      	str	r3, [r7, #24]
    }
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	e7fd      	b.n	8009358 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <xQueueSemaphoreTake+0x54>
        __asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	617b      	str	r3, [r7, #20]
    }
 8009376:	bf00      	nop
 8009378:	bf00      	nop
 800937a:	e7fd      	b.n	8009378 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800937c:	f001 f982 	bl	800a684 <xTaskGetSchedulerState>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d102      	bne.n	800938c <xQueueSemaphoreTake+0x64>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <xQueueSemaphoreTake+0x68>
 800938c:	2301      	movs	r3, #1
 800938e:	e000      	b.n	8009392 <xQueueSemaphoreTake+0x6a>
 8009390:	2300      	movs	r3, #0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10b      	bne.n	80093ae <xQueueSemaphoreTake+0x86>
        __asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	613b      	str	r3, [r7, #16]
    }
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80093ae:	f001 ffd5 	bl	800b35c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80093b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b6:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d024      	beq.n	8009408 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	1e5a      	subs	r2, r3, #1
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d104      	bne.n	80093d8 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80093ce:	f001 fb75 	bl	800aabc <pvTaskIncrementMutexHeldCount>
 80093d2:	4602      	mov	r2, r0
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00f      	beq.n	8009400 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e2:	3310      	adds	r3, #16
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 ff39 	bl	800a25c <xTaskRemoveFromEventList>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80093f0:	4b4c      	ldr	r3, [pc, #304]	@ (8009524 <xQueueSemaphoreTake+0x1fc>)
 80093f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009400:	f001 ffde 	bl	800b3c0 <vPortExitCritical>
                return pdPASS;
 8009404:	2301      	movs	r3, #1
 8009406:	e089      	b.n	800951c <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d103      	bne.n	8009416 <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800940e:	f001 ffd7 	bl	800b3c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8009412:	2300      	movs	r3, #0
 8009414:	e082      	b.n	800951c <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800941c:	f107 0308 	add.w	r3, r7, #8
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fff3 	bl	800a40c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009426:	2301      	movs	r3, #1
 8009428:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800942a:	f001 ffc9 	bl	800b3c0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800942e:	f000 fc1b 	bl	8009c68 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009432:	f001 ff93 	bl	800b35c <vPortEnterCritical>
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800943c:	b25b      	sxtb	r3, r3
 800943e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009442:	d103      	bne.n	800944c <xQueueSemaphoreTake+0x124>
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800944c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009452:	b25b      	sxtb	r3, r3
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d103      	bne.n	8009462 <xQueueSemaphoreTake+0x13a>
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009462:	f001 ffad 	bl	800b3c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009466:	463a      	mov	r2, r7
 8009468:	f107 0308 	add.w	r3, r7, #8
 800946c:	4611      	mov	r1, r2
 800946e:	4618      	mov	r0, r3
 8009470:	f000 ffe2 	bl	800a438 <xTaskCheckForTimeOut>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d132      	bne.n	80094e0 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800947a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800947c:	f000 f94e 	bl	800971c <prvIsQueueEmpty>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d026      	beq.n	80094d4 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d109      	bne.n	80094a2 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 800948e:	f001 ff65 	bl	800b35c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	4618      	mov	r0, r3
 8009498:	f001 f912 	bl	800a6c0 <xTaskPriorityInherit>
 800949c:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800949e:	f001 ff8f 	bl	800b3c0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	3324      	adds	r3, #36	@ 0x24
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4611      	mov	r1, r2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fe6a 	bl	800a184 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80094b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094b2:	f000 f8e1 	bl	8009678 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80094b6:	f000 fbe5 	bl	8009c84 <xTaskResumeAll>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f47f af76 	bne.w	80093ae <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 80094c2:	4b18      	ldr	r3, [pc, #96]	@ (8009524 <xQueueSemaphoreTake+0x1fc>)
 80094c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	e76c      	b.n	80093ae <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80094d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094d6:	f000 f8cf 	bl	8009678 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80094da:	f000 fbd3 	bl	8009c84 <xTaskResumeAll>
 80094de:	e766      	b.n	80093ae <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80094e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094e2:	f000 f8c9 	bl	8009678 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80094e6:	f000 fbcd 	bl	8009c84 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094ec:	f000 f916 	bl	800971c <prvIsQueueEmpty>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f43f af5b 	beq.w	80093ae <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80094f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00d      	beq.n	800951a <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 80094fe:	f001 ff2d 	bl	800b35c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009502:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009504:	f000 f810 	bl	8009528 <prvGetDisinheritPriorityAfterTimeout>
 8009508:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	69f9      	ldr	r1, [r7, #28]
 8009510:	4618      	mov	r0, r3
 8009512:	f001 fa19 	bl	800a948 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8009516:	f001 ff53 	bl	800b3c0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800951a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800951c:	4618      	mov	r0, r3
 800951e:	3730      	adds	r7, #48	@ 0x30
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	e000ed04 	.word	0xe000ed04

08009528 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009534:	2b00      	cmp	r3, #0
 8009536:	d006      	beq.n	8009546 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f1c3 0305 	rsb	r3, r3, #5
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e001      	b.n	800954a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800954a:	68fb      	ldr	r3, [r7, #12]
    }
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009564:	2300      	movs	r3, #0
 8009566:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10d      	bne.n	8009592 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d14d      	bne.n	800961a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	4618      	mov	r0, r3
 8009584:	f001 f93a 	bl	800a7fc <xTaskPriorityDisinherit>
 8009588:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	609a      	str	r2, [r3, #8]
 8009590:	e043      	b.n	800961a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d119      	bne.n	80095cc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6858      	ldr	r0, [r3, #4]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a0:	461a      	mov	r2, r3
 80095a2:	68b9      	ldr	r1, [r7, #8]
 80095a4:	f004 ff4e 	bl	800e444 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b0:	441a      	add	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d32b      	bcc.n	800961a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	e026      	b.n	800961a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68d8      	ldr	r0, [r3, #12]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d4:	461a      	mov	r2, r3
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	f004 ff34 	bl	800e444 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e4:	425b      	negs	r3, r3
 80095e6:	441a      	add	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d207      	bcs.n	8009608 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009600:	425b      	negs	r3, r3
 8009602:	441a      	add	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d105      	bne.n	800961a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	3b01      	subs	r3, #1
 8009618:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8009622:	697b      	ldr	r3, [r7, #20]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963a:	2b00      	cmp	r3, #0
 800963c:	d018      	beq.n	8009670 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009646:	441a      	add	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	429a      	cmp	r2, r3
 8009656:	d303      	bcc.n	8009660 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68d9      	ldr	r1, [r3, #12]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009668:	461a      	mov	r2, r3
 800966a:	6838      	ldr	r0, [r7, #0]
 800966c:	f004 feea 	bl	800e444 <memcpy>
    }
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009680:	f001 fe6c 	bl	800b35c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800968a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800968c:	e011      	b.n	80096b2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009692:	2b00      	cmp	r3, #0
 8009694:	d012      	beq.n	80096bc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3324      	adds	r3, #36	@ 0x24
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fdde 	bl	800a25c <xTaskRemoveFromEventList>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80096a6:	f000 ff2f 	bl	800a508 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	dce9      	bgt.n	800968e <prvUnlockQueue+0x16>
 80096ba:	e000      	b.n	80096be <prvUnlockQueue+0x46>
                    break;
 80096bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	22ff      	movs	r2, #255	@ 0xff
 80096c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80096c6:	f001 fe7b 	bl	800b3c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80096ca:	f001 fe47 	bl	800b35c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80096d6:	e011      	b.n	80096fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d012      	beq.n	8009706 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3310      	adds	r3, #16
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 fdb9 	bl	800a25c <xTaskRemoveFromEventList>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80096f0:	f000 ff0a 	bl	800a508 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80096fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009700:	2b00      	cmp	r3, #0
 8009702:	dce9      	bgt.n	80096d8 <prvUnlockQueue+0x60>
 8009704:	e000      	b.n	8009708 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009706:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	22ff      	movs	r2, #255	@ 0xff
 800970c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009710:	f001 fe56 	bl	800b3c0 <vPortExitCritical>
}
 8009714:	bf00      	nop
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009724:	f001 fe1a 	bl	800b35c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009730:	2301      	movs	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	e001      	b.n	800973a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800973a:	f001 fe41 	bl	800b3c0 <vPortExitCritical>

    return xReturn;
 800973e:	68fb      	ldr	r3, [r7, #12]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009750:	f001 fe04 	bl	800b35c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975c:	429a      	cmp	r2, r3
 800975e:	d102      	bne.n	8009766 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	e001      	b.n	800976a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800976a:	f001 fe29 	bl	800b3c0 <vPortExitCritical>

    return xReturn;
 800976e:	68fb      	ldr	r3, [r7, #12]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10b      	bne.n	80097a4 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60fb      	str	r3, [r7, #12]
    }
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d024      	beq.n	80097f4 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097aa:	2300      	movs	r3, #0
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	e01e      	b.n	80097ee <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80097b0:	4a18      	ldr	r2, [pc, #96]	@ (8009814 <vQueueAddToRegistry+0x9c>)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	4413      	add	r3, r2
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d105      	bne.n	80097cc <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	4a13      	ldr	r2, [pc, #76]	@ (8009814 <vQueueAddToRegistry+0x9c>)
 80097c6:	4413      	add	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
                    break;
 80097ca:	e013      	b.n	80097f4 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <vQueueAddToRegistry+0x70>
 80097d2:	4a10      	ldr	r2, [pc, #64]	@ (8009814 <vQueueAddToRegistry+0x9c>)
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d104      	bne.n	80097e8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009814 <vQueueAddToRegistry+0x9c>)
 80097e4:	4413      	add	r3, r2
 80097e6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	3301      	adds	r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	d9dd      	bls.n	80097b0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	20000308 	.word	0x20000308

08009818 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009828:	f001 fd98 	bl	800b35c <vPortEnterCritical>
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009832:	b25b      	sxtb	r3, r3
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d103      	bne.n	8009842 <vQueueWaitForMessageRestricted+0x2a>
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009848:	b25b      	sxtb	r3, r3
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984e:	d103      	bne.n	8009858 <vQueueWaitForMessageRestricted+0x40>
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009858:	f001 fdb2 	bl	800b3c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	3324      	adds	r3, #36	@ 0x24
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fcaf 	bl	800a1d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009872:	6978      	ldr	r0, [r7, #20]
 8009874:	f7ff ff00 	bl	8009678 <prvUnlockQueue>
    }
 8009878:	bf00      	nop
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	@ 0x30
 8009884:	af04      	add	r7, sp, #16
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4618      	mov	r0, r3
 8009896:	f001 fe49 	bl	800b52c <pvPortMalloc>
 800989a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d013      	beq.n	80098ca <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098a2:	2058      	movs	r0, #88	@ 0x58
 80098a4:	f001 fe42 	bl	800b52c <pvPortMalloc>
 80098a8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d008      	beq.n	80098c2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80098b0:	2258      	movs	r2, #88	@ 0x58
 80098b2:	2100      	movs	r1, #0
 80098b4:	69f8      	ldr	r0, [r7, #28]
 80098b6:	f004 fd99 	bl	800e3ec <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	631a      	str	r2, [r3, #48]	@ 0x30
 80098c0:	e005      	b.n	80098ce <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80098c2:	6978      	ldr	r0, [r7, #20]
 80098c4:	f001 feee 	bl	800b6a4 <vPortFree>
 80098c8:	e001      	b.n	80098ce <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d013      	beq.n	80098fc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098d4:	88fa      	ldrh	r2, [r7, #6]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	9302      	str	r3, [sp, #8]
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	68b9      	ldr	r1, [r7, #8]
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 f80e 	bl	800990c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80098f0:	69f8      	ldr	r0, [r7, #28]
 80098f2:	f000 f89b 	bl	8009a2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80098f6:	2301      	movs	r3, #1
 80098f8:	61bb      	str	r3, [r7, #24]
 80098fa:	e002      	b.n	8009902 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009900:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009902:	69bb      	ldr	r3, [r7, #24]
    }
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800991a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	461a      	mov	r2, r3
 8009924:	21a5      	movs	r1, #165	@ 0xa5
 8009926:	f004 fd61 	bl	800e3ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009934:	3b01      	subs	r3, #1
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	f023 0307 	bic.w	r3, r3, #7
 8009942:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	617b      	str	r3, [r7, #20]
    }
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	e7fd      	b.n	8009962 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01e      	beq.n	80099aa <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800996c:	2300      	movs	r3, #0
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e012      	b.n	8009998 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	4413      	add	r3, r2
 8009978:	7819      	ldrb	r1, [r3, #0]
 800997a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	4413      	add	r3, r2
 8009980:	3334      	adds	r3, #52	@ 0x34
 8009982:	460a      	mov	r2, r1
 8009984:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4413      	add	r3, r2
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d006      	beq.n	80099a0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	3301      	adds	r3, #1
 8009996:	61fb      	str	r3, [r7, #28]
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	2b09      	cmp	r3, #9
 800999c:	d9e9      	bls.n	8009972 <prvInitialiseNewTask+0x66>
 800999e:	e000      	b.n	80099a2 <prvInitialiseNewTask+0x96>
            {
                break;
 80099a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	2b04      	cmp	r3, #4
 80099ae:	d90b      	bls.n	80099c8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
    }
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d901      	bls.n	80099d2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099ce:	2304      	movs	r3, #4
 80099d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80099d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099dc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	3304      	adds	r3, #4
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff f915 	bl	8008c12 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	3318      	adds	r3, #24
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff f910 	bl	8008c12 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099f6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fa:	f1c3 0205 	rsb	r2, r3, #5
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a06:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	69b8      	ldr	r0, [r7, #24]
 8009a0e:	f001 fb75 	bl	800b0fc <pxPortInitialiseStack>
 8009a12:	4602      	mov	r2, r0
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a22:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009a24:	bf00      	nop
 8009a26:	3720      	adds	r7, #32
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009a34:	f001 fc92 	bl	800b35c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009a38:	4b40      	ldr	r3, [pc, #256]	@ (8009b3c <prvAddNewTaskToReadyList+0x110>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8009b3c <prvAddNewTaskToReadyList+0x110>)
 8009a40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009a42:	4b3f      	ldr	r3, [pc, #252]	@ (8009b40 <prvAddNewTaskToReadyList+0x114>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009a4a:	4a3d      	ldr	r2, [pc, #244]	@ (8009b40 <prvAddNewTaskToReadyList+0x114>)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a50:	4b3a      	ldr	r3, [pc, #232]	@ (8009b3c <prvAddNewTaskToReadyList+0x110>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d110      	bne.n	8009a7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009a58:	f000 fd7a 	bl	800a550 <prvInitialiseTaskLists>
 8009a5c:	e00d      	b.n	8009a7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009a5e:	4b39      	ldr	r3, [pc, #228]	@ (8009b44 <prvAddNewTaskToReadyList+0x118>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a66:	4b36      	ldr	r3, [pc, #216]	@ (8009b40 <prvAddNewTaskToReadyList+0x114>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d802      	bhi.n	8009a7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009a74:	4a32      	ldr	r2, [pc, #200]	@ (8009b40 <prvAddNewTaskToReadyList+0x114>)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009a7a:	4b33      	ldr	r3, [pc, #204]	@ (8009b48 <prvAddNewTaskToReadyList+0x11c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	4a31      	ldr	r2, [pc, #196]	@ (8009b48 <prvAddNewTaskToReadyList+0x11c>)
 8009a82:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a84:	4b30      	ldr	r3, [pc, #192]	@ (8009b48 <prvAddNewTaskToReadyList+0x11c>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a90:	2201      	movs	r2, #1
 8009a92:	409a      	lsls	r2, r3
 8009a94:	4b2d      	ldr	r3, [pc, #180]	@ (8009b4c <prvAddNewTaskToReadyList+0x120>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8009b4c <prvAddNewTaskToReadyList+0x120>)
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa2:	492b      	ldr	r1, [pc, #172]	@ (8009b50 <prvAddNewTaskToReadyList+0x124>)
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	3304      	adds	r3, #4
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	609a      	str	r2, [r3, #8]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60da      	str	r2, [r3, #12]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	3204      	adds	r2, #4
 8009aca:	605a      	str	r2, [r3, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	1d1a      	adds	r2, r3, #4
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	609a      	str	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8009b50 <prvAddNewTaskToReadyList+0x124>)
 8009ae2:	441a      	add	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	615a      	str	r2, [r3, #20]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aec:	4918      	ldr	r1, [pc, #96]	@ (8009b50 <prvAddNewTaskToReadyList+0x124>)
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	440b      	add	r3, r1
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	1c59      	adds	r1, r3, #1
 8009afc:	4814      	ldr	r0, [pc, #80]	@ (8009b50 <prvAddNewTaskToReadyList+0x124>)
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4403      	add	r3, r0
 8009b08:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009b0a:	f001 fc59 	bl	800b3c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b44 <prvAddNewTaskToReadyList+0x118>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00e      	beq.n	8009b34 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b16:	4b0a      	ldr	r3, [pc, #40]	@ (8009b40 <prvAddNewTaskToReadyList+0x114>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d207      	bcs.n	8009b34 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009b24:	4b0b      	ldr	r3, [pc, #44]	@ (8009b54 <prvAddNewTaskToReadyList+0x128>)
 8009b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000420 	.word	0x20000420
 8009b40:	20000348 	.word	0x20000348
 8009b44:	2000042c 	.word	0x2000042c
 8009b48:	2000043c 	.word	0x2000043c
 8009b4c:	20000428 	.word	0x20000428
 8009b50:	2000034c 	.word	0x2000034c
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d018      	beq.n	8009b9c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009b6a:	4b14      	ldr	r3, [pc, #80]	@ (8009bbc <vTaskDelay+0x64>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00b      	beq.n	8009b8a <vTaskDelay+0x32>
        __asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	60bb      	str	r3, [r7, #8]
    }
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	e7fd      	b.n	8009b86 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009b8a:	f000 f86d 	bl	8009c68 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b8e:	2100      	movs	r1, #0
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 ffa7 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009b96:	f000 f875 	bl	8009c84 <xTaskResumeAll>
 8009b9a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d107      	bne.n	8009bb2 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8009ba2:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <vTaskDelay+0x68>)
 8009ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000448 	.word	0x20000448
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8009bca:	4b20      	ldr	r3, [pc, #128]	@ (8009c4c <vTaskStartScheduler+0x88>)
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	2282      	movs	r2, #130	@ 0x82
 8009bd6:	491e      	ldr	r1, [pc, #120]	@ (8009c50 <vTaskStartScheduler+0x8c>)
 8009bd8:	481e      	ldr	r0, [pc, #120]	@ (8009c54 <vTaskStartScheduler+0x90>)
 8009bda:	f7ff fe51 	bl	8009880 <xTaskCreate>
 8009bde:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d102      	bne.n	8009bec <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8009be6:	f000 fffd 	bl	800abe4 <xTimerCreateTimerTask>
 8009bea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d116      	bne.n	8009c20 <vTaskStartScheduler+0x5c>
        __asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	60bb      	str	r3, [r7, #8]
    }
 8009c04:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009c06:	4b14      	ldr	r3, [pc, #80]	@ (8009c58 <vTaskStartScheduler+0x94>)
 8009c08:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009c0e:	4b13      	ldr	r3, [pc, #76]	@ (8009c5c <vTaskStartScheduler+0x98>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c14:	4b12      	ldr	r3, [pc, #72]	@ (8009c60 <vTaskStartScheduler+0x9c>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009c1a:	f001 fafb 	bl	800b214 <xPortStartScheduler>
 8009c1e:	e00f      	b.n	8009c40 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c26:	d10b      	bne.n	8009c40 <vTaskStartScheduler+0x7c>
        __asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	607b      	str	r3, [r7, #4]
    }
 8009c3a:	bf00      	nop
 8009c3c:	bf00      	nop
 8009c3e:	e7fd      	b.n	8009c3c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009c40:	4b08      	ldr	r3, [pc, #32]	@ (8009c64 <vTaskStartScheduler+0xa0>)
 8009c42:	681b      	ldr	r3, [r3, #0]
}
 8009c44:	bf00      	nop
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20000444 	.word	0x20000444
 8009c50:	0800e4c4 	.word	0x0800e4c4
 8009c54:	0800a521 	.word	0x0800a521
 8009c58:	20000440 	.word	0x20000440
 8009c5c:	2000042c 	.word	0x2000042c
 8009c60:	20000424 	.word	0x20000424
 8009c64:	2000000c 	.word	0x2000000c

08009c68 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009c6c:	4b04      	ldr	r3, [pc, #16]	@ (8009c80 <vTaskSuspendAll+0x18>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	4a03      	ldr	r2, [pc, #12]	@ (8009c80 <vTaskSuspendAll+0x18>)
 8009c74:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009c76:	bf00      	nop
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	20000448 	.word	0x20000448

08009c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009c92:	4b71      	ldr	r3, [pc, #452]	@ (8009e58 <xTaskResumeAll+0x1d4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10b      	bne.n	8009cb2 <xTaskResumeAll+0x2e>
        __asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	607b      	str	r3, [r7, #4]
    }
 8009cac:	bf00      	nop
 8009cae:	bf00      	nop
 8009cb0:	e7fd      	b.n	8009cae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009cb2:	f001 fb53 	bl	800b35c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009cb6:	4b68      	ldr	r3, [pc, #416]	@ (8009e58 <xTaskResumeAll+0x1d4>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	4a66      	ldr	r2, [pc, #408]	@ (8009e58 <xTaskResumeAll+0x1d4>)
 8009cbe:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc0:	4b65      	ldr	r3, [pc, #404]	@ (8009e58 <xTaskResumeAll+0x1d4>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f040 80c0 	bne.w	8009e4a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cca:	4b64      	ldr	r3, [pc, #400]	@ (8009e5c <xTaskResumeAll+0x1d8>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 80bb 	beq.w	8009e4a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cd4:	e08a      	b.n	8009dec <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd6:	4b62      	ldr	r3, [pc, #392]	@ (8009e60 <xTaskResumeAll+0x1dc>)
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	69fa      	ldr	r2, [r7, #28]
 8009cea:	6a12      	ldr	r2, [r2, #32]
 8009cec:	609a      	str	r2, [r3, #8]
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	69d2      	ldr	r2, [r2, #28]
 8009cf6:	605a      	str	r2, [r3, #4]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	3318      	adds	r3, #24
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d103      	bne.n	8009d0c <xTaskResumeAll+0x88>
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	6a1a      	ldr	r2, [r3, #32]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	605a      	str	r2, [r3, #4]
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	1e5a      	subs	r2, r3, #1
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	68d2      	ldr	r2, [r2, #12]
 8009d2a:	609a      	str	r2, [r3, #8]
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	69fa      	ldr	r2, [r7, #28]
 8009d32:	6892      	ldr	r2, [r2, #8]
 8009d34:	605a      	str	r2, [r3, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d103      	bne.n	8009d4a <xTaskResumeAll+0xc6>
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	68da      	ldr	r2, [r3, #12]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	605a      	str	r2, [r3, #4]
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	615a      	str	r2, [r3, #20]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	1e5a      	subs	r2, r3, #1
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5e:	2201      	movs	r2, #1
 8009d60:	409a      	lsls	r2, r3
 8009d62:	4b40      	ldr	r3, [pc, #256]	@ (8009e64 <xTaskResumeAll+0x1e0>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	4a3e      	ldr	r2, [pc, #248]	@ (8009e64 <xTaskResumeAll+0x1e0>)
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d70:	493d      	ldr	r1, [pc, #244]	@ (8009e68 <xTaskResumeAll+0x1e4>)
 8009d72:	4613      	mov	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	60bb      	str	r3, [r7, #8]
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	609a      	str	r2, [r3, #8]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	60da      	str	r2, [r3, #12]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	69fa      	ldr	r2, [r7, #28]
 8009d96:	3204      	adds	r2, #4
 8009d98:	605a      	str	r2, [r3, #4]
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	1d1a      	adds	r2, r3, #4
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	609a      	str	r2, [r3, #8]
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4a2e      	ldr	r2, [pc, #184]	@ (8009e68 <xTaskResumeAll+0x1e4>)
 8009db0:	441a      	add	r2, r3
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	615a      	str	r2, [r3, #20]
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dba:	492b      	ldr	r1, [pc, #172]	@ (8009e68 <xTaskResumeAll+0x1e4>)
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	440b      	add	r3, r1
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	1c59      	adds	r1, r3, #1
 8009dca:	4827      	ldr	r0, [pc, #156]	@ (8009e68 <xTaskResumeAll+0x1e4>)
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4403      	add	r3, r0
 8009dd6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ddc:	4b23      	ldr	r3, [pc, #140]	@ (8009e6c <xTaskResumeAll+0x1e8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d302      	bcc.n	8009dec <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8009de6:	4b22      	ldr	r3, [pc, #136]	@ (8009e70 <xTaskResumeAll+0x1ec>)
 8009de8:	2201      	movs	r2, #1
 8009dea:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dec:	4b1c      	ldr	r3, [pc, #112]	@ (8009e60 <xTaskResumeAll+0x1dc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f47f af70 	bne.w	8009cd6 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009dfc:	f000 fc26 	bl	800a64c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e00:	4b1c      	ldr	r3, [pc, #112]	@ (8009e74 <xTaskResumeAll+0x1f0>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d010      	beq.n	8009e2e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009e0c:	f000 f846 	bl	8009e9c <xTaskIncrementTick>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d002      	beq.n	8009e1c <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8009e16:	4b16      	ldr	r3, [pc, #88]	@ (8009e70 <xTaskResumeAll+0x1ec>)
 8009e18:	2201      	movs	r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1f1      	bne.n	8009e0c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8009e28:	4b12      	ldr	r3, [pc, #72]	@ (8009e74 <xTaskResumeAll+0x1f0>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009e2e:	4b10      	ldr	r3, [pc, #64]	@ (8009e70 <xTaskResumeAll+0x1ec>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d009      	beq.n	8009e4a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009e36:	2301      	movs	r3, #1
 8009e38:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e78 <xTaskResumeAll+0x1f4>)
 8009e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009e4a:	f001 fab9 	bl	800b3c0 <vPortExitCritical>

    return xAlreadyYielded;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3720      	adds	r7, #32
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20000448 	.word	0x20000448
 8009e5c:	20000420 	.word	0x20000420
 8009e60:	200003e0 	.word	0x200003e0
 8009e64:	20000428 	.word	0x20000428
 8009e68:	2000034c 	.word	0x2000034c
 8009e6c:	20000348 	.word	0x20000348
 8009e70:	20000434 	.word	0x20000434
 8009e74:	20000430 	.word	0x20000430
 8009e78:	e000ed04 	.word	0xe000ed04

08009e7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009e82:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <xTaskGetTickCount+0x1c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009e88:	687b      	ldr	r3, [r7, #4]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	20000424 	.word	0x20000424

08009e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	@ 0x28
 8009ea0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ea6:	4b7e      	ldr	r3, [pc, #504]	@ (800a0a0 <xTaskIncrementTick+0x204>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f040 80ed 	bne.w	800a08a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009eb0:	4b7c      	ldr	r3, [pc, #496]	@ (800a0a4 <xTaskIncrementTick+0x208>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009eb8:	4a7a      	ldr	r2, [pc, #488]	@ (800a0a4 <xTaskIncrementTick+0x208>)
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d121      	bne.n	8009f08 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009ec4:	4b78      	ldr	r3, [pc, #480]	@ (800a0a8 <xTaskIncrementTick+0x20c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00b      	beq.n	8009ee6 <xTaskIncrementTick+0x4a>
        __asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	607b      	str	r3, [r7, #4]
    }
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	e7fd      	b.n	8009ee2 <xTaskIncrementTick+0x46>
 8009ee6:	4b70      	ldr	r3, [pc, #448]	@ (800a0a8 <xTaskIncrementTick+0x20c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	61fb      	str	r3, [r7, #28]
 8009eec:	4b6f      	ldr	r3, [pc, #444]	@ (800a0ac <xTaskIncrementTick+0x210>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a6d      	ldr	r2, [pc, #436]	@ (800a0a8 <xTaskIncrementTick+0x20c>)
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	4a6d      	ldr	r2, [pc, #436]	@ (800a0ac <xTaskIncrementTick+0x210>)
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	6013      	str	r3, [r2, #0]
 8009efa:	4b6d      	ldr	r3, [pc, #436]	@ (800a0b0 <xTaskIncrementTick+0x214>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3301      	adds	r3, #1
 8009f00:	4a6b      	ldr	r2, [pc, #428]	@ (800a0b0 <xTaskIncrementTick+0x214>)
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	f000 fba2 	bl	800a64c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009f08:	4b6a      	ldr	r3, [pc, #424]	@ (800a0b4 <xTaskIncrementTick+0x218>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6a3a      	ldr	r2, [r7, #32]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	f0c0 80a6 	bcc.w	800a060 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f14:	4b64      	ldr	r3, [pc, #400]	@ (800a0a8 <xTaskIncrementTick+0x20c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d104      	bne.n	8009f28 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f1e:	4b65      	ldr	r3, [pc, #404]	@ (800a0b4 <xTaskIncrementTick+0x218>)
 8009f20:	f04f 32ff 	mov.w	r2, #4294967295
 8009f24:	601a      	str	r2, [r3, #0]
                    break;
 8009f26:	e09b      	b.n	800a060 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f28:	4b5f      	ldr	r3, [pc, #380]	@ (800a0a8 <xTaskIncrementTick+0x20c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009f38:	6a3a      	ldr	r2, [r7, #32]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d203      	bcs.n	8009f48 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009f40:	4a5c      	ldr	r2, [pc, #368]	@ (800a0b4 <xTaskIncrementTick+0x218>)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009f46:	e08b      	b.n	800a060 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	613b      	str	r3, [r7, #16]
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	68d2      	ldr	r2, [r2, #12]
 8009f56:	609a      	str	r2, [r3, #8]
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	69ba      	ldr	r2, [r7, #24]
 8009f5e:	6892      	ldr	r2, [r2, #8]
 8009f60:	605a      	str	r2, [r3, #4]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d103      	bne.n	8009f76 <xTaskIncrementTick+0xda>
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	68da      	ldr	r2, [r3, #12]
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	605a      	str	r2, [r3, #4]
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	615a      	str	r2, [r3, #20]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	1e5a      	subs	r2, r3, #1
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01e      	beq.n	8009fcc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	6a12      	ldr	r2, [r2, #32]
 8009f9c:	609a      	str	r2, [r3, #8]
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	69d2      	ldr	r2, [r2, #28]
 8009fa6:	605a      	str	r2, [r3, #4]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	3318      	adds	r3, #24
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d103      	bne.n	8009fbc <xTaskIncrementTick+0x120>
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	6a1a      	ldr	r2, [r3, #32]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	605a      	str	r2, [r3, #4]
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	1e5a      	subs	r2, r3, #1
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	409a      	lsls	r2, r3
 8009fd4:	4b38      	ldr	r3, [pc, #224]	@ (800a0b8 <xTaskIncrementTick+0x21c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	4a37      	ldr	r2, [pc, #220]	@ (800a0b8 <xTaskIncrementTick+0x21c>)
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fe2:	4936      	ldr	r1, [pc, #216]	@ (800a0bc <xTaskIncrementTick+0x220>)
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	440b      	add	r3, r1
 8009fee:	3304      	adds	r3, #4
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	60bb      	str	r3, [r7, #8]
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	609a      	str	r2, [r3, #8]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	60da      	str	r2, [r3, #12]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	3204      	adds	r2, #4
 800a00a:	605a      	str	r2, [r3, #4]
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	609a      	str	r2, [r3, #8]
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4a26      	ldr	r2, [pc, #152]	@ (800a0bc <xTaskIncrementTick+0x220>)
 800a022:	441a      	add	r2, r3
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	615a      	str	r2, [r3, #20]
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a02c:	4923      	ldr	r1, [pc, #140]	@ (800a0bc <xTaskIncrementTick+0x220>)
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	440b      	add	r3, r1
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	1c59      	adds	r1, r3, #1
 800a03c:	481f      	ldr	r0, [pc, #124]	@ (800a0bc <xTaskIncrementTick+0x220>)
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4403      	add	r3, r0
 800a048:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a04e:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c0 <xTaskIncrementTick+0x224>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a054:	429a      	cmp	r2, r3
 800a056:	f67f af5d 	bls.w	8009f14 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800a05a:	2301      	movs	r3, #1
 800a05c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a05e:	e759      	b.n	8009f14 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a060:	4b17      	ldr	r3, [pc, #92]	@ (800a0c0 <xTaskIncrementTick+0x224>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a066:	4915      	ldr	r1, [pc, #84]	@ (800a0bc <xTaskIncrementTick+0x220>)
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	440b      	add	r3, r1
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d901      	bls.n	800a07c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800a078:	2301      	movs	r3, #1
 800a07a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800a07c:	4b11      	ldr	r3, [pc, #68]	@ (800a0c4 <xTaskIncrementTick+0x228>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d007      	beq.n	800a094 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	627b      	str	r3, [r7, #36]	@ 0x24
 800a088:	e004      	b.n	800a094 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a08a:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c8 <xTaskIncrementTick+0x22c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3301      	adds	r3, #1
 800a090:	4a0d      	ldr	r2, [pc, #52]	@ (800a0c8 <xTaskIncrementTick+0x22c>)
 800a092:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a096:	4618      	mov	r0, r3
 800a098:	3728      	adds	r7, #40	@ 0x28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000448 	.word	0x20000448
 800a0a4:	20000424 	.word	0x20000424
 800a0a8:	200003d8 	.word	0x200003d8
 800a0ac:	200003dc 	.word	0x200003dc
 800a0b0:	20000438 	.word	0x20000438
 800a0b4:	20000440 	.word	0x20000440
 800a0b8:	20000428 	.word	0x20000428
 800a0bc:	2000034c 	.word	0x2000034c
 800a0c0:	20000348 	.word	0x20000348
 800a0c4:	20000434 	.word	0x20000434
 800a0c8:	20000430 	.word	0x20000430

0800a0cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0d2:	4b27      	ldr	r3, [pc, #156]	@ (800a170 <vTaskSwitchContext+0xa4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a0da:	4b26      	ldr	r3, [pc, #152]	@ (800a174 <vTaskSwitchContext+0xa8>)
 800a0dc:	2201      	movs	r2, #1
 800a0de:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800a0e0:	e040      	b.n	800a164 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800a0e2:	4b24      	ldr	r3, [pc, #144]	@ (800a174 <vTaskSwitchContext+0xa8>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e8:	4b23      	ldr	r3, [pc, #140]	@ (800a178 <vTaskSwitchContext+0xac>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	fab3 f383 	clz	r3, r3
 800a0f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a0f6:	7afb      	ldrb	r3, [r7, #11]
 800a0f8:	f1c3 031f 	rsb	r3, r3, #31
 800a0fc:	617b      	str	r3, [r7, #20]
 800a0fe:	491f      	ldr	r1, [pc, #124]	@ (800a17c <vTaskSwitchContext+0xb0>)
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	4613      	mov	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	440b      	add	r3, r1
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10b      	bne.n	800a12a <vTaskSwitchContext+0x5e>
        __asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	607b      	str	r3, [r7, #4]
    }
 800a124:	bf00      	nop
 800a126:	bf00      	nop
 800a128:	e7fd      	b.n	800a126 <vTaskSwitchContext+0x5a>
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4a11      	ldr	r2, [pc, #68]	@ (800a17c <vTaskSwitchContext+0xb0>)
 800a136:	4413      	add	r3, r2
 800a138:	613b      	str	r3, [r7, #16]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	605a      	str	r2, [r3, #4]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	3308      	adds	r3, #8
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d104      	bne.n	800a15a <vTaskSwitchContext+0x8e>
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	605a      	str	r2, [r3, #4]
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	4a07      	ldr	r2, [pc, #28]	@ (800a180 <vTaskSwitchContext+0xb4>)
 800a162:	6013      	str	r3, [r2, #0]
}
 800a164:	bf00      	nop
 800a166:	371c      	adds	r7, #28
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	20000448 	.word	0x20000448
 800a174:	20000434 	.word	0x20000434
 800a178:	20000428 	.word	0x20000428
 800a17c:	2000034c 	.word	0x2000034c
 800a180:	20000348 	.word	0x20000348

0800a184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10b      	bne.n	800a1ac <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	60fb      	str	r3, [r7, #12]
    }
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	e7fd      	b.n	800a1a8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1ac:	4b07      	ldr	r3, [pc, #28]	@ (800a1cc <vTaskPlaceOnEventList+0x48>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3318      	adds	r3, #24
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7fe fd39 	bl	8008c2c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	6838      	ldr	r0, [r7, #0]
 800a1be:	f000 fc91 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000348 	.word	0x20000348

0800a1d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10b      	bne.n	800a1fa <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	613b      	str	r3, [r7, #16]
    }
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
 800a1f8:	e7fd      	b.n	800a1f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	4b15      	ldr	r3, [pc, #84]	@ (800a258 <vTaskPlaceOnEventListRestricted+0x88>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	61da      	str	r2, [r3, #28]
 800a208:	4b13      	ldr	r3, [pc, #76]	@ (800a258 <vTaskPlaceOnEventListRestricted+0x88>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	6892      	ldr	r2, [r2, #8]
 800a210:	621a      	str	r2, [r3, #32]
 800a212:	4b11      	ldr	r3, [pc, #68]	@ (800a258 <vTaskPlaceOnEventListRestricted+0x88>)
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	3218      	adds	r2, #24
 800a21c:	605a      	str	r2, [r3, #4]
 800a21e:	4b0e      	ldr	r3, [pc, #56]	@ (800a258 <vTaskPlaceOnEventListRestricted+0x88>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f103 0218 	add.w	r2, r3, #24
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	609a      	str	r2, [r3, #8]
 800a22a:	4b0b      	ldr	r3, [pc, #44]	@ (800a258 <vTaskPlaceOnEventListRestricted+0x88>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	629a      	str	r2, [r3, #40]	@ 0x28
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800a242:	f04f 33ff 	mov.w	r3, #4294967295
 800a246:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a248:	6879      	ldr	r1, [r7, #4]
 800a24a:	68b8      	ldr	r0, [r7, #8]
 800a24c:	f000 fc4a 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
    }
 800a250:	bf00      	nop
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20000348 	.word	0x20000348

0800a25c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a25c:	b480      	push	{r7}
 800a25e:	b08b      	sub	sp, #44	@ 0x2c
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	60fb      	str	r3, [r7, #12]
    }
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	e7fd      	b.n	800a286 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28e:	61fb      	str	r3, [r7, #28]
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	6a3a      	ldr	r2, [r7, #32]
 800a296:	6a12      	ldr	r2, [r2, #32]
 800a298:	609a      	str	r2, [r3, #8]
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	6a3a      	ldr	r2, [r7, #32]
 800a2a0:	69d2      	ldr	r2, [r2, #28]
 800a2a2:	605a      	str	r2, [r3, #4]
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	3318      	adds	r3, #24
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d103      	bne.n	800a2b8 <xTaskRemoveFromEventList+0x5c>
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	6a1a      	ldr	r2, [r3, #32]
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	605a      	str	r2, [r3, #4]
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	1e5a      	subs	r2, r3, #1
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2c8:	4b4a      	ldr	r3, [pc, #296]	@ (800a3f4 <xTaskRemoveFromEventList+0x198>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d15e      	bne.n	800a38e <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	6a3a      	ldr	r2, [r7, #32]
 800a2dc:	68d2      	ldr	r2, [r2, #12]
 800a2de:	609a      	str	r2, [r3, #8]
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	6a3a      	ldr	r2, [r7, #32]
 800a2e6:	6892      	ldr	r2, [r2, #8]
 800a2e8:	605a      	str	r2, [r3, #4]
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d103      	bne.n	800a2fe <xTaskRemoveFromEventList+0xa2>
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	605a      	str	r2, [r3, #4]
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	2200      	movs	r2, #0
 800a302:	615a      	str	r2, [r3, #20]
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	1e5a      	subs	r2, r3, #1
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a312:	2201      	movs	r2, #1
 800a314:	409a      	lsls	r2, r3
 800a316:	4b38      	ldr	r3, [pc, #224]	@ (800a3f8 <xTaskRemoveFromEventList+0x19c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	4a36      	ldr	r2, [pc, #216]	@ (800a3f8 <xTaskRemoveFromEventList+0x19c>)
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a324:	4935      	ldr	r1, [pc, #212]	@ (800a3fc <xTaskRemoveFromEventList+0x1a0>)
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	440b      	add	r3, r1
 800a330:	3304      	adds	r3, #4
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	609a      	str	r2, [r3, #8]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	60da      	str	r2, [r3, #12]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	6a3a      	ldr	r2, [r7, #32]
 800a34a:	3204      	adds	r2, #4
 800a34c:	605a      	str	r2, [r3, #4]
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	1d1a      	adds	r2, r3, #4
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	609a      	str	r2, [r3, #8]
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4a26      	ldr	r2, [pc, #152]	@ (800a3fc <xTaskRemoveFromEventList+0x1a0>)
 800a364:	441a      	add	r2, r3
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	615a      	str	r2, [r3, #20]
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a36e:	4923      	ldr	r1, [pc, #140]	@ (800a3fc <xTaskRemoveFromEventList+0x1a0>)
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	440b      	add	r3, r1
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	1c59      	adds	r1, r3, #1
 800a37e:	481f      	ldr	r0, [pc, #124]	@ (800a3fc <xTaskRemoveFromEventList+0x1a0>)
 800a380:	4613      	mov	r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4403      	add	r3, r0
 800a38a:	6019      	str	r1, [r3, #0]
 800a38c:	e01b      	b.n	800a3c6 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a38e:	4b1c      	ldr	r3, [pc, #112]	@ (800a400 <xTaskRemoveFromEventList+0x1a4>)
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	61bb      	str	r3, [r7, #24]
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	61da      	str	r2, [r3, #28]
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	621a      	str	r2, [r3, #32]
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	6a3a      	ldr	r2, [r7, #32]
 800a3a8:	3218      	adds	r2, #24
 800a3aa:	605a      	str	r2, [r3, #4]
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	f103 0218 	add.w	r2, r3, #24
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	609a      	str	r2, [r3, #8]
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	4a11      	ldr	r2, [pc, #68]	@ (800a400 <xTaskRemoveFromEventList+0x1a4>)
 800a3ba:	629a      	str	r2, [r3, #40]	@ 0x28
 800a3bc:	4b10      	ldr	r3, [pc, #64]	@ (800a400 <xTaskRemoveFromEventList+0x1a4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	4a0f      	ldr	r2, [pc, #60]	@ (800a400 <xTaskRemoveFromEventList+0x1a4>)
 800a3c4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a404 <xTaskRemoveFromEventList+0x1a8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d905      	bls.n	800a3e0 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a408 <xTaskRemoveFromEventList+0x1ac>)
 800a3da:	2201      	movs	r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	e001      	b.n	800a3e4 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	372c      	adds	r7, #44	@ 0x2c
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20000448 	.word	0x20000448
 800a3f8:	20000428 	.word	0x20000428
 800a3fc:	2000034c 	.word	0x2000034c
 800a400:	200003e0 	.word	0x200003e0
 800a404:	20000348 	.word	0x20000348
 800a408:	20000434 	.word	0x20000434

0800a40c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a414:	4b06      	ldr	r3, [pc, #24]	@ (800a430 <vTaskInternalSetTimeOutState+0x24>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a41c:	4b05      	ldr	r3, [pc, #20]	@ (800a434 <vTaskInternalSetTimeOutState+0x28>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	605a      	str	r2, [r3, #4]
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	20000438 	.word	0x20000438
 800a434:	20000424 	.word	0x20000424

0800a438 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10b      	bne.n	800a460 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	613b      	str	r3, [r7, #16]
    }
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop
 800a45e:	e7fd      	b.n	800a45c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10b      	bne.n	800a47e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60fb      	str	r3, [r7, #12]
    }
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	e7fd      	b.n	800a47a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800a47e:	f000 ff6d 	bl	800b35c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a482:	4b1f      	ldr	r3, [pc, #124]	@ (800a500 <xTaskCheckForTimeOut+0xc8>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	69ba      	ldr	r2, [r7, #24]
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49a:	d102      	bne.n	800a4a2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a49c:	2300      	movs	r3, #0
 800a49e:	61fb      	str	r3, [r7, #28]
 800a4a0:	e026      	b.n	800a4f0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	4b17      	ldr	r3, [pc, #92]	@ (800a504 <xTaskCheckForTimeOut+0xcc>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d00a      	beq.n	800a4c4 <xTaskCheckForTimeOut+0x8c>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d305      	bcc.n	800a4c4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	e015      	b.n	800a4f0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d20b      	bcs.n	800a4e6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	1ad2      	subs	r2, r2, r3
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff ff96 	bl	800a40c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	e004      	b.n	800a4f0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a4f0:	f000 ff66 	bl	800b3c0 <vPortExitCritical>

    return xReturn;
 800a4f4:	69fb      	ldr	r3, [r7, #28]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3720      	adds	r7, #32
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000424 	.word	0x20000424
 800a504:	20000438 	.word	0x20000438

0800a508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a508:	b480      	push	{r7}
 800a50a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a50c:	4b03      	ldr	r3, [pc, #12]	@ (800a51c <vTaskMissedYield+0x14>)
 800a50e:	2201      	movs	r2, #1
 800a510:	601a      	str	r2, [r3, #0]
}
 800a512:	bf00      	nop
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	20000434 	.word	0x20000434

0800a520 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a528:	f000 f852 	bl	800a5d0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a52c:	4b06      	ldr	r3, [pc, #24]	@ (800a548 <prvIdleTask+0x28>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d9f9      	bls.n	800a528 <prvIdleTask+0x8>
            {
                taskYIELD();
 800a534:	4b05      	ldr	r3, [pc, #20]	@ (800a54c <prvIdleTask+0x2c>)
 800a536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a544:	e7f0      	b.n	800a528 <prvIdleTask+0x8>
 800a546:	bf00      	nop
 800a548:	2000034c 	.word	0x2000034c
 800a54c:	e000ed04 	.word	0xe000ed04

0800a550 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a556:	2300      	movs	r3, #0
 800a558:	607b      	str	r3, [r7, #4]
 800a55a:	e00c      	b.n	800a576 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	4613      	mov	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4a12      	ldr	r2, [pc, #72]	@ (800a5b0 <prvInitialiseTaskLists+0x60>)
 800a568:	4413      	add	r3, r2
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fb31 	bl	8008bd2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	3301      	adds	r3, #1
 800a574:	607b      	str	r3, [r7, #4]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d9ef      	bls.n	800a55c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a57c:	480d      	ldr	r0, [pc, #52]	@ (800a5b4 <prvInitialiseTaskLists+0x64>)
 800a57e:	f7fe fb28 	bl	8008bd2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a582:	480d      	ldr	r0, [pc, #52]	@ (800a5b8 <prvInitialiseTaskLists+0x68>)
 800a584:	f7fe fb25 	bl	8008bd2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a588:	480c      	ldr	r0, [pc, #48]	@ (800a5bc <prvInitialiseTaskLists+0x6c>)
 800a58a:	f7fe fb22 	bl	8008bd2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a58e:	480c      	ldr	r0, [pc, #48]	@ (800a5c0 <prvInitialiseTaskLists+0x70>)
 800a590:	f7fe fb1f 	bl	8008bd2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a594:	480b      	ldr	r0, [pc, #44]	@ (800a5c4 <prvInitialiseTaskLists+0x74>)
 800a596:	f7fe fb1c 	bl	8008bd2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a59a:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c8 <prvInitialiseTaskLists+0x78>)
 800a59c:	4a05      	ldr	r2, [pc, #20]	@ (800a5b4 <prvInitialiseTaskLists+0x64>)
 800a59e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5cc <prvInitialiseTaskLists+0x7c>)
 800a5a2:	4a05      	ldr	r2, [pc, #20]	@ (800a5b8 <prvInitialiseTaskLists+0x68>)
 800a5a4:	601a      	str	r2, [r3, #0]
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	2000034c 	.word	0x2000034c
 800a5b4:	200003b0 	.word	0x200003b0
 800a5b8:	200003c4 	.word	0x200003c4
 800a5bc:	200003e0 	.word	0x200003e0
 800a5c0:	200003f4 	.word	0x200003f4
 800a5c4:	2000040c 	.word	0x2000040c
 800a5c8:	200003d8 	.word	0x200003d8
 800a5cc:	200003dc 	.word	0x200003dc

0800a5d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5d6:	e019      	b.n	800a60c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a5d8:	f000 fec0 	bl	800b35c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5dc:	4b10      	ldr	r3, [pc, #64]	@ (800a620 <prvCheckTasksWaitingTermination+0x50>)
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fb58 	bl	8008c9e <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a624 <prvCheckTasksWaitingTermination+0x54>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	4a0b      	ldr	r2, [pc, #44]	@ (800a624 <prvCheckTasksWaitingTermination+0x54>)
 800a5f6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a5f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a628 <prvCheckTasksWaitingTermination+0x58>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	4a0a      	ldr	r2, [pc, #40]	@ (800a628 <prvCheckTasksWaitingTermination+0x58>)
 800a600:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a602:	f000 fedd 	bl	800b3c0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f810 	bl	800a62c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a60c:	4b06      	ldr	r3, [pc, #24]	@ (800a628 <prvCheckTasksWaitingTermination+0x58>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e1      	bne.n	800a5d8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	200003f4 	.word	0x200003f4
 800a624:	20000420 	.word	0x20000420
 800a628:	20000408 	.word	0x20000408

0800a62c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a638:	4618      	mov	r0, r3
 800a63a:	f001 f833 	bl	800b6a4 <vPortFree>
            vPortFree( pxTCB );
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 f830 	bl	800b6a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a64c:	b480      	push	{r7}
 800a64e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a650:	4b0a      	ldr	r3, [pc, #40]	@ (800a67c <prvResetNextTaskUnblockTime+0x30>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d104      	bne.n	800a664 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a65a:	4b09      	ldr	r3, [pc, #36]	@ (800a680 <prvResetNextTaskUnblockTime+0x34>)
 800a65c:	f04f 32ff 	mov.w	r2, #4294967295
 800a660:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a662:	e005      	b.n	800a670 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a664:	4b05      	ldr	r3, [pc, #20]	@ (800a67c <prvResetNextTaskUnblockTime+0x30>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a04      	ldr	r2, [pc, #16]	@ (800a680 <prvResetNextTaskUnblockTime+0x34>)
 800a66e:	6013      	str	r3, [r2, #0]
}
 800a670:	bf00      	nop
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	200003d8 	.word	0x200003d8
 800a680:	20000440 	.word	0x20000440

0800a684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a68a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b8 <xTaskGetSchedulerState+0x34>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d102      	bne.n	800a698 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a692:	2301      	movs	r3, #1
 800a694:	607b      	str	r3, [r7, #4]
 800a696:	e008      	b.n	800a6aa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a698:	4b08      	ldr	r3, [pc, #32]	@ (800a6bc <xTaskGetSchedulerState+0x38>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d102      	bne.n	800a6a6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	607b      	str	r3, [r7, #4]
 800a6a4:	e001      	b.n	800a6aa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a6aa:	687b      	ldr	r3, [r7, #4]
    }
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	2000042c 	.word	0x2000042c
 800a6bc:	20000448 	.word	0x20000448

0800a6c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 8087 	beq.w	800a7e6 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6dc:	4b44      	ldr	r3, [pc, #272]	@ (800a7f0 <xTaskPriorityInherit+0x130>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d276      	bcs.n	800a7d4 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	db06      	blt.n	800a6fc <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6ee:	4b40      	ldr	r3, [pc, #256]	@ (800a7f0 <xTaskPriorityInherit+0x130>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f4:	f1c3 0205 	rsb	r2, r3, #5
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	6959      	ldr	r1, [r3, #20]
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a704:	4613      	mov	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4a39      	ldr	r2, [pc, #228]	@ (800a7f4 <xTaskPriorityInherit+0x134>)
 800a70e:	4413      	add	r3, r2
 800a710:	4299      	cmp	r1, r3
 800a712:	d157      	bne.n	800a7c4 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	3304      	adds	r3, #4
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe fac0 	bl	8008c9e <uxListRemove>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10a      	bne.n	800a73a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a728:	2201      	movs	r2, #1
 800a72a:	fa02 f303 	lsl.w	r3, r2, r3
 800a72e:	43da      	mvns	r2, r3
 800a730:	4b31      	ldr	r3, [pc, #196]	@ (800a7f8 <xTaskPriorityInherit+0x138>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4013      	ands	r3, r2
 800a736:	4a30      	ldr	r2, [pc, #192]	@ (800a7f8 <xTaskPriorityInherit+0x138>)
 800a738:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a73a:	4b2d      	ldr	r3, [pc, #180]	@ (800a7f0 <xTaskPriorityInherit+0x130>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a748:	2201      	movs	r2, #1
 800a74a:	409a      	lsls	r2, r3
 800a74c:	4b2a      	ldr	r3, [pc, #168]	@ (800a7f8 <xTaskPriorityInherit+0x138>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4313      	orrs	r3, r2
 800a752:	4a29      	ldr	r2, [pc, #164]	@ (800a7f8 <xTaskPriorityInherit+0x138>)
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a75a:	4926      	ldr	r1, [pc, #152]	@ (800a7f4 <xTaskPriorityInherit+0x134>)
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	440b      	add	r3, r1
 800a766:	3304      	adds	r3, #4
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	609a      	str	r2, [r3, #8]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	689a      	ldr	r2, [r3, #8]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	60da      	str	r2, [r3, #12]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	3204      	adds	r2, #4
 800a782:	605a      	str	r2, [r3, #4]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	609a      	str	r2, [r3, #8]
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4a16      	ldr	r2, [pc, #88]	@ (800a7f4 <xTaskPriorityInherit+0x134>)
 800a79a:	441a      	add	r2, r3
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	615a      	str	r2, [r3, #20]
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a4:	4913      	ldr	r1, [pc, #76]	@ (800a7f4 <xTaskPriorityInherit+0x134>)
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	1c59      	adds	r1, r3, #1
 800a7b4:	480f      	ldr	r0, [pc, #60]	@ (800a7f4 <xTaskPriorityInherit+0x134>)
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4403      	add	r3, r0
 800a7c0:	6019      	str	r1, [r3, #0]
 800a7c2:	e004      	b.n	800a7ce <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f0 <xTaskPriorityInherit+0x130>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	e008      	b.n	800a7e6 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7d8:	4b05      	ldr	r3, [pc, #20]	@ (800a7f0 <xTaskPriorityInherit+0x130>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d201      	bcs.n	800a7e6 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a7e6:	697b      	ldr	r3, [r7, #20]
    }
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20000348 	.word	0x20000348
 800a7f4:	2000034c 	.word	0x2000034c
 800a7f8:	20000428 	.word	0x20000428

0800a7fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800a808:	2300      	movs	r3, #0
 800a80a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 808e 	beq.w	800a930 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a814:	4b49      	ldr	r3, [pc, #292]	@ (800a93c <xTaskPriorityDisinherit+0x140>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	69ba      	ldr	r2, [r7, #24]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d00b      	beq.n	800a836 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	613b      	str	r3, [r7, #16]
    }
 800a830:	bf00      	nop
 800a832:	bf00      	nop
 800a834:	e7fd      	b.n	800a832 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10b      	bne.n	800a856 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	60fb      	str	r3, [r7, #12]
    }
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	e7fd      	b.n	800a852 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a85a:	1e5a      	subs	r2, r3, #1
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a868:	429a      	cmp	r2, r3
 800a86a:	d061      	beq.n	800a930 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d15d      	bne.n	800a930 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	3304      	adds	r3, #4
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe fa10 	bl	8008c9e <uxListRemove>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a888:	2201      	movs	r2, #1
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	43da      	mvns	r2, r3
 800a890:	4b2b      	ldr	r3, [pc, #172]	@ (800a940 <xTaskPriorityDisinherit+0x144>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4013      	ands	r3, r2
 800a896:	4a2a      	ldr	r2, [pc, #168]	@ (800a940 <xTaskPriorityDisinherit+0x144>)
 800a898:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a6:	f1c3 0205 	rsb	r2, r3, #5
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	409a      	lsls	r2, r3
 800a8b6:	4b22      	ldr	r3, [pc, #136]	@ (800a940 <xTaskPriorityDisinherit+0x144>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	4a20      	ldr	r2, [pc, #128]	@ (800a940 <xTaskPriorityDisinherit+0x144>)
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c4:	491f      	ldr	r1, [pc, #124]	@ (800a944 <xTaskPriorityDisinherit+0x148>)
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	440b      	add	r3, r1
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	617b      	str	r3, [r7, #20]
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	609a      	str	r2, [r3, #8]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	60da      	str	r2, [r3, #12]
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	3204      	adds	r2, #4
 800a8ec:	605a      	str	r2, [r3, #4]
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	1d1a      	adds	r2, r3, #4
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	609a      	str	r2, [r3, #8]
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4a10      	ldr	r2, [pc, #64]	@ (800a944 <xTaskPriorityDisinherit+0x148>)
 800a904:	441a      	add	r2, r3
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	615a      	str	r2, [r3, #20]
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a90e:	490d      	ldr	r1, [pc, #52]	@ (800a944 <xTaskPriorityDisinherit+0x148>)
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	440b      	add	r3, r1
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	1c59      	adds	r1, r3, #1
 800a91e:	4809      	ldr	r0, [pc, #36]	@ (800a944 <xTaskPriorityDisinherit+0x148>)
 800a920:	4613      	mov	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4403      	add	r3, r0
 800a92a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a92c:	2301      	movs	r3, #1
 800a92e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a930:	69fb      	ldr	r3, [r7, #28]
    }
 800a932:	4618      	mov	r0, r3
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20000348 	.word	0x20000348
 800a940:	20000428 	.word	0x20000428
 800a944:	2000034c 	.word	0x2000034c

0800a948 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08a      	sub	sp, #40	@ 0x28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a956:	2301      	movs	r3, #1
 800a958:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 80a3 	beq.w	800aaa8 <vTaskPriorityDisinheritAfterTimeout+0x160>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10b      	bne.n	800a982 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	613b      	str	r3, [r7, #16]
    }
 800a97c:	bf00      	nop
 800a97e:	bf00      	nop
 800a980:	e7fd      	b.n	800a97e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d902      	bls.n	800a992 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a990:	e002      	b.n	800a998 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a996:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	f000 8082 	beq.w	800aaa8 <vTaskPriorityDisinheritAfterTimeout+0x160>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a8:	69fa      	ldr	r2, [r7, #28]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d17c      	bne.n	800aaa8 <vTaskPriorityDisinheritAfterTimeout+0x160>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800a9ae:	4b40      	ldr	r3, [pc, #256]	@ (800aab0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6a3a      	ldr	r2, [r7, #32]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d10b      	bne.n	800a9d0 <vTaskPriorityDisinheritAfterTimeout+0x88>
        __asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	60fb      	str	r3, [r7, #12]
    }
 800a9ca:	bf00      	nop
 800a9cc:	bf00      	nop
 800a9ce:	e7fd      	b.n	800a9cc <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d4:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9da:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	db04      	blt.n	800a9ee <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e6:	f1c3 0205 	rsb	r2, r3, #5
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	6959      	ldr	r1, [r3, #20]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4a2d      	ldr	r2, [pc, #180]	@ (800aab4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800a9fe:	4413      	add	r3, r2
 800aa00:	4299      	cmp	r1, r3
 800aa02:	d151      	bne.n	800aaa8 <vTaskPriorityDisinheritAfterTimeout+0x160>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa04:	6a3b      	ldr	r3, [r7, #32]
 800aa06:	3304      	adds	r3, #4
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe f948 	bl	8008c9e <uxListRemove>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10a      	bne.n	800aa2a <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa18:	2201      	movs	r2, #1
 800aa1a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa1e:	43da      	mvns	r2, r3
 800aa20:	4b25      	ldr	r3, [pc, #148]	@ (800aab8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4013      	ands	r3, r2
 800aa26:	4a24      	ldr	r2, [pc, #144]	@ (800aab8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800aa28:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa2e:	2201      	movs	r2, #1
 800aa30:	409a      	lsls	r2, r3
 800aa32:	4b21      	ldr	r3, [pc, #132]	@ (800aab8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	4a1f      	ldr	r2, [pc, #124]	@ (800aab8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa40:	491c      	ldr	r1, [pc, #112]	@ (800aab4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	440b      	add	r3, r1
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	617b      	str	r3, [r7, #20]
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	609a      	str	r2, [r3, #8]
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	689a      	ldr	r2, [r3, #8]
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	60da      	str	r2, [r3, #12]
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	6a3a      	ldr	r2, [r7, #32]
 800aa66:	3204      	adds	r2, #4
 800aa68:	605a      	str	r2, [r3, #4]
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	1d1a      	adds	r2, r3, #4
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	609a      	str	r2, [r3, #8]
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa76:	4613      	mov	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4a0d      	ldr	r2, [pc, #52]	@ (800aab4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa80:	441a      	add	r2, r3
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	615a      	str	r2, [r3, #20]
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8a:	490a      	ldr	r1, [pc, #40]	@ (800aab4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	440b      	add	r3, r1
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	1c59      	adds	r1, r3, #1
 800aa9a:	4806      	ldr	r0, [pc, #24]	@ (800aab4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4403      	add	r3, r0
 800aaa6:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800aaa8:	bf00      	nop
 800aaaa:	3728      	adds	r7, #40	@ 0x28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20000348 	.word	0x20000348
 800aab4:	2000034c 	.word	0x2000034c
 800aab8:	20000428 	.word	0x20000428

0800aabc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800aac0:	4b07      	ldr	r3, [pc, #28]	@ (800aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d004      	beq.n	800aad2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800aac8:	4b05      	ldr	r3, [pc, #20]	@ (800aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aace:	3201      	adds	r2, #1
 800aad0:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800aad2:	4b03      	ldr	r3, [pc, #12]	@ (800aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aad4:	681b      	ldr	r3, [r3, #0]
    }
 800aad6:	4618      	mov	r0, r3
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	20000348 	.word	0x20000348

0800aae4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800aaee:	4b36      	ldr	r3, [pc, #216]	@ (800abc8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaf4:	4b35      	ldr	r3, [pc, #212]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe f8cf 	bl	8008c9e <uxListRemove>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10b      	bne.n	800ab1e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ab06:	4b31      	ldr	r3, [pc, #196]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab12:	43da      	mvns	r2, r3
 800ab14:	4b2e      	ldr	r3, [pc, #184]	@ (800abd0 <prvAddCurrentTaskToDelayedList+0xec>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4013      	ands	r3, r2
 800ab1a:	4a2d      	ldr	r2, [pc, #180]	@ (800abd0 <prvAddCurrentTaskToDelayedList+0xec>)
 800ab1c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d124      	bne.n	800ab70 <prvAddCurrentTaskToDelayedList+0x8c>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d021      	beq.n	800ab70 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab2c:	4b29      	ldr	r3, [pc, #164]	@ (800abd4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	4b26      	ldr	r3, [pc, #152]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	609a      	str	r2, [r3, #8]
 800ab3a:	4b24      	ldr	r3, [pc, #144]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	6892      	ldr	r2, [r2, #8]
 800ab42:	60da      	str	r2, [r3, #12]
 800ab44:	4b21      	ldr	r3, [pc, #132]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	3204      	adds	r2, #4
 800ab4e:	605a      	str	r2, [r3, #4]
 800ab50:	4b1e      	ldr	r3, [pc, #120]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	1d1a      	adds	r2, r3, #4
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	609a      	str	r2, [r3, #8]
 800ab5a:	4b1c      	ldr	r3, [pc, #112]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a1d      	ldr	r2, [pc, #116]	@ (800abd4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ab60:	615a      	str	r2, [r3, #20]
 800ab62:	4b1c      	ldr	r3, [pc, #112]	@ (800abd4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a1a      	ldr	r2, [pc, #104]	@ (800abd4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ab6e:	e026      	b.n	800abbe <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4413      	add	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab78:	4b14      	ldr	r3, [pc, #80]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d209      	bcs.n	800ab9c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab88:	4b13      	ldr	r3, [pc, #76]	@ (800abd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	4b0f      	ldr	r3, [pc, #60]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3304      	adds	r3, #4
 800ab92:	4619      	mov	r1, r3
 800ab94:	4610      	mov	r0, r2
 800ab96:	f7fe f849 	bl	8008c2c <vListInsert>
}
 800ab9a:	e010      	b.n	800abbe <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	@ (800abdc <prvAddCurrentTaskToDelayedList+0xf8>)
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	4b0a      	ldr	r3, [pc, #40]	@ (800abcc <prvAddCurrentTaskToDelayedList+0xe8>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3304      	adds	r3, #4
 800aba6:	4619      	mov	r1, r3
 800aba8:	4610      	mov	r0, r2
 800abaa:	f7fe f83f 	bl	8008c2c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800abae:	4b0c      	ldr	r3, [pc, #48]	@ (800abe0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d202      	bcs.n	800abbe <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800abb8:	4a09      	ldr	r2, [pc, #36]	@ (800abe0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6013      	str	r3, [r2, #0]
}
 800abbe:	bf00      	nop
 800abc0:	3718      	adds	r7, #24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20000424 	.word	0x20000424
 800abcc:	20000348 	.word	0x20000348
 800abd0:	20000428 	.word	0x20000428
 800abd4:	2000040c 	.word	0x2000040c
 800abd8:	200003dc 	.word	0x200003dc
 800abdc:	200003d8 	.word	0x200003d8
 800abe0:	20000440 	.word	0x20000440

0800abe4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800abea:	2300      	movs	r3, #0
 800abec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800abee:	f000 fa4f 	bl	800b090 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800abf2:	4b12      	ldr	r3, [pc, #72]	@ (800ac3c <xTimerCreateTimerTask+0x58>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00b      	beq.n	800ac12 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800abfa:	4b11      	ldr	r3, [pc, #68]	@ (800ac40 <xTimerCreateTimerTask+0x5c>)
 800abfc:	9301      	str	r3, [sp, #4]
 800abfe:	2302      	movs	r3, #2
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	2300      	movs	r3, #0
 800ac04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ac08:	490e      	ldr	r1, [pc, #56]	@ (800ac44 <xTimerCreateTimerTask+0x60>)
 800ac0a:	480f      	ldr	r0, [pc, #60]	@ (800ac48 <xTimerCreateTimerTask+0x64>)
 800ac0c:	f7fe fe38 	bl	8009880 <xTaskCreate>
 800ac10:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10b      	bne.n	800ac30 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800ac18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	603b      	str	r3, [r7, #0]
    }
 800ac2a:	bf00      	nop
 800ac2c:	bf00      	nop
 800ac2e:	e7fd      	b.n	800ac2c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800ac30:	687b      	ldr	r3, [r7, #4]
    }
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	2000047c 	.word	0x2000047c
 800ac40:	20000480 	.word	0x20000480
 800ac44:	0800e4cc 	.word	0x0800e4cc
 800ac48:	0800acf1 	.word	0x0800acf1

0800ac4c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ac58:	e008      	b.n	800ac6c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	4413      	add	r3, r2
 800ac62:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	699a      	ldr	r2, [r3, #24]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	18d1      	adds	r1, r2, r3
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f8df 	bl	800ae3c <prvInsertTimerInActiveList>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1ea      	bne.n	800ac5a <prvReloadTimer+0xe>
        }
    }
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac9a:	4b14      	ldr	r3, [pc, #80]	@ (800acec <prvProcessExpiredTimer+0x5c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3304      	adds	r3, #4
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fd fff8 	bl	8008c9e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff ffc3 	bl	800ac4c <prvReloadTimer>
 800acc6:	e008      	b.n	800acda <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acce:	f023 0301 	bic.w	r3, r3, #1
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	4798      	blx	r3
    }
 800ace2:	bf00      	nop
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	20000474 	.word	0x20000474

0800acf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acf8:	f107 0308 	add.w	r3, r7, #8
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 f859 	bl	800adb4 <prvGetNextExpireTime>
 800ad02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4619      	mov	r1, r3
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f000 f805 	bl	800ad18 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800ad0e:	f000 f8d7 	bl	800aec0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad12:	bf00      	nop
 800ad14:	e7f0      	b.n	800acf8 <prvTimerTask+0x8>
	...

0800ad18 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800ad22:	f7fe ffa1 	bl	8009c68 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad26:	f107 0308 	add.w	r3, r7, #8
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f866 	bl	800adfc <prvSampleTimeNow>
 800ad30:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d130      	bne.n	800ad9a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <prvProcessTimerOrBlockTask+0x3c>
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d806      	bhi.n	800ad54 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800ad46:	f7fe ff9d 	bl	8009c84 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff ff9f 	bl	800ac90 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800ad52:	e024      	b.n	800ad9e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d008      	beq.n	800ad6c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad5a:	4b13      	ldr	r3, [pc, #76]	@ (800ada8 <prvProcessTimerOrBlockTask+0x90>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <prvProcessTimerOrBlockTask+0x50>
 800ad64:	2301      	movs	r3, #1
 800ad66:	e000      	b.n	800ad6a <prvProcessTimerOrBlockTask+0x52>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad6c:	4b0f      	ldr	r3, [pc, #60]	@ (800adac <prvProcessTimerOrBlockTask+0x94>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	f7fe fd4d 	bl	8009818 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800ad7e:	f7fe ff81 	bl	8009c84 <xTaskResumeAll>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800ad88:	4b09      	ldr	r3, [pc, #36]	@ (800adb0 <prvProcessTimerOrBlockTask+0x98>)
 800ad8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	f3bf 8f6f 	isb	sy
    }
 800ad98:	e001      	b.n	800ad9e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800ad9a:	f7fe ff73 	bl	8009c84 <xTaskResumeAll>
    }
 800ad9e:	bf00      	nop
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20000478 	.word	0x20000478
 800adac:	2000047c 	.word	0x2000047c
 800adb0:	e000ed04 	.word	0xe000ed04

0800adb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800adbc:	4b0e      	ldr	r3, [pc, #56]	@ (800adf8 <prvGetNextExpireTime+0x44>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <prvGetNextExpireTime+0x16>
 800adc6:	2201      	movs	r2, #1
 800adc8:	e000      	b.n	800adcc <prvGetNextExpireTime+0x18>
 800adca:	2200      	movs	r2, #0
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d105      	bne.n	800ade4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800add8:	4b07      	ldr	r3, [pc, #28]	@ (800adf8 <prvGetNextExpireTime+0x44>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	e001      	b.n	800ade8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800ade8:	68fb      	ldr	r3, [r7, #12]
    }
 800adea:	4618      	mov	r0, r3
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	20000474 	.word	0x20000474

0800adfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800ae04:	f7ff f83a 	bl	8009e7c <xTaskGetTickCount>
 800ae08:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800ae0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae38 <prvSampleTimeNow+0x3c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d205      	bcs.n	800ae20 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800ae14:	f000 f916 	bl	800b044 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	e002      	b.n	800ae26 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800ae26:	4a04      	ldr	r2, [pc, #16]	@ (800ae38 <prvSampleTimeNow+0x3c>)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
    }
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20000484 	.word	0x20000484

0800ae3c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
 800ae48:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d812      	bhi.n	800ae88 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	1ad2      	subs	r2, r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d302      	bcc.n	800ae76 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800ae70:	2301      	movs	r3, #1
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	e01b      	b.n	800aeae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae76:	4b10      	ldr	r3, [pc, #64]	@ (800aeb8 <prvInsertTimerInActiveList+0x7c>)
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4610      	mov	r0, r2
 800ae82:	f7fd fed3 	bl	8008c2c <vListInsert>
 800ae86:	e012      	b.n	800aeae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d206      	bcs.n	800ae9e <prvInsertTimerInActiveList+0x62>
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d302      	bcc.n	800ae9e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e007      	b.n	800aeae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae9e:	4b07      	ldr	r3, [pc, #28]	@ (800aebc <prvInsertTimerInActiveList+0x80>)
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f7fd febf 	bl	8008c2c <vListInsert>
            }
        }

        return xProcessTimerNow;
 800aeae:	697b      	ldr	r3, [r7, #20]
    }
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	20000478 	.word	0x20000478
 800aebc:	20000474 	.word	0x20000474

0800aec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aec6:	e0a9      	b.n	800b01c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f2c0 80a6 	blt.w	800b01c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d004      	beq.n	800aee6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	3304      	adds	r3, #4
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fd fedc 	bl	8008c9e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aee6:	1d3b      	adds	r3, r7, #4
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff ff87 	bl	800adfc <prvSampleTimeNow>
 800aeee:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	2b08      	cmp	r3, #8
 800aef6:	f200 808e 	bhi.w	800b016 <prvProcessReceivedCommands+0x156>
 800aefa:	a201      	add	r2, pc, #4	@ (adr r2, 800af00 <prvProcessReceivedCommands+0x40>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af25 	.word	0x0800af25
 800af04:	0800af25 	.word	0x0800af25
 800af08:	0800af8d 	.word	0x0800af8d
 800af0c:	0800afa1 	.word	0x0800afa1
 800af10:	0800afed 	.word	0x0800afed
 800af14:	0800af25 	.word	0x0800af25
 800af18:	0800af25 	.word	0x0800af25
 800af1c:	0800af8d 	.word	0x0800af8d
 800af20:	0800afa1 	.word	0x0800afa1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af2a:	f043 0301 	orr.w	r3, r3, #1
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	18d1      	adds	r1, r2, r3
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	69ba      	ldr	r2, [r7, #24]
 800af42:	69f8      	ldr	r0, [r7, #28]
 800af44:	f7ff ff7a 	bl	800ae3c <prvInsertTimerInActiveList>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d065      	beq.n	800b01a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d009      	beq.n	800af70 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	4413      	add	r3, r2
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	4619      	mov	r1, r3
 800af68:	69f8      	ldr	r0, [r7, #28]
 800af6a:	f7ff fe6f 	bl	800ac4c <prvReloadTimer>
 800af6e:	e008      	b.n	800af82 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af76:	f023 0301 	bic.w	r3, r3, #1
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	6a1b      	ldr	r3, [r3, #32]
 800af86:	69f8      	ldr	r0, [r7, #28]
 800af88:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800af8a:	e046      	b.n	800b01a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af92:	f023 0301 	bic.w	r3, r3, #1
 800af96:	b2da      	uxtb	r2, r3
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800af9e:	e03d      	b.n	800b01c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afa6:	f043 0301 	orr.w	r3, r3, #1
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10b      	bne.n	800afd8 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	617b      	str	r3, [r7, #20]
    }
 800afd2:	bf00      	nop
 800afd4:	bf00      	nop
 800afd6:	e7fd      	b.n	800afd4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	699a      	ldr	r2, [r3, #24]
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	18d1      	adds	r1, r2, r3
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	69f8      	ldr	r0, [r7, #28]
 800afe6:	f7ff ff29 	bl	800ae3c <prvInsertTimerInActiveList>
                        break;
 800afea:	e017      	b.n	800b01c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d103      	bne.n	800b002 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800affa:	69f8      	ldr	r0, [r7, #28]
 800affc:	f000 fb52 	bl	800b6a4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b000:	e00c      	b.n	800b01c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b008:	f023 0301 	bic.w	r3, r3, #1
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b014:	e002      	b.n	800b01c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b016:	bf00      	nop
 800b018:	e000      	b.n	800b01c <prvProcessReceivedCommands+0x15c>
                        break;
 800b01a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b01c:	4b08      	ldr	r3, [pc, #32]	@ (800b040 <prvProcessReceivedCommands+0x180>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f107 0108 	add.w	r1, r7, #8
 800b024:	2200      	movs	r2, #0
 800b026:	4618      	mov	r0, r3
 800b028:	f7fe f89c 	bl	8009164 <xQueueReceive>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f47f af4a 	bne.w	800aec8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	2000047c 	.word	0x2000047c

0800b044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b04a:	e009      	b.n	800b060 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b04c:	4b0e      	ldr	r3, [pc, #56]	@ (800b088 <prvSwitchTimerLists+0x44>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800b056:	f04f 31ff 	mov.w	r1, #4294967295
 800b05a:	6838      	ldr	r0, [r7, #0]
 800b05c:	f7ff fe18 	bl	800ac90 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b060:	4b09      	ldr	r3, [pc, #36]	@ (800b088 <prvSwitchTimerLists+0x44>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1f0      	bne.n	800b04c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800b06a:	4b07      	ldr	r3, [pc, #28]	@ (800b088 <prvSwitchTimerLists+0x44>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800b070:	4b06      	ldr	r3, [pc, #24]	@ (800b08c <prvSwitchTimerLists+0x48>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a04      	ldr	r2, [pc, #16]	@ (800b088 <prvSwitchTimerLists+0x44>)
 800b076:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b078:	4a04      	ldr	r2, [pc, #16]	@ (800b08c <prvSwitchTimerLists+0x48>)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6013      	str	r3, [r2, #0]
    }
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20000474 	.word	0x20000474
 800b08c:	20000478 	.word	0x20000478

0800b090 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b094:	f000 f962 	bl	800b35c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b098:	4b12      	ldr	r3, [pc, #72]	@ (800b0e4 <prvCheckForValidListAndQueue+0x54>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d11d      	bne.n	800b0dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b0a0:	4811      	ldr	r0, [pc, #68]	@ (800b0e8 <prvCheckForValidListAndQueue+0x58>)
 800b0a2:	f7fd fd96 	bl	8008bd2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b0a6:	4811      	ldr	r0, [pc, #68]	@ (800b0ec <prvCheckForValidListAndQueue+0x5c>)
 800b0a8:	f7fd fd93 	bl	8008bd2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b0ac:	4b10      	ldr	r3, [pc, #64]	@ (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b0ae:	4a0e      	ldr	r2, [pc, #56]	@ (800b0e8 <prvCheckForValidListAndQueue+0x58>)
 800b0b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b0b2:	4b10      	ldr	r3, [pc, #64]	@ (800b0f4 <prvCheckForValidListAndQueue+0x64>)
 800b0b4:	4a0d      	ldr	r2, [pc, #52]	@ (800b0ec <prvCheckForValidListAndQueue+0x5c>)
 800b0b6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	210c      	movs	r1, #12
 800b0bc:	200a      	movs	r0, #10
 800b0be:	f7fd feab 	bl	8008e18 <xQueueGenericCreate>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	4a07      	ldr	r2, [pc, #28]	@ (800b0e4 <prvCheckForValidListAndQueue+0x54>)
 800b0c6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800b0c8:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <prvCheckForValidListAndQueue+0x54>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d005      	beq.n	800b0dc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0d0:	4b04      	ldr	r3, [pc, #16]	@ (800b0e4 <prvCheckForValidListAndQueue+0x54>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4908      	ldr	r1, [pc, #32]	@ (800b0f8 <prvCheckForValidListAndQueue+0x68>)
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe fb4e 	bl	8009778 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b0dc:	f000 f970 	bl	800b3c0 <vPortExitCritical>
    }
 800b0e0:	bf00      	nop
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	2000047c 	.word	0x2000047c
 800b0e8:	2000044c 	.word	0x2000044c
 800b0ec:	20000460 	.word	0x20000460
 800b0f0:	20000474 	.word	0x20000474
 800b0f4:	20000478 	.word	0x20000478
 800b0f8:	0800e4d4 	.word	0x0800e4d4

0800b0fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3b04      	subs	r3, #4
 800b10c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b114:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3b04      	subs	r3, #4
 800b11a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f023 0201 	bic.w	r2, r3, #1
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3b04      	subs	r3, #4
 800b12a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b12c:	4a0c      	ldr	r2, [pc, #48]	@ (800b160 <pxPortInitialiseStack+0x64>)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3b14      	subs	r3, #20
 800b136:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3b04      	subs	r3, #4
 800b142:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f06f 0202 	mvn.w	r2, #2
 800b14a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3b20      	subs	r3, #32
 800b150:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b152:	68fb      	ldr	r3, [r7, #12]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	0800b165 	.word	0x0800b165

0800b164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b16e:	4b13      	ldr	r3, [pc, #76]	@ (800b1bc <prvTaskExitError+0x58>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b176:	d00b      	beq.n	800b190 <prvTaskExitError+0x2c>
        __asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	60fb      	str	r3, [r7, #12]
    }
 800b18a:	bf00      	nop
 800b18c:	bf00      	nop
 800b18e:	e7fd      	b.n	800b18c <prvTaskExitError+0x28>
        __asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	60bb      	str	r3, [r7, #8]
    }
 800b1a2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b1a4:	bf00      	nop
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0fc      	beq.n	800b1a6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b1ac:	bf00      	nop
 800b1ae:	bf00      	nop
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	20000010 	.word	0x20000010

0800b1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b1c0:	4b07      	ldr	r3, [pc, #28]	@ (800b1e0 <pxCurrentTCBConst2>)
 800b1c2:	6819      	ldr	r1, [r3, #0]
 800b1c4:	6808      	ldr	r0, [r1, #0]
 800b1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ca:	f380 8809 	msr	PSP, r0
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f04f 0000 	mov.w	r0, #0
 800b1d6:	f380 8811 	msr	BASEPRI, r0
 800b1da:	4770      	bx	lr
 800b1dc:	f3af 8000 	nop.w

0800b1e0 <pxCurrentTCBConst2>:
 800b1e0:	20000348 	.word	0x20000348
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop

0800b1e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b1e8:	4808      	ldr	r0, [pc, #32]	@ (800b20c <prvPortStartFirstTask+0x24>)
 800b1ea:	6800      	ldr	r0, [r0, #0]
 800b1ec:	6800      	ldr	r0, [r0, #0]
 800b1ee:	f380 8808 	msr	MSP, r0
 800b1f2:	f04f 0000 	mov.w	r0, #0
 800b1f6:	f380 8814 	msr	CONTROL, r0
 800b1fa:	b662      	cpsie	i
 800b1fc:	b661      	cpsie	f
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	df00      	svc	0
 800b208:	bf00      	nop
 800b20a:	0000      	.short	0x0000
 800b20c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b210:	bf00      	nop
 800b212:	bf00      	nop

0800b214 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b21a:	4b47      	ldr	r3, [pc, #284]	@ (800b338 <xPortStartScheduler+0x124>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a47      	ldr	r2, [pc, #284]	@ (800b33c <xPortStartScheduler+0x128>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d10b      	bne.n	800b23c <xPortStartScheduler+0x28>
        __asm volatile
 800b224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	613b      	str	r3, [r7, #16]
    }
 800b236:	bf00      	nop
 800b238:	bf00      	nop
 800b23a:	e7fd      	b.n	800b238 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b23c:	4b3e      	ldr	r3, [pc, #248]	@ (800b338 <xPortStartScheduler+0x124>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a3f      	ldr	r2, [pc, #252]	@ (800b340 <xPortStartScheduler+0x12c>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d10b      	bne.n	800b25e <xPortStartScheduler+0x4a>
        __asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	60fb      	str	r3, [r7, #12]
    }
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	e7fd      	b.n	800b25a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b25e:	4b39      	ldr	r3, [pc, #228]	@ (800b344 <xPortStartScheduler+0x130>)
 800b260:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	b2db      	uxtb	r3, r3
 800b268:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	22ff      	movs	r2, #255	@ 0xff
 800b26e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	b2db      	uxtb	r3, r3
 800b276:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b280:	b2da      	uxtb	r2, r3
 800b282:	4b31      	ldr	r3, [pc, #196]	@ (800b348 <xPortStartScheduler+0x134>)
 800b284:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b286:	4b31      	ldr	r3, [pc, #196]	@ (800b34c <xPortStartScheduler+0x138>)
 800b288:	2207      	movs	r2, #7
 800b28a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b28c:	e009      	b.n	800b2a2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800b28e:	4b2f      	ldr	r3, [pc, #188]	@ (800b34c <xPortStartScheduler+0x138>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3b01      	subs	r3, #1
 800b294:	4a2d      	ldr	r2, [pc, #180]	@ (800b34c <xPortStartScheduler+0x138>)
 800b296:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b298:	78fb      	ldrb	r3, [r7, #3]
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2a2:	78fb      	ldrb	r3, [r7, #3]
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2aa:	2b80      	cmp	r3, #128	@ 0x80
 800b2ac:	d0ef      	beq.n	800b28e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2ae:	4b27      	ldr	r3, [pc, #156]	@ (800b34c <xPortStartScheduler+0x138>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f1c3 0307 	rsb	r3, r3, #7
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d00b      	beq.n	800b2d2 <xPortStartScheduler+0xbe>
        __asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	60bb      	str	r3, [r7, #8]
    }
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	e7fd      	b.n	800b2ce <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2d2:	4b1e      	ldr	r3, [pc, #120]	@ (800b34c <xPortStartScheduler+0x138>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	021b      	lsls	r3, r3, #8
 800b2d8:	4a1c      	ldr	r2, [pc, #112]	@ (800b34c <xPortStartScheduler+0x138>)
 800b2da:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b34c <xPortStartScheduler+0x138>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2e4:	4a19      	ldr	r2, [pc, #100]	@ (800b34c <xPortStartScheduler+0x138>)
 800b2e6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b2f0:	4b17      	ldr	r3, [pc, #92]	@ (800b350 <xPortStartScheduler+0x13c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a16      	ldr	r2, [pc, #88]	@ (800b350 <xPortStartScheduler+0x13c>)
 800b2f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b2fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b2fc:	4b14      	ldr	r3, [pc, #80]	@ (800b350 <xPortStartScheduler+0x13c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a13      	ldr	r2, [pc, #76]	@ (800b350 <xPortStartScheduler+0x13c>)
 800b302:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b306:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b308:	f000 f8e0 	bl	800b4cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b30c:	4b11      	ldr	r3, [pc, #68]	@ (800b354 <xPortStartScheduler+0x140>)
 800b30e:	2200      	movs	r2, #0
 800b310:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b312:	f000 f8ff 	bl	800b514 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b316:	4b10      	ldr	r3, [pc, #64]	@ (800b358 <xPortStartScheduler+0x144>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a0f      	ldr	r2, [pc, #60]	@ (800b358 <xPortStartScheduler+0x144>)
 800b31c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b320:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b322:	f7ff ff61 	bl	800b1e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b326:	f7fe fed1 	bl	800a0cc <vTaskSwitchContext>
    prvTaskExitError();
 800b32a:	f7ff ff1b 	bl	800b164 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3718      	adds	r7, #24
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	e000ed00 	.word	0xe000ed00
 800b33c:	410fc271 	.word	0x410fc271
 800b340:	410fc270 	.word	0x410fc270
 800b344:	e000e400 	.word	0xe000e400
 800b348:	20000488 	.word	0x20000488
 800b34c:	2000048c 	.word	0x2000048c
 800b350:	e000ed20 	.word	0xe000ed20
 800b354:	20000010 	.word	0x20000010
 800b358:	e000ef34 	.word	0xe000ef34

0800b35c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
        __asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	607b      	str	r3, [r7, #4]
    }
 800b374:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b376:	4b10      	ldr	r3, [pc, #64]	@ (800b3b8 <vPortEnterCritical+0x5c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3301      	adds	r3, #1
 800b37c:	4a0e      	ldr	r2, [pc, #56]	@ (800b3b8 <vPortEnterCritical+0x5c>)
 800b37e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b380:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b8 <vPortEnterCritical+0x5c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d110      	bne.n	800b3aa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b388:	4b0c      	ldr	r3, [pc, #48]	@ (800b3bc <vPortEnterCritical+0x60>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00b      	beq.n	800b3aa <vPortEnterCritical+0x4e>
        __asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	603b      	str	r3, [r7, #0]
    }
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop
 800b3a8:	e7fd      	b.n	800b3a6 <vPortEnterCritical+0x4a>
    }
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	20000010 	.word	0x20000010
 800b3bc:	e000ed04 	.word	0xe000ed04

0800b3c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b3c6:	4b12      	ldr	r3, [pc, #72]	@ (800b410 <vPortExitCritical+0x50>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10b      	bne.n	800b3e6 <vPortExitCritical+0x26>
        __asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	607b      	str	r3, [r7, #4]
    }
 800b3e0:	bf00      	nop
 800b3e2:	bf00      	nop
 800b3e4:	e7fd      	b.n	800b3e2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b3e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b410 <vPortExitCritical+0x50>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	4a08      	ldr	r2, [pc, #32]	@ (800b410 <vPortExitCritical+0x50>)
 800b3ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b3f0:	4b07      	ldr	r3, [pc, #28]	@ (800b410 <vPortExitCritical+0x50>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d105      	bne.n	800b404 <vPortExitCritical+0x44>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800b402:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20000010 	.word	0x20000010
	...

0800b420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b420:	f3ef 8009 	mrs	r0, PSP
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4b15      	ldr	r3, [pc, #84]	@ (800b480 <pxCurrentTCBConst>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	f01e 0f10 	tst.w	lr, #16
 800b430:	bf08      	it	eq
 800b432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43a:	6010      	str	r0, [r2, #0]
 800b43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b444:	f380 8811 	msr	BASEPRI, r0
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f7fe fe3c 	bl	800a0cc <vTaskSwitchContext>
 800b454:	f04f 0000 	mov.w	r0, #0
 800b458:	f380 8811 	msr	BASEPRI, r0
 800b45c:	bc09      	pop	{r0, r3}
 800b45e:	6819      	ldr	r1, [r3, #0]
 800b460:	6808      	ldr	r0, [r1, #0]
 800b462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b466:	f01e 0f10 	tst.w	lr, #16
 800b46a:	bf08      	it	eq
 800b46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b470:	f380 8809 	msr	PSP, r0
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w

0800b480 <pxCurrentTCBConst>:
 800b480:	20000348 	.word	0x20000348
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop

0800b488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
        __asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	607b      	str	r3, [r7, #4]
    }
 800b4a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b4a2:	f7fe fcfb 	bl	8009e9c <xTaskIncrementTick>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4ac:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <SysTick_Handler+0x40>)
 800b4ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	f383 8811 	msr	BASEPRI, r3
    }
 800b4be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800b4c0:	bf00      	nop
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b500 <vPortSetupTimerInterrupt+0x34>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b504 <vPortSetupTimerInterrupt+0x38>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b508 <vPortSetupTimerInterrupt+0x3c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b50c <vPortSetupTimerInterrupt+0x40>)
 800b4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e6:	099b      	lsrs	r3, r3, #6
 800b4e8:	4a09      	ldr	r2, [pc, #36]	@ (800b510 <vPortSetupTimerInterrupt+0x44>)
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ee:	4b04      	ldr	r3, [pc, #16]	@ (800b500 <vPortSetupTimerInterrupt+0x34>)
 800b4f0:	2207      	movs	r2, #7
 800b4f2:	601a      	str	r2, [r3, #0]
}
 800b4f4:	bf00      	nop
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	e000e010 	.word	0xe000e010
 800b504:	e000e018 	.word	0xe000e018
 800b508:	20000000 	.word	0x20000000
 800b50c:	10624dd3 	.word	0x10624dd3
 800b510:	e000e014 	.word	0xe000e014

0800b514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b524 <vPortEnableVFP+0x10>
 800b518:	6801      	ldr	r1, [r0, #0]
 800b51a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b51e:	6001      	str	r1, [r0, #0]
 800b520:	4770      	bx	lr
 800b522:	0000      	.short	0x0000
 800b524:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop

0800b52c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08a      	sub	sp, #40	@ 0x28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800b534:	2300      	movs	r3, #0
 800b536:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800b538:	f7fe fb96 	bl	8009c68 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b53c:	4b54      	ldr	r3, [pc, #336]	@ (800b690 <pvPortMalloc+0x164>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b544:	f000 f90c 	bl	800b760 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d012      	beq.n	800b574 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800b54e:	2208      	movs	r2, #8
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	3308      	adds	r3, #8
 800b55a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	43db      	mvns	r3, r3
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d804      	bhi.n	800b570 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	4413      	add	r3, r2
 800b56c:	607b      	str	r3, [r7, #4]
 800b56e:	e001      	b.n	800b574 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800b570:	2300      	movs	r3, #0
 800b572:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	db71      	blt.n	800b65e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d06e      	beq.n	800b65e <pvPortMalloc+0x132>
 800b580:	4b44      	ldr	r3, [pc, #272]	@ (800b694 <pvPortMalloc+0x168>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	429a      	cmp	r2, r3
 800b588:	d869      	bhi.n	800b65e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b58a:	4b43      	ldr	r3, [pc, #268]	@ (800b698 <pvPortMalloc+0x16c>)
 800b58c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b58e:	4b42      	ldr	r3, [pc, #264]	@ (800b698 <pvPortMalloc+0x16c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b594:	e004      	b.n	800b5a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800b596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b598:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d903      	bls.n	800b5b2 <pvPortMalloc+0x86>
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d1f1      	bne.n	800b596 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b5b2:	4b37      	ldr	r3, [pc, #220]	@ (800b690 <pvPortMalloc+0x164>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d050      	beq.n	800b65e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2208      	movs	r2, #8
 800b5c2:	4413      	add	r3, r2
 800b5c4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	1ad2      	subs	r2, r2, r3
 800b5d6:	2308      	movs	r3, #8
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d920      	bls.n	800b620 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f003 0307 	and.w	r3, r3, #7
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00b      	beq.n	800b608 <pvPortMalloc+0xdc>
        __asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	613b      	str	r3, [r7, #16]
    }
 800b602:	bf00      	nop
 800b604:	bf00      	nop
 800b606:	e7fd      	b.n	800b604 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	1ad2      	subs	r2, r2, r3
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b61a:	6978      	ldr	r0, [r7, #20]
 800b61c:	f000 f8fc 	bl	800b818 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b620:	4b1c      	ldr	r3, [pc, #112]	@ (800b694 <pvPortMalloc+0x168>)
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	4a1a      	ldr	r2, [pc, #104]	@ (800b694 <pvPortMalloc+0x168>)
 800b62c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b62e:	4b19      	ldr	r3, [pc, #100]	@ (800b694 <pvPortMalloc+0x168>)
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	4b1a      	ldr	r3, [pc, #104]	@ (800b69c <pvPortMalloc+0x170>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d203      	bcs.n	800b642 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b63a:	4b16      	ldr	r3, [pc, #88]	@ (800b694 <pvPortMalloc+0x168>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a17      	ldr	r2, [pc, #92]	@ (800b69c <pvPortMalloc+0x170>)
 800b640:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b650:	2200      	movs	r2, #0
 800b652:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b654:	4b12      	ldr	r3, [pc, #72]	@ (800b6a0 <pvPortMalloc+0x174>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3301      	adds	r3, #1
 800b65a:	4a11      	ldr	r2, [pc, #68]	@ (800b6a0 <pvPortMalloc+0x174>)
 800b65c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b65e:	f7fe fb11 	bl	8009c84 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	f003 0307 	and.w	r3, r3, #7
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00b      	beq.n	800b684 <pvPortMalloc+0x158>
        __asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	60fb      	str	r3, [r7, #12]
    }
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	e7fd      	b.n	800b680 <pvPortMalloc+0x154>
    return pvReturn;
 800b684:	69fb      	ldr	r3, [r7, #28]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3728      	adds	r7, #40	@ 0x28
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20013098 	.word	0x20013098
 800b694:	2001309c 	.word	0x2001309c
 800b698:	20013090 	.word	0x20013090
 800b69c:	200130a0 	.word	0x200130a0
 800b6a0:	200130a4 	.word	0x200130a4

0800b6a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d04b      	beq.n	800b74e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800b6b6:	2308      	movs	r3, #8
 800b6b8:	425b      	negs	r3, r3
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	4413      	add	r3, r2
 800b6be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	db0b      	blt.n	800b6e4 <vPortFree+0x40>
        __asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	60fb      	str	r3, [r7, #12]
    }
 800b6de:	bf00      	nop
 800b6e0:	bf00      	nop
 800b6e2:	e7fd      	b.n	800b6e0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00b      	beq.n	800b704 <vPortFree+0x60>
        __asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	60bb      	str	r3, [r7, #8]
    }
 800b6fe:	bf00      	nop
 800b700:	bf00      	nop
 800b702:	e7fd      	b.n	800b700 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	0fdb      	lsrs	r3, r3, #31
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01c      	beq.n	800b74e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d118      	bne.n	800b74e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800b728:	f7fe fa9e 	bl	8009c68 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	685a      	ldr	r2, [r3, #4]
 800b730:	4b09      	ldr	r3, [pc, #36]	@ (800b758 <vPortFree+0xb4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4413      	add	r3, r2
 800b736:	4a08      	ldr	r2, [pc, #32]	@ (800b758 <vPortFree+0xb4>)
 800b738:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b73a:	6938      	ldr	r0, [r7, #16]
 800b73c:	f000 f86c 	bl	800b818 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800b740:	4b06      	ldr	r3, [pc, #24]	@ (800b75c <vPortFree+0xb8>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3301      	adds	r3, #1
 800b746:	4a05      	ldr	r2, [pc, #20]	@ (800b75c <vPortFree+0xb8>)
 800b748:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800b74a:	f7fe fa9b 	bl	8009c84 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800b74e:	bf00      	nop
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	2001309c 	.word	0x2001309c
 800b75c:	200130a8 	.word	0x200130a8

0800b760 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b766:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800b76a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b76c:	4b25      	ldr	r3, [pc, #148]	@ (800b804 <prvHeapInit+0xa4>)
 800b76e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00c      	beq.n	800b794 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	3307      	adds	r3, #7
 800b77e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f023 0307 	bic.w	r3, r3, #7
 800b786:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	4a1d      	ldr	r2, [pc, #116]	@ (800b804 <prvHeapInit+0xa4>)
 800b790:	4413      	add	r3, r2
 800b792:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b798:	4a1b      	ldr	r2, [pc, #108]	@ (800b808 <prvHeapInit+0xa8>)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800b79e:	4b1a      	ldr	r3, [pc, #104]	@ (800b808 <prvHeapInit+0xa8>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800b7ac:	2208      	movs	r2, #8
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	1a9b      	subs	r3, r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 0307 	bic.w	r3, r3, #7
 800b7ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4a13      	ldr	r2, [pc, #76]	@ (800b80c <prvHeapInit+0xac>)
 800b7c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800b7c2:	4b12      	ldr	r3, [pc, #72]	@ (800b80c <prvHeapInit+0xac>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800b7ca:	4b10      	ldr	r3, [pc, #64]	@ (800b80c <prvHeapInit+0xac>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	1ad2      	subs	r2, r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b80c <prvHeapInit+0xac>)
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	4a08      	ldr	r2, [pc, #32]	@ (800b810 <prvHeapInit+0xb0>)
 800b7ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	4a07      	ldr	r2, [pc, #28]	@ (800b814 <prvHeapInit+0xb4>)
 800b7f6:	6013      	str	r3, [r2, #0]
}
 800b7f8:	bf00      	nop
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	20000490 	.word	0x20000490
 800b808:	20013090 	.word	0x20013090
 800b80c:	20013098 	.word	0x20013098
 800b810:	200130a0 	.word	0x200130a0
 800b814:	2001309c 	.word	0x2001309c

0800b818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b820:	4b28      	ldr	r3, [pc, #160]	@ (800b8c4 <prvInsertBlockIntoFreeList+0xac>)
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	e002      	b.n	800b82c <prvInsertBlockIntoFreeList+0x14>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60fb      	str	r3, [r7, #12]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	429a      	cmp	r2, r3
 800b834:	d8f7      	bhi.n	800b826 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	4413      	add	r3, r2
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	429a      	cmp	r2, r3
 800b846:	d108      	bne.n	800b85a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	441a      	add	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	441a      	add	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d118      	bne.n	800b8a0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	4b15      	ldr	r3, [pc, #84]	@ (800b8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	429a      	cmp	r2, r3
 800b878:	d00d      	beq.n	800b896 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	685a      	ldr	r2, [r3, #4]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	441a      	add	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	e008      	b.n	800b8a8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b896:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	e003      	b.n	800b8a8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d002      	beq.n	800b8b6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b8b6:	bf00      	nop
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20013090 	.word	0x20013090
 800b8c8:	20013098 	.word	0x20013098

0800b8cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b8d8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b8dc:	f002 fd42 	bl	800e364 <USBD_static_malloc>
 800b8e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d109      	bne.n	800b8fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	32b0      	adds	r2, #176	@ 0xb0
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	e0d4      	b.n	800baa6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b8fc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b900:	2100      	movs	r1, #0
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f002 fd72 	bl	800e3ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	32b0      	adds	r2, #176	@ 0xb0
 800b912:	68f9      	ldr	r1, [r7, #12]
 800b914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	32b0      	adds	r2, #176	@ 0xb0
 800b922:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	7c1b      	ldrb	r3, [r3, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d138      	bne.n	800b9a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b934:	4b5e      	ldr	r3, [pc, #376]	@ (800bab0 <USBD_CDC_Init+0x1e4>)
 800b936:	7819      	ldrb	r1, [r3, #0]
 800b938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b93c:	2202      	movs	r2, #2
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f002 fbed 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b944:	4b5a      	ldr	r3, [pc, #360]	@ (800bab0 <USBD_CDC_Init+0x1e4>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	f003 020f 	and.w	r2, r3, #15
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	4613      	mov	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	440b      	add	r3, r1
 800b958:	3324      	adds	r3, #36	@ 0x24
 800b95a:	2201      	movs	r2, #1
 800b95c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b95e:	4b55      	ldr	r3, [pc, #340]	@ (800bab4 <USBD_CDC_Init+0x1e8>)
 800b960:	7819      	ldrb	r1, [r3, #0]
 800b962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b966:	2202      	movs	r2, #2
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f002 fbd8 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b96e:	4b51      	ldr	r3, [pc, #324]	@ (800bab4 <USBD_CDC_Init+0x1e8>)
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	f003 020f 	and.w	r2, r3, #15
 800b976:	6879      	ldr	r1, [r7, #4]
 800b978:	4613      	mov	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	440b      	add	r3, r1
 800b982:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b986:	2201      	movs	r2, #1
 800b988:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b98a:	4b4b      	ldr	r3, [pc, #300]	@ (800bab8 <USBD_CDC_Init+0x1ec>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	f003 020f 	and.w	r2, r3, #15
 800b992:	6879      	ldr	r1, [r7, #4]
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	440b      	add	r3, r1
 800b99e:	3326      	adds	r3, #38	@ 0x26
 800b9a0:	2210      	movs	r2, #16
 800b9a2:	801a      	strh	r2, [r3, #0]
 800b9a4:	e035      	b.n	800ba12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b9a6:	4b42      	ldr	r3, [pc, #264]	@ (800bab0 <USBD_CDC_Init+0x1e4>)
 800b9a8:	7819      	ldrb	r1, [r3, #0]
 800b9aa:	2340      	movs	r3, #64	@ 0x40
 800b9ac:	2202      	movs	r2, #2
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f002 fbb5 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b9b4:	4b3e      	ldr	r3, [pc, #248]	@ (800bab0 <USBD_CDC_Init+0x1e4>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	f003 020f 	and.w	r2, r3, #15
 800b9bc:	6879      	ldr	r1, [r7, #4]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3324      	adds	r3, #36	@ 0x24
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b9ce:	4b39      	ldr	r3, [pc, #228]	@ (800bab4 <USBD_CDC_Init+0x1e8>)
 800b9d0:	7819      	ldrb	r1, [r3, #0]
 800b9d2:	2340      	movs	r3, #64	@ 0x40
 800b9d4:	2202      	movs	r2, #2
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f002 fba1 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b9dc:	4b35      	ldr	r3, [pc, #212]	@ (800bab4 <USBD_CDC_Init+0x1e8>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	f003 020f 	and.w	r2, r3, #15
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b9f8:	4b2f      	ldr	r3, [pc, #188]	@ (800bab8 <USBD_CDC_Init+0x1ec>)
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	f003 020f 	and.w	r2, r3, #15
 800ba00:	6879      	ldr	r1, [r7, #4]
 800ba02:	4613      	mov	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	440b      	add	r3, r1
 800ba0c:	3326      	adds	r3, #38	@ 0x26
 800ba0e:	2210      	movs	r2, #16
 800ba10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ba12:	4b29      	ldr	r3, [pc, #164]	@ (800bab8 <USBD_CDC_Init+0x1ec>)
 800ba14:	7819      	ldrb	r1, [r3, #0]
 800ba16:	2308      	movs	r3, #8
 800ba18:	2203      	movs	r2, #3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f002 fb7f 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ba20:	4b25      	ldr	r3, [pc, #148]	@ (800bab8 <USBD_CDC_Init+0x1ec>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 020f 	and.w	r2, r3, #15
 800ba28:	6879      	ldr	r1, [r7, #4]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	440b      	add	r3, r1
 800ba34:	3324      	adds	r3, #36	@ 0x24
 800ba36:	2201      	movs	r2, #1
 800ba38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	33b0      	adds	r3, #176	@ 0xb0
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ba70:	2302      	movs	r3, #2
 800ba72:	e018      	b.n	800baa6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	7c1b      	ldrb	r3, [r3, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10a      	bne.n	800ba92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba7c:	4b0d      	ldr	r3, [pc, #52]	@ (800bab4 <USBD_CDC_Init+0x1e8>)
 800ba7e:	7819      	ldrb	r1, [r3, #0]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ba86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f002 fc36 	bl	800e2fc <USBD_LL_PrepareReceive>
 800ba90:	e008      	b.n	800baa4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba92:	4b08      	ldr	r3, [pc, #32]	@ (800bab4 <USBD_CDC_Init+0x1e8>)
 800ba94:	7819      	ldrb	r1, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ba9c:	2340      	movs	r3, #64	@ 0x40
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f002 fc2c 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	2000009b 	.word	0x2000009b
 800bab4:	2000009c 	.word	0x2000009c
 800bab8:	2000009d 	.word	0x2000009d

0800babc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bac8:	4b3a      	ldr	r3, [pc, #232]	@ (800bbb4 <USBD_CDC_DeInit+0xf8>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f002 fb4b 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bad4:	4b37      	ldr	r3, [pc, #220]	@ (800bbb4 <USBD_CDC_DeInit+0xf8>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	f003 020f 	and.w	r2, r3, #15
 800badc:	6879      	ldr	r1, [r7, #4]
 800bade:	4613      	mov	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4413      	add	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	440b      	add	r3, r1
 800bae8:	3324      	adds	r3, #36	@ 0x24
 800baea:	2200      	movs	r2, #0
 800baec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800baee:	4b32      	ldr	r3, [pc, #200]	@ (800bbb8 <USBD_CDC_DeInit+0xfc>)
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f002 fb38 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bafa:	4b2f      	ldr	r3, [pc, #188]	@ (800bbb8 <USBD_CDC_DeInit+0xfc>)
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	f003 020f 	and.w	r2, r3, #15
 800bb02:	6879      	ldr	r1, [r7, #4]
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb12:	2200      	movs	r2, #0
 800bb14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bb16:	4b29      	ldr	r3, [pc, #164]	@ (800bbbc <USBD_CDC_DeInit+0x100>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f002 fb24 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bb22:	4b26      	ldr	r3, [pc, #152]	@ (800bbbc <USBD_CDC_DeInit+0x100>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	f003 020f 	and.w	r2, r3, #15
 800bb2a:	6879      	ldr	r1, [r7, #4]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	4413      	add	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	440b      	add	r3, r1
 800bb36:	3324      	adds	r3, #36	@ 0x24
 800bb38:	2200      	movs	r2, #0
 800bb3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bb3c:	4b1f      	ldr	r3, [pc, #124]	@ (800bbbc <USBD_CDC_DeInit+0x100>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	f003 020f 	and.w	r2, r3, #15
 800bb44:	6879      	ldr	r1, [r7, #4]
 800bb46:	4613      	mov	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	440b      	add	r3, r1
 800bb50:	3326      	adds	r3, #38	@ 0x26
 800bb52:	2200      	movs	r2, #0
 800bb54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	32b0      	adds	r2, #176	@ 0xb0
 800bb60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01f      	beq.n	800bba8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	33b0      	adds	r3, #176	@ 0xb0
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4413      	add	r3, r2
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	32b0      	adds	r2, #176	@ 0xb0
 800bb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f002 fbf8 	bl	800e380 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	32b0      	adds	r2, #176	@ 0xb0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	2000009b 	.word	0x2000009b
 800bbb8:	2000009c 	.word	0x2000009c
 800bbbc:	2000009d 	.word	0x2000009d

0800bbc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	32b0      	adds	r2, #176	@ 0xb0
 800bbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e0bf      	b.n	800bd70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d050      	beq.n	800bc9e <USBD_CDC_Setup+0xde>
 800bbfc:	2b20      	cmp	r3, #32
 800bbfe:	f040 80af 	bne.w	800bd60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	88db      	ldrh	r3, [r3, #6]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d03a      	beq.n	800bc80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	b25b      	sxtb	r3, r3
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	da1b      	bge.n	800bc4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	33b0      	adds	r3, #176	@ 0xb0
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bc2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	88d2      	ldrh	r2, [r2, #6]
 800bc30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	88db      	ldrh	r3, [r3, #6]
 800bc36:	2b07      	cmp	r3, #7
 800bc38:	bf28      	it	cs
 800bc3a:	2307      	movcs	r3, #7
 800bc3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	89fa      	ldrh	r2, [r7, #14]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f001 fd93 	bl	800d770 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bc4a:	e090      	b.n	800bd6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	785a      	ldrb	r2, [r3, #1]
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	88db      	ldrh	r3, [r3, #6]
 800bc5a:	2b3f      	cmp	r3, #63	@ 0x3f
 800bc5c:	d803      	bhi.n	800bc66 <USBD_CDC_Setup+0xa6>
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	88db      	ldrh	r3, [r3, #6]
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	e000      	b.n	800bc68 <USBD_CDC_Setup+0xa8>
 800bc66:	2240      	movs	r2, #64	@ 0x40
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bc6e:	6939      	ldr	r1, [r7, #16]
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bc76:	461a      	mov	r2, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f001 fda5 	bl	800d7c8 <USBD_CtlPrepareRx>
      break;
 800bc7e:	e076      	b.n	800bd6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	33b0      	adds	r3, #176	@ 0xb0
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	7850      	ldrb	r0, [r2, #1]
 800bc96:	2200      	movs	r2, #0
 800bc98:	6839      	ldr	r1, [r7, #0]
 800bc9a:	4798      	blx	r3
      break;
 800bc9c:	e067      	b.n	800bd6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	785b      	ldrb	r3, [r3, #1]
 800bca2:	2b0b      	cmp	r3, #11
 800bca4:	d851      	bhi.n	800bd4a <USBD_CDC_Setup+0x18a>
 800bca6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcac <USBD_CDC_Setup+0xec>)
 800bca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcac:	0800bcdd 	.word	0x0800bcdd
 800bcb0:	0800bd59 	.word	0x0800bd59
 800bcb4:	0800bd4b 	.word	0x0800bd4b
 800bcb8:	0800bd4b 	.word	0x0800bd4b
 800bcbc:	0800bd4b 	.word	0x0800bd4b
 800bcc0:	0800bd4b 	.word	0x0800bd4b
 800bcc4:	0800bd4b 	.word	0x0800bd4b
 800bcc8:	0800bd4b 	.word	0x0800bd4b
 800bccc:	0800bd4b 	.word	0x0800bd4b
 800bcd0:	0800bd4b 	.word	0x0800bd4b
 800bcd4:	0800bd07 	.word	0x0800bd07
 800bcd8:	0800bd31 	.word	0x0800bd31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	d107      	bne.n	800bcf8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bce8:	f107 030a 	add.w	r3, r7, #10
 800bcec:	2202      	movs	r2, #2
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f001 fd3d 	bl	800d770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcf6:	e032      	b.n	800bd5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f001 fcbb 	bl	800d676 <USBD_CtlError>
            ret = USBD_FAIL;
 800bd00:	2303      	movs	r3, #3
 800bd02:	75fb      	strb	r3, [r7, #23]
          break;
 800bd04:	e02b      	b.n	800bd5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d107      	bne.n	800bd22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bd12:	f107 030d 	add.w	r3, r7, #13
 800bd16:	2201      	movs	r2, #1
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f001 fd28 	bl	800d770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd20:	e01d      	b.n	800bd5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f001 fca6 	bl	800d676 <USBD_CtlError>
            ret = USBD_FAIL;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	75fb      	strb	r3, [r7, #23]
          break;
 800bd2e:	e016      	b.n	800bd5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d00f      	beq.n	800bd5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f001 fc99 	bl	800d676 <USBD_CtlError>
            ret = USBD_FAIL;
 800bd44:	2303      	movs	r3, #3
 800bd46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bd48:	e008      	b.n	800bd5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 fc92 	bl	800d676 <USBD_CtlError>
          ret = USBD_FAIL;
 800bd52:	2303      	movs	r3, #3
 800bd54:	75fb      	strb	r3, [r7, #23]
          break;
 800bd56:	e002      	b.n	800bd5e <USBD_CDC_Setup+0x19e>
          break;
 800bd58:	bf00      	nop
 800bd5a:	e008      	b.n	800bd6e <USBD_CDC_Setup+0x1ae>
          break;
 800bd5c:	bf00      	nop
      }
      break;
 800bd5e:	e006      	b.n	800bd6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f001 fc87 	bl	800d676 <USBD_CtlError>
      ret = USBD_FAIL;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bd6c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bd6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	460b      	mov	r3, r1
 800bd82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	32b0      	adds	r2, #176	@ 0xb0
 800bd96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	e065      	b.n	800be6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	32b0      	adds	r2, #176	@ 0xb0
 800bdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bdb2:	78fb      	ldrb	r3, [r7, #3]
 800bdb4:	f003 020f 	and.w	r2, r3, #15
 800bdb8:	6879      	ldr	r1, [r7, #4]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	440b      	add	r3, r1
 800bdc4:	3318      	adds	r3, #24
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d02f      	beq.n	800be2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bdcc:	78fb      	ldrb	r3, [r7, #3]
 800bdce:	f003 020f 	and.w	r2, r3, #15
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	440b      	add	r3, r1
 800bdde:	3318      	adds	r3, #24
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	78fb      	ldrb	r3, [r7, #3]
 800bde4:	f003 010f 	and.w	r1, r3, #15
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	460b      	mov	r3, r1
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4403      	add	r3, r0
 800bdf4:	331c      	adds	r3, #28
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	fbb2 f1f3 	udiv	r1, r2, r3
 800bdfc:	fb01 f303 	mul.w	r3, r1, r3
 800be00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800be02:	2b00      	cmp	r3, #0
 800be04:	d112      	bne.n	800be2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800be06:	78fb      	ldrb	r3, [r7, #3]
 800be08:	f003 020f 	and.w	r2, r3, #15
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4613      	mov	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	440b      	add	r3, r1
 800be18:	3318      	adds	r3, #24
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800be1e:	78f9      	ldrb	r1, [r7, #3]
 800be20:	2300      	movs	r3, #0
 800be22:	2200      	movs	r2, #0
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f002 fa48 	bl	800e2ba <USBD_LL_Transmit>
 800be2a:	e01f      	b.n	800be6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2200      	movs	r2, #0
 800be30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	33b0      	adds	r3, #176	@ 0xb0
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4413      	add	r3, r2
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d010      	beq.n	800be6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	33b0      	adds	r3, #176	@ 0xb0
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4413      	add	r3, r2
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800be68:	78fa      	ldrb	r2, [r7, #3]
 800be6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b084      	sub	sp, #16
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	32b0      	adds	r2, #176	@ 0xb0
 800be8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	32b0      	adds	r2, #176	@ 0xb0
 800be9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e01a      	b.n	800bede <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f002 fa46 	bl	800e33e <USBD_LL_GetRxDataSize>
 800beb2:	4602      	mov	r2, r0
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	33b0      	adds	r3, #176	@ 0xb0
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4413      	add	r3, r2
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bed8:	4611      	mov	r1, r2
 800beda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b084      	sub	sp, #16
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	32b0      	adds	r2, #176	@ 0xb0
 800bef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800befc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d101      	bne.n	800bf08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf04:	2303      	movs	r3, #3
 800bf06:	e024      	b.n	800bf52 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	33b0      	adds	r3, #176	@ 0xb0
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d019      	beq.n	800bf50 <USBD_CDC_EP0_RxReady+0x6a>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bf22:	2bff      	cmp	r3, #255	@ 0xff
 800bf24:	d014      	beq.n	800bf50 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	33b0      	adds	r3, #176	@ 0xb0
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	4413      	add	r3, r2
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bf3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	22ff      	movs	r2, #255	@ 0xff
 800bf4c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
	...

0800bf5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf64:	2182      	movs	r1, #130	@ 0x82
 800bf66:	4818      	ldr	r0, [pc, #96]	@ (800bfc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf68:	f000 fd4f 	bl	800ca0a <USBD_GetEpDesc>
 800bf6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf6e:	2101      	movs	r1, #1
 800bf70:	4815      	ldr	r0, [pc, #84]	@ (800bfc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf72:	f000 fd4a 	bl	800ca0a <USBD_GetEpDesc>
 800bf76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf78:	2181      	movs	r1, #129	@ 0x81
 800bf7a:	4813      	ldr	r0, [pc, #76]	@ (800bfc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf7c:	f000 fd45 	bl	800ca0a <USBD_GetEpDesc>
 800bf80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	2210      	movs	r2, #16
 800bf8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d006      	beq.n	800bfa2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf9c:	711a      	strb	r2, [r3, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d006      	beq.n	800bfb6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfb0:	711a      	strb	r2, [r3, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2243      	movs	r2, #67	@ 0x43
 800bfba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfbc:	4b02      	ldr	r3, [pc, #8]	@ (800bfc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3718      	adds	r7, #24
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20000058 	.word	0x20000058

0800bfcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bfd4:	2182      	movs	r1, #130	@ 0x82
 800bfd6:	4818      	ldr	r0, [pc, #96]	@ (800c038 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfd8:	f000 fd17 	bl	800ca0a <USBD_GetEpDesc>
 800bfdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bfde:	2101      	movs	r1, #1
 800bfe0:	4815      	ldr	r0, [pc, #84]	@ (800c038 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfe2:	f000 fd12 	bl	800ca0a <USBD_GetEpDesc>
 800bfe6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bfe8:	2181      	movs	r1, #129	@ 0x81
 800bfea:	4813      	ldr	r0, [pc, #76]	@ (800c038 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfec:	f000 fd0d 	bl	800ca0a <USBD_GetEpDesc>
 800bff0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	2210      	movs	r2, #16
 800bffc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d006      	beq.n	800c012 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	2200      	movs	r2, #0
 800c008:	711a      	strb	r2, [r3, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f042 0202 	orr.w	r2, r2, #2
 800c010:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	711a      	strb	r2, [r3, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f042 0202 	orr.w	r2, r2, #2
 800c024:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2243      	movs	r2, #67	@ 0x43
 800c02a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c02c:	4b02      	ldr	r3, [pc, #8]	@ (800c038 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3718      	adds	r7, #24
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20000058 	.word	0x20000058

0800c03c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c044:	2182      	movs	r1, #130	@ 0x82
 800c046:	4818      	ldr	r0, [pc, #96]	@ (800c0a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c048:	f000 fcdf 	bl	800ca0a <USBD_GetEpDesc>
 800c04c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c04e:	2101      	movs	r1, #1
 800c050:	4815      	ldr	r0, [pc, #84]	@ (800c0a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c052:	f000 fcda 	bl	800ca0a <USBD_GetEpDesc>
 800c056:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c058:	2181      	movs	r1, #129	@ 0x81
 800c05a:	4813      	ldr	r0, [pc, #76]	@ (800c0a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c05c:	f000 fcd5 	bl	800ca0a <USBD_GetEpDesc>
 800c060:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	2210      	movs	r2, #16
 800c06c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d006      	beq.n	800c082 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	2200      	movs	r2, #0
 800c078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c07c:	711a      	strb	r2, [r3, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d006      	beq.n	800c096 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c090:	711a      	strb	r2, [r3, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2243      	movs	r2, #67	@ 0x43
 800c09a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c09c:	4b02      	ldr	r3, [pc, #8]	@ (800c0a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3718      	adds	r7, #24
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20000058 	.word	0x20000058

0800c0ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	220a      	movs	r2, #10
 800c0b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c0ba:	4b03      	ldr	r3, [pc, #12]	@ (800c0c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	20000014 	.word	0x20000014

0800c0cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e009      	b.n	800c0f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	33b0      	adds	r3, #176	@ 0xb0
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c100:	b480      	push	{r7}
 800c102:	b087      	sub	sp, #28
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	32b0      	adds	r2, #176	@ 0xb0
 800c116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c122:	2303      	movs	r3, #3
 800c124:	e008      	b.n	800c138 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	371c      	adds	r7, #28
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	32b0      	adds	r2, #176	@ 0xb0
 800c158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d101      	bne.n	800c168 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c164:	2303      	movs	r3, #3
 800c166:	e004      	b.n	800c172 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
	...

0800c180 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	32b0      	adds	r2, #176	@ 0xb0
 800c192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c196:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c198:	2301      	movs	r3, #1
 800c19a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	e025      	b.n	800c1f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d11f      	bne.n	800c1f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c1b8:	4b10      	ldr	r3, [pc, #64]	@ (800c1fc <USBD_CDC_TransmitPacket+0x7c>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	f003 020f 	and.w	r2, r3, #15
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4403      	add	r3, r0
 800c1d2:	3318      	adds	r3, #24
 800c1d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c1d6:	4b09      	ldr	r3, [pc, #36]	@ (800c1fc <USBD_CDC_TransmitPacket+0x7c>)
 800c1d8:	7819      	ldrb	r1, [r3, #0]
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f002 f867 	bl	800e2ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	2000009b 	.word	0x2000009b

0800c200 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	32b0      	adds	r2, #176	@ 0xb0
 800c212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c216:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	32b0      	adds	r2, #176	@ 0xb0
 800c222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d101      	bne.n	800c22e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e018      	b.n	800c260 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7c1b      	ldrb	r3, [r3, #16]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d10a      	bne.n	800c24c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c236:	4b0c      	ldr	r3, [pc, #48]	@ (800c268 <USBD_CDC_ReceivePacket+0x68>)
 800c238:	7819      	ldrb	r1, [r3, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f002 f859 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c24a:	e008      	b.n	800c25e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c24c:	4b06      	ldr	r3, [pc, #24]	@ (800c268 <USBD_CDC_ReceivePacket+0x68>)
 800c24e:	7819      	ldrb	r1, [r3, #0]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c256:	2340      	movs	r3, #64	@ 0x40
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f002 f84f 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	2000009c 	.word	0x2000009c

0800c26c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	4613      	mov	r3, r2
 800c278:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c280:	2303      	movs	r3, #3
 800c282:	e01f      	b.n	800c2c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d003      	beq.n	800c2aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	79fa      	ldrb	r2, [r7, #7]
 800c2b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f001 fec9 	bl	800e050 <USBD_LL_Init>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e025      	b.n	800c330 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	32ae      	adds	r2, #174	@ 0xae
 800c2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00f      	beq.n	800c320 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	32ae      	adds	r2, #174	@ 0xae
 800c30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c310:	f107 020e 	add.w	r2, r7, #14
 800c314:	4610      	mov	r0, r2
 800c316:	4798      	blx	r3
 800c318:	4602      	mov	r2, r0
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f001 fed1 	bl	800e0e8 <USBD_LL_Start>
 800c346:	4603      	mov	r3, r0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c358:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	460b      	mov	r3, r1
 800c370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	78fa      	ldrb	r2, [r7, #3]
 800c38a:	4611      	mov	r1, r2
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	4798      	blx	r3
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c394:	7bfb      	ldrb	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	78fa      	ldrb	r2, [r7, #3]
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	4798      	blx	r3
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d001      	beq.n	800c3c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c3e2:	6839      	ldr	r1, [r7, #0]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f001 f90c 	bl	800d602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c406:	f003 031f 	and.w	r3, r3, #31
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d01a      	beq.n	800c444 <USBD_LL_SetupStage+0x72>
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d822      	bhi.n	800c458 <USBD_LL_SetupStage+0x86>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d002      	beq.n	800c41c <USBD_LL_SetupStage+0x4a>
 800c416:	2b01      	cmp	r3, #1
 800c418:	d00a      	beq.n	800c430 <USBD_LL_SetupStage+0x5e>
 800c41a:	e01d      	b.n	800c458 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c422:	4619      	mov	r1, r3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 fb63 	bl	800caf0 <USBD_StdDevReq>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73fb      	strb	r3, [r7, #15]
      break;
 800c42e:	e020      	b.n	800c472 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c436:	4619      	mov	r1, r3
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fbcb 	bl	800cbd4 <USBD_StdItfReq>
 800c43e:	4603      	mov	r3, r0
 800c440:	73fb      	strb	r3, [r7, #15]
      break;
 800c442:	e016      	b.n	800c472 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c44a:	4619      	mov	r1, r3
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fc2d 	bl	800ccac <USBD_StdEPReq>
 800c452:	4603      	mov	r3, r0
 800c454:	73fb      	strb	r3, [r7, #15]
      break;
 800c456:	e00c      	b.n	800c472 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c45e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c462:	b2db      	uxtb	r3, r3
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 fe9e 	bl	800e1a8 <USBD_LL_StallEP>
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]
      break;
 800c470:	bf00      	nop
  }

  return ret;
 800c472:	7bfb      	ldrb	r3, [r7, #15]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	460b      	mov	r3, r1
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c48e:	7afb      	ldrb	r3, [r7, #11]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d16e      	bne.n	800c572 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c49a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	f040 8098 	bne.w	800c5d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	689a      	ldr	r2, [r3, #8]
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d913      	bls.n	800c4dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	1ad2      	subs	r2, r2, r3
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	68da      	ldr	r2, [r3, #12]
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	bf28      	it	cs
 800c4ce:	4613      	movcs	r3, r2
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	6879      	ldr	r1, [r7, #4]
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f001 f994 	bl	800d802 <USBD_CtlContinueRx>
 800c4da:	e07d      	b.n	800c5d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c4e2:	f003 031f 	and.w	r3, r3, #31
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d014      	beq.n	800c514 <USBD_LL_DataOutStage+0x98>
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d81d      	bhi.n	800c52a <USBD_LL_DataOutStage+0xae>
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d002      	beq.n	800c4f8 <USBD_LL_DataOutStage+0x7c>
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d003      	beq.n	800c4fe <USBD_LL_DataOutStage+0x82>
 800c4f6:	e018      	b.n	800c52a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	75bb      	strb	r3, [r7, #22]
            break;
 800c4fc:	e018      	b.n	800c530 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c504:	b2db      	uxtb	r3, r3
 800c506:	4619      	mov	r1, r3
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f000 fa64 	bl	800c9d6 <USBD_CoreFindIF>
 800c50e:	4603      	mov	r3, r0
 800c510:	75bb      	strb	r3, [r7, #22]
            break;
 800c512:	e00d      	b.n	800c530 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	4619      	mov	r1, r3
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f000 fa66 	bl	800c9f0 <USBD_CoreFindEP>
 800c524:	4603      	mov	r3, r0
 800c526:	75bb      	strb	r3, [r7, #22]
            break;
 800c528:	e002      	b.n	800c530 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c52a:	2300      	movs	r3, #0
 800c52c:	75bb      	strb	r3, [r7, #22]
            break;
 800c52e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c530:	7dbb      	ldrb	r3, [r7, #22]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d119      	bne.n	800c56a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	2b03      	cmp	r3, #3
 800c540:	d113      	bne.n	800c56a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c542:	7dba      	ldrb	r2, [r7, #22]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	32ae      	adds	r2, #174	@ 0xae
 800c548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c552:	7dba      	ldrb	r2, [r7, #22]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c55a:	7dba      	ldrb	r2, [r7, #22]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	32ae      	adds	r2, #174	@ 0xae
 800c560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f001 f95a 	bl	800d824 <USBD_CtlSendStatus>
 800c570:	e032      	b.n	800c5d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c572:	7afb      	ldrb	r3, [r7, #11]
 800c574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	4619      	mov	r1, r3
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f000 fa37 	bl	800c9f0 <USBD_CoreFindEP>
 800c582:	4603      	mov	r3, r0
 800c584:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c586:	7dbb      	ldrb	r3, [r7, #22]
 800c588:	2bff      	cmp	r3, #255	@ 0xff
 800c58a:	d025      	beq.n	800c5d8 <USBD_LL_DataOutStage+0x15c>
 800c58c:	7dbb      	ldrb	r3, [r7, #22]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d122      	bne.n	800c5d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	d117      	bne.n	800c5ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c59e:	7dba      	ldrb	r2, [r7, #22]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	32ae      	adds	r2, #174	@ 0xae
 800c5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00f      	beq.n	800c5ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c5ae:	7dba      	ldrb	r2, [r7, #22]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c5b6:	7dba      	ldrb	r2, [r7, #22]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	32ae      	adds	r2, #174	@ 0xae
 800c5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	7afa      	ldrb	r2, [r7, #11]
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	4798      	blx	r3
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
 800c5d6:	e000      	b.n	800c5da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3718      	adds	r7, #24
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b086      	sub	sp, #24
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	60f8      	str	r0, [r7, #12]
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	607a      	str	r2, [r7, #4]
 800c5ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d16f      	bne.n	800c6d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3314      	adds	r3, #20
 800c5fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c602:	2b02      	cmp	r3, #2
 800c604:	d15a      	bne.n	800c6bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	689a      	ldr	r2, [r3, #8]
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d914      	bls.n	800c63c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	689a      	ldr	r2, [r3, #8]
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	1ad2      	subs	r2, r2, r3
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	461a      	mov	r2, r3
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f001 f8bc 	bl	800d7a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c62e:	2300      	movs	r3, #0
 800c630:	2200      	movs	r2, #0
 800c632:	2100      	movs	r1, #0
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f001 fe61 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c63a:	e03f      	b.n	800c6bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	68da      	ldr	r2, [r3, #12]
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	429a      	cmp	r2, r3
 800c646:	d11c      	bne.n	800c682 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c650:	429a      	cmp	r2, r3
 800c652:	d316      	bcc.n	800c682 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c65e:	429a      	cmp	r2, r3
 800c660:	d20f      	bcs.n	800c682 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c662:	2200      	movs	r2, #0
 800c664:	2100      	movs	r1, #0
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f001 f89d 	bl	800d7a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2200      	movs	r2, #0
 800c670:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c674:	2300      	movs	r3, #0
 800c676:	2200      	movs	r2, #0
 800c678:	2100      	movs	r1, #0
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f001 fe3e 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c680:	e01c      	b.n	800c6bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d10f      	bne.n	800c6ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d009      	beq.n	800c6ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6ae:	2180      	movs	r1, #128	@ 0x80
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f001 fd79 	bl	800e1a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f001 f8c7 	bl	800d84a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d03a      	beq.n	800c73c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7ff fe42 	bl	800c350 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c6d4:	e032      	b.n	800c73c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c6d6:	7afb      	ldrb	r3, [r7, #11]
 800c6d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	4619      	mov	r1, r3
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 f985 	bl	800c9f0 <USBD_CoreFindEP>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6ea:	7dfb      	ldrb	r3, [r7, #23]
 800c6ec:	2bff      	cmp	r3, #255	@ 0xff
 800c6ee:	d025      	beq.n	800c73c <USBD_LL_DataInStage+0x15a>
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d122      	bne.n	800c73c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	2b03      	cmp	r3, #3
 800c700:	d11c      	bne.n	800c73c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c702:	7dfa      	ldrb	r2, [r7, #23]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	32ae      	adds	r2, #174	@ 0xae
 800c708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d014      	beq.n	800c73c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c712:	7dfa      	ldrb	r2, [r7, #23]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c71a:	7dfa      	ldrb	r2, [r7, #23]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	32ae      	adds	r2, #174	@ 0xae
 800c720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	7afa      	ldrb	r2, [r7, #11]
 800c728:	4611      	mov	r1, r2
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	4798      	blx	r3
 800c72e:	4603      	mov	r3, r0
 800c730:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c732:	7dbb      	ldrb	r3, [r7, #22]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c738:	7dbb      	ldrb	r3, [r7, #22]
 800c73a:	e000      	b.n	800c73e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c74e:	2300      	movs	r3, #0
 800c750:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d014      	beq.n	800c7ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00e      	beq.n	800c7ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	6852      	ldr	r2, [r2, #4]
 800c79a:	b2d2      	uxtb	r2, r2
 800c79c:	4611      	mov	r1, r2
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	4798      	blx	r3
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d001      	beq.n	800c7ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ac:	2340      	movs	r3, #64	@ 0x40
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f001 fcb3 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2240      	movs	r2, #64	@ 0x40
 800c7c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7c8:	2340      	movs	r3, #64	@ 0x40
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2180      	movs	r1, #128	@ 0x80
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f001 fca5 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2240      	movs	r2, #64	@ 0x40
 800c7de:	621a      	str	r2, [r3, #32]

  return ret;
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	78fa      	ldrb	r2, [r7, #3]
 800c7fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c80a:	b480      	push	{r7}
 800c80c:	b083      	sub	sp, #12
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b04      	cmp	r3, #4
 800c81c:	d006      	beq.n	800c82c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c824:	b2da      	uxtb	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2204      	movs	r2, #4
 800c830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c842:	b480      	push	{r7}
 800c844:	b083      	sub	sp, #12
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b04      	cmp	r3, #4
 800c854:	d106      	bne.n	800c864 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr

0800c872 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b03      	cmp	r3, #3
 800c884:	d110      	bne.n	800c8a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	32ae      	adds	r2, #174	@ 0xae
 800c8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	e01c      	b.n	800c90e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	d115      	bne.n	800c90c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	32ae      	adds	r2, #174	@ 0xae
 800c8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ee:	6a1b      	ldr	r3, [r3, #32]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00b      	beq.n	800c90c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	32ae      	adds	r2, #174	@ 0xae
 800c8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c902:	6a1b      	ldr	r3, [r3, #32]
 800c904:	78fa      	ldrb	r2, [r7, #3]
 800c906:	4611      	mov	r1, r2
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	32ae      	adds	r2, #174	@ 0xae
 800c92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c934:	2303      	movs	r3, #3
 800c936:	e01c      	b.n	800c972 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b03      	cmp	r3, #3
 800c942:	d115      	bne.n	800c970 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	32ae      	adds	r2, #174	@ 0xae
 800c94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00b      	beq.n	800c970 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	32ae      	adds	r2, #174	@ 0xae
 800c962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c968:	78fa      	ldrb	r2, [r7, #3]
 800c96a:	4611      	mov	r1, r2
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b083      	sub	sp, #12
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c998:	2300      	movs	r3, #0
 800c99a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00e      	beq.n	800c9cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	6852      	ldr	r2, [r2, #4]
 800c9ba:	b2d2      	uxtb	r2, r2
 800c9bc:	4611      	mov	r1, r2
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	4798      	blx	r3
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c9d6:	b480      	push	{r7}
 800c9d8:	b083      	sub	sp, #12
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c9e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c9fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	370c      	adds	r7, #12
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr

0800ca0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b086      	sub	sp, #24
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	460b      	mov	r3, r1
 800ca14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	885b      	ldrh	r3, [r3, #2]
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	7812      	ldrb	r2, [r2, #0]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d91f      	bls.n	800ca70 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ca36:	e013      	b.n	800ca60 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ca38:	f107 030a 	add.w	r3, r7, #10
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6978      	ldr	r0, [r7, #20]
 800ca40:	f000 f81b 	bl	800ca7a <USBD_GetNextDesc>
 800ca44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	2b05      	cmp	r3, #5
 800ca4c:	d108      	bne.n	800ca60 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	789b      	ldrb	r3, [r3, #2]
 800ca56:	78fa      	ldrb	r2, [r7, #3]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d008      	beq.n	800ca6e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	885b      	ldrh	r3, [r3, #2]
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	897b      	ldrh	r3, [r7, #10]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d8e5      	bhi.n	800ca38 <USBD_GetEpDesc+0x2e>
 800ca6c:	e000      	b.n	800ca70 <USBD_GetEpDesc+0x66>
          break;
 800ca6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ca70:	693b      	ldr	r3, [r7, #16]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3718      	adds	r7, #24
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b085      	sub	sp, #20
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	7812      	ldrb	r2, [r2, #0]
 800ca90:	4413      	add	r3, r2
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4413      	add	r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800caa4:	68fb      	ldr	r3, [r7, #12]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b087      	sub	sp, #28
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	3301      	adds	r3, #1
 800cac8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cad0:	8a3b      	ldrh	r3, [r7, #16]
 800cad2:	021b      	lsls	r3, r3, #8
 800cad4:	b21a      	sxth	r2, r3
 800cad6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cada:	4313      	orrs	r3, r2
 800cadc:	b21b      	sxth	r3, r3
 800cade:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cae0:	89fb      	ldrh	r3, [r7, #14]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	371c      	adds	r7, #28
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
	...

0800caf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb06:	2b40      	cmp	r3, #64	@ 0x40
 800cb08:	d005      	beq.n	800cb16 <USBD_StdDevReq+0x26>
 800cb0a:	2b40      	cmp	r3, #64	@ 0x40
 800cb0c:	d857      	bhi.n	800cbbe <USBD_StdDevReq+0xce>
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00f      	beq.n	800cb32 <USBD_StdDevReq+0x42>
 800cb12:	2b20      	cmp	r3, #32
 800cb14:	d153      	bne.n	800cbbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	32ae      	adds	r2, #174	@ 0xae
 800cb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb30:	e04a      	b.n	800cbc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	785b      	ldrb	r3, [r3, #1]
 800cb36:	2b09      	cmp	r3, #9
 800cb38:	d83b      	bhi.n	800cbb2 <USBD_StdDevReq+0xc2>
 800cb3a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb40 <USBD_StdDevReq+0x50>)
 800cb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb40:	0800cb95 	.word	0x0800cb95
 800cb44:	0800cba9 	.word	0x0800cba9
 800cb48:	0800cbb3 	.word	0x0800cbb3
 800cb4c:	0800cb9f 	.word	0x0800cb9f
 800cb50:	0800cbb3 	.word	0x0800cbb3
 800cb54:	0800cb73 	.word	0x0800cb73
 800cb58:	0800cb69 	.word	0x0800cb69
 800cb5c:	0800cbb3 	.word	0x0800cbb3
 800cb60:	0800cb8b 	.word	0x0800cb8b
 800cb64:	0800cb7d 	.word	0x0800cb7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cb68:	6839      	ldr	r1, [r7, #0]
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fa3c 	bl	800cfe8 <USBD_GetDescriptor>
          break;
 800cb70:	e024      	b.n	800cbbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fba1 	bl	800d2bc <USBD_SetAddress>
          break;
 800cb7a:	e01f      	b.n	800cbbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cb7c:	6839      	ldr	r1, [r7, #0]
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fbe0 	bl	800d344 <USBD_SetConfig>
 800cb84:	4603      	mov	r3, r0
 800cb86:	73fb      	strb	r3, [r7, #15]
          break;
 800cb88:	e018      	b.n	800cbbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fc83 	bl	800d498 <USBD_GetConfig>
          break;
 800cb92:	e013      	b.n	800cbbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fcb4 	bl	800d504 <USBD_GetStatus>
          break;
 800cb9c:	e00e      	b.n	800cbbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fce3 	bl	800d56c <USBD_SetFeature>
          break;
 800cba6:	e009      	b.n	800cbbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cba8:	6839      	ldr	r1, [r7, #0]
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fd07 	bl	800d5be <USBD_ClrFeature>
          break;
 800cbb0:	e004      	b.n	800cbbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 fd5e 	bl	800d676 <USBD_CtlError>
          break;
 800cbba:	bf00      	nop
      }
      break;
 800cbbc:	e004      	b.n	800cbc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cbbe:	6839      	ldr	r1, [r7, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fd58 	bl	800d676 <USBD_CtlError>
      break;
 800cbc6:	bf00      	nop
  }

  return ret;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop

0800cbd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cbea:	2b40      	cmp	r3, #64	@ 0x40
 800cbec:	d005      	beq.n	800cbfa <USBD_StdItfReq+0x26>
 800cbee:	2b40      	cmp	r3, #64	@ 0x40
 800cbf0:	d852      	bhi.n	800cc98 <USBD_StdItfReq+0xc4>
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <USBD_StdItfReq+0x26>
 800cbf6:	2b20      	cmp	r3, #32
 800cbf8:	d14e      	bne.n	800cc98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	3b01      	subs	r3, #1
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d840      	bhi.n	800cc8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	889b      	ldrh	r3, [r3, #4]
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d836      	bhi.n	800cc80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	889b      	ldrh	r3, [r3, #4]
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fedb 	bl	800c9d6 <USBD_CoreFindIF>
 800cc20:	4603      	mov	r3, r0
 800cc22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2bff      	cmp	r3, #255	@ 0xff
 800cc28:	d01d      	beq.n	800cc66 <USBD_StdItfReq+0x92>
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d11a      	bne.n	800cc66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cc30:	7bba      	ldrb	r2, [r7, #14]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	32ae      	adds	r2, #174	@ 0xae
 800cc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00f      	beq.n	800cc60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cc40:	7bba      	ldrb	r2, [r7, #14]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc48:	7bba      	ldrb	r2, [r7, #14]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	32ae      	adds	r2, #174	@ 0xae
 800cc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	4798      	blx	r3
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc5e:	e004      	b.n	800cc6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cc60:	2303      	movs	r3, #3
 800cc62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc64:	e001      	b.n	800cc6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cc66:	2303      	movs	r3, #3
 800cc68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	88db      	ldrh	r3, [r3, #6]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d110      	bne.n	800cc94 <USBD_StdItfReq+0xc0>
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10d      	bne.n	800cc94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fdd3 	bl	800d824 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cc7e:	e009      	b.n	800cc94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fcf7 	bl	800d676 <USBD_CtlError>
          break;
 800cc88:	e004      	b.n	800cc94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fcf2 	bl	800d676 <USBD_CtlError>
          break;
 800cc92:	e000      	b.n	800cc96 <USBD_StdItfReq+0xc2>
          break;
 800cc94:	bf00      	nop
      }
      break;
 800cc96:	e004      	b.n	800cca2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fceb 	bl	800d676 <USBD_CtlError>
      break;
 800cca0:	bf00      	nop
  }

  return ret;
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	889b      	ldrh	r3, [r3, #4]
 800ccbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ccc8:	2b40      	cmp	r3, #64	@ 0x40
 800ccca:	d007      	beq.n	800ccdc <USBD_StdEPReq+0x30>
 800cccc:	2b40      	cmp	r3, #64	@ 0x40
 800ccce:	f200 817f 	bhi.w	800cfd0 <USBD_StdEPReq+0x324>
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d02a      	beq.n	800cd2c <USBD_StdEPReq+0x80>
 800ccd6:	2b20      	cmp	r3, #32
 800ccd8:	f040 817a 	bne.w	800cfd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	4619      	mov	r1, r3
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff fe85 	bl	800c9f0 <USBD_CoreFindEP>
 800cce6:	4603      	mov	r3, r0
 800cce8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccea:	7b7b      	ldrb	r3, [r7, #13]
 800ccec:	2bff      	cmp	r3, #255	@ 0xff
 800ccee:	f000 8174 	beq.w	800cfda <USBD_StdEPReq+0x32e>
 800ccf2:	7b7b      	ldrb	r3, [r7, #13]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f040 8170 	bne.w	800cfda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ccfa:	7b7a      	ldrb	r2, [r7, #13]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cd02:	7b7a      	ldrb	r2, [r7, #13]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	32ae      	adds	r2, #174	@ 0xae
 800cd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f000 8163 	beq.w	800cfda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cd14:	7b7a      	ldrb	r2, [r7, #13]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	32ae      	adds	r2, #174	@ 0xae
 800cd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	4798      	blx	r3
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cd2a:	e156      	b.n	800cfda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	785b      	ldrb	r3, [r3, #1]
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d008      	beq.n	800cd46 <USBD_StdEPReq+0x9a>
 800cd34:	2b03      	cmp	r3, #3
 800cd36:	f300 8145 	bgt.w	800cfc4 <USBD_StdEPReq+0x318>
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 809b 	beq.w	800ce76 <USBD_StdEPReq+0x1ca>
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d03c      	beq.n	800cdbe <USBD_StdEPReq+0x112>
 800cd44:	e13e      	b.n	800cfc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	d002      	beq.n	800cd58 <USBD_StdEPReq+0xac>
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d016      	beq.n	800cd84 <USBD_StdEPReq+0xd8>
 800cd56:	e02c      	b.n	800cdb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00d      	beq.n	800cd7a <USBD_StdEPReq+0xce>
 800cd5e:	7bbb      	ldrb	r3, [r7, #14]
 800cd60:	2b80      	cmp	r3, #128	@ 0x80
 800cd62:	d00a      	beq.n	800cd7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd64:	7bbb      	ldrb	r3, [r7, #14]
 800cd66:	4619      	mov	r1, r3
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f001 fa1d 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd6e:	2180      	movs	r1, #128	@ 0x80
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f001 fa19 	bl	800e1a8 <USBD_LL_StallEP>
 800cd76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd78:	e020      	b.n	800cdbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cd7a:	6839      	ldr	r1, [r7, #0]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fc7a 	bl	800d676 <USBD_CtlError>
              break;
 800cd82:	e01b      	b.n	800cdbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	885b      	ldrh	r3, [r3, #2]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10e      	bne.n	800cdaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd8c:	7bbb      	ldrb	r3, [r7, #14]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00b      	beq.n	800cdaa <USBD_StdEPReq+0xfe>
 800cd92:	7bbb      	ldrb	r3, [r7, #14]
 800cd94:	2b80      	cmp	r3, #128	@ 0x80
 800cd96:	d008      	beq.n	800cdaa <USBD_StdEPReq+0xfe>
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	88db      	ldrh	r3, [r3, #6]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d104      	bne.n	800cdaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f001 f9ff 	bl	800e1a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fd3a 	bl	800d824 <USBD_CtlSendStatus>

              break;
 800cdb0:	e004      	b.n	800cdbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cdb2:	6839      	ldr	r1, [r7, #0]
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fc5e 	bl	800d676 <USBD_CtlError>
              break;
 800cdba:	bf00      	nop
          }
          break;
 800cdbc:	e107      	b.n	800cfce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d002      	beq.n	800cdd0 <USBD_StdEPReq+0x124>
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	d016      	beq.n	800cdfc <USBD_StdEPReq+0x150>
 800cdce:	e04b      	b.n	800ce68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdd0:	7bbb      	ldrb	r3, [r7, #14]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00d      	beq.n	800cdf2 <USBD_StdEPReq+0x146>
 800cdd6:	7bbb      	ldrb	r3, [r7, #14]
 800cdd8:	2b80      	cmp	r3, #128	@ 0x80
 800cdda:	d00a      	beq.n	800cdf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 f9e1 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cde6:	2180      	movs	r1, #128	@ 0x80
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f001 f9dd 	bl	800e1a8 <USBD_LL_StallEP>
 800cdee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cdf0:	e040      	b.n	800ce74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cdf2:	6839      	ldr	r1, [r7, #0]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 fc3e 	bl	800d676 <USBD_CtlError>
              break;
 800cdfa:	e03b      	b.n	800ce74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	885b      	ldrh	r3, [r3, #2]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d136      	bne.n	800ce72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce04:	7bbb      	ldrb	r3, [r7, #14]
 800ce06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d004      	beq.n	800ce18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
 800ce10:	4619      	mov	r1, r3
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f001 f9e7 	bl	800e1e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 fd03 	bl	800d824 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ce1e:	7bbb      	ldrb	r3, [r7, #14]
 800ce20:	4619      	mov	r1, r3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff fde4 	bl	800c9f0 <USBD_CoreFindEP>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce2c:	7b7b      	ldrb	r3, [r7, #13]
 800ce2e:	2bff      	cmp	r3, #255	@ 0xff
 800ce30:	d01f      	beq.n	800ce72 <USBD_StdEPReq+0x1c6>
 800ce32:	7b7b      	ldrb	r3, [r7, #13]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d11c      	bne.n	800ce72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ce38:	7b7a      	ldrb	r2, [r7, #13]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ce40:	7b7a      	ldrb	r2, [r7, #13]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	32ae      	adds	r2, #174	@ 0xae
 800ce46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d010      	beq.n	800ce72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce50:	7b7a      	ldrb	r2, [r7, #13]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	32ae      	adds	r2, #174	@ 0xae
 800ce56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	4798      	blx	r3
 800ce62:	4603      	mov	r3, r0
 800ce64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ce66:	e004      	b.n	800ce72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fc03 	bl	800d676 <USBD_CtlError>
              break;
 800ce70:	e000      	b.n	800ce74 <USBD_StdEPReq+0x1c8>
              break;
 800ce72:	bf00      	nop
          }
          break;
 800ce74:	e0ab      	b.n	800cfce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d002      	beq.n	800ce88 <USBD_StdEPReq+0x1dc>
 800ce82:	2b03      	cmp	r3, #3
 800ce84:	d032      	beq.n	800ceec <USBD_StdEPReq+0x240>
 800ce86:	e097      	b.n	800cfb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d007      	beq.n	800ce9e <USBD_StdEPReq+0x1f2>
 800ce8e:	7bbb      	ldrb	r3, [r7, #14]
 800ce90:	2b80      	cmp	r3, #128	@ 0x80
 800ce92:	d004      	beq.n	800ce9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fbed 	bl	800d676 <USBD_CtlError>
                break;
 800ce9c:	e091      	b.n	800cfc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	da0b      	bge.n	800cebe <USBD_StdEPReq+0x212>
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ceac:	4613      	mov	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	3310      	adds	r3, #16
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	4413      	add	r3, r2
 800ceba:	3304      	adds	r3, #4
 800cebc:	e00b      	b.n	800ced6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cebe:	7bbb      	ldrb	r3, [r7, #14]
 800cec0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cec4:	4613      	mov	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	4413      	add	r3, r2
 800ced4:	3304      	adds	r3, #4
 800ced6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	2200      	movs	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	2202      	movs	r2, #2
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fc43 	bl	800d770 <USBD_CtlSendData>
              break;
 800ceea:	e06a      	b.n	800cfc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ceec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	da11      	bge.n	800cf18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
 800cef6:	f003 020f 	and.w	r2, r3, #15
 800cefa:	6879      	ldr	r1, [r7, #4]
 800cefc:	4613      	mov	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	440b      	add	r3, r1
 800cf06:	3324      	adds	r3, #36	@ 0x24
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d117      	bne.n	800cf3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cf0e:	6839      	ldr	r1, [r7, #0]
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 fbb0 	bl	800d676 <USBD_CtlError>
                  break;
 800cf16:	e054      	b.n	800cfc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	f003 020f 	and.w	r2, r3, #15
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	4613      	mov	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	440b      	add	r3, r1
 800cf2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d104      	bne.n	800cf3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 fb9d 	bl	800d676 <USBD_CtlError>
                  break;
 800cf3c:	e041      	b.n	800cfc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	da0b      	bge.n	800cf5e <USBD_StdEPReq+0x2b2>
 800cf46:	7bbb      	ldrb	r3, [r7, #14]
 800cf48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	3310      	adds	r3, #16
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	4413      	add	r3, r2
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	e00b      	b.n	800cf76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf64:	4613      	mov	r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	4413      	add	r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	4413      	add	r3, r2
 800cf74:	3304      	adds	r3, #4
 800cf76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d002      	beq.n	800cf84 <USBD_StdEPReq+0x2d8>
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
 800cf80:	2b80      	cmp	r3, #128	@ 0x80
 800cf82:	d103      	bne.n	800cf8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2200      	movs	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	e00e      	b.n	800cfaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
 800cf8e:	4619      	mov	r1, r3
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f001 f947 	bl	800e224 <USBD_LL_IsStallEP>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	e002      	b.n	800cfaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	2202      	movs	r2, #2
 800cfae:	4619      	mov	r1, r3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fbdd 	bl	800d770 <USBD_CtlSendData>
              break;
 800cfb6:	e004      	b.n	800cfc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fb5b 	bl	800d676 <USBD_CtlError>
              break;
 800cfc0:	bf00      	nop
          }
          break;
 800cfc2:	e004      	b.n	800cfce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fb55 	bl	800d676 <USBD_CtlError>
          break;
 800cfcc:	bf00      	nop
      }
      break;
 800cfce:	e005      	b.n	800cfdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cfd0:	6839      	ldr	r1, [r7, #0]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 fb4f 	bl	800d676 <USBD_CtlError>
      break;
 800cfd8:	e000      	b.n	800cfdc <USBD_StdEPReq+0x330>
      break;
 800cfda:	bf00      	nop
  }

  return ret;
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cff2:	2300      	movs	r3, #0
 800cff4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cff6:	2300      	movs	r3, #0
 800cff8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cffa:	2300      	movs	r3, #0
 800cffc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	885b      	ldrh	r3, [r3, #2]
 800d002:	0a1b      	lsrs	r3, r3, #8
 800d004:	b29b      	uxth	r3, r3
 800d006:	3b01      	subs	r3, #1
 800d008:	2b06      	cmp	r3, #6
 800d00a:	f200 8128 	bhi.w	800d25e <USBD_GetDescriptor+0x276>
 800d00e:	a201      	add	r2, pc, #4	@ (adr r2, 800d014 <USBD_GetDescriptor+0x2c>)
 800d010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d014:	0800d031 	.word	0x0800d031
 800d018:	0800d049 	.word	0x0800d049
 800d01c:	0800d089 	.word	0x0800d089
 800d020:	0800d25f 	.word	0x0800d25f
 800d024:	0800d25f 	.word	0x0800d25f
 800d028:	0800d1ff 	.word	0x0800d1ff
 800d02c:	0800d22b 	.word	0x0800d22b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	7c12      	ldrb	r2, [r2, #16]
 800d03c:	f107 0108 	add.w	r1, r7, #8
 800d040:	4610      	mov	r0, r2
 800d042:	4798      	blx	r3
 800d044:	60f8      	str	r0, [r7, #12]
      break;
 800d046:	e112      	b.n	800d26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	7c1b      	ldrb	r3, [r3, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10d      	bne.n	800d06c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d058:	f107 0208 	add.w	r2, r7, #8
 800d05c:	4610      	mov	r0, r2
 800d05e:	4798      	blx	r3
 800d060:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	3301      	adds	r3, #1
 800d066:	2202      	movs	r2, #2
 800d068:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d06a:	e100      	b.n	800d26e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d074:	f107 0208 	add.w	r2, r7, #8
 800d078:	4610      	mov	r0, r2
 800d07a:	4798      	blx	r3
 800d07c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	3301      	adds	r3, #1
 800d082:	2202      	movs	r2, #2
 800d084:	701a      	strb	r2, [r3, #0]
      break;
 800d086:	e0f2      	b.n	800d26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	885b      	ldrh	r3, [r3, #2]
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b05      	cmp	r3, #5
 800d090:	f200 80ac 	bhi.w	800d1ec <USBD_GetDescriptor+0x204>
 800d094:	a201      	add	r2, pc, #4	@ (adr r2, 800d09c <USBD_GetDescriptor+0xb4>)
 800d096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d09a:	bf00      	nop
 800d09c:	0800d0b5 	.word	0x0800d0b5
 800d0a0:	0800d0e9 	.word	0x0800d0e9
 800d0a4:	0800d11d 	.word	0x0800d11d
 800d0a8:	0800d151 	.word	0x0800d151
 800d0ac:	0800d185 	.word	0x0800d185
 800d0b0:	0800d1b9 	.word	0x0800d1b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00b      	beq.n	800d0d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	7c12      	ldrb	r2, [r2, #16]
 800d0cc:	f107 0108 	add.w	r1, r7, #8
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	4798      	blx	r3
 800d0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0d6:	e091      	b.n	800d1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 facb 	bl	800d676 <USBD_CtlError>
            err++;
 800d0e0:	7afb      	ldrb	r3, [r7, #11]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d0e6:	e089      	b.n	800d1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00b      	beq.n	800d10c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	7c12      	ldrb	r2, [r2, #16]
 800d100:	f107 0108 	add.w	r1, r7, #8
 800d104:	4610      	mov	r0, r2
 800d106:	4798      	blx	r3
 800d108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d10a:	e077      	b.n	800d1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fab1 	bl	800d676 <USBD_CtlError>
            err++;
 800d114:	7afb      	ldrb	r3, [r7, #11]
 800d116:	3301      	adds	r3, #1
 800d118:	72fb      	strb	r3, [r7, #11]
          break;
 800d11a:	e06f      	b.n	800d1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00b      	beq.n	800d140 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	7c12      	ldrb	r2, [r2, #16]
 800d134:	f107 0108 	add.w	r1, r7, #8
 800d138:	4610      	mov	r0, r2
 800d13a:	4798      	blx	r3
 800d13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d13e:	e05d      	b.n	800d1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d140:	6839      	ldr	r1, [r7, #0]
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fa97 	bl	800d676 <USBD_CtlError>
            err++;
 800d148:	7afb      	ldrb	r3, [r7, #11]
 800d14a:	3301      	adds	r3, #1
 800d14c:	72fb      	strb	r3, [r7, #11]
          break;
 800d14e:	e055      	b.n	800d1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	7c12      	ldrb	r2, [r2, #16]
 800d168:	f107 0108 	add.w	r1, r7, #8
 800d16c:	4610      	mov	r0, r2
 800d16e:	4798      	blx	r3
 800d170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d172:	e043      	b.n	800d1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fa7d 	bl	800d676 <USBD_CtlError>
            err++;
 800d17c:	7afb      	ldrb	r3, [r7, #11]
 800d17e:	3301      	adds	r3, #1
 800d180:	72fb      	strb	r3, [r7, #11]
          break;
 800d182:	e03b      	b.n	800d1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00b      	beq.n	800d1a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d196:	695b      	ldr	r3, [r3, #20]
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	7c12      	ldrb	r2, [r2, #16]
 800d19c:	f107 0108 	add.w	r1, r7, #8
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	4798      	blx	r3
 800d1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1a6:	e029      	b.n	800d1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fa63 	bl	800d676 <USBD_CtlError>
            err++;
 800d1b0:	7afb      	ldrb	r3, [r7, #11]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d1b6:	e021      	b.n	800d1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00b      	beq.n	800d1dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	7c12      	ldrb	r2, [r2, #16]
 800d1d0:	f107 0108 	add.w	r1, r7, #8
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	4798      	blx	r3
 800d1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1da:	e00f      	b.n	800d1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1dc:	6839      	ldr	r1, [r7, #0]
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fa49 	bl	800d676 <USBD_CtlError>
            err++;
 800d1e4:	7afb      	ldrb	r3, [r7, #11]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d1ea:	e007      	b.n	800d1fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d1ec:	6839      	ldr	r1, [r7, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fa41 	bl	800d676 <USBD_CtlError>
          err++;
 800d1f4:	7afb      	ldrb	r3, [r7, #11]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d1fa:	bf00      	nop
      }
      break;
 800d1fc:	e037      	b.n	800d26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	7c1b      	ldrb	r3, [r3, #16]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d109      	bne.n	800d21a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d20e:	f107 0208 	add.w	r2, r7, #8
 800d212:	4610      	mov	r0, r2
 800d214:	4798      	blx	r3
 800d216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d218:	e029      	b.n	800d26e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 fa2a 	bl	800d676 <USBD_CtlError>
        err++;
 800d222:	7afb      	ldrb	r3, [r7, #11]
 800d224:	3301      	adds	r3, #1
 800d226:	72fb      	strb	r3, [r7, #11]
      break;
 800d228:	e021      	b.n	800d26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	7c1b      	ldrb	r3, [r3, #16]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10d      	bne.n	800d24e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d23a:	f107 0208 	add.w	r2, r7, #8
 800d23e:	4610      	mov	r0, r2
 800d240:	4798      	blx	r3
 800d242:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3301      	adds	r3, #1
 800d248:	2207      	movs	r2, #7
 800d24a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d24c:	e00f      	b.n	800d26e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d24e:	6839      	ldr	r1, [r7, #0]
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fa10 	bl	800d676 <USBD_CtlError>
        err++;
 800d256:	7afb      	ldrb	r3, [r7, #11]
 800d258:	3301      	adds	r3, #1
 800d25a:	72fb      	strb	r3, [r7, #11]
      break;
 800d25c:	e007      	b.n	800d26e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fa08 	bl	800d676 <USBD_CtlError>
      err++;
 800d266:	7afb      	ldrb	r3, [r7, #11]
 800d268:	3301      	adds	r3, #1
 800d26a:	72fb      	strb	r3, [r7, #11]
      break;
 800d26c:	bf00      	nop
  }

  if (err != 0U)
 800d26e:	7afb      	ldrb	r3, [r7, #11]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d11e      	bne.n	800d2b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	88db      	ldrh	r3, [r3, #6]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d016      	beq.n	800d2aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d27c:	893b      	ldrh	r3, [r7, #8]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00e      	beq.n	800d2a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	88da      	ldrh	r2, [r3, #6]
 800d286:	893b      	ldrh	r3, [r7, #8]
 800d288:	4293      	cmp	r3, r2
 800d28a:	bf28      	it	cs
 800d28c:	4613      	movcs	r3, r2
 800d28e:	b29b      	uxth	r3, r3
 800d290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d292:	893b      	ldrh	r3, [r7, #8]
 800d294:	461a      	mov	r2, r3
 800d296:	68f9      	ldr	r1, [r7, #12]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fa69 	bl	800d770 <USBD_CtlSendData>
 800d29e:	e009      	b.n	800d2b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f9e7 	bl	800d676 <USBD_CtlError>
 800d2a8:	e004      	b.n	800d2b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 faba 	bl	800d824 <USBD_CtlSendStatus>
 800d2b0:	e000      	b.n	800d2b4 <USBD_GetDescriptor+0x2cc>
    return;
 800d2b2:	bf00      	nop
  }
}
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop

0800d2bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	889b      	ldrh	r3, [r3, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d131      	bne.n	800d332 <USBD_SetAddress+0x76>
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	88db      	ldrh	r3, [r3, #6]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d12d      	bne.n	800d332 <USBD_SetAddress+0x76>
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	885b      	ldrh	r3, [r3, #2]
 800d2da:	2b7f      	cmp	r3, #127	@ 0x7f
 800d2dc:	d829      	bhi.n	800d332 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	885b      	ldrh	r3, [r3, #2]
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d104      	bne.n	800d300 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f9bc 	bl	800d676 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2fe:	e01d      	b.n	800d33c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7bfa      	ldrb	r2, [r7, #15]
 800d304:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 ffb5 	bl	800e27c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 fa86 	bl	800d824 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d004      	beq.n	800d328 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2202      	movs	r2, #2
 800d322:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d326:	e009      	b.n	800d33c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2201      	movs	r2, #1
 800d32c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d330:	e004      	b.n	800d33c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d332:	6839      	ldr	r1, [r7, #0]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 f99e 	bl	800d676 <USBD_CtlError>
  }
}
 800d33a:	bf00      	nop
 800d33c:	bf00      	nop
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d34e:	2300      	movs	r3, #0
 800d350:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	885b      	ldrh	r3, [r3, #2]
 800d356:	b2da      	uxtb	r2, r3
 800d358:	4b4e      	ldr	r3, [pc, #312]	@ (800d494 <USBD_SetConfig+0x150>)
 800d35a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d35c:	4b4d      	ldr	r3, [pc, #308]	@ (800d494 <USBD_SetConfig+0x150>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	2b01      	cmp	r3, #1
 800d362:	d905      	bls.n	800d370 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d364:	6839      	ldr	r1, [r7, #0]
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f985 	bl	800d676 <USBD_CtlError>
    return USBD_FAIL;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e08c      	b.n	800d48a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d002      	beq.n	800d382 <USBD_SetConfig+0x3e>
 800d37c:	2b03      	cmp	r3, #3
 800d37e:	d029      	beq.n	800d3d4 <USBD_SetConfig+0x90>
 800d380:	e075      	b.n	800d46e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d382:	4b44      	ldr	r3, [pc, #272]	@ (800d494 <USBD_SetConfig+0x150>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d020      	beq.n	800d3cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d38a:	4b42      	ldr	r3, [pc, #264]	@ (800d494 <USBD_SetConfig+0x150>)
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	461a      	mov	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d394:	4b3f      	ldr	r3, [pc, #252]	@ (800d494 <USBD_SetConfig+0x150>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7fe ffe3 	bl	800c366 <USBD_SetClassConfig>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d008      	beq.n	800d3bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 f962 	bl	800d676 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3ba:	e065      	b.n	800d488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fa31 	bl	800d824 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2203      	movs	r2, #3
 800d3c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d3ca:	e05d      	b.n	800d488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fa29 	bl	800d824 <USBD_CtlSendStatus>
      break;
 800d3d2:	e059      	b.n	800d488 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d3d4:	4b2f      	ldr	r3, [pc, #188]	@ (800d494 <USBD_SetConfig+0x150>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d112      	bne.n	800d402 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2202      	movs	r2, #2
 800d3e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d3e4:	4b2b      	ldr	r3, [pc, #172]	@ (800d494 <USBD_SetConfig+0x150>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3ee:	4b29      	ldr	r3, [pc, #164]	@ (800d494 <USBD_SetConfig+0x150>)
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f7fe ffd2 	bl	800c39e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 fa12 	bl	800d824 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d400:	e042      	b.n	800d488 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d402:	4b24      	ldr	r3, [pc, #144]	@ (800d494 <USBD_SetConfig+0x150>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	461a      	mov	r2, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d02a      	beq.n	800d466 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	b2db      	uxtb	r3, r3
 800d416:	4619      	mov	r1, r3
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7fe ffc0 	bl	800c39e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d41e:	4b1d      	ldr	r3, [pc, #116]	@ (800d494 <USBD_SetConfig+0x150>)
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	461a      	mov	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d428:	4b1a      	ldr	r3, [pc, #104]	@ (800d494 <USBD_SetConfig+0x150>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	4619      	mov	r1, r3
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7fe ff99 	bl	800c366 <USBD_SetClassConfig>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d438:	7bfb      	ldrb	r3, [r7, #15]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00f      	beq.n	800d45e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d43e:	6839      	ldr	r1, [r7, #0]
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 f918 	bl	800d676 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	4619      	mov	r1, r3
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7fe ffa5 	bl	800c39e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2202      	movs	r2, #2
 800d458:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d45c:	e014      	b.n	800d488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 f9e0 	bl	800d824 <USBD_CtlSendStatus>
      break;
 800d464:	e010      	b.n	800d488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 f9dc 	bl	800d824 <USBD_CtlSendStatus>
      break;
 800d46c:	e00c      	b.n	800d488 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 f900 	bl	800d676 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d476:	4b07      	ldr	r3, [pc, #28]	@ (800d494 <USBD_SetConfig+0x150>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	4619      	mov	r1, r3
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7fe ff8e 	bl	800c39e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d482:	2303      	movs	r3, #3
 800d484:	73fb      	strb	r3, [r7, #15]
      break;
 800d486:	bf00      	nop
  }

  return ret;
 800d488:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	200130ac 	.word	0x200130ac

0800d498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	88db      	ldrh	r3, [r3, #6]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d004      	beq.n	800d4b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 f8e2 	bl	800d676 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d4b2:	e023      	b.n	800d4fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	dc02      	bgt.n	800d4c6 <USBD_GetConfig+0x2e>
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dc03      	bgt.n	800d4cc <USBD_GetConfig+0x34>
 800d4c4:	e015      	b.n	800d4f2 <USBD_GetConfig+0x5a>
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d00b      	beq.n	800d4e2 <USBD_GetConfig+0x4a>
 800d4ca:	e012      	b.n	800d4f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f948 	bl	800d770 <USBD_CtlSendData>
        break;
 800d4e0:	e00c      	b.n	800d4fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f940 	bl	800d770 <USBD_CtlSendData>
        break;
 800d4f0:	e004      	b.n	800d4fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d4f2:	6839      	ldr	r1, [r7, #0]
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f8be 	bl	800d676 <USBD_CtlError>
        break;
 800d4fa:	bf00      	nop
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d514:	b2db      	uxtb	r3, r3
 800d516:	3b01      	subs	r3, #1
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d81e      	bhi.n	800d55a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	88db      	ldrh	r3, [r3, #6]
 800d520:	2b02      	cmp	r3, #2
 800d522:	d004      	beq.n	800d52e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d524:	6839      	ldr	r1, [r7, #0]
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 f8a5 	bl	800d676 <USBD_CtlError>
        break;
 800d52c:	e01a      	b.n	800d564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2201      	movs	r2, #1
 800d532:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d005      	beq.n	800d54a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	f043 0202 	orr.w	r2, r3, #2
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	330c      	adds	r3, #12
 800d54e:	2202      	movs	r2, #2
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f90c 	bl	800d770 <USBD_CtlSendData>
      break;
 800d558:	e004      	b.n	800d564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 f88a 	bl	800d676 <USBD_CtlError>
      break;
 800d562:	bf00      	nop
  }
}
 800d564:	bf00      	nop
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	885b      	ldrh	r3, [r3, #2]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d107      	bne.n	800d58e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f94c 	bl	800d824 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d58c:	e013      	b.n	800d5b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	885b      	ldrh	r3, [r3, #2]
 800d592:	2b02      	cmp	r3, #2
 800d594:	d10b      	bne.n	800d5ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	889b      	ldrh	r3, [r3, #4]
 800d59a:	0a1b      	lsrs	r3, r3, #8
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 f93c 	bl	800d824 <USBD_CtlSendStatus>
}
 800d5ac:	e003      	b.n	800d5b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f860 	bl	800d676 <USBD_CtlError>
}
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d80b      	bhi.n	800d5ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	885b      	ldrh	r3, [r3, #2]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d10c      	bne.n	800d5f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f91c 	bl	800d824 <USBD_CtlSendStatus>
      }
      break;
 800d5ec:	e004      	b.n	800d5f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d5ee:	6839      	ldr	r1, [r7, #0]
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 f840 	bl	800d676 <USBD_CtlError>
      break;
 800d5f6:	e000      	b.n	800d5fa <USBD_ClrFeature+0x3c>
      break;
 800d5f8:	bf00      	nop
  }
}
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
 800d60a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	781a      	ldrb	r2, [r3, #0]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	3301      	adds	r3, #1
 800d61c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	781a      	ldrb	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7ff fa40 	bl	800cab2 <SWAPBYTE>
 800d632:	4603      	mov	r3, r0
 800d634:	461a      	mov	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	3301      	adds	r3, #1
 800d63e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3301      	adds	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f7ff fa33 	bl	800cab2 <SWAPBYTE>
 800d64c:	4603      	mov	r3, r0
 800d64e:	461a      	mov	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	3301      	adds	r3, #1
 800d658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	3301      	adds	r3, #1
 800d65e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f7ff fa26 	bl	800cab2 <SWAPBYTE>
 800d666:	4603      	mov	r3, r0
 800d668:	461a      	mov	r2, r3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	80da      	strh	r2, [r3, #6]
}
 800d66e:	bf00      	nop
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b082      	sub	sp, #8
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d680:	2180      	movs	r1, #128	@ 0x80
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fd90 	bl	800e1a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d688:	2100      	movs	r1, #0
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fd8c 	bl	800e1a8 <USBD_LL_StallEP>
}
 800d690:	bf00      	nop
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d042      	beq.n	800d734 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d6b2:	6938      	ldr	r0, [r7, #16]
 800d6b4:	f000 f842 	bl	800d73c <USBD_GetLen>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	005b      	lsls	r3, r3, #1
 800d6be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6c2:	d808      	bhi.n	800d6d6 <USBD_GetString+0x3e>
 800d6c4:	6938      	ldr	r0, [r7, #16]
 800d6c6:	f000 f839 	bl	800d73c <USBD_GetLen>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	e001      	b.n	800d6da <USBD_GetString+0x42>
 800d6d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	7812      	ldrb	r2, [r2, #0]
 800d6e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6f0:	7dfb      	ldrb	r3, [r7, #23]
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	2203      	movs	r2, #3
 800d6f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d700:	e013      	b.n	800d72a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	4413      	add	r3, r2
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	7812      	ldrb	r2, [r2, #0]
 800d70c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	3301      	adds	r3, #1
 800d712:	613b      	str	r3, [r7, #16]
    idx++;
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	3301      	adds	r3, #1
 800d718:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d71a:	7dfb      	ldrb	r3, [r7, #23]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	4413      	add	r3, r2
 800d720:	2200      	movs	r2, #0
 800d722:	701a      	strb	r2, [r3, #0]
    idx++;
 800d724:	7dfb      	ldrb	r3, [r7, #23]
 800d726:	3301      	adds	r3, #1
 800d728:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1e7      	bne.n	800d702 <USBD_GetString+0x6a>
 800d732:	e000      	b.n	800d736 <USBD_GetString+0x9e>
    return;
 800d734:	bf00      	nop
  }
}
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d74c:	e005      	b.n	800d75a <USBD_GetLen+0x1e>
  {
    len++;
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
 800d750:	3301      	adds	r3, #1
 800d752:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	3301      	adds	r3, #1
 800d758:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1f5      	bne.n	800d74e <USBD_GetLen+0x12>
  }

  return len;
 800d762:	7bfb      	ldrb	r3, [r7, #15]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2202      	movs	r2, #2
 800d780:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	2100      	movs	r1, #0
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f000 fd8f 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f000 fd7e 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3710      	adds	r7, #16
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2203      	movs	r2, #3
 800d7d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f000 fd82 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	60f8      	str	r0, [r7, #12]
 800d80a:	60b9      	str	r1, [r7, #8]
 800d80c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68ba      	ldr	r2, [r7, #8]
 800d812:	2100      	movs	r1, #0
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 fd71 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2204      	movs	r2, #4
 800d830:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d834:	2300      	movs	r3, #0
 800d836:	2200      	movs	r2, #0
 800d838:	2100      	movs	r1, #0
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fd3d 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b082      	sub	sp, #8
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2205      	movs	r2, #5
 800d856:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d85a:	2300      	movs	r3, #0
 800d85c:	2200      	movs	r2, #0
 800d85e:	2100      	movs	r1, #0
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 fd4b 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d874:	2200      	movs	r2, #0
 800d876:	4912      	ldr	r1, [pc, #72]	@ (800d8c0 <MX_USB_DEVICE_Init+0x50>)
 800d878:	4812      	ldr	r0, [pc, #72]	@ (800d8c4 <MX_USB_DEVICE_Init+0x54>)
 800d87a:	f7fe fcf7 	bl	800c26c <USBD_Init>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d884:	f7f3 fd74 	bl	8001370 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d888:	490f      	ldr	r1, [pc, #60]	@ (800d8c8 <MX_USB_DEVICE_Init+0x58>)
 800d88a:	480e      	ldr	r0, [pc, #56]	@ (800d8c4 <MX_USB_DEVICE_Init+0x54>)
 800d88c:	f7fe fd1e 	bl	800c2cc <USBD_RegisterClass>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d896:	f7f3 fd6b 	bl	8001370 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d89a:	490c      	ldr	r1, [pc, #48]	@ (800d8cc <MX_USB_DEVICE_Init+0x5c>)
 800d89c:	4809      	ldr	r0, [pc, #36]	@ (800d8c4 <MX_USB_DEVICE_Init+0x54>)
 800d89e:	f7fe fc15 	bl	800c0cc <USBD_CDC_RegisterInterface>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d001      	beq.n	800d8ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d8a8:	f7f3 fd62 	bl	8001370 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d8ac:	4805      	ldr	r0, [pc, #20]	@ (800d8c4 <MX_USB_DEVICE_Init+0x54>)
 800d8ae:	f7fe fd43 	bl	800c338 <USBD_Start>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d001      	beq.n	800d8bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d8b8:	f7f3 fd5a 	bl	8001370 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d8bc:	bf00      	nop
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	200000b4 	.word	0x200000b4
 800d8c4:	200130b0 	.word	0x200130b0
 800d8c8:	20000020 	.word	0x20000020
 800d8cc:	200000a0 	.word	0x200000a0

0800d8d0 <parse_packet>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
int8_t parse_packet(uint8_t *buffer, uint16_t packet_length, SensorData *data) {
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	607a      	str	r2, [r7, #4]
 800d8dc:	817b      	strh	r3, [r7, #10]
    // Ensure the packet is large enough
    if (packet_length < 8) { // Minimum size: danger(1) + proximity(4) + roadTypeLength(1) + quality(4)
 800d8de:	897b      	ldrh	r3, [r7, #10]
 800d8e0:	2b07      	cmp	r3, #7
 800d8e2:	d801      	bhi.n	800d8e8 <parse_packet+0x18>
        return 0;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e050      	b.n	800d98a <parse_packet+0xba>
    }

    // Step 1: Extract fields
    uint8_t *ptr = buffer + 3;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	3303      	adds	r3, #3
 800d8ec:	617b      	str	r3, [r7, #20]
    data->danger = *ptr; // 1 byte
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	b25a      	sxtb	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	701a      	strb	r2, [r3, #0]
    ptr += 1;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	617b      	str	r3, [r7, #20]

    data->dangerProximity = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	061a      	lsls	r2, r3, #24
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	3301      	adds	r3, #1
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	041b      	lsls	r3, r3, #16
 800d90c:	431a      	orrs	r2, r3
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	3302      	adds	r3, #2
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	021b      	lsls	r3, r3, #8
 800d916:	4313      	orrs	r3, r2
 800d918:	697a      	ldr	r2, [r7, #20]
 800d91a:	3203      	adds	r2, #3
 800d91c:	7812      	ldrb	r2, [r2, #0]
 800d91e:	431a      	orrs	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	605a      	str	r2, [r3, #4]
    ptr += 4;
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	3304      	adds	r3, #4
 800d928:	617b      	str	r3, [r7, #20]

    uint8_t roadTypeLength = *ptr; // 1 byte
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	74fb      	strb	r3, [r7, #19]
    ptr += 1;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	3301      	adds	r3, #1
 800d934:	617b      	str	r3, [r7, #20]

    // Ensure the roadType string fits within the buffer
    if (roadTypeLength >= sizeof(data->roadType)) {
 800d936:	7cfb      	ldrb	r3, [r7, #19]
 800d938:	2b04      	cmp	r3, #4
 800d93a:	d901      	bls.n	800d940 <parse_packet+0x70>
        return 0; // String too long
 800d93c:	2300      	movs	r3, #0
 800d93e:	e024      	b.n	800d98a <parse_packet+0xba>
    }

    // Copy roadType string
    memcpy(data->roadType, ptr, roadTypeLength);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3308      	adds	r3, #8
 800d944:	7cfa      	ldrb	r2, [r7, #19]
 800d946:	6979      	ldr	r1, [r7, #20]
 800d948:	4618      	mov	r0, r3
 800d94a:	f000 fd7b 	bl	800e444 <memcpy>
    data->roadType[roadTypeLength] = '\0'; // Null-terminate
 800d94e:	7cfb      	ldrb	r3, [r7, #19]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	4413      	add	r3, r2
 800d954:	2200      	movs	r2, #0
 800d956:	721a      	strb	r2, [r3, #8]
    ptr += roadTypeLength;
 800d958:	7cfb      	ldrb	r3, [r7, #19]
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	4413      	add	r3, r2
 800d95e:	617b      	str	r3, [r7, #20]

    // Extract roadQuality
    data->roadQuality = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	061a      	lsls	r2, r3, #24
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	3301      	adds	r3, #1
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	041b      	lsls	r3, r3, #16
 800d96e:	431a      	orrs	r2, r3
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	3302      	adds	r3, #2
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	021b      	lsls	r3, r3, #8
 800d978:	4313      	orrs	r3, r2
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	3203      	adds	r2, #3
 800d97e:	7812      	ldrb	r2, [r2, #0]
 800d980:	4313      	orrs	r3, r2
 800d982:	461a      	mov	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	611a      	str	r2, [r3, #16]

    return 1;
 800d988:	2301      	movs	r3, #1
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3718      	adds	r7, #24
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d998:	2200      	movs	r2, #0
 800d99a:	4905      	ldr	r1, [pc, #20]	@ (800d9b0 <CDC_Init_FS+0x1c>)
 800d99c:	4805      	ldr	r0, [pc, #20]	@ (800d9b4 <CDC_Init_FS+0x20>)
 800d99e:	f7fe fbaf 	bl	800c100 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d9a2:	4905      	ldr	r1, [pc, #20]	@ (800d9b8 <CDC_Init_FS+0x24>)
 800d9a4:	4803      	ldr	r0, [pc, #12]	@ (800d9b4 <CDC_Init_FS+0x20>)
 800d9a6:	f7fe fbcd 	bl	800c144 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d9aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	20013b8c 	.word	0x20013b8c
 800d9b4:	200130b0 	.word	0x200130b0
 800d9b8:	2001338c 	.word	0x2001338c

0800d9bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d9c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	6039      	str	r1, [r7, #0]
 800d9d6:	71fb      	strb	r3, [r7, #7]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d9dc:	79fb      	ldrb	r3, [r7, #7]
 800d9de:	2b23      	cmp	r3, #35	@ 0x23
 800d9e0:	d84a      	bhi.n	800da78 <CDC_Control_FS+0xac>
 800d9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9e8 <CDC_Control_FS+0x1c>)
 800d9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e8:	0800da79 	.word	0x0800da79
 800d9ec:	0800da79 	.word	0x0800da79
 800d9f0:	0800da79 	.word	0x0800da79
 800d9f4:	0800da79 	.word	0x0800da79
 800d9f8:	0800da79 	.word	0x0800da79
 800d9fc:	0800da79 	.word	0x0800da79
 800da00:	0800da79 	.word	0x0800da79
 800da04:	0800da79 	.word	0x0800da79
 800da08:	0800da79 	.word	0x0800da79
 800da0c:	0800da79 	.word	0x0800da79
 800da10:	0800da79 	.word	0x0800da79
 800da14:	0800da79 	.word	0x0800da79
 800da18:	0800da79 	.word	0x0800da79
 800da1c:	0800da79 	.word	0x0800da79
 800da20:	0800da79 	.word	0x0800da79
 800da24:	0800da79 	.word	0x0800da79
 800da28:	0800da79 	.word	0x0800da79
 800da2c:	0800da79 	.word	0x0800da79
 800da30:	0800da79 	.word	0x0800da79
 800da34:	0800da79 	.word	0x0800da79
 800da38:	0800da79 	.word	0x0800da79
 800da3c:	0800da79 	.word	0x0800da79
 800da40:	0800da79 	.word	0x0800da79
 800da44:	0800da79 	.word	0x0800da79
 800da48:	0800da79 	.word	0x0800da79
 800da4c:	0800da79 	.word	0x0800da79
 800da50:	0800da79 	.word	0x0800da79
 800da54:	0800da79 	.word	0x0800da79
 800da58:	0800da79 	.word	0x0800da79
 800da5c:	0800da79 	.word	0x0800da79
 800da60:	0800da79 	.word	0x0800da79
 800da64:	0800da79 	.word	0x0800da79
 800da68:	0800da79 	.word	0x0800da79
 800da6c:	0800da79 	.word	0x0800da79
 800da70:	0800da79 	.word	0x0800da79
 800da74:	0800da79 	.word	0x0800da79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da78:	bf00      	nop
  }

  return (USBD_OK);
 800da7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800da88:	b5b0      	push	{r4, r5, r7, lr}
 800da8a:	b08e      	sub	sp, #56	@ 0x38
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SensorData data;
	if(!parse_packet(Buf, *Len, &data)){
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	b29b      	uxth	r3, r3
 800da98:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800da9c:	4619      	mov	r1, r3
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7ff ff16 	bl	800d8d0 <parse_packet>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d119      	bne.n	800dade <CDC_Receive_FS+0x56>
		uint8_t error_response[] = "Invalid packet format";
 800daaa:	4b1b      	ldr	r3, [pc, #108]	@ (800db18 <CDC_Receive_FS+0x90>)
 800daac:	f107 040c 	add.w	r4, r7, #12
 800dab0:	461d      	mov	r5, r3
 800dab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dab6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800daba:	6020      	str	r0, [r4, #0]
 800dabc:	3404      	adds	r4, #4
 800dabe:	8021      	strh	r1, [r4, #0]
		CDC_Transmit_FS(error_response, strlen((char*)error_response));
 800dac0:	f107 030c 	add.w	r3, r7, #12
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f2 fb8b 	bl	80001e0 <strlen>
 800daca:	4603      	mov	r3, r0
 800dacc:	b29a      	uxth	r2, r3
 800dace:	f107 030c 	add.w	r3, r7, #12
 800dad2:	4611      	mov	r1, r2
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 f829 	bl	800db2c <CDC_Transmit_FS>
		return USBD_FAIL;
 800dada:	2303      	movs	r3, #3
 800dadc:	e017      	b.n	800db0e <CDC_Receive_FS+0x86>
	}

	recivedData = data;
 800dade:	4b0f      	ldr	r3, [pc, #60]	@ (800db1c <CDC_Receive_FS+0x94>)
 800dae0:	461d      	mov	r5, r3
 800dae2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800dae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800daea:	6823      	ldr	r3, [r4, #0]
 800daec:	602b      	str	r3, [r5, #0]
	isDefined = 1;
 800daee:	4b0c      	ldr	r3, [pc, #48]	@ (800db20 <CDC_Receive_FS+0x98>)
 800daf0:	2201      	movs	r2, #1
 800daf2:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800daf4:	6879      	ldr	r1, [r7, #4]
 800daf6:	480b      	ldr	r0, [pc, #44]	@ (800db24 <CDC_Receive_FS+0x9c>)
 800daf8:	f7fe fb24 	bl	800c144 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dafc:	4809      	ldr	r0, [pc, #36]	@ (800db24 <CDC_Receive_FS+0x9c>)
 800dafe:	f7fe fb7f 	bl	800c200 <USBD_CDC_ReceivePacket>

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800db02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800db06:	4808      	ldr	r0, [pc, #32]	@ (800db28 <CDC_Receive_FS+0xa0>)
 800db08:	f7f4 f9ff 	bl	8001f0a <HAL_GPIO_TogglePin>
	return (USBD_OK);
 800db0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3738      	adds	r7, #56	@ 0x38
 800db12:	46bd      	mov	sp, r7
 800db14:	bdb0      	pop	{r4, r5, r7, pc}
 800db16:	bf00      	nop
 800db18:	0800e4dc 	.word	0x0800e4dc
 800db1c:	20014390 	.word	0x20014390
 800db20:	2001438c 	.word	0x2001438c
 800db24:	200130b0 	.word	0x200130b0
 800db28:	40020c00 	.word	0x40020c00

0800db2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	460b      	mov	r3, r1
 800db36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800db38:	2300      	movs	r3, #0
 800db3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800db3c:	4b0d      	ldr	r3, [pc, #52]	@ (800db74 <CDC_Transmit_FS+0x48>)
 800db3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800db4e:	2301      	movs	r3, #1
 800db50:	e00b      	b.n	800db6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800db52:	887b      	ldrh	r3, [r7, #2]
 800db54:	461a      	mov	r2, r3
 800db56:	6879      	ldr	r1, [r7, #4]
 800db58:	4806      	ldr	r0, [pc, #24]	@ (800db74 <CDC_Transmit_FS+0x48>)
 800db5a:	f7fe fad1 	bl	800c100 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800db5e:	4805      	ldr	r0, [pc, #20]	@ (800db74 <CDC_Transmit_FS+0x48>)
 800db60:	f7fe fb0e 	bl	800c180 <USBD_CDC_TransmitPacket>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800db68:	7bfb      	ldrb	r3, [r7, #15]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	200130b0 	.word	0x200130b0

0800db78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	4613      	mov	r3, r2
 800db84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800db8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	371c      	adds	r7, #28
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
	...

0800db9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	4603      	mov	r3, r0
 800dba4:	6039      	str	r1, [r7, #0]
 800dba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	2212      	movs	r2, #18
 800dbac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dbae:	4b03      	ldr	r3, [pc, #12]	@ (800dbbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	200000d0 	.word	0x200000d0

0800dbc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	6039      	str	r1, [r7, #0]
 800dbca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	2204      	movs	r2, #4
 800dbd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dbd2:	4b03      	ldr	r3, [pc, #12]	@ (800dbe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	370c      	adds	r7, #12
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr
 800dbe0:	200000e4 	.word	0x200000e4

0800dbe4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	4603      	mov	r3, r0
 800dbec:	6039      	str	r1, [r7, #0]
 800dbee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbf0:	79fb      	ldrb	r3, [r7, #7]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d105      	bne.n	800dc02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	4907      	ldr	r1, [pc, #28]	@ (800dc18 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbfa:	4808      	ldr	r0, [pc, #32]	@ (800dc1c <USBD_FS_ProductStrDescriptor+0x38>)
 800dbfc:	f7ff fd4c 	bl	800d698 <USBD_GetString>
 800dc00:	e004      	b.n	800dc0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	4904      	ldr	r1, [pc, #16]	@ (800dc18 <USBD_FS_ProductStrDescriptor+0x34>)
 800dc06:	4805      	ldr	r0, [pc, #20]	@ (800dc1c <USBD_FS_ProductStrDescriptor+0x38>)
 800dc08:	f7ff fd46 	bl	800d698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc0c:	4b02      	ldr	r3, [pc, #8]	@ (800dc18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	200143a4 	.word	0x200143a4
 800dc1c:	0800e4f4 	.word	0x0800e4f4

0800dc20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	4603      	mov	r3, r0
 800dc28:	6039      	str	r1, [r7, #0]
 800dc2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	4904      	ldr	r1, [pc, #16]	@ (800dc40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dc30:	4804      	ldr	r0, [pc, #16]	@ (800dc44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dc32:	f7ff fd31 	bl	800d698 <USBD_GetString>
  return USBD_StrDesc;
 800dc36:	4b02      	ldr	r3, [pc, #8]	@ (800dc40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	200143a4 	.word	0x200143a4
 800dc44:	0800e504 	.word	0x0800e504

0800dc48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	4603      	mov	r3, r0
 800dc50:	6039      	str	r1, [r7, #0]
 800dc52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	221a      	movs	r2, #26
 800dc58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc5a:	f000 f843 	bl	800dce4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc5e:	4b02      	ldr	r3, [pc, #8]	@ (800dc68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	200000e8 	.word	0x200000e8

0800dc6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	6039      	str	r1, [r7, #0]
 800dc76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc78:	79fb      	ldrb	r3, [r7, #7]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d105      	bne.n	800dc8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc7e:	683a      	ldr	r2, [r7, #0]
 800dc80:	4907      	ldr	r1, [pc, #28]	@ (800dca0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc82:	4808      	ldr	r0, [pc, #32]	@ (800dca4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc84:	f7ff fd08 	bl	800d698 <USBD_GetString>
 800dc88:	e004      	b.n	800dc94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	4904      	ldr	r1, [pc, #16]	@ (800dca0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc8e:	4805      	ldr	r0, [pc, #20]	@ (800dca4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc90:	f7ff fd02 	bl	800d698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc94:	4b02      	ldr	r3, [pc, #8]	@ (800dca0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	200143a4 	.word	0x200143a4
 800dca4:	0800e518 	.word	0x0800e518

0800dca8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	4603      	mov	r3, r0
 800dcb0:	6039      	str	r1, [r7, #0]
 800dcb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d105      	bne.n	800dcc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	4907      	ldr	r1, [pc, #28]	@ (800dcdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dcbe:	4808      	ldr	r0, [pc, #32]	@ (800dce0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dcc0:	f7ff fcea 	bl	800d698 <USBD_GetString>
 800dcc4:	e004      	b.n	800dcd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dcc6:	683a      	ldr	r2, [r7, #0]
 800dcc8:	4904      	ldr	r1, [pc, #16]	@ (800dcdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dcca:	4805      	ldr	r0, [pc, #20]	@ (800dce0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dccc:	f7ff fce4 	bl	800d698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcd0:	4b02      	ldr	r3, [pc, #8]	@ (800dcdc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3708      	adds	r7, #8
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	200143a4 	.word	0x200143a4
 800dce0:	0800e524 	.word	0x0800e524

0800dce4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dcea:	4b0f      	ldr	r3, [pc, #60]	@ (800dd28 <Get_SerialNum+0x44>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dcf0:	4b0e      	ldr	r3, [pc, #56]	@ (800dd2c <Get_SerialNum+0x48>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dcf6:	4b0e      	ldr	r3, [pc, #56]	@ (800dd30 <Get_SerialNum+0x4c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4413      	add	r3, r2
 800dd02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d009      	beq.n	800dd1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dd0a:	2208      	movs	r2, #8
 800dd0c:	4909      	ldr	r1, [pc, #36]	@ (800dd34 <Get_SerialNum+0x50>)
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f000 f814 	bl	800dd3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dd14:	2204      	movs	r2, #4
 800dd16:	4908      	ldr	r1, [pc, #32]	@ (800dd38 <Get_SerialNum+0x54>)
 800dd18:	68b8      	ldr	r0, [r7, #8]
 800dd1a:	f000 f80f 	bl	800dd3c <IntToUnicode>
  }
}
 800dd1e:	bf00      	nop
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	1fff7a10 	.word	0x1fff7a10
 800dd2c:	1fff7a14 	.word	0x1fff7a14
 800dd30:	1fff7a18 	.word	0x1fff7a18
 800dd34:	200000ea 	.word	0x200000ea
 800dd38:	200000fa 	.word	0x200000fa

0800dd3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b087      	sub	sp, #28
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	4613      	mov	r3, r2
 800dd48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd4e:	2300      	movs	r3, #0
 800dd50:	75fb      	strb	r3, [r7, #23]
 800dd52:	e027      	b.n	800dda4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	0f1b      	lsrs	r3, r3, #28
 800dd58:	2b09      	cmp	r3, #9
 800dd5a:	d80b      	bhi.n	800dd74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	0f1b      	lsrs	r3, r3, #28
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
 800dd64:	005b      	lsls	r3, r3, #1
 800dd66:	4619      	mov	r1, r3
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	440b      	add	r3, r1
 800dd6c:	3230      	adds	r2, #48	@ 0x30
 800dd6e:	b2d2      	uxtb	r2, r2
 800dd70:	701a      	strb	r2, [r3, #0]
 800dd72:	e00a      	b.n	800dd8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	0f1b      	lsrs	r3, r3, #28
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	4619      	mov	r1, r3
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	440b      	add	r3, r1
 800dd84:	3237      	adds	r2, #55	@ 0x37
 800dd86:	b2d2      	uxtb	r2, r2
 800dd88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	011b      	lsls	r3, r3, #4
 800dd8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd90:	7dfb      	ldrb	r3, [r7, #23]
 800dd92:	005b      	lsls	r3, r3, #1
 800dd94:	3301      	adds	r3, #1
 800dd96:	68ba      	ldr	r2, [r7, #8]
 800dd98:	4413      	add	r3, r2
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd9e:	7dfb      	ldrb	r3, [r7, #23]
 800dda0:	3301      	adds	r3, #1
 800dda2:	75fb      	strb	r3, [r7, #23]
 800dda4:	7dfa      	ldrb	r2, [r7, #23]
 800dda6:	79fb      	ldrb	r3, [r7, #7]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d3d3      	bcc.n	800dd54 <IntToUnicode+0x18>
  }
}
 800ddac:	bf00      	nop
 800ddae:	bf00      	nop
 800ddb0:	371c      	adds	r7, #28
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr
	...

0800ddbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08a      	sub	sp, #40	@ 0x28
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ddc4:	f107 0314 	add.w	r3, r7, #20
 800ddc8:	2200      	movs	r2, #0
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	605a      	str	r2, [r3, #4]
 800ddce:	609a      	str	r2, [r3, #8]
 800ddd0:	60da      	str	r2, [r3, #12]
 800ddd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dddc:	d147      	bne.n	800de6e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddde:	2300      	movs	r3, #0
 800dde0:	613b      	str	r3, [r7, #16]
 800dde2:	4b25      	ldr	r3, [pc, #148]	@ (800de78 <HAL_PCD_MspInit+0xbc>)
 800dde4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dde6:	4a24      	ldr	r2, [pc, #144]	@ (800de78 <HAL_PCD_MspInit+0xbc>)
 800dde8:	f043 0301 	orr.w	r3, r3, #1
 800ddec:	6313      	str	r3, [r2, #48]	@ 0x30
 800ddee:	4b22      	ldr	r3, [pc, #136]	@ (800de78 <HAL_PCD_MspInit+0xbc>)
 800ddf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddf2:	f003 0301 	and.w	r3, r3, #1
 800ddf6:	613b      	str	r3, [r7, #16]
 800ddf8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ddfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800de00:	2300      	movs	r3, #0
 800de02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de04:	2300      	movs	r3, #0
 800de06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800de08:	f107 0314 	add.w	r3, r7, #20
 800de0c:	4619      	mov	r1, r3
 800de0e:	481b      	ldr	r0, [pc, #108]	@ (800de7c <HAL_PCD_MspInit+0xc0>)
 800de10:	f7f3 fec6 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800de14:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800de18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de1a:	2302      	movs	r3, #2
 800de1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de22:	2303      	movs	r3, #3
 800de24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800de26:	230a      	movs	r3, #10
 800de28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de2a:	f107 0314 	add.w	r3, r7, #20
 800de2e:	4619      	mov	r1, r3
 800de30:	4812      	ldr	r0, [pc, #72]	@ (800de7c <HAL_PCD_MspInit+0xc0>)
 800de32:	f7f3 feb5 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800de36:	4b10      	ldr	r3, [pc, #64]	@ (800de78 <HAL_PCD_MspInit+0xbc>)
 800de38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de3a:	4a0f      	ldr	r2, [pc, #60]	@ (800de78 <HAL_PCD_MspInit+0xbc>)
 800de3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de40:	6353      	str	r3, [r2, #52]	@ 0x34
 800de42:	2300      	movs	r3, #0
 800de44:	60fb      	str	r3, [r7, #12]
 800de46:	4b0c      	ldr	r3, [pc, #48]	@ (800de78 <HAL_PCD_MspInit+0xbc>)
 800de48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de4a:	4a0b      	ldr	r2, [pc, #44]	@ (800de78 <HAL_PCD_MspInit+0xbc>)
 800de4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800de50:	6453      	str	r3, [r2, #68]	@ 0x44
 800de52:	4b09      	ldr	r3, [pc, #36]	@ (800de78 <HAL_PCD_MspInit+0xbc>)
 800de54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800de5e:	2200      	movs	r2, #0
 800de60:	2100      	movs	r1, #0
 800de62:	2043      	movs	r0, #67	@ 0x43
 800de64:	f7f3 fe72 	bl	8001b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de68:	2043      	movs	r0, #67	@ 0x43
 800de6a:	f7f3 fe8b 	bl	8001b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de6e:	bf00      	nop
 800de70:	3728      	adds	r7, #40	@ 0x28
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	40023800 	.word	0x40023800
 800de7c:	40020000 	.word	0x40020000

0800de80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800de94:	4619      	mov	r1, r3
 800de96:	4610      	mov	r0, r2
 800de98:	f7fe fa9b 	bl	800c3d2 <USBD_LL_SetupStage>
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800deb6:	78fa      	ldrb	r2, [r7, #3]
 800deb8:	6879      	ldr	r1, [r7, #4]
 800deba:	4613      	mov	r3, r2
 800debc:	00db      	lsls	r3, r3, #3
 800debe:	4413      	add	r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	440b      	add	r3, r1
 800dec4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	78fb      	ldrb	r3, [r7, #3]
 800decc:	4619      	mov	r1, r3
 800dece:	f7fe fad5 	bl	800c47c <USBD_LL_DataOutStage>
}
 800ded2:	bf00      	nop
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b082      	sub	sp, #8
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800deec:	78fa      	ldrb	r2, [r7, #3]
 800deee:	6879      	ldr	r1, [r7, #4]
 800def0:	4613      	mov	r3, r2
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	4413      	add	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	440b      	add	r3, r1
 800defa:	3320      	adds	r3, #32
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	78fb      	ldrb	r3, [r7, #3]
 800df00:	4619      	mov	r1, r3
 800df02:	f7fe fb6e 	bl	800c5e2 <USBD_LL_DataInStage>
}
 800df06:	bf00      	nop
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fe fca8 	bl	800c872 <USBD_LL_SOF>
}
 800df22:	bf00      	nop
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b084      	sub	sp, #16
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800df32:	2301      	movs	r3, #1
 800df34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	79db      	ldrb	r3, [r3, #7]
 800df3a:	2b02      	cmp	r3, #2
 800df3c:	d001      	beq.n	800df42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800df3e:	f7f3 fa17 	bl	8001370 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df48:	7bfa      	ldrb	r2, [r7, #15]
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fc4c 	bl	800c7ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe fbf4 	bl	800c746 <USBD_LL_Reset>
}
 800df5e:	bf00      	nop
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe fc47 	bl	800c80a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	6812      	ldr	r2, [r2, #0]
 800df8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df8e:	f043 0301 	orr.w	r3, r3, #1
 800df92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	7adb      	ldrb	r3, [r3, #11]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d005      	beq.n	800dfa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df9c:	4b04      	ldr	r3, [pc, #16]	@ (800dfb0 <HAL_PCD_SuspendCallback+0x48>)
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	4a03      	ldr	r2, [pc, #12]	@ (800dfb0 <HAL_PCD_SuspendCallback+0x48>)
 800dfa2:	f043 0306 	orr.w	r3, r3, #6
 800dfa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	e000ed00 	.word	0xe000ed00

0800dfb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fe fc3d 	bl	800c842 <USBD_LL_Resume>
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfe2:	78fa      	ldrb	r2, [r7, #3]
 800dfe4:	4611      	mov	r1, r2
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fe fc95 	bl	800c916 <USBD_LL_IsoOUTIncomplete>
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e006:	78fa      	ldrb	r2, [r7, #3]
 800e008:	4611      	mov	r1, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fe fc51 	bl	800c8b2 <USBD_LL_IsoINIncomplete>
}
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e026:	4618      	mov	r0, r3
 800e028:	f7fe fca7 	bl	800c97a <USBD_LL_DevConnected>
}
 800e02c:	bf00      	nop
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e042:	4618      	mov	r0, r3
 800e044:	f7fe fca4 	bl	800c990 <USBD_LL_DevDisconnected>
}
 800e048:	bf00      	nop
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d13c      	bne.n	800e0da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e060:	4a20      	ldr	r2, [pc, #128]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a1e      	ldr	r2, [pc, #120]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e06c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e070:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e072:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e076:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e078:	4b1a      	ldr	r3, [pc, #104]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e07a:	2204      	movs	r2, #4
 800e07c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e07e:	4b19      	ldr	r3, [pc, #100]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e080:	2202      	movs	r2, #2
 800e082:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e084:	4b17      	ldr	r3, [pc, #92]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e086:	2200      	movs	r2, #0
 800e088:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e08a:	4b16      	ldr	r3, [pc, #88]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e08c:	2202      	movs	r2, #2
 800e08e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e090:	4b14      	ldr	r3, [pc, #80]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e092:	2200      	movs	r2, #0
 800e094:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e096:	4b13      	ldr	r3, [pc, #76]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e098:	2200      	movs	r2, #0
 800e09a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e09c:	4b11      	ldr	r3, [pc, #68]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e0a2:	4b10      	ldr	r3, [pc, #64]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e0ae:	480d      	ldr	r0, [pc, #52]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0b0:	f7f5 fc0a 	bl	80038c8 <HAL_PCD_Init>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e0ba:	f7f3 f959 	bl	8001370 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e0be:	2180      	movs	r1, #128	@ 0x80
 800e0c0:	4808      	ldr	r0, [pc, #32]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0c2:	f7f6 fe36 	bl	8004d32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e0c6:	2240      	movs	r2, #64	@ 0x40
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	4806      	ldr	r0, [pc, #24]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0cc:	f7f6 fdea 	bl	8004ca4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e0d0:	2280      	movs	r2, #128	@ 0x80
 800e0d2:	2101      	movs	r1, #1
 800e0d4:	4803      	ldr	r0, [pc, #12]	@ (800e0e4 <USBD_LL_Init+0x94>)
 800e0d6:	f7f6 fde5 	bl	8004ca4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	200145a4 	.word	0x200145a4

0800e0e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7f5 fcf1 	bl	8003ae6 <HAL_PCD_Start>
 800e104:	4603      	mov	r3, r0
 800e106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f942 	bl	800e394 <USBD_Get_USB_Status>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e114:	7bbb      	ldrb	r3, [r7, #14]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	461a      	mov	r2, r3
 800e12c:	4603      	mov	r3, r0
 800e12e:	70fb      	strb	r3, [r7, #3]
 800e130:	460b      	mov	r3, r1
 800e132:	70bb      	strb	r3, [r7, #2]
 800e134:	4613      	mov	r3, r2
 800e136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e146:	78bb      	ldrb	r3, [r7, #2]
 800e148:	883a      	ldrh	r2, [r7, #0]
 800e14a:	78f9      	ldrb	r1, [r7, #3]
 800e14c:	f7f6 f9c5 	bl	80044da <HAL_PCD_EP_Open>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	4618      	mov	r0, r3
 800e158:	f000 f91c 	bl	800e394 <USBD_Get_USB_Status>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e160:	7bbb      	ldrb	r3, [r7, #14]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e184:	78fa      	ldrb	r2, [r7, #3]
 800e186:	4611      	mov	r1, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f6 fa10 	bl	80045ae <HAL_PCD_EP_Close>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f8fd 	bl	800e394 <USBD_Get_USB_Status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1c2:	78fa      	ldrb	r2, [r7, #3]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f6 fac8 	bl	800475c <HAL_PCD_EP_SetStall>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 f8de 	bl	800e394 <USBD_Get_USB_Status>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e200:	78fa      	ldrb	r2, [r7, #3]
 800e202:	4611      	mov	r1, r2
 800e204:	4618      	mov	r0, r3
 800e206:	f7f6 fb0c 	bl	8004822 <HAL_PCD_EP_ClrStall>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
 800e210:	4618      	mov	r0, r3
 800e212:	f000 f8bf 	bl	800e394 <USBD_Get_USB_Status>
 800e216:	4603      	mov	r3, r0
 800e218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	da0b      	bge.n	800e258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e246:	68f9      	ldr	r1, [r7, #12]
 800e248:	4613      	mov	r3, r2
 800e24a:	00db      	lsls	r3, r3, #3
 800e24c:	4413      	add	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	440b      	add	r3, r1
 800e252:	3316      	adds	r3, #22
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	e00b      	b.n	800e270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e258:	78fb      	ldrb	r3, [r7, #3]
 800e25a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	4613      	mov	r3, r2
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e26e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e296:	78fa      	ldrb	r2, [r7, #3]
 800e298:	4611      	mov	r1, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f6 f8f9 	bl	8004492 <HAL_PCD_SetAddress>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 f874 	bl	800e394 <USBD_Get_USB_Status>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b086      	sub	sp, #24
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	603b      	str	r3, [r7, #0]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e2d8:	7af9      	ldrb	r1, [r7, #11]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	f7f6 fa03 	bl	80046e8 <HAL_PCD_EP_Transmit>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 f853 	bl	800e394 <USBD_Get_USB_Status>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	607a      	str	r2, [r7, #4]
 800e306:	603b      	str	r3, [r7, #0]
 800e308:	460b      	mov	r3, r1
 800e30a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e31a:	7af9      	ldrb	r1, [r7, #11]
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	f7f6 f98f 	bl	8004642 <HAL_PCD_EP_Receive>
 800e324:	4603      	mov	r3, r0
 800e326:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f832 	bl	800e394 <USBD_Get_USB_Status>
 800e330:	4603      	mov	r3, r0
 800e332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e334:	7dbb      	ldrb	r3, [r7, #22]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3718      	adds	r7, #24
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e350:	78fa      	ldrb	r2, [r7, #3]
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7f6 f9af 	bl	80046b8 <HAL_PCD_EP_GetRxCount>
 800e35a:	4603      	mov	r3, r0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e36c:	4b03      	ldr	r3, [pc, #12]	@ (800e37c <USBD_static_malloc+0x18>)
}
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	20014a88 	.word	0x20014a88

0800e380 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]

}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3a2:	79fb      	ldrb	r3, [r7, #7]
 800e3a4:	2b03      	cmp	r3, #3
 800e3a6:	d817      	bhi.n	800e3d8 <USBD_Get_USB_Status+0x44>
 800e3a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e3b0 <USBD_Get_USB_Status+0x1c>)
 800e3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ae:	bf00      	nop
 800e3b0:	0800e3c1 	.word	0x0800e3c1
 800e3b4:	0800e3c7 	.word	0x0800e3c7
 800e3b8:	0800e3cd 	.word	0x0800e3cd
 800e3bc:	0800e3d3 	.word	0x0800e3d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3c4:	e00b      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ca:	e008      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d0:	e005      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d6:	e002      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e3d8:	2303      	movs	r3, #3
 800e3da:	73fb      	strb	r3, [r7, #15]
    break;
 800e3dc:	bf00      	nop
  }
  return usb_status;
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <memset>:
 800e3ec:	4402      	add	r2, r0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d100      	bne.n	800e3f6 <memset+0xa>
 800e3f4:	4770      	bx	lr
 800e3f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e3fa:	e7f9      	b.n	800e3f0 <memset+0x4>

0800e3fc <__libc_init_array>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	4d0d      	ldr	r5, [pc, #52]	@ (800e434 <__libc_init_array+0x38>)
 800e400:	4c0d      	ldr	r4, [pc, #52]	@ (800e438 <__libc_init_array+0x3c>)
 800e402:	1b64      	subs	r4, r4, r5
 800e404:	10a4      	asrs	r4, r4, #2
 800e406:	2600      	movs	r6, #0
 800e408:	42a6      	cmp	r6, r4
 800e40a:	d109      	bne.n	800e420 <__libc_init_array+0x24>
 800e40c:	4d0b      	ldr	r5, [pc, #44]	@ (800e43c <__libc_init_array+0x40>)
 800e40e:	4c0c      	ldr	r4, [pc, #48]	@ (800e440 <__libc_init_array+0x44>)
 800e410:	f000 f826 	bl	800e460 <_init>
 800e414:	1b64      	subs	r4, r4, r5
 800e416:	10a4      	asrs	r4, r4, #2
 800e418:	2600      	movs	r6, #0
 800e41a:	42a6      	cmp	r6, r4
 800e41c:	d105      	bne.n	800e42a <__libc_init_array+0x2e>
 800e41e:	bd70      	pop	{r4, r5, r6, pc}
 800e420:	f855 3b04 	ldr.w	r3, [r5], #4
 800e424:	4798      	blx	r3
 800e426:	3601      	adds	r6, #1
 800e428:	e7ee      	b.n	800e408 <__libc_init_array+0xc>
 800e42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e42e:	4798      	blx	r3
 800e430:	3601      	adds	r6, #1
 800e432:	e7f2      	b.n	800e41a <__libc_init_array+0x1e>
 800e434:	0800e554 	.word	0x0800e554
 800e438:	0800e554 	.word	0x0800e554
 800e43c:	0800e554 	.word	0x0800e554
 800e440:	0800e558 	.word	0x0800e558

0800e444 <memcpy>:
 800e444:	440a      	add	r2, r1
 800e446:	4291      	cmp	r1, r2
 800e448:	f100 33ff 	add.w	r3, r0, #4294967295
 800e44c:	d100      	bne.n	800e450 <memcpy+0xc>
 800e44e:	4770      	bx	lr
 800e450:	b510      	push	{r4, lr}
 800e452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e45a:	4291      	cmp	r1, r2
 800e45c:	d1f9      	bne.n	800e452 <memcpy+0xe>
 800e45e:	bd10      	pop	{r4, pc}

0800e460 <_init>:
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	bf00      	nop
 800e464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e466:	bc08      	pop	{r3}
 800e468:	469e      	mov	lr, r3
 800e46a:	4770      	bx	lr

0800e46c <_fini>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	bf00      	nop
 800e470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e472:	bc08      	pop	{r3}
 800e474:	469e      	mov	lr, r3
 800e476:	4770      	bx	lr
