
PRIM-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfe8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800e188  0800e188  0000f188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e24c  0800e24c  00010104  2**0
                  CONTENTS
  4 .ARM          00000008  0800e24c  0800e24c  0000f24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e254  0800e254  00010104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e254  0800e254  0000f254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e258  0800e258  0000f258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800e25c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b9c  20000104  0800e360  00010104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014ca0  0800e360  00010ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fdc6  00000000  00000000  00010134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f42  00000000  00000000  0002fefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d28  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001684  00000000  00000000  00036b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfa4  00000000  00000000  000381ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251af  00000000  00000000  00054190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fcc6  00000000  00000000  0007933f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119005  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b24  00000000  00000000  00119048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00120b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e170 	.word	0x0800e170

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800e170 	.word	0x0800e170

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <i2c1_pisiRegister>:
void initMutex(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af04      	add	r7, sp, #16
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	460b      	mov	r3, r1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	4613      	mov	r3, r2
 80004f0:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	b299      	uxth	r1, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	230a      	movs	r3, #10
 8000502:	9302      	str	r3, [sp, #8]
 8000504:	2301      	movs	r3, #1
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	1d7b      	adds	r3, r7, #5
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	4804      	ldr	r0, [pc, #16]	@ (8000520 <i2c1_pisiRegister+0x40>)
 8000510:	f001 fcdc 	bl	8001ecc <HAL_I2C_Mem_Write>
 8000514:	4603      	mov	r3, r0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000120 	.word	0x20000120

08000524 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af04      	add	r7, sp, #16
 800052a:	603a      	str	r2, [r7, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	460b      	mov	r3, r1
 8000534:	71bb      	strb	r3, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800053a:	797b      	ldrb	r3, [r7, #5]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d906      	bls.n	800054e <i2c1_beriRegistre+0x2a>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b19      	cmp	r3, #25
 8000544:	d103      	bne.n	800054e <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800054c:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	b299      	uxth	r1, r3
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	b298      	uxth	r0, r3
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	b29b      	uxth	r3, r3
 8000560:	797a      	ldrb	r2, [r7, #5]
 8000562:	9202      	str	r2, [sp, #8]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4602      	mov	r2, r0
 800056e:	4803      	ldr	r0, [pc, #12]	@ (800057c <i2c1_beriRegistre+0x58>)
 8000570:	f001 fda6 	bl	80020c0 <HAL_I2C_Mem_Read>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000120 	.word	0x20000120

08000580 <initOrientation>:

void initOrientation() { // ne pozabit klicati te funkcije
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000584:	2227      	movs	r2, #39	@ 0x27
 8000586:	2120      	movs	r1, #32
 8000588:	2019      	movs	r0, #25
 800058a:	f7ff ffa9 	bl	80004e0 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 800058e:	2288      	movs	r2, #136	@ 0x88
 8000590:	2123      	movs	r1, #35	@ 0x23
 8000592:	2019      	movs	r0, #25
 8000594:	f7ff ffa4 	bl	80004e0 <i2c1_pisiRegister>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005ac:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <spi1_beriRegister+0x50>)
 80005ba:	f001 fb0f 	bl	8001bdc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	f107 010e 	add.w	r1, r7, #14
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2302      	movs	r3, #2
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <spi1_beriRegister+0x54>)
 80005ce:	f005 fb3d 	bl	8005c4c <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2108      	movs	r1, #8
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <spi1_beriRegister+0x50>)
 80005d8:	f001 fb00 	bl	8001bdc <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 80005dc:	89bb      	ldrh	r3, [r7, #12]
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b2db      	uxtb	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	20000204 	.word	0x20000204

080005f4 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	b21a      	sxth	r2, r3
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	b21b      	sxth	r3, r3
 800060e:	4313      	orrs	r3, r2
 8000610:	b21b      	sxth	r3, r3
 8000612:	b29b      	uxth	r3, r3
 8000614:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2108      	movs	r1, #8
 800061a:	4809      	ldr	r0, [pc, #36]	@ (8000640 <spi1_pisiRegister+0x4c>)
 800061c:	f001 fade 	bl	8001bdc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000620:	f107 010e 	add.w	r1, r7, #14
 8000624:	2302      	movs	r3, #2
 8000626:	2202      	movs	r2, #2
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <spi1_pisiRegister+0x50>)
 800062a:	f005 f8b2 	bl	8005792 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2108      	movs	r1, #8
 8000632:	4803      	ldr	r0, [pc, #12]	@ (8000640 <spi1_pisiRegister+0x4c>)
 8000634:	f001 fad2 	bl	8001bdc <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	20000204 	.word	0x20000204

08000648 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800065e:	b2db      	uxtb	r3, r3
 8000660:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	480c      	ldr	r0, [pc, #48]	@ (8000698 <spi1_beriRegistre+0x50>)
 8000668:	f001 fab8 	bl	8001bdc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 800066c:	1df9      	adds	r1, r7, #7
 800066e:	230a      	movs	r3, #10
 8000670:	2201      	movs	r2, #1
 8000672:	480a      	ldr	r0, [pc, #40]	@ (800069c <spi1_beriRegistre+0x54>)
 8000674:	f005 f88d 	bl	8005792 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	b29a      	uxth	r2, r3
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	6839      	ldr	r1, [r7, #0]
 8000680:	4806      	ldr	r0, [pc, #24]	@ (800069c <spi1_beriRegistre+0x54>)
 8000682:	f005 f9ca 	bl	8005a1a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2108      	movs	r1, #8
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <spi1_beriRegistre+0x50>)
 800068c:	f001 faa6 	bl	8001bdc <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	20000204 	.word	0x20000204

080006a0 <initGyro>:

void initGyro() { // ne pozabit klicat te funkcije
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
    // preverimo ali smo "poklicali" pravi senzor
    uint8_t cip = spi1_beriRegister(0x0F);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f7ff ff78 	bl	800059c <spi1_beriRegister>
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2bd4      	cmp	r3, #212	@ 0xd4
 80006b4:	d004      	beq.n	80006c0 <initGyro+0x20>
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2bd3      	cmp	r3, #211	@ 0xd3
 80006ba:	d001      	beq.n	80006c0 <initGyro+0x20>
        for (;;);
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x0F); // zbudi ziroskop in omogoci osi
 80006c0:	210f      	movs	r1, #15
 80006c2:	2020      	movs	r0, #32
 80006c4:	f7ff ff96 	bl	80005f4 <spi1_pisiRegister>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <initMutex>:

void initMutex(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    dataMutex = xSemaphoreCreateMutex();
 80006d4:	2001      	movs	r0, #1
 80006d6:	f008 faad 	bl	8008c34 <xQueueCreateMutex>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <initMutex+0x20>)
 80006de:	6013      	str	r3, [r2, #0]
    if (dataMutex == NULL) {
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <initMutex+0x20>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <initMutex+0x1c>
        Error_Handler(); // Handle error if mutex creation fails
 80006e8:	f000 fcdc 	bl	80010a4 <Error_Handler>
    }
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200002b0 	.word	0x200002b0

080006f4 <getGyroData>:
////		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//		vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for 500ms
//	}
//}

void getGyroData(void *pvParameters) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
    while (1) {
        int16_t gyro[3];
        spi1_beriRegistre(0x28, (uint8_t *)gyro, 6); // Example gyro read
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2206      	movs	r2, #6
 8000702:	4619      	mov	r1, r3
 8000704:	2028      	movs	r0, #40	@ 0x28
 8000706:	f7ff ff9f 	bl	8000648 <spi1_beriRegistre>

        // Protect shared data with mutex
        xSemaphoreTake(dataMutex, portMAX_DELAY);
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <getGyroData+0x4c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f04f 31ff 	mov.w	r1, #4294967295
 8000712:	4618      	mov	r0, r3
 8000714:	f008 fc8a 	bl	800902c <xQueueSemaphoreTake>
        memcpy(sharedSensorData.gyroData, gyro, sizeof(gyro));
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <getGyroData+0x50>)
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000722:	6018      	str	r0, [r3, #0]
 8000724:	3304      	adds	r3, #4
 8000726:	8019      	strh	r1, [r3, #0]
        xSemaphoreGive(dataMutex);
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <getGyroData+0x4c>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	f008 fa97 	bl	8008c64 <xQueueGenericSend>

        vTaskDelay(50 / portTICK_PERIOD_MS); // Adjust delay as needed
 8000736:	2032      	movs	r0, #50	@ 0x32
 8000738:	f009 f890 	bl	800985c <vTaskDelay>
    while (1) {
 800073c:	bf00      	nop
 800073e:	e7dd      	b.n	80006fc <getGyroData+0x8>
 8000740:	200002b0 	.word	0x200002b0
 8000744:	200002a4 	.word	0x200002a4

08000748 <getAccelData>:
    }
}

void getAccelData(void *pvParameters) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    while (1) {
        int16_t accel[3];
        i2c1_beriRegistre(0x19, 0x28, (uint8_t *)accel, 6); // Example accel read
 8000750:	f107 0208 	add.w	r2, r7, #8
 8000754:	2306      	movs	r3, #6
 8000756:	2128      	movs	r1, #40	@ 0x28
 8000758:	2019      	movs	r0, #25
 800075a:	f7ff fee3 	bl	8000524 <i2c1_beriRegistre>

        // Protect shared data with mutex
        xSemaphoreTake(dataMutex, portMAX_DELAY);
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <getAccelData+0x4c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f04f 31ff 	mov.w	r1, #4294967295
 8000766:	4618      	mov	r0, r3
 8000768:	f008 fc60 	bl	800902c <xQueueSemaphoreTake>
        memcpy(sharedSensorData.accelData, accel, sizeof(accel));
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <getAccelData+0x50>)
 800076e:	3306      	adds	r3, #6
 8000770:	f107 0208 	add.w	r2, r7, #8
 8000774:	6810      	ldr	r0, [r2, #0]
 8000776:	6018      	str	r0, [r3, #0]
 8000778:	8892      	ldrh	r2, [r2, #4]
 800077a:	809a      	strh	r2, [r3, #4]
        xSemaphoreGive(dataMutex);
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <getAccelData+0x4c>)
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	2300      	movs	r3, #0
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	f008 fa6d 	bl	8008c64 <xQueueGenericSend>

        vTaskDelay(50 / portTICK_PERIOD_MS); // Adjust delay as needed
 800078a:	2032      	movs	r0, #50	@ 0x32
 800078c:	f009 f866 	bl	800985c <vTaskDelay>
    while (1) {
 8000790:	bf00      	nop
 8000792:	e7dd      	b.n	8000750 <getAccelData+0x8>
 8000794:	200002b0 	.word	0x200002b0
 8000798:	200002a4 	.word	0x200002a4

0800079c <sendData>:
    }
}

void sendData(void *pvParameters) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	SensorPacket packet;

	while (1) {
		// Safely copy shared sensor data
		xSemaphoreTake(dataMutex, portMAX_DELAY);
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <sendData+0x5c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	4618      	mov	r0, r3
 80007ae:	f008 fc3d 	bl	800902c <xQueueSemaphoreTake>
		packet.data = sharedSensorData;
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <sendData+0x60>)
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		xSemaphoreGive(dataMutex);
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <sendData+0x5c>)
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	f008 fa4c 	bl	8008c64 <xQueueGenericSend>

		// Populate the header
		packet.header.packetID = 0xab;
 80007cc:	23ab      	movs	r3, #171	@ 0xab
 80007ce:	733b      	strb	r3, [r7, #12]
		packet.header.dataSize = sizeof(SensorData);
 80007d0:	2314      	movs	r3, #20
 80007d2:	81fb      	strh	r3, [r7, #14]
		packet.header.timestamp = xTaskGetTickCount();
 80007d4:	f009 f9d4 	bl	8009b80 <xTaskGetTickCount>
 80007d8:	4603      	mov	r3, r0
 80007da:	613b      	str	r3, [r7, #16]

		// Send the complete packet (header + data)
		while (CDC_Transmit_FS((uint8_t *)&packet, sizeof(SensorPacket)));
 80007dc:	bf00      	nop
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2114      	movs	r1, #20
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00d f829 	bl	800d83c <CDC_Transmit_FS>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f6      	bne.n	80007de <sendData+0x42>

		vTaskDelay(100 / portTICK_PERIOD_MS); // Adjust delay as needed
 80007f0:	2064      	movs	r0, #100	@ 0x64
 80007f2:	f009 f833 	bl	800985c <vTaskDelay>
		xSemaphoreTake(dataMutex, portMAX_DELAY);
 80007f6:	e7d5      	b.n	80007a4 <sendData+0x8>
 80007f8:	200002b0 	.word	0x200002b0
 80007fc:	200002a4 	.word	0x200002a4

08000800 <update_pwm_brightness>:
//    CDC_Transmit_FS(data, 18);  // Send 18 bytes: 2 for header + 6 for accelerometer + 6 for gyroscope
//
//    HAL_Delay(100);
//}

void update_pwm_brightness(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t brightness_level) {
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	4613      	mov	r3, r2
 800080c:	71fb      	strb	r3, [r7, #7]
    uint32_t ccr_value = (brightness_level * (999 + 1)) / 100;
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	617b      	str	r3, [r7, #20]

    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d104      	bne.n	800082a <update_pwm_brightness+0x2a>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000828:	e013      	b.n	8000852 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b04      	cmp	r3, #4
 800082e:	d104      	bne.n	800083a <update_pwm_brightness+0x3a>
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000838:	e00b      	b.n	8000852 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	2b08      	cmp	r3, #8
 800083e:	d104      	bne.n	800084a <update_pwm_brightness+0x4a>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000848:	e003      	b.n	8000852 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000852:	bf00      	nop
 8000854:	371c      	adds	r7, #28
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <checkDir>:

void checkDir(uint8_t value, int8_t *dir, int8_t max, int8_t min){
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	4611      	mov	r1, r2
 8000868:	461a      	mov	r2, r3
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
 800086e:	460b      	mov	r3, r1
 8000870:	71bb      	strb	r3, [r7, #6]
 8000872:	4613      	mov	r3, r2
 8000874:	717b      	strb	r3, [r7, #5]
	if(value >= max)
 8000876:	79fa      	ldrb	r2, [r7, #7]
 8000878:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800087c:	429a      	cmp	r2, r3
 800087e:	db03      	blt.n	8000888 <checkDir+0x2a>
		dir = -1;
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	603b      	str	r3, [r7, #0]
	else if(value <= min)
		dir = 1;
}
 8000886:	e006      	b.n	8000896 <checkDir+0x38>
	else if(value <= min)
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800088e:	429a      	cmp	r2, r3
 8000890:	dc01      	bgt.n	8000896 <checkDir+0x38>
		dir = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	603b      	str	r3, [r7, #0]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <GPIO_control>:

void GPIO_control(void *pvParameters){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	GPIOControlParams *params = (GPIOControlParams *)pvParameters;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	613b      	str	r3, [r7, #16]

	int8_t dir_status = params->dir_status;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	f993 3000 	ldrsb.w	r3, [r3]
 80008b6:	73fb      	strb	r3, [r7, #15]
	int8_t dir_RoadType = params->dir_RoadType;
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80008be:	73bb      	strb	r3, [r7, #14]
	uint8_t status = params->status;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	75fb      	strb	r3, [r7, #23]
	uint8_t roadType = params->roadType;
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	78db      	ldrb	r3, [r3, #3]
 80008ca:	75bb      	strb	r3, [r7, #22]

	while(1){
		if(isDefined){
 80008cc:	4b43      	ldr	r3, [pc, #268]	@ (80009dc <GPIO_control+0x138>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d07d      	beq.n	80009d0 <GPIO_control+0x12c>
			if(recivedData.danger)
 80008d4:	4b42      	ldr	r3, [pc, #264]	@ (80009e0 <GPIO_control+0x13c>)
 80008d6:	f993 3000 	ldrsb.w	r3, [r3]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d006      	beq.n	80008ec <GPIO_control+0x48>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e4:	483f      	ldr	r0, [pc, #252]	@ (80009e4 <GPIO_control+0x140>)
 80008e6:	f001 f979 	bl	8001bdc <HAL_GPIO_WritePin>
 80008ea:	e005      	b.n	80008f8 <GPIO_control+0x54>
			else
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f2:	483c      	ldr	r0, [pc, #240]	@ (80009e4 <GPIO_control+0x140>)
 80008f4:	f001 f972 	bl	8001bdc <HAL_GPIO_WritePin>

			update_pwm_brightness(&htim4, TIM_CHANNEL_2, status);
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	461a      	mov	r2, r3
 80008fc:	2104      	movs	r1, #4
 80008fe:	483a      	ldr	r0, [pc, #232]	@ (80009e8 <GPIO_control+0x144>)
 8000900:	f7ff ff7e 	bl	8000800 <update_pwm_brightness>

			if(recivedData.roadType[0] == 'A'){
 8000904:	4b36      	ldr	r3, [pc, #216]	@ (80009e0 <GPIO_control+0x13c>)
 8000906:	7a1b      	ldrb	r3, [r3, #8]
 8000908:	2b41      	cmp	r3, #65	@ 0x41
 800090a:	d10b      	bne.n	8000924 <GPIO_control+0x80>
				update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	4835      	ldr	r0, [pc, #212]	@ (80009e8 <GPIO_control+0x144>)
 8000912:	f7ff ff75 	bl	8000800 <update_pwm_brightness>
				update_pwm_brightness(&htim4, TIM_CHANNEL_4, roadType);
 8000916:	7dbb      	ldrb	r3, [r7, #22]
 8000918:	461a      	mov	r2, r3
 800091a:	210c      	movs	r1, #12
 800091c:	4832      	ldr	r0, [pc, #200]	@ (80009e8 <GPIO_control+0x144>)
 800091e:	f7ff ff6f 	bl	8000800 <update_pwm_brightness>
 8000922:	e00a      	b.n	800093a <GPIO_control+0x96>
			}
			else{
				update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	210c      	movs	r1, #12
 8000928:	482f      	ldr	r0, [pc, #188]	@ (80009e8 <GPIO_control+0x144>)
 800092a:	f7ff ff69 	bl	8000800 <update_pwm_brightness>
				update_pwm_brightness(&htim4, TIM_CHANNEL_1, roadType);
 800092e:	7dbb      	ldrb	r3, [r7, #22]
 8000930:	461a      	mov	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	482c      	ldr	r0, [pc, #176]	@ (80009e8 <GPIO_control+0x144>)
 8000936:	f7ff ff63 	bl	8000800 <update_pwm_brightness>
			}

			status += recivedData.danger ? 10 * (recivedData.dangerProximity / 20) * dir_status :  10 * dir_status;
 800093a:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <GPIO_control+0x13c>)
 800093c:	f993 3000 	ldrsb.w	r3, [r3]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d014      	beq.n	800096e <GPIO_control+0xca>
 8000944:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <GPIO_control+0x13c>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4a28      	ldr	r2, [pc, #160]	@ (80009ec <GPIO_control+0x148>)
 800094a:	fb82 1203 	smull	r1, r2, r2, r3
 800094e:	10d2      	asrs	r2, r2, #3
 8000950:	17db      	asrs	r3, r3, #31
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	b2da      	uxtb	r2, r3
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	fb12 f303 	smulbb	r3, r2, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	0092      	lsls	r2, r2, #2
 8000966:	4413      	add	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	e007      	b.n	800097e <GPIO_control+0xda>
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	4413      	add	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	7dfa      	ldrb	r2, [r7, #23]
 8000980:	4413      	add	r3, r2
 8000982:	75fb      	strb	r3, [r7, #23]
			roadType += 10 * ((100 - recivedData.roadQuality) / 20) * dir_RoadType;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <GPIO_control+0x13c>)
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800098c:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <GPIO_control+0x14c>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	091b      	lsrs	r3, r3, #4
 8000994:	b2da      	uxtb	r2, r3
 8000996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	fb12 f303 	smulbb	r3, r2, r3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	7dbb      	ldrb	r3, [r7, #22]
 80009ae:	4413      	add	r3, r2
 80009b0:	75bb      	strb	r3, [r7, #22]

			checkDir(status, &dir_status, 100, 0);
 80009b2:	f107 010f 	add.w	r1, r7, #15
 80009b6:	7df8      	ldrb	r0, [r7, #23]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2264      	movs	r2, #100	@ 0x64
 80009bc:	f7ff ff4f 	bl	800085e <checkDir>
			checkDir(roadType, &dir_RoadType, 100, 0);
 80009c0:	f107 010e 	add.w	r1, r7, #14
 80009c4:	7db8      	ldrb	r0, [r7, #22]
 80009c6:	2300      	movs	r3, #0
 80009c8:	2264      	movs	r2, #100	@ 0x64
 80009ca:	f7ff ff48 	bl	800085e <checkDir>
 80009ce:	e77d      	b.n	80008cc <GPIO_control+0x28>
		}
		else{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80009d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <GPIO_control+0x140>)
 80009d6:	f001 f91a 	bl	8001c0e <HAL_GPIO_TogglePin>
		if(isDefined){
 80009da:	e777      	b.n	80008cc <GPIO_control+0x28>
 80009dc:	20014384 	.word	0x20014384
 80009e0:	20014388 	.word	0x20014388
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	2000025c 	.word	0x2000025c
 80009ec:	66666667 	.word	0x66666667
 80009f0:	cccccccd 	.word	0xcccccccd

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fa:	f000 fe23 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fe:	f000 f88d 	bl	8000b1c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a02:	f000 f8f3 	bl	8000bec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a06:	f000 fa61 	bl	8000ecc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a0a:	f000 f90f 	bl	8000c2c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a0e:	f000 f93d 	bl	8000c8c <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a12:	f000 f969 	bl	8000ce8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a16:	f000 f997 	bl	8000d48 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000a1a:	f00c fdb1 	bl	800d580 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000a1e:	f000 f9c9 	bl	8000db4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  GPIOControlParams gpioParams = {
 8000a22:	4b31      	ldr	r3, [pc, #196]	@ (8000ae8 <main+0xf4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	607b      	str	r3, [r7, #4]
      .dir_RoadType = 1,
      .status = 0,
      .roadType = 0
  };

  initMutex();
 8000a28:	f7ff fe52 	bl	80006d0 <initMutex>

  __HAL_I2C_ENABLE(&hi2c1);
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <main+0xf8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <main+0xf8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
  initOrientation();
 8000a3c:	f7ff fda0 	bl	8000580 <initOrientation>

  __HAL_SPI_ENABLE(&hspi1);
 8000a40:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <main+0xfc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <main+0xfc>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a4e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 8000a50:	2201      	movs	r2, #1
 8000a52:	2108      	movs	r1, #8
 8000a54:	4827      	ldr	r0, [pc, #156]	@ (8000af4 <main+0x100>)
 8000a56:	f001 f8c1 	bl	8001bdc <HAL_GPIO_WritePin>
  initGyro();
 8000a5a:	f7ff fe21 	bl	80006a0 <initGyro>

  // zazenemo casovnik
  HAL_TIM_Base_Start(&htim4);
 8000a5e:	4826      	ldr	r0, [pc, #152]	@ (8000af8 <main+0x104>)
 8000a60:	f005 fc30 	bl	80062c4 <HAL_TIM_Base_Start>

  // zazenemo PWM - neinvertirani izhodi
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a64:	2100      	movs	r1, #0
 8000a66:	4824      	ldr	r0, [pc, #144]	@ (8000af8 <main+0x104>)
 8000a68:	f005 fd42 	bl	80064f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4822      	ldr	r0, [pc, #136]	@ (8000af8 <main+0x104>)
 8000a70:	f005 fd3e 	bl	80064f0 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a74:	210c      	movs	r1, #12
 8000a76:	4820      	ldr	r0, [pc, #128]	@ (8000af8 <main+0x104>)
 8000a78:	f005 fd3a 	bl	80064f0 <HAL_TIM_PWM_Start>

  xTaskCreate(
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	2301      	movs	r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2300      	movs	r3, #0
 8000a86:	2280      	movs	r2, #128	@ 0x80
 8000a88:	491c      	ldr	r1, [pc, #112]	@ (8000afc <main+0x108>)
 8000a8a:	481d      	ldr	r0, [pc, #116]	@ (8000b00 <main+0x10c>)
 8000a8c:	f008 fd7a 	bl	8009584 <xTaskCreate>
		"getGyroData",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  xTaskCreate(getAccelData, "getAccelData", 128, NULL, 1, NULL);
 8000a90:	2300      	movs	r3, #0
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	2301      	movs	r3, #1
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	2280      	movs	r2, #128	@ 0x80
 8000a9c:	4919      	ldr	r1, [pc, #100]	@ (8000b04 <main+0x110>)
 8000a9e:	481a      	ldr	r0, [pc, #104]	@ (8000b08 <main+0x114>)
 8000aa0:	f008 fd70 	bl	8009584 <xTaskCreate>
  xTaskCreate(getAccelData, "getAccelData", 128, NULL, 1, NULL);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2300      	movs	r3, #0
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	4914      	ldr	r1, [pc, #80]	@ (8000b04 <main+0x110>)
 8000ab2:	4815      	ldr	r0, [pc, #84]	@ (8000b08 <main+0x114>)
 8000ab4:	f008 fd66 	bl	8009584 <xTaskCreate>
  xTaskCreate(sendData, "sendData", 128, NULL, 1, NULL);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	4911      	ldr	r1, [pc, #68]	@ (8000b0c <main+0x118>)
 8000ac6:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <main+0x11c>)
 8000ac8:	f008 fd5c 	bl	8009584 <xTaskCreate>
  xTaskCreate(GPIO_control, "GPIO_control", 128, (void *)&gpioParams, 1, NULL);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	9201      	str	r2, [sp, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	9200      	str	r2, [sp, #0]
 8000ad6:	2280      	movs	r2, #128	@ 0x80
 8000ad8:	490e      	ldr	r1, [pc, #56]	@ (8000b14 <main+0x120>)
 8000ada:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <main+0x124>)
 8000adc:	f008 fd52 	bl	8009584 <xTaskCreate>
  vTaskStartScheduler();
 8000ae0:	f008 fef2 	bl	80098c8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <main+0xf0>
 8000ae8:	0800e1c0 	.word	0x0800e1c0
 8000aec:	20000120 	.word	0x20000120
 8000af0:	20000204 	.word	0x20000204
 8000af4:	40021000 	.word	0x40021000
 8000af8:	2000025c 	.word	0x2000025c
 8000afc:	0800e188 	.word	0x0800e188
 8000b00:	080006f5 	.word	0x080006f5
 8000b04:	0800e194 	.word	0x0800e194
 8000b08:	08000749 	.word	0x08000749
 8000b0c:	0800e1a4 	.word	0x0800e1a4
 8000b10:	0800079d 	.word	0x0800079d
 8000b14:	0800e1b0 	.word	0x0800e1b0
 8000b18:	080008a5 	.word	0x080008a5

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	@ 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	2230      	movs	r2, #48	@ 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00d fae6 	bl	800e0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <SystemClock_Config+0xc8>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	4a26      	ldr	r2, [pc, #152]	@ (8000be4 <SystemClock_Config+0xc8>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b50:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <SystemClock_Config+0xc8>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <SystemClock_Config+0xcc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a20      	ldr	r2, [pc, #128]	@ (8000be8 <SystemClock_Config+0xcc>)
 8000b66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <SystemClock_Config+0xcc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b90:	23c0      	movs	r3, #192	@ 0xc0
 8000b92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 ff65 	bl	8004a70 <HAL_RCC_OscConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bac:	f000 fa7a 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bbc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2103      	movs	r1, #3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 f9c7 	bl	8004f60 <HAL_RCC_ClockConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bd8:	f000 fa64 	bl	80010a4 <Error_Handler>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3750      	adds	r7, #80	@ 0x50
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40007000 	.word	0x40007000

08000bec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c02:	2301      	movs	r3, #1
 8000c04:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000c06:	23c8      	movs	r3, #200	@ 0xc8
 8000c08:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fbe1 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000c20:	f000 fa40 	bl	80010a4 <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c32:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <MX_I2C1_Init+0x58>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c36:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c38:	4a13      	ldr	r2, [pc, #76]	@ (8000c88 <MX_I2C1_Init+0x5c>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c6c:	f000 ffea 	bl	8001c44 <HAL_I2C_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000c76:	f000 fa15 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000120 	.word	0x20000120
 8000c84:	40005400 	.word	0x40005400
 8000c88:	00061a80 	.word	0x00061a80

08000c8c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <MX_I2S2_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce4 <MX_I2S2_Init+0x58>)
 8000cb4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_I2S2_Init+0x50>)
 8000cca:	f001 ffdf 	bl	8002c8c <HAL_I2S_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 f9e6 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000174 	.word	0x20000174
 8000ce0:	40003800 	.word	0x40003800
 8000ce4:	00017700 	.word	0x00017700

08000ce8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <MX_I2S3_Init+0x58>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cf8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d10:	4a0c      	ldr	r2, [pc, #48]	@ (8000d44 <MX_I2S3_Init+0x5c>)
 8000d12:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d28:	f001 ffb0 	bl	8002c8c <HAL_I2S_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d32:	f000 f9b7 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200001bc 	.word	0x200001bc
 8000d40:	40003c00 	.word	0x40003c00
 8000d44:	00017700 	.word	0x00017700

08000d48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d4e:	4a18      	ldr	r2, [pc, #96]	@ (8000db0 <MX_SPI1_Init+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d7c:	2218      	movs	r2, #24
 8000d7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d94:	220a      	movs	r2, #10
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <MX_SPI1_Init+0x64>)
 8000d9a:	f004 fc71 	bl	8005680 <HAL_SPI_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000da4:	f000 f97e 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000204 	.word	0x20000204
 8000db0:	40013000 	.word	0x40013000

08000db4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	@ 0x38
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	f107 0320 	add.w	r3, r7, #32
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000de4:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000de6:	4a38      	ldr	r2, [pc, #224]	@ (8000ec8 <MX_TIM4_Init+0x114>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000dea:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000dec:	2253      	movs	r2, #83	@ 0x53
 8000dee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000df6:	4b33      	ldr	r3, [pc, #204]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000df8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e0a:	482e      	ldr	r0, [pc, #184]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000e0c:	f005 fa0a 	bl	8006224 <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e16:	f000 f945 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4827      	ldr	r0, [pc, #156]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000e28:	f005 fdc4 	bl	80069b4 <HAL_TIM_ConfigClockSource>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e32:	f000 f937 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e36:	4823      	ldr	r0, [pc, #140]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000e38:	f005 fb00 	bl	800643c <HAL_TIM_PWM_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e42:	f000 f92f 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	4619      	mov	r1, r3
 8000e54:	481b      	ldr	r0, [pc, #108]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000e56:	f006 f975 	bl	8007144 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e60:	f000 f920 	bl	80010a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e64:	2360      	movs	r3, #96	@ 0x60
 8000e66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4812      	ldr	r0, [pc, #72]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000e7c:	f005 fcd8 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e86:	f000 f90d 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000e92:	f005 fccd 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e9c:	f000 f902 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000ea8:	f005 fcc2 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000eb2:	f000 f8f7 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000eb6:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <MX_TIM4_Init+0x110>)
 8000eb8:	f000 faa2 	bl	8001400 <HAL_TIM_MspPostInit>

}
 8000ebc:	bf00      	nop
 8000ebe:	3738      	adds	r7, #56	@ 0x38
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000025c 	.word	0x2000025c
 8000ec8:	40000800 	.word	0x40000800

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	@ 0x30
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	4b61      	ldr	r3, [pc, #388]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a60      	ldr	r2, [pc, #384]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	4b5a      	ldr	r3, [pc, #360]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a59      	ldr	r2, [pc, #356]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b57      	ldr	r3, [pc, #348]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b53      	ldr	r3, [pc, #332]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a52      	ldr	r2, [pc, #328]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b50      	ldr	r3, [pc, #320]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a4b      	ldr	r2, [pc, #300]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b49      	ldr	r3, [pc, #292]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b45      	ldr	r3, [pc, #276]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a44      	ldr	r2, [pc, #272]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b42      	ldr	r3, [pc, #264]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b3e      	ldr	r3, [pc, #248]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a3d      	ldr	r2, [pc, #244]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <MX_GPIO_Init+0x1a0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4838      	ldr	r0, [pc, #224]	@ (8001070 <MX_GPIO_Init+0x1a4>)
 8000f90:	f000 fe24 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2101      	movs	r1, #1
 8000f98:	4836      	ldr	r0, [pc, #216]	@ (8001074 <MX_GPIO_Init+0x1a8>)
 8000f9a:	f000 fe1f 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|Audio_RST_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f244 0110 	movw	r1, #16400	@ 0x4010
 8000fa4:	4834      	ldr	r0, [pc, #208]	@ (8001078 <MX_GPIO_Init+0x1ac>)
 8000fa6:	f000 fe19 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000faa:	2304      	movs	r3, #4
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482c      	ldr	r0, [pc, #176]	@ (8001070 <MX_GPIO_Init+0x1a4>)
 8000fbe:	f000 fc89 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4825      	ldr	r0, [pc, #148]	@ (8001070 <MX_GPIO_Init+0x1a4>)
 8000fda:	f000 fc7b 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000fde:	2332      	movs	r3, #50	@ 0x32
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481f      	ldr	r0, [pc, #124]	@ (8001070 <MX_GPIO_Init+0x1a4>)
 8000ff4:	f000 fc6e 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4819      	ldr	r0, [pc, #100]	@ (8001074 <MX_GPIO_Init+0x1a8>)
 8001010:	f000 fc60 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001018:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4814      	ldr	r0, [pc, #80]	@ (800107c <MX_GPIO_Init+0x1b0>)
 800102a:	f000 fc53 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|Audio_RST_Pin;
 800102e:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	480c      	ldr	r0, [pc, #48]	@ (8001078 <MX_GPIO_Init+0x1ac>)
 8001048:	f000 fc44 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800104c:	2320      	movs	r3, #32
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <MX_GPIO_Init+0x1ac>)
 8001060:	f000 fc38 	bl	80018d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	@ 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40021000 	.word	0x40021000
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40020000 	.word	0x40020000

08001080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001092:	f000 faf9 	bl	8001688 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40000c00 	.word	0x40000c00

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <HAL_MspInit+0x4c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_MspInit+0x4c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a19      	ldr	r2, [pc, #100]	@ (8001184 <HAL_I2C_MspInit+0x84>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12c      	bne.n	800117c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_I2C_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a17      	ldr	r2, [pc, #92]	@ (8001188 <HAL_I2C_MspInit+0x88>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_I2C_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800113e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001150:	2304      	movs	r3, #4
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	@ (800118c <HAL_I2C_MspInit+0x8c>)
 800115c:	f000 fbba 	bl	80018d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_I2C_MspInit+0x88>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_I2C_MspInit+0x88>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800116e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_I2C_MspInit+0x88>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	@ 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005400 	.word	0x40005400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400

08001190 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	@ 0x38
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a59      	ldr	r2, [pc, #356]	@ (8001314 <HAL_I2S_MspInit+0x184>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d15b      	bne.n	800126a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	4b58      	ldr	r3, [pc, #352]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a57      	ldr	r2, [pc, #348]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b55      	ldr	r3, [pc, #340]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ca:	623b      	str	r3, [r7, #32]
 80011cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a50      	ldr	r2, [pc, #320]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b4e      	ldr	r3, [pc, #312]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a49      	ldr	r2, [pc, #292]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001206:	2304      	movs	r3, #4
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001216:	2306      	movs	r3, #6
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	483e      	ldr	r0, [pc, #248]	@ (800131c <HAL_I2S_MspInit+0x18c>)
 8001222:	f000 fb57 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001226:	2308      	movs	r3, #8
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001236:	2305      	movs	r3, #5
 8001238:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	4836      	ldr	r0, [pc, #216]	@ (800131c <HAL_I2S_MspInit+0x18c>)
 8001242:	f000 fb47 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001246:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001258:	2305      	movs	r3, #5
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	482f      	ldr	r0, [pc, #188]	@ (8001320 <HAL_I2S_MspInit+0x190>)
 8001264:	f000 fb36 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001268:	e04f      	b.n	800130a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2d      	ldr	r2, [pc, #180]	@ (8001324 <HAL_I2S_MspInit+0x194>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d14a      	bne.n	800130a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 800127e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	4a1f      	ldr	r2, [pc, #124]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <HAL_I2S_MspInit+0x188>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012c8:	2310      	movs	r3, #16
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d8:	2306      	movs	r3, #6
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4811      	ldr	r0, [pc, #68]	@ (8001328 <HAL_I2S_MspInit+0x198>)
 80012e4:	f000 faf6 	bl	80018d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012e8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012fa:	2306      	movs	r3, #6
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <HAL_I2S_MspInit+0x18c>)
 8001306:	f000 fae5 	bl	80018d4 <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	@ 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40003800 	.word	0x40003800
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800
 8001320:	40020400 	.word	0x40020400
 8001324:	40003c00 	.word	0x40003c00
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	@ (80013b0 <HAL_SPI_MspInit+0x84>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12b      	bne.n	80013a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001358:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a10      	ldr	r2, [pc, #64]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001386:	23e0      	movs	r3, #224	@ 0xe0
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001396:	2305      	movs	r3, #5
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <HAL_SPI_MspInit+0x8c>)
 80013a2:	f000 fa97 	bl	80018d4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	@ 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40013000 	.word	0x40013000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <HAL_TIM_Base_MspInit+0x3c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10d      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_TIM_Base_MspInit+0x40>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <HAL_TIM_Base_MspInit+0x40>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <HAL_TIM_Base_MspInit+0x40>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40000800 	.word	0x40000800
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <HAL_TIM_MspPostInit+0x68>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d11e      	bne.n	8001460 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_TIM_MspPostInit+0x6c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a10      	ldr	r2, [pc, #64]	@ (800146c <HAL_TIM_MspPostInit+0x6c>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_TIM_MspPostInit+0x6c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800143e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001442:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001450:	2302      	movs	r3, #2
 8001452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <HAL_TIM_MspPostInit+0x70>)
 800145c:	f000 fa3a 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40000800 	.word	0x40000800
 800146c:	40023800 	.word	0x40023800
 8001470:	40020c00 	.word	0x40020c00

08001474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	@ 0x38
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <HAL_InitTick+0xe4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	4a32      	ldr	r2, [pc, #200]	@ (8001558 <HAL_InitTick+0xe4>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6413      	str	r3, [r2, #64]	@ 0x40
 8001494:	4b30      	ldr	r3, [pc, #192]	@ (8001558 <HAL_InitTick+0xe4>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a0:	f107 0210 	add.w	r2, r7, #16
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 ff64 	bl	8005378 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d103      	bne.n	80014c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ba:	f003 ff49 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 80014be:	6378      	str	r0, [r7, #52]	@ 0x34
 80014c0:	e004      	b.n	80014cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014c2:	f003 ff45 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 80014c6:	4603      	mov	r3, r0
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ce:	4a23      	ldr	r2, [pc, #140]	@ (800155c <HAL_InitTick+0xe8>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	3b01      	subs	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80014da:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <HAL_InitTick+0xec>)
 80014dc:	4a21      	ldr	r2, [pc, #132]	@ (8001564 <HAL_InitTick+0xf0>)
 80014de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <HAL_InitTick+0xec>)
 80014e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014e6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80014e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001560 <HAL_InitTick+0xec>)
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_InitTick+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <HAL_InitTick+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_InitTick+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001500:	4817      	ldr	r0, [pc, #92]	@ (8001560 <HAL_InitTick+0xec>)
 8001502:	f004 fe8f 	bl	8006224 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800150c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001510:	2b00      	cmp	r3, #0
 8001512:	d11b      	bne.n	800154c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001514:	4812      	ldr	r0, [pc, #72]	@ (8001560 <HAL_InitTick+0xec>)
 8001516:	f004 ff2f 	bl	8006378 <HAL_TIM_Base_Start_IT>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001520:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001524:	2b00      	cmp	r3, #0
 8001526:	d111      	bne.n	800154c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001528:	2032      	movs	r0, #50	@ 0x32
 800152a:	f000 f9c5 	bl	80018b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d808      	bhi.n	8001546 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2032      	movs	r0, #50	@ 0x32
 800153a:	f000 f9a1 	bl	8001880 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_InitTick+0xf4>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e002      	b.n	800154c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800154c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001550:	4618      	mov	r0, r3
 8001552:	3738      	adds	r7, #56	@ 0x38
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	431bde83 	.word	0x431bde83
 8001560:	200002b4 	.word	0x200002b4
 8001564:	40000c00 	.word	0x40000c00
 8001568:	20000004 	.word	0x20000004

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <NMI_Handler+0x4>

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <MemManage_Handler+0x4>

08001584 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <UsageFault_Handler+0x4>

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <TIM5_IRQHandler+0x10>)
 80015aa:	f005 f851 	bl	8006650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002b4 	.word	0x200002b4

080015b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <OTG_FS_IRQHandler+0x10>)
 80015be:	f002 f949 	bl	8003854 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2001459c 	.word	0x2001459c

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001628 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f4:	f7ff ffea 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	@ (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	@ (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161e:	f00c fd75 	bl	800e10c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff f9e7 	bl	80009f4 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001634:	0800e25c 	.word	0x0800e25c
  ldr r2, =_sbss
 8001638:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800163c:	20014ca0 	.word	0x20014ca0

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f8fc 	bl	800186a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f7ff fefe 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fd1a 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	200002fc 	.word	0x200002fc

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200002fc 	.word	0x200002fc

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0b      	blt.n	800179e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	4907      	ldr	r1, [pc, #28]	@ (80017ac <__NVIC_EnableIRQ+0x38>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	@ (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	@ (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	@ 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	@ 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ff4c 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001892:	f7ff ff61 	bl	8001758 <__NVIC_GetPriorityGrouping>
 8001896:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	6978      	ldr	r0, [r7, #20]
 800189e:	f7ff ffb1 	bl	8001804 <NVIC_EncodePriority>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff80 	bl	80017b0 <__NVIC_SetPriority>
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff54 	bl	8001774 <__NVIC_EnableIRQ>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e159      	b.n	8001ba4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	429a      	cmp	r2, r3
 800190a:	f040 8148 	bne.w	8001b9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d005      	beq.n	8001926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	2b02      	cmp	r3, #2
 8001924:	d130      	bne.n	8001988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 0201 	and.w	r2, r3, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b03      	cmp	r3, #3
 8001992:	d017      	beq.n	80019c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d123      	bne.n	8001a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	69b9      	ldr	r1, [r7, #24]
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a2 	beq.w	8001b9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b57      	ldr	r3, [pc, #348]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	4a56      	ldr	r2, [pc, #344]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6a:	4b54      	ldr	r3, [pc, #336]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a76:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_GPIO_Init+0x2ec>)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a49      	ldr	r2, [pc, #292]	@ (8001bc4 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x202>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a48      	ldr	r2, [pc, #288]	@ (8001bc8 <HAL_GPIO_Init+0x2f4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x1fe>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a47      	ldr	r2, [pc, #284]	@ (8001bcc <HAL_GPIO_Init+0x2f8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x1fa>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a46      	ldr	r2, [pc, #280]	@ (8001bd0 <HAL_GPIO_Init+0x2fc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x1f6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a45      	ldr	r2, [pc, #276]	@ (8001bd4 <HAL_GPIO_Init+0x300>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x1f2>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	@ (8001bc0 <HAL_GPIO_Init+0x2ec>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f aea2 	bls.w	80018f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c20:	887a      	ldrh	r2, [r7, #2]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	041a      	lsls	r2, r3, #16
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	400b      	ands	r3, r1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e12b      	b.n	8001eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fa48 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2224      	movs	r2, #36	@ 0x24
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca8:	f003 fb52 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8001cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4a81      	ldr	r2, [pc, #516]	@ (8001eb8 <HAL_I2C_Init+0x274>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d807      	bhi.n	8001cc8 <HAL_I2C_Init+0x84>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a80      	ldr	r2, [pc, #512]	@ (8001ebc <HAL_I2C_Init+0x278>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	bf94      	ite	ls
 8001cc0:	2301      	movls	r3, #1
 8001cc2:	2300      	movhi	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e006      	b.n	8001cd6 <HAL_I2C_Init+0x92>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec0 <HAL_I2C_Init+0x27c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	bf94      	ite	ls
 8001cd0:	2301      	movls	r3, #1
 8001cd2:	2300      	movhi	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0e7      	b.n	8001eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a78      	ldr	r2, [pc, #480]	@ (8001ec4 <HAL_I2C_Init+0x280>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	0c9b      	lsrs	r3, r3, #18
 8001ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb8 <HAL_I2C_Init+0x274>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d802      	bhi.n	8001d18 <HAL_I2C_Init+0xd4>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3301      	adds	r3, #1
 8001d16:	e009      	b.n	8001d2c <HAL_I2C_Init+0xe8>
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	4a69      	ldr	r2, [pc, #420]	@ (8001ec8 <HAL_I2C_Init+0x284>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	495c      	ldr	r1, [pc, #368]	@ (8001eb8 <HAL_I2C_Init+0x274>)
 8001d48:	428b      	cmp	r3, r1
 8001d4a:	d819      	bhi.n	8001d80 <HAL_I2C_Init+0x13c>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1e59      	subs	r1, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5a:	1c59      	adds	r1, r3, #1
 8001d5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d60:	400b      	ands	r3, r1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_I2C_Init+0x138>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e59      	subs	r1, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7a:	e051      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	e04f      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d111      	bne.n	8001dac <HAL_I2C_Init+0x168>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1e58      	subs	r0, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e012      	b.n	8001dd2 <HAL_I2C_Init+0x18e>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	0099      	lsls	r1, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x196>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e022      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <HAL_I2C_Init+0x1bc>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e58      	subs	r0, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	440b      	add	r3, r1
 8001df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dfe:	e00f      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e58      	subs	r0, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	0099      	lsls	r1, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	6809      	ldr	r1, [r1, #0]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6911      	ldr	r1, [r2, #16]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68d2      	ldr	r2, [r2, #12]
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	000186a0 	.word	0x000186a0
 8001ebc:	001e847f 	.word	0x001e847f
 8001ec0:	003d08ff 	.word	0x003d08ff
 8001ec4:	431bde83 	.word	0x431bde83
 8001ec8:	10624dd3 	.word	0x10624dd3

08001ecc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	813b      	strh	r3, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ee6:	f7ff fbe3 	bl	80016b0 <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	f040 80d9 	bne.w	80020ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2319      	movs	r3, #25
 8001f00:	2201      	movs	r2, #1
 8001f02:	496d      	ldr	r1, [pc, #436]	@ (80020b8 <HAL_I2C_Mem_Write+0x1ec>)
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 fc8b 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0cc      	b.n	80020ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Mem_Write+0x56>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e0c5      	b.n	80020ae <HAL_I2C_Mem_Write+0x1e2>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d007      	beq.n	8001f48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2221      	movs	r2, #33	@ 0x21
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2240      	movs	r2, #64	@ 0x40
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a4d      	ldr	r2, [pc, #308]	@ (80020bc <HAL_I2C_Mem_Write+0x1f0>)
 8001f88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f8a:	88f8      	ldrh	r0, [r7, #6]
 8001f8c:	893a      	ldrh	r2, [r7, #8]
 8001f8e:	8979      	ldrh	r1, [r7, #10]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	4603      	mov	r3, r0
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fac2 	bl	8002524 <I2C_RequestMemoryWrite>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d052      	beq.n	800204c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e081      	b.n	80020ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fd50 	bl	8002a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d107      	bne.n	8001fd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06b      	b.n	80020ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11b      	bne.n	800204c <HAL_I2C_Mem_Write+0x180>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	d017      	beq.n	800204c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1aa      	bne.n	8001faa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fd43 	bl	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	2b04      	cmp	r3, #4
 800206a:	d107      	bne.n	800207c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800207a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e016      	b.n	80020ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800208e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	00100002 	.word	0x00100002
 80020bc:	ffff0000 	.word	0xffff0000

080020c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	@ 0x30
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	817b      	strh	r3, [r7, #10]
 80020d2:	460b      	mov	r3, r1
 80020d4:	813b      	strh	r3, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020da:	f7ff fae9 	bl	80016b0 <HAL_GetTick>
 80020de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	f040 8214 	bne.w	8002516 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2319      	movs	r3, #25
 80020f4:	2201      	movs	r2, #1
 80020f6:	497b      	ldr	r1, [pc, #492]	@ (80022e4 <HAL_I2C_Mem_Read+0x224>)
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fb91 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
 8002106:	e207      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Mem_Read+0x56>
 8002112:	2302      	movs	r3, #2
 8002114:	e200      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d007      	beq.n	800213c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2222      	movs	r2, #34	@ 0x22
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2240      	movs	r2, #64	@ 0x40
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800216c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a5b      	ldr	r2, [pc, #364]	@ (80022e8 <HAL_I2C_Mem_Read+0x228>)
 800217c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800217e:	88f8      	ldrh	r0, [r7, #6]
 8002180:	893a      	ldrh	r2, [r7, #8]
 8002182:	8979      	ldrh	r1, [r7, #10]
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	4603      	mov	r3, r0
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fa5e 	bl	8002650 <I2C_RequestMemoryRead>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1bc      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d113      	bne.n	80021ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	623b      	str	r3, [r7, #32]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e190      	b.n	80024f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d11b      	bne.n	800220e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e170      	b.n	80024f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002212:	2b02      	cmp	r3, #2
 8002214:	d11b      	bne.n	800224e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002224:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	e150      	b.n	80024f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002264:	e144      	b.n	80024f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	2b03      	cmp	r3, #3
 800226c:	f200 80f1 	bhi.w	8002452 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002274:	2b01      	cmp	r3, #1
 8002276:	d123      	bne.n	80022c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fc79 	bl	8002b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e145      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022be:	e117      	b.n	80024f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d14e      	bne.n	8002366 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ce:	2200      	movs	r2, #0
 80022d0:	4906      	ldr	r1, [pc, #24]	@ (80022ec <HAL_I2C_Mem_Read+0x22c>)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 faa4 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e11a      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
 80022e2:	bf00      	nop
 80022e4:	00100002 	.word	0x00100002
 80022e8:	ffff0000 	.word	0xffff0000
 80022ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002364:	e0c4      	b.n	80024f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236c:	2200      	movs	r2, #0
 800236e:	496c      	ldr	r1, [pc, #432]	@ (8002520 <HAL_I2C_Mem_Read+0x460>)
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fa55 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0cb      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800238e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c8:	2200      	movs	r2, #0
 80023ca:	4955      	ldr	r1, [pc, #340]	@ (8002520 <HAL_I2C_Mem_Read+0x460>)
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fa27 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e09d      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002450:	e04e      	b.n	80024f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002454:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fb8c 	bl	8002b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e058      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d124      	bne.n	80024f0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d107      	bne.n	80024be <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f aeb6 	bne.w	8002266 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3728      	adds	r7, #40	@ 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	00010004 	.word	0x00010004

08002524 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	817b      	strh	r3, [r7, #10]
 8002536:	460b      	mov	r3, r1
 8002538:	813b      	strh	r3, [r7, #8]
 800253a:	4613      	mov	r3, r2
 800253c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800254c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	2200      	movs	r2, #0
 8002556:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f960 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002574:	d103      	bne.n	800257e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e05f      	b.n	8002642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	492d      	ldr	r1, [pc, #180]	@ (800264c <I2C_RequestMemoryWrite+0x128>)
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f9bb 	bl	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e04c      	b.n	8002642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c0:	6a39      	ldr	r1, [r7, #32]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fa46 	bl	8002a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00d      	beq.n	80025ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d107      	bne.n	80025e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e02b      	b.n	8002642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f0:	893b      	ldrh	r3, [r7, #8]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	611a      	str	r2, [r3, #16]
 80025fa:	e021      	b.n	8002640 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025fc:	893b      	ldrh	r3, [r7, #8]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b29b      	uxth	r3, r3
 8002602:	b2da      	uxtb	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260c:	6a39      	ldr	r1, [r7, #32]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa20 	bl	8002a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	2b04      	cmp	r3, #4
 8002620:	d107      	bne.n	8002632 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e005      	b.n	8002642 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002636:	893b      	ldrh	r3, [r7, #8]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	00010002 	.word	0x00010002

08002650 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	4608      	mov	r0, r1
 800265a:	4611      	mov	r1, r2
 800265c:	461a      	mov	r2, r3
 800265e:	4603      	mov	r3, r0
 8002660:	817b      	strh	r3, [r7, #10]
 8002662:	460b      	mov	r3, r1
 8002664:	813b      	strh	r3, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002678:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002688:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	2200      	movs	r2, #0
 8002692:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f8c2 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b0:	d103      	bne.n	80026ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0aa      	b.n	8002814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026be:	897b      	ldrh	r3, [r7, #10]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	4952      	ldr	r1, [pc, #328]	@ (800281c <I2C_RequestMemoryRead+0x1cc>)
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f91d 	bl	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e097      	b.n	8002814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f9a8 	bl	8002a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d107      	bne.n	8002722 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002720:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e076      	b.n	8002814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800272c:	893b      	ldrh	r3, [r7, #8]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	611a      	str	r2, [r3, #16]
 8002736:	e021      	b.n	800277c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002738:	893b      	ldrh	r3, [r7, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b29b      	uxth	r3, r3
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002748:	6a39      	ldr	r1, [r7, #32]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f982 	bl	8002a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2b04      	cmp	r3, #4
 800275c:	d107      	bne.n	800276e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e050      	b.n	8002814 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002772:	893b      	ldrh	r3, [r7, #8]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800277c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277e:	6a39      	ldr	r1, [r7, #32]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f967 	bl	8002a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	2b04      	cmp	r3, #4
 8002792:	d107      	bne.n	80027a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e035      	b.n	8002814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	2200      	movs	r2, #0
 80027c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f82b 	bl	8002820 <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027de:	d103      	bne.n	80027e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e013      	b.n	8002814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027ec:	897b      	ldrh	r3, [r7, #10]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	4906      	ldr	r1, [pc, #24]	@ (800281c <I2C_RequestMemoryRead+0x1cc>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f886 	bl	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	00010002 	.word	0x00010002

08002820 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002830:	e048      	b.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d044      	beq.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283a:	f7fe ff39 	bl	80016b0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <I2C_WaitOnFlagUntilTimeout+0x30>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d139      	bne.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	0c1b      	lsrs	r3, r3, #16
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d10d      	bne.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x56>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	43da      	mvns	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4013      	ands	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	e00c      	b.n	8002890 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	43da      	mvns	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	429a      	cmp	r2, r3
 8002894:	d116      	bne.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e023      	b.n	800290c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10d      	bne.n	80028ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	e00c      	b.n	8002904 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	429a      	cmp	r2, r3
 8002908:	d093      	beq.n	8002832 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002922:	e071      	b.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002932:	d123      	bne.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002942:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800294c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f043 0204 	orr.w	r2, r3, #4
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e067      	b.n	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d041      	beq.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002984:	f7fe fe94 	bl	80016b0 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d302      	bcc.n	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d136      	bne.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10c      	bne.n	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4013      	ands	r3, r2
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	e00b      	b.n	80029d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e021      	b.n	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10c      	bne.n	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e00b      	b.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4013      	ands	r3, r2
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f47f af6d 	bne.w	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a60:	e034      	b.n	8002acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f8e3 	bl	8002c2e <I2C_IsAcknowledgeFailed>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e034      	b.n	8002adc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d028      	beq.n	8002acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7fe fe19 	bl	80016b0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d11d      	bne.n	8002acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9a:	2b80      	cmp	r3, #128	@ 0x80
 8002a9c:	d016      	beq.n	8002acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e007      	b.n	8002adc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad6:	2b80      	cmp	r3, #128	@ 0x80
 8002ad8:	d1c3      	bne.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af0:	e034      	b.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f89b 	bl	8002c2e <I2C_IsAcknowledgeFailed>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e034      	b.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d028      	beq.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fe fdd1 	bl	80016b0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d11d      	bne.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d016      	beq.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e007      	b.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d1c3      	bne.n	8002af2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b80:	e049      	b.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d119      	bne.n	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0210 	mvn.w	r2, #16
 8002b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e030      	b.n	8002c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc4:	f7fe fd74 	bl	80016b0 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d302      	bcc.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11d      	bne.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be4:	2b40      	cmp	r3, #64	@ 0x40
 8002be6:	d016      	beq.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e007      	b.n	8002c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c20:	2b40      	cmp	r3, #64	@ 0x40
 8002c22:	d1ae      	bne.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c44:	d11b      	bne.n	8002c7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e128      	b.n	8002ef0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a90      	ldr	r2, [pc, #576]	@ (8002ef8 <HAL_I2S_Init+0x26c>)
 8002cb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fe fa69 	bl	8001190 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002cd4:	f023 030f 	bic.w	r3, r3, #15
 8002cd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d060      	beq.n	8002dac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002cf2:	2310      	movs	r3, #16
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e001      	b.n	8002cfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d802      	bhi.n	8002d0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f002 fc56 	bl	80055bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002d10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d1a:	d125      	bne.n	8002d68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	3305      	adds	r3, #5
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e01f      	b.n	8002d86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	3305      	adds	r3, #5
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	e00e      	b.n	8002d86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	461a      	mov	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	3305      	adds	r3, #5
 8002d84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4a5c      	ldr	r2, [pc, #368]	@ (8002efc <HAL_I2S_Init+0x270>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	08db      	lsrs	r3, r3, #3
 8002d90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e003      	b.n	8002db4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002dac:	2302      	movs	r3, #2
 8002dae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d902      	bls.n	8002dc0 <HAL_I2S_Init+0x134>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2bff      	cmp	r3, #255	@ 0xff
 8002dbe:	d907      	bls.n	8002dd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc4:	f043 0210 	orr.w	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e08f      	b.n	8002ef0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	ea42 0103 	orr.w	r1, r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002dee:	f023 030f 	bic.w	r3, r3, #15
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6851      	ldr	r1, [r2, #4]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6892      	ldr	r2, [r2, #8]
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68d2      	ldr	r2, [r2, #12]
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6992      	ldr	r2, [r2, #24]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d161      	bne.n	8002ee0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a38      	ldr	r2, [pc, #224]	@ (8002f00 <HAL_I2S_Init+0x274>)
 8002e20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a37      	ldr	r2, [pc, #220]	@ (8002f04 <HAL_I2S_Init+0x278>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2S_Init+0x1a4>
 8002e2c:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <HAL_I2S_Init+0x27c>)
 8002e2e:	e001      	b.n	8002e34 <HAL_I2S_Init+0x1a8>
 8002e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	4932      	ldr	r1, [pc, #200]	@ (8002f04 <HAL_I2S_Init+0x278>)
 8002e3c:	428a      	cmp	r2, r1
 8002e3e:	d101      	bne.n	8002e44 <HAL_I2S_Init+0x1b8>
 8002e40:	4a31      	ldr	r2, [pc, #196]	@ (8002f08 <HAL_I2S_Init+0x27c>)
 8002e42:	e001      	b.n	8002e48 <HAL_I2S_Init+0x1bc>
 8002e44:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002e48:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002e4c:	f023 030f 	bic.w	r3, r3, #15
 8002e50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2b      	ldr	r2, [pc, #172]	@ (8002f04 <HAL_I2S_Init+0x278>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2S_Init+0x1d4>
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f08 <HAL_I2S_Init+0x27c>)
 8002e5e:	e001      	b.n	8002e64 <HAL_I2S_Init+0x1d8>
 8002e60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e64:	2202      	movs	r2, #2
 8002e66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	@ (8002f04 <HAL_I2S_Init+0x278>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_I2S_Init+0x1ea>
 8002e72:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <HAL_I2S_Init+0x27c>)
 8002e74:	e001      	b.n	8002e7a <HAL_I2S_Init+0x1ee>
 8002e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e86:	d003      	beq.n	8002e90 <HAL_I2S_Init+0x204>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d103      	bne.n	8002e98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e001      	b.n	8002e9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ec8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a0d      	ldr	r2, [pc, #52]	@ (8002f04 <HAL_I2S_Init+0x278>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2S_Init+0x24c>
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <HAL_I2S_Init+0x27c>)
 8002ed6:	e001      	b.n	8002edc <HAL_I2S_Init+0x250>
 8002ed8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002edc:	897a      	ldrh	r2, [r7, #10]
 8002ede:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	08003003 	.word	0x08003003
 8002efc:	cccccccd 	.word	0xcccccccd
 8002f00:	08003119 	.word	0x08003119
 8002f04:	40003800 	.word	0x40003800
 8002f08:	40003400 	.word	0x40003400

08002f0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	881a      	ldrh	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10e      	bne.n	8002f9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffb8 	bl	8002f0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	1c9a      	adds	r2, r3, #2
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10e      	bne.n	8002ffa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff93 	bl	8002f20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b04      	cmp	r3, #4
 800301c:	d13a      	bne.n	8003094 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d109      	bne.n	800303c <I2S_IRQHandler+0x3a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	2b40      	cmp	r3, #64	@ 0x40
 8003034:	d102      	bne.n	800303c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ffb4 	bl	8002fa4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	2b40      	cmp	r3, #64	@ 0x40
 8003044:	d126      	bne.n	8003094 <I2S_IRQHandler+0x92>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b20      	cmp	r3, #32
 8003052:	d11f      	bne.n	8003094 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003062:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	f043 0202 	orr.w	r2, r3, #2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ff50 	bl	8002f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b03      	cmp	r3, #3
 800309e:	d136      	bne.n	800310e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d109      	bne.n	80030be <I2S_IRQHandler+0xbc>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b4:	2b80      	cmp	r3, #128	@ 0x80
 80030b6:	d102      	bne.n	80030be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff45 	bl	8002f48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d122      	bne.n	800310e <I2S_IRQHandler+0x10c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d11b      	bne.n	800310e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80030e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff13 	bl	8002f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a92      	ldr	r2, [pc, #584]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003132:	4b92      	ldr	r3, [pc, #584]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003134:	e001      	b.n	800313a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003136:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a8b      	ldr	r2, [pc, #556]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003150:	4b8a      	ldr	r3, [pc, #552]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003152:	e001      	b.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003154:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003164:	d004      	beq.n	8003170 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 8099 	bne.w	80032a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d107      	bne.n	800318a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f925 	bl	80033d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d107      	bne.n	80031a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9c8 	bl	8003534 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031aa:	2b40      	cmp	r3, #64	@ 0x40
 80031ac:	d13a      	bne.n	8003224 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d035      	beq.n	8003224 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80031c2:	4b6e      	ldr	r3, [pc, #440]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031c4:	e001      	b.n	80031ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80031c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4969      	ldr	r1, [pc, #420]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031d2:	428b      	cmp	r3, r1
 80031d4:	d101      	bne.n	80031da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80031d6:	4b69      	ldr	r3, [pc, #420]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031d8:	e001      	b.n	80031de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80031da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f043 0202 	orr.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fe88 	bl	8002f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b08      	cmp	r3, #8
 800322c:	f040 80c3 	bne.w	80033b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 80bd 	beq.w	80033b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800324a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a49      	ldr	r2, [pc, #292]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003256:	4b49      	ldr	r3, [pc, #292]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003258:	e001      	b.n	800325e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800325a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4944      	ldr	r1, [pc, #272]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003266:	428b      	cmp	r3, r1
 8003268:	d101      	bne.n	800326e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800326a:	4b44      	ldr	r3, [pc, #272]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800326c:	e001      	b.n	8003272 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800326e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003272:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003276:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f043 0204 	orr.w	r2, r3, #4
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fe4a 	bl	8002f34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032a0:	e089      	b.n	80033b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8be 	bl	8003438 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8fd 	bl	80034d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032dc:	2b40      	cmp	r3, #64	@ 0x40
 80032de:	d12f      	bne.n	8003340 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02a      	beq.n	8003340 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003304:	4b1d      	ldr	r3, [pc, #116]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003306:	e001      	b.n	800330c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4919      	ldr	r1, [pc, #100]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003314:	428b      	cmp	r3, r1
 8003316:	d101      	bne.n	800331c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003318:	4b18      	ldr	r3, [pc, #96]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800331a:	e001      	b.n	8003320 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003320:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003324:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f043 0202 	orr.w	r2, r3, #2
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fdfa 	bl	8002f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d136      	bne.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d031      	beq.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a07      	ldr	r2, [pc, #28]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800335e:	4b07      	ldr	r3, [pc, #28]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003360:	e001      	b.n	8003366 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003362:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4902      	ldr	r1, [pc, #8]	@ (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800336e:	428b      	cmp	r3, r1
 8003370:	d106      	bne.n	8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003372:	4b02      	ldr	r3, [pc, #8]	@ (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003374:	e006      	b.n	8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003376:	bf00      	nop
 8003378:	40003800 	.word	0x40003800
 800337c:	40003400 	.word	0x40003400
 8003380:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003384:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003388:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003398:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	f043 0204 	orr.w	r2, r3, #4
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fdc0 	bl	8002f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033b4:	e000      	b.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033b6:	bf00      	nop
}
 80033b8:	bf00      	nop
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c99      	adds	r1, r3, #2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80033e6:	881a      	ldrh	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d113      	bne.n	800342e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003414:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ffc9 	bl	80033c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	1c99      	adds	r1, r3, #2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6251      	str	r1, [r2, #36]	@ 0x24
 800344a:	8819      	ldrh	r1, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1d      	ldr	r2, [pc, #116]	@ (80034c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <I2SEx_TxISR_I2SExt+0x22>
 8003456:	4b1d      	ldr	r3, [pc, #116]	@ (80034cc <I2SEx_TxISR_I2SExt+0x94>)
 8003458:	e001      	b.n	800345e <I2SEx_TxISR_I2SExt+0x26>
 800345a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800345e:	460a      	mov	r2, r1
 8003460:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d121      	bne.n	80034be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a12      	ldr	r2, [pc, #72]	@ (80034c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <I2SEx_TxISR_I2SExt+0x50>
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <I2SEx_TxISR_I2SExt+0x94>)
 8003486:	e001      	b.n	800348c <I2SEx_TxISR_I2SExt+0x54>
 8003488:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	490d      	ldr	r1, [pc, #52]	@ (80034c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003494:	428b      	cmp	r3, r1
 8003496:	d101      	bne.n	800349c <I2SEx_TxISR_I2SExt+0x64>
 8003498:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <I2SEx_TxISR_I2SExt+0x94>)
 800349a:	e001      	b.n	80034a0 <I2SEx_TxISR_I2SExt+0x68>
 800349c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff81 	bl	80033c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40003800 	.word	0x40003800
 80034cc:	40003400 	.word	0x40003400

080034d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68d8      	ldr	r0, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	1c99      	adds	r1, r3, #2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80034e8:	b282      	uxth	r2, r0
 80034ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d113      	bne.n	800352c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003512:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff4a 	bl	80033c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a20      	ldr	r2, [pc, #128]	@ (80035c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <I2SEx_RxISR_I2SExt+0x16>
 8003546:	4b20      	ldr	r3, [pc, #128]	@ (80035c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003548:	e001      	b.n	800354e <I2SEx_RxISR_I2SExt+0x1a>
 800354a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800354e:	68d8      	ldr	r0, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	1c99      	adds	r1, r3, #2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800355a:	b282      	uxth	r2, r0
 800355c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d121      	bne.n	80035ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a12      	ldr	r2, [pc, #72]	@ (80035c4 <I2SEx_RxISR_I2SExt+0x90>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <I2SEx_RxISR_I2SExt+0x50>
 8003580:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003582:	e001      	b.n	8003588 <I2SEx_RxISR_I2SExt+0x54>
 8003584:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	490d      	ldr	r1, [pc, #52]	@ (80035c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003590:	428b      	cmp	r3, r1
 8003592:	d101      	bne.n	8003598 <I2SEx_RxISR_I2SExt+0x64>
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003596:	e001      	b.n	800359c <I2SEx_RxISR_I2SExt+0x68>
 8003598:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800359c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ff03 	bl	80033c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40003800 	.word	0x40003800
 80035c8:	40003400 	.word	0x40003400

080035cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e101      	b.n	80037e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f00a fa67 	bl	800dacc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800360c:	d102      	bne.n	8003614 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f003 ff2c 	bl	8007476 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7c1a      	ldrb	r2, [r3, #16]
 8003626:	f88d 2000 	strb.w	r2, [sp]
 800362a:	3304      	adds	r3, #4
 800362c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362e:	f003 fe0b 	bl	8007248 <USB_CoreInit>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0ce      	b.n	80037e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f003 ff24 	bl	8007498 <USB_SetCurrentMode>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e0bf      	b.n	80037e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e04a      	b.n	80036fe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3315      	adds	r3, #21
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	3314      	adds	r3, #20
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	b298      	uxth	r0, r3
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	332e      	adds	r3, #46	@ 0x2e
 80036a4:	4602      	mov	r2, r0
 80036a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3318      	adds	r3, #24
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	331c      	adds	r3, #28
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3320      	adds	r3, #32
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3324      	adds	r3, #36	@ 0x24
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	791b      	ldrb	r3, [r3, #4]
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3af      	bcc.n	8003668 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e044      	b.n	8003798 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	3301      	adds	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	791b      	ldrb	r3, [r3, #4]
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d3b5      	bcc.n	800370e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7c1a      	ldrb	r2, [r3, #16]
 80037aa:	f88d 2000 	strb.w	r2, [sp]
 80037ae:	3304      	adds	r3, #4
 80037b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b2:	f003 febd 	bl	8007530 <USB_DevInit>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e00c      	b.n	80037e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 ff07 	bl	80085ee <USB_DevDisconnect>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_PCD_Start+0x1c>
 8003802:	2302      	movs	r3, #2
 8003804:	e022      	b.n	800384c <HAL_PCD_Start+0x62>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f003 fe0e 	bl	8007454 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f004 feb5 	bl	80085ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b08d      	sub	sp, #52	@ 0x34
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f004 ff73 	bl	8008756 <USB_GetMode>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 848c 	bne.w	8004190 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f004 fed7 	bl	8008630 <USB_ReadInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8482 	beq.w	800418e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f004 fec4 	bl	8008630 <USB_ReadInterrupts>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d107      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f002 0202 	and.w	r2, r2, #2
 80038c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 feb2 	bl	8008630 <USB_ReadInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d161      	bne.n	800399a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0210 	bic.w	r2, r2, #16
 80038e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f003 020f 	and.w	r2, r3, #15
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	3304      	adds	r3, #4
 8003904:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	0c5b      	lsrs	r3, r3, #17
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	2b02      	cmp	r3, #2
 8003910:	d124      	bne.n	800395c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d035      	beq.n	800398a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800392c:	b29b      	uxth	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	6a38      	ldr	r0, [r7, #32]
 8003932:	f004 fce9 	bl	8008308 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003942:	441a      	add	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003954:	441a      	add	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	615a      	str	r2, [r3, #20]
 800395a:	e016      	b.n	800398a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	0c5b      	lsrs	r3, r3, #17
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	2b06      	cmp	r3, #6
 8003966:	d110      	bne.n	800398a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800396e:	2208      	movs	r2, #8
 8003970:	4619      	mov	r1, r3
 8003972:	6a38      	ldr	r0, [r7, #32]
 8003974:	f004 fcc8 	bl	8008308 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003984:	441a      	add	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0210 	orr.w	r2, r2, #16
 8003998:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 fe46 	bl	8008630 <USB_ReadInterrupts>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039ae:	f040 80a7 	bne.w	8003b00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 fe4b 	bl	8008656 <USB_ReadDevAllOutEpInterrupt>
 80039c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80039c2:	e099      	b.n	8003af8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 808e 	beq.w	8003aec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 fe6f 	bl	80086be <USB_ReadDevOutEPInterrupt>
 80039e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	2301      	movs	r3, #1
 80039fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fea3 	bl	800474c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00c      	beq.n	8003a2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2308      	movs	r3, #8
 8003a20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 ff79 	bl	800491c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a40:	461a      	mov	r2, r3
 8003a42:	2310      	movs	r3, #16
 8003a44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d030      	beq.n	8003ab2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d109      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	78db      	ldrb	r3, [r3, #3]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f00a f920 	bl	800dce0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	2302      	movs	r3, #2
 8003ab0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2320      	movs	r3, #32
 8003acc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003aea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	3301      	adds	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f47f af62 	bne.w	80039c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f004 fd93 	bl	8008630 <USB_ReadInterrupts>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b14:	f040 80db 	bne.w	8003cce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f004 fdb4 	bl	800868a <USB_ReadDevAllInEpInterrupt>
 8003b22:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b28:	e0cd      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80c2 	beq.w	8003cba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f004 fdda 	bl	80086fa <USB_ReadDevInEPInterrupt>
 8003b46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d057      	beq.n	8003c02 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	2201      	movs	r2, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69f9      	ldr	r1, [r7, #28]
 8003b6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b72:	4013      	ands	r3, r2
 8003b74:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b82:	461a      	mov	r2, r3
 8003b84:	2301      	movs	r3, #1
 8003b86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	799b      	ldrb	r3, [r3, #6]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d132      	bne.n	8003bf6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3320      	adds	r3, #32
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4403      	add	r3, r0
 8003bb0:	331c      	adds	r3, #28
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4419      	add	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4403      	add	r3, r0
 8003bc4:	3320      	adds	r3, #32
 8003bc6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <HAL_PCD_IRQHandler+0x3a2>
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3324      	adds	r3, #36	@ 0x24
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	f004 fde1 	bl	80087b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f009 fff4 	bl	800dbea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c34:	461a      	mov	r2, r3
 8003c36:	2310      	movs	r3, #16
 8003c38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c50:	461a      	mov	r2, r3
 8003c52:	2340      	movs	r3, #64	@ 0x40
 8003c54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d023      	beq.n	8003ca8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c62:	6a38      	ldr	r0, [r7, #32]
 8003c64:	f003 fdc8 	bl	80077f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	3310      	adds	r3, #16
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	3304      	adds	r3, #4
 8003c7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	78db      	ldrb	r3, [r3, #3]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d108      	bne.n	8003c96 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2200      	movs	r2, #0
 8003c88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f00a f837 	bl	800dd04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fcbd 	bl	8004634 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f47f af2e 	bne.w	8003b2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 fcac 	bl	8008630 <USB_ReadInterrupts>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ce2:	d122      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d108      	bne.n	8003d14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fea3 	bl	8004a58 <HAL_PCDEx_LPM_Callback>
 8003d12:	e002      	b.n	8003d1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f009 ffd5 	bl	800dcc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f004 fc7e 	bl	8008630 <USB_ReadInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d3e:	d112      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d102      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f009 ff91 	bl	800dc78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d64:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 fc60 	bl	8008630 <USB_ReadInterrupts>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7a:	f040 80b7 	bne.w	8003eec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2110      	movs	r1, #16
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f003 fd2d 	bl	80077f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da2:	e046      	b.n	8003e32 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db0:	461a      	mov	r2, r3
 8003db2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003db6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de4:	461a      	mov	r2, r3
 8003de6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2e:	3301      	adds	r3, #1
 8003e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	791b      	ldrb	r3, [r3, #4]
 8003e36:	461a      	mov	r2, r3
 8003e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d3b2      	bcc.n	8003da4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e4c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7bdb      	ldrb	r3, [r3, #15]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e6a:	f043 030b 	orr.w	r3, r3, #11
 8003e6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e80:	f043 030b 	orr.w	r3, r3, #11
 8003e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e86:	e015      	b.n	8003eb4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e9a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eae:	f043 030b 	orr.w	r3, r3, #11
 8003eb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ec2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003ec6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f004 fc6e 	bl	80087b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f004 fb9d 	bl	8008630 <USB_ReadInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f00:	d123      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f004 fc33 	bl	8008772 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f003 fcea 	bl	80078ea <USB_GetDevSpeed>
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681c      	ldr	r4, [r3, #0]
 8003f22:	f001 fa09 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8003f26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f003 f9ee 	bl	8007310 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f009 fe80 	bl	800dc3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 fb6e 	bl	8008630 <USB_ReadInterrupts>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d10a      	bne.n	8003f74 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f009 fe5d 	bl	800dc1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f002 0208 	and.w	r2, r2, #8
 8003f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f004 fb59 	bl	8008630 <USB_ReadInterrupts>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b80      	cmp	r3, #128	@ 0x80
 8003f86:	d123      	bne.n	8003fd0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f94:	2301      	movs	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f98:	e014      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d105      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fb0a 	bl	80045d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	791b      	ldrb	r3, [r3, #4]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d3e4      	bcc.n	8003f9a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f004 fb2b 	bl	8008630 <USB_ReadInterrupts>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fe4:	d13c      	bne.n	8004060 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fea:	e02b      	b.n	8004044 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	3318      	adds	r3, #24
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d115      	bne.n	800403e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004012:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004014:	2b00      	cmp	r3, #0
 8004016:	da12      	bge.n	800403e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3317      	adds	r3, #23
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 faca 	bl	80045d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	3301      	adds	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	461a      	mov	r2, r3
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	4293      	cmp	r3, r2
 800404e:	d3cd      	bcc.n	8003fec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800405e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f004 fae3 	bl	8008630 <USB_ReadInterrupts>
 800406a:	4603      	mov	r3, r0
 800406c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004074:	d156      	bne.n	8004124 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
 800407a:	e045      	b.n	8004108 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d12e      	bne.n	8004102 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	da2b      	bge.n	8004102 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80040b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d121      	bne.n	8004102 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040fe:	6053      	str	r3, [r2, #4]
            break;
 8004100:	e008      	b.n	8004114 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	3301      	adds	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	791b      	ldrb	r3, [r3, #4]
 800410c:	461a      	mov	r2, r3
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	4293      	cmp	r3, r2
 8004112:	d3b3      	bcc.n	800407c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f004 fa81 	bl	8008630 <USB_ReadInterrupts>
 800412e:	4603      	mov	r3, r0
 8004130:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004138:	d10a      	bne.n	8004150 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f009 fdf4 	bl	800dd28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800414e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f004 fa6b 	bl	8008630 <USB_ReadInterrupts>
 800415a:	4603      	mov	r3, r0
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b04      	cmp	r3, #4
 8004162:	d115      	bne.n	8004190 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f009 fde4 	bl	800dd44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	e000      	b.n	8004190 <HAL_PCD_IRQHandler+0x93c>
      return;
 800418e:	bf00      	nop
    }
  }
}
 8004190:	3734      	adds	r7, #52	@ 0x34
 8004192:	46bd      	mov	sp, r7
 8004194:	bd90      	pop	{r4, r7, pc}

08004196 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_PCD_SetAddress+0x1a>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e012      	b.n	80041d6 <HAL_PCD_SetAddress+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f004 f9ca 	bl	8008560 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	4608      	mov	r0, r1
 80041e8:	4611      	mov	r1, r2
 80041ea:	461a      	mov	r2, r3
 80041ec:	4603      	mov	r3, r0
 80041ee:	70fb      	strb	r3, [r7, #3]
 80041f0:	460b      	mov	r3, r1
 80041f2:	803b      	strh	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004200:	2b00      	cmp	r3, #0
 8004202:	da0f      	bge.n	8004224 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	f003 020f 	and.w	r2, r3, #15
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3310      	adds	r3, #16
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	3304      	adds	r3, #4
 800421a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	705a      	strb	r2, [r3, #1]
 8004222:	e00f      	b.n	8004244 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	b2da      	uxtb	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004250:	883b      	ldrh	r3, [r7, #0]
 8004252:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	78ba      	ldrb	r2, [r7, #2]
 800425e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	785b      	ldrb	r3, [r3, #1]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004272:	78bb      	ldrb	r3, [r7, #2]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d102      	bne.n	800427e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_PCD_EP_Open+0xae>
 8004288:	2302      	movs	r3, #2
 800428a:	e00e      	b.n	80042aa <HAL_PCD_EP_Open+0xcc>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68f9      	ldr	r1, [r7, #12]
 800429a:	4618      	mov	r0, r3
 800429c:	f003 fb4a 	bl	8007934 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80042a8:	7afb      	ldrb	r3, [r7, #11]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da0f      	bge.n	80042e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	3310      	adds	r3, #16
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4413      	add	r3, r2
 80042da:	3304      	adds	r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	705a      	strb	r2, [r3, #1]
 80042e4:	e00f      	b.n	8004306 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	f003 020f 	and.w	r2, r3, #15
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	b2da      	uxtb	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_PCD_EP_Close+0x6e>
 800431c:	2302      	movs	r3, #2
 800431e:	e00e      	b.n	800433e <HAL_PCD_EP_Close+0x8c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	4618      	mov	r0, r3
 8004330:	f003 fb88 	bl	8007a44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	460b      	mov	r3, r1
 8004354:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004356:	7afb      	ldrb	r3, [r7, #11]
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	3304      	adds	r3, #4
 800436e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004388:	7afb      	ldrb	r3, [r7, #11]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	b2da      	uxtb	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	799b      	ldrb	r3, [r3, #6]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d102      	bne.n	80043a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	799b      	ldrb	r3, [r3, #6]
 80043aa:	461a      	mov	r2, r3
 80043ac:	6979      	ldr	r1, [r7, #20]
 80043ae:	f003 fc25 	bl	8007bfc <USB_EPStartXfer>

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 020f 	and.w	r2, r3, #15
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	460b      	mov	r3, r1
 80043fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fc:	7afb      	ldrb	r3, [r7, #11]
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	3310      	adds	r3, #16
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	3304      	adds	r3, #4
 8004412:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2200      	movs	r2, #0
 8004424:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2201      	movs	r2, #1
 800442a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800442c:	7afb      	ldrb	r3, [r7, #11]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	b2da      	uxtb	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	799b      	ldrb	r3, [r3, #6]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d102      	bne.n	8004446 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	799b      	ldrb	r3, [r3, #6]
 800444e:	461a      	mov	r2, r3
 8004450:	6979      	ldr	r1, [r7, #20]
 8004452:	f003 fbd3 	bl	8007bfc <USB_EPStartXfer>

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	7912      	ldrb	r2, [r2, #4]
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e04f      	b.n	800451e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800447e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da0f      	bge.n	80044a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	3310      	adds	r3, #16
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	3304      	adds	r3, #4
 800449c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	705a      	strb	r2, [r3, #1]
 80044a4:	e00d      	b.n	80044c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	3304      	adds	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_PCD_EP_SetStall+0x82>
 80044de:	2302      	movs	r3, #2
 80044e0:	e01d      	b.n	800451e <HAL_PCD_EP_SetStall+0xbe>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f003 ff61 	bl	80083b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7999      	ldrb	r1, [r3, #6]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800450e:	461a      	mov	r2, r3
 8004510:	f004 f952 	bl	80087b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	7912      	ldrb	r2, [r2, #4]
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e042      	b.n	80045ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004548:	2b00      	cmp	r3, #0
 800454a:	da0f      	bge.n	800456c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	3310      	adds	r3, #16
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	4413      	add	r3, r2
 8004560:	3304      	adds	r3, #4
 8004562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	705a      	strb	r2, [r3, #1]
 800456a:	e00f      	b.n	800458c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	f003 020f 	and.w	r2, r3, #15
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	3304      	adds	r3, #4
 8004584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_PCD_EP_ClrStall+0x86>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e00e      	b.n	80045ca <HAL_PCD_EP_ClrStall+0xa4>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f003 ff6a 	bl	8008494 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80045de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	da0c      	bge.n	8004600 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	f003 020f 	and.w	r2, r3, #15
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	3310      	adds	r3, #16
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	3304      	adds	r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e00c      	b.n	800461a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	3304      	adds	r3, #4
 8004618:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	4618      	mov	r0, r3
 8004622:	f003 fd89 	bl	8008138 <USB_EPStopXfer>
 8004626:	4603      	mov	r3, r0
 8004628:	72fb      	strb	r3, [r7, #11]

  return ret;
 800462a:	7afb      	ldrb	r3, [r7, #11]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	@ 0x28
 8004638:	af02      	add	r7, sp, #8
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	3310      	adds	r3, #16
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	3304      	adds	r3, #4
 800465a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	429a      	cmp	r2, r3
 8004666:	d901      	bls.n	800466c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e06b      	b.n	8004744 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	429a      	cmp	r2, r3
 8004680:	d902      	bls.n	8004688 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	3303      	adds	r3, #3
 800468c:	089b      	lsrs	r3, r3, #2
 800468e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004690:	e02a      	b.n	80046e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d902      	bls.n	80046ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3303      	adds	r3, #3
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68d9      	ldr	r1, [r3, #12]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	4603      	mov	r3, r0
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f003 fdde 	bl	800828c <USB_WritePacket>

    ep->xfer_buff  += len;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	441a      	add	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	441a      	add	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d809      	bhi.n	8004712 <PCD_WriteEmptyTxFifo+0xde>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004706:	429a      	cmp	r2, r3
 8004708:	d203      	bcs.n	8004712 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1bf      	bne.n	8004692 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	429a      	cmp	r2, r3
 800471c:	d811      	bhi.n	8004742 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	2201      	movs	r2, #1
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	43db      	mvns	r3, r3
 8004738:	6939      	ldr	r1, [r7, #16]
 800473a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800473e:	4013      	ands	r3, r2
 8004740:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	333c      	adds	r3, #60	@ 0x3c
 8004764:	3304      	adds	r3, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	799b      	ldrb	r3, [r3, #6]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d17b      	bne.n	800487a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	4a61      	ldr	r2, [pc, #388]	@ (8004914 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	f240 80b9 	bls.w	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80b3 	beq.w	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	461a      	mov	r2, r3
 80047b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b4:	6093      	str	r3, [r2, #8]
 80047b6:	e0a7      	b.n	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ce:	461a      	mov	r2, r3
 80047d0:	2320      	movs	r3, #32
 80047d2:	6093      	str	r3, [r2, #8]
 80047d4:	e098      	b.n	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f040 8093 	bne.w	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004914 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d90f      	bls.n	800480a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004800:	461a      	mov	r2, r3
 8004802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004806:	6093      	str	r3, [r2, #8]
 8004808:	e07e      	b.n	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4413      	add	r3, r2
 800481c:	3304      	adds	r3, #4
 800481e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	440b      	add	r3, r1
 800482c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d114      	bne.n	800486c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004854:	461a      	mov	r2, r3
 8004856:	2101      	movs	r1, #1
 8004858:	f003 ffae 	bl	80087b8 <USB_EP0_OutStart>
 800485c:	e006      	b.n	800486c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	441a      	add	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f009 f99e 	bl	800dbb4 <HAL_PCD_DataOutStageCallback>
 8004878:	e046      	b.n	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	4a26      	ldr	r2, [pc, #152]	@ (8004918 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d124      	bne.n	80048cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004898:	461a      	mov	r2, r3
 800489a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489e:	6093      	str	r3, [r2, #8]
 80048a0:	e032      	b.n	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b8:	461a      	mov	r2, r3
 80048ba:	2320      	movs	r3, #32
 80048bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f009 f975 	bl	800dbb4 <HAL_PCD_DataOutStageCallback>
 80048ca:	e01d      	b.n	8004908 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d114      	bne.n	80048fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d108      	bne.n	80048fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048f4:	461a      	mov	r2, r3
 80048f6:	2100      	movs	r1, #0
 80048f8:	f003 ff5e 	bl	80087b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f009 f956 	bl	800dbb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	4f54300a 	.word	0x4f54300a
 8004918:	4f54310a 	.word	0x4f54310a

0800491c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	333c      	adds	r3, #60	@ 0x3c
 8004934:	3304      	adds	r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a15      	ldr	r2, [pc, #84]	@ (80049a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d90e      	bls.n	8004970 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004968:	461a      	mov	r2, r3
 800496a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800496e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f009 f90d 	bl	800db90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4a0a      	ldr	r2, [pc, #40]	@ (80049a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d90c      	bls.n	8004998 <PCD_EP_OutSetupPacket_int+0x7c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	799b      	ldrb	r3, [r3, #6]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d108      	bne.n	8004998 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004990:	461a      	mov	r2, r3
 8004992:	2101      	movs	r1, #1
 8004994:	f003 ff10 	bl	80087b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	4f54300a 	.word	0x4f54300a

080049a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
 80049b4:	4613      	mov	r3, r2
 80049b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d107      	bne.n	80049d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049c6:	883b      	ldrh	r3, [r7, #0]
 80049c8:	0419      	lsls	r1, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80049d4:	e028      	b.n	8004a28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e00d      	b.n	8004a06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	3340      	adds	r3, #64	@ 0x40
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	3301      	adds	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d3ec      	bcc.n	80049ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a10:	883b      	ldrh	r3, [r7, #0]
 8004a12:	0418      	lsls	r0, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6819      	ldr	r1, [r3, #0]
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	4302      	orrs	r2, r0
 8004a20:	3340      	adds	r3, #64	@ 0x40
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	887a      	ldrh	r2, [r7, #2]
 8004a48:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e267      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d075      	beq.n	8004b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a8e:	4b88      	ldr	r3, [pc, #544]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d00c      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9a:	4b85      	ldr	r3, [pc, #532]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d112      	bne.n	8004acc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aa6:	4b82      	ldr	r3, [pc, #520]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ab2:	d10b      	bne.n	8004acc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d05b      	beq.n	8004b78 <HAL_RCC_OscConfig+0x108>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d157      	bne.n	8004b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e242      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x74>
 8004ad6:	4b76      	ldr	r3, [pc, #472]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a75      	ldr	r2, [pc, #468]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e01d      	b.n	8004b20 <HAL_RCC_OscConfig+0xb0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x98>
 8004aee:	4b70      	ldr	r3, [pc, #448]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6f      	ldr	r2, [pc, #444]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b6d      	ldr	r3, [pc, #436]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a6c      	ldr	r2, [pc, #432]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e00b      	b.n	8004b20 <HAL_RCC_OscConfig+0xb0>
 8004b08:	4b69      	ldr	r3, [pc, #420]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a68      	ldr	r2, [pc, #416]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	4b66      	ldr	r3, [pc, #408]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a65      	ldr	r2, [pc, #404]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d013      	beq.n	8004b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fc fdc2 	bl	80016b0 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b30:	f7fc fdbe 	bl	80016b0 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	@ 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e207      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0xc0>
 8004b4e:	e014      	b.n	8004b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b50:	f7fc fdae 	bl	80016b0 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fc fdaa 	bl	80016b0 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	@ 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e1f3      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6a:	4b51      	ldr	r3, [pc, #324]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0xe8>
 8004b76:	e000      	b.n	8004b7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d063      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b86:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b92:	4b47      	ldr	r3, [pc, #284]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d11c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b9e:	4b44      	ldr	r3, [pc, #272]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d116      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	4b41      	ldr	r3, [pc, #260]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x152>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e1c7      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4937      	ldr	r1, [pc, #220]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	e03a      	b.n	8004c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d020      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be0:	4b34      	ldr	r3, [pc, #208]	@ (8004cb4 <HAL_RCC_OscConfig+0x244>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be6:	f7fc fd63 	bl	80016b0 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bee:	f7fc fd5f 	bl	80016b0 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e1a8      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c00:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0c:	4b28      	ldr	r3, [pc, #160]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4925      	ldr	r1, [pc, #148]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]
 8004c20:	e015      	b.n	8004c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c22:	4b24      	ldr	r3, [pc, #144]	@ (8004cb4 <HAL_RCC_OscConfig+0x244>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fc fd42 	bl	80016b0 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c30:	f7fc fd3e 	bl	80016b0 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e187      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d036      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d016      	beq.n	8004c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c62:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <HAL_RCC_OscConfig+0x248>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c68:	f7fc fd22 	bl	80016b0 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c70:	f7fc fd1e 	bl	80016b0 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e167      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c82:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb0 <HAL_RCC_OscConfig+0x240>)
 8004c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x200>
 8004c8e:	e01b      	b.n	8004cc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c90:	4b09      	ldr	r3, [pc, #36]	@ (8004cb8 <HAL_RCC_OscConfig+0x248>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c96:	f7fc fd0b 	bl	80016b0 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	e00e      	b.n	8004cbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9e:	f7fc fd07 	bl	80016b0 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d907      	bls.n	8004cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e150      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	42470000 	.word	0x42470000
 8004cb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cbc:	4b88      	ldr	r3, [pc, #544]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ea      	bne.n	8004c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8097 	beq.w	8004e04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cda:	4b81      	ldr	r3, [pc, #516]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	4b7d      	ldr	r3, [pc, #500]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	4a7c      	ldr	r2, [pc, #496]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	4b77      	ldr	r3, [pc, #476]	@ (8004ee4 <HAL_RCC_OscConfig+0x474>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d118      	bne.n	8004d44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d12:	4b74      	ldr	r3, [pc, #464]	@ (8004ee4 <HAL_RCC_OscConfig+0x474>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a73      	ldr	r2, [pc, #460]	@ (8004ee4 <HAL_RCC_OscConfig+0x474>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1e:	f7fc fcc7 	bl	80016b0 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d26:	f7fc fcc3 	bl	80016b0 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e10c      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee4 <HAL_RCC_OscConfig+0x474>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCC_OscConfig+0x2ea>
 8004d4c:	4b64      	ldr	r3, [pc, #400]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d50:	4a63      	ldr	r2, [pc, #396]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d58:	e01c      	b.n	8004d94 <HAL_RCC_OscConfig+0x324>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x30c>
 8004d62:	4b5f      	ldr	r3, [pc, #380]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	4a5e      	ldr	r2, [pc, #376]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d68:	f043 0304 	orr.w	r3, r3, #4
 8004d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d72:	4a5b      	ldr	r2, [pc, #364]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d7a:	e00b      	b.n	8004d94 <HAL_RCC_OscConfig+0x324>
 8004d7c:	4b58      	ldr	r3, [pc, #352]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	4a57      	ldr	r2, [pc, #348]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d88:	4b55      	ldr	r3, [pc, #340]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8c:	4a54      	ldr	r2, [pc, #336]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	f023 0304 	bic.w	r3, r3, #4
 8004d92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d015      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fc fc88 	bl	80016b0 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fc fc84 	bl	80016b0 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e0cb      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dba:	4b49      	ldr	r3, [pc, #292]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0ee      	beq.n	8004da4 <HAL_RCC_OscConfig+0x334>
 8004dc6:	e014      	b.n	8004df2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc8:	f7fc fc72 	bl	80016b0 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fc fc6e 	bl	80016b0 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0b5      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1ee      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df8:	4b39      	ldr	r3, [pc, #228]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	4a38      	ldr	r2, [pc, #224]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80a1 	beq.w	8004f50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e0e:	4b34      	ldr	r3, [pc, #208]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d05c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d141      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e22:	4b31      	ldr	r3, [pc, #196]	@ (8004ee8 <HAL_RCC_OscConfig+0x478>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fc fc42 	bl	80016b0 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fc fc3e 	bl	80016b0 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e087      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e42:	4b27      	ldr	r3, [pc, #156]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	019b      	lsls	r3, r3, #6
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	3b01      	subs	r3, #1
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	491b      	ldr	r1, [pc, #108]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <HAL_RCC_OscConfig+0x478>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7e:	f7fc fc17 	bl	80016b0 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e86:	f7fc fc13 	bl	80016b0 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e05c      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e98:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCC_OscConfig+0x416>
 8004ea4:	e054      	b.n	8004f50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea6:	4b10      	ldr	r3, [pc, #64]	@ (8004ee8 <HAL_RCC_OscConfig+0x478>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fc fc00 	bl	80016b0 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fc fbfc 	bl	80016b0 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e045      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x444>
 8004ed2:	e03d      	b.n	8004f50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d107      	bne.n	8004eec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e038      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eec:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <HAL_RCC_OscConfig+0x4ec>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d028      	beq.n	8004f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d121      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d11a      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d111      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3b01      	subs	r3, #1
 8004f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800

08004f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0cc      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f74:	4b68      	ldr	r3, [pc, #416]	@ (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d90c      	bls.n	8004f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b65      	ldr	r3, [pc, #404]	@ (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8a:	4b63      	ldr	r3, [pc, #396]	@ (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0b8      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb4:	4b59      	ldr	r3, [pc, #356]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4a58      	ldr	r2, [pc, #352]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fcc:	4b53      	ldr	r3, [pc, #332]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	4a52      	ldr	r2, [pc, #328]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd8:	4b50      	ldr	r3, [pc, #320]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	494d      	ldr	r1, [pc, #308]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d044      	beq.n	8005080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b47      	ldr	r3, [pc, #284]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d119      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e07f      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d003      	beq.n	800501e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800501a:	2b03      	cmp	r3, #3
 800501c:	d107      	bne.n	800502e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501e:	4b3f      	ldr	r3, [pc, #252]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e06f      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502e:	4b3b      	ldr	r3, [pc, #236]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e067      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503e:	4b37      	ldr	r3, [pc, #220]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 0203 	bic.w	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4934      	ldr	r1, [pc, #208]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005050:	f7fc fb2e 	bl	80016b0 <HAL_GetTick>
 8005054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005056:	e00a      	b.n	800506e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005058:	f7fc fb2a 	bl	80016b0 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e04f      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	4b2b      	ldr	r3, [pc, #172]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 020c 	and.w	r2, r3, #12
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	429a      	cmp	r2, r3
 800507e:	d1eb      	bne.n	8005058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005080:	4b25      	ldr	r3, [pc, #148]	@ (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d20c      	bcs.n	80050a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508e:	4b22      	ldr	r3, [pc, #136]	@ (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b20      	ldr	r3, [pc, #128]	@ (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e032      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b4:	4b19      	ldr	r3, [pc, #100]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4916      	ldr	r1, [pc, #88]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d2:	4b12      	ldr	r3, [pc, #72]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	490e      	ldr	r1, [pc, #56]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050e6:	f000 f821 	bl	800512c <HAL_RCC_GetSysClockFreq>
 80050ea:	4602      	mov	r2, r0
 80050ec:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	490a      	ldr	r1, [pc, #40]	@ (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 80050f8:	5ccb      	ldrb	r3, [r1, r3]
 80050fa:	fa22 f303 	lsr.w	r3, r2, r3
 80050fe:	4a09      	ldr	r2, [pc, #36]	@ (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005102:	4b09      	ldr	r3, [pc, #36]	@ (8005128 <HAL_RCC_ClockConfig+0x1c8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fc f9b4 	bl	8001474 <HAL_InitTick>

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023c00 	.word	0x40023c00
 800511c:	40023800 	.word	0x40023800
 8005120:	0800e234 	.word	0x0800e234
 8005124:	20000000 	.word	0x20000000
 8005128:	20000004 	.word	0x20000004

0800512c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800512c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005130:	b094      	sub	sp, #80	@ 0x50
 8005132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005144:	4b79      	ldr	r3, [pc, #484]	@ (800532c <HAL_RCC_GetSysClockFreq+0x200>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 030c 	and.w	r3, r3, #12
 800514c:	2b08      	cmp	r3, #8
 800514e:	d00d      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x40>
 8005150:	2b08      	cmp	r3, #8
 8005152:	f200 80e1 	bhi.w	8005318 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_RCC_GetSysClockFreq+0x34>
 800515a:	2b04      	cmp	r3, #4
 800515c:	d003      	beq.n	8005166 <HAL_RCC_GetSysClockFreq+0x3a>
 800515e:	e0db      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005160:	4b73      	ldr	r3, [pc, #460]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x204>)
 8005162:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005164:	e0db      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005166:	4b73      	ldr	r3, [pc, #460]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x208>)
 8005168:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800516a:	e0d8      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800516c:	4b6f      	ldr	r3, [pc, #444]	@ (800532c <HAL_RCC_GetSysClockFreq+0x200>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005174:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005176:	4b6d      	ldr	r3, [pc, #436]	@ (800532c <HAL_RCC_GetSysClockFreq+0x200>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d063      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005182:	4b6a      	ldr	r3, [pc, #424]	@ (800532c <HAL_RCC_GetSysClockFreq+0x200>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	099b      	lsrs	r3, r3, #6
 8005188:	2200      	movs	r2, #0
 800518a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800518c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800518e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005194:	633b      	str	r3, [r7, #48]	@ 0x30
 8005196:	2300      	movs	r3, #0
 8005198:	637b      	str	r3, [r7, #52]	@ 0x34
 800519a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800519e:	4622      	mov	r2, r4
 80051a0:	462b      	mov	r3, r5
 80051a2:	f04f 0000 	mov.w	r0, #0
 80051a6:	f04f 0100 	mov.w	r1, #0
 80051aa:	0159      	lsls	r1, r3, #5
 80051ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051b0:	0150      	lsls	r0, r2, #5
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4621      	mov	r1, r4
 80051b8:	1a51      	subs	r1, r2, r1
 80051ba:	6139      	str	r1, [r7, #16]
 80051bc:	4629      	mov	r1, r5
 80051be:	eb63 0301 	sbc.w	r3, r3, r1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051d0:	4659      	mov	r1, fp
 80051d2:	018b      	lsls	r3, r1, #6
 80051d4:	4651      	mov	r1, sl
 80051d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051da:	4651      	mov	r1, sl
 80051dc:	018a      	lsls	r2, r1, #6
 80051de:	4651      	mov	r1, sl
 80051e0:	ebb2 0801 	subs.w	r8, r2, r1
 80051e4:	4659      	mov	r1, fp
 80051e6:	eb63 0901 	sbc.w	r9, r3, r1
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051fe:	4690      	mov	r8, r2
 8005200:	4699      	mov	r9, r3
 8005202:	4623      	mov	r3, r4
 8005204:	eb18 0303 	adds.w	r3, r8, r3
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	462b      	mov	r3, r5
 800520c:	eb49 0303 	adc.w	r3, r9, r3
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800521e:	4629      	mov	r1, r5
 8005220:	024b      	lsls	r3, r1, #9
 8005222:	4621      	mov	r1, r4
 8005224:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005228:	4621      	mov	r1, r4
 800522a:	024a      	lsls	r2, r1, #9
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005232:	2200      	movs	r2, #0
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800523c:	f7fa ffd8 	bl	80001f0 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4613      	mov	r3, r2
 8005246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005248:	e058      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800524a:	4b38      	ldr	r3, [pc, #224]	@ (800532c <HAL_RCC_GetSysClockFreq+0x200>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	2200      	movs	r2, #0
 8005252:	4618      	mov	r0, r3
 8005254:	4611      	mov	r1, r2
 8005256:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800525a:	623b      	str	r3, [r7, #32]
 800525c:	2300      	movs	r3, #0
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005260:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	f04f 0000 	mov.w	r0, #0
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	0159      	lsls	r1, r3, #5
 8005272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005276:	0150      	lsls	r0, r2, #5
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4641      	mov	r1, r8
 800527e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005282:	4649      	mov	r1, r9
 8005284:	eb63 0b01 	sbc.w	fp, r3, r1
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005294:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005298:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800529c:	ebb2 040a 	subs.w	r4, r2, sl
 80052a0:	eb63 050b 	sbc.w	r5, r3, fp
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	00eb      	lsls	r3, r5, #3
 80052ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052b2:	00e2      	lsls	r2, r4, #3
 80052b4:	4614      	mov	r4, r2
 80052b6:	461d      	mov	r5, r3
 80052b8:	4643      	mov	r3, r8
 80052ba:	18e3      	adds	r3, r4, r3
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	464b      	mov	r3, r9
 80052c0:	eb45 0303 	adc.w	r3, r5, r3
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052d2:	4629      	mov	r1, r5
 80052d4:	028b      	lsls	r3, r1, #10
 80052d6:	4621      	mov	r1, r4
 80052d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052dc:	4621      	mov	r1, r4
 80052de:	028a      	lsls	r2, r1, #10
 80052e0:	4610      	mov	r0, r2
 80052e2:	4619      	mov	r1, r3
 80052e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e6:	2200      	movs	r2, #0
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	61fa      	str	r2, [r7, #28]
 80052ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f0:	f7fa ff7e 	bl	80001f0 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4613      	mov	r3, r2
 80052fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052fc:	4b0b      	ldr	r3, [pc, #44]	@ (800532c <HAL_RCC_GetSysClockFreq+0x200>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	3301      	adds	r3, #1
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800530c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800530e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005316:	e002      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005318:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x204>)
 800531a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800531c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800531e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005320:	4618      	mov	r0, r3
 8005322:	3750      	adds	r7, #80	@ 0x50
 8005324:	46bd      	mov	sp, r7
 8005326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800
 8005330:	00f42400 	.word	0x00f42400
 8005334:	007a1200 	.word	0x007a1200

08005338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800533c:	4b03      	ldr	r3, [pc, #12]	@ (800534c <HAL_RCC_GetHCLKFreq+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000000 	.word	0x20000000

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005354:	f7ff fff0 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0a9b      	lsrs	r3, r3, #10
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4903      	ldr	r1, [pc, #12]	@ (8005374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40023800 	.word	0x40023800
 8005374:	0800e244 	.word	0x0800e244

08005378 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	220f      	movs	r2, #15
 8005386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005388:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0203 	and.w	r2, r3, #3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005394:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053a0:	4b0c      	ldr	r3, [pc, #48]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053ac:	4b09      	ldr	r3, [pc, #36]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053ba:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <HAL_RCC_GetClockConfig+0x60>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0207 	and.w	r2, r3, #7
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40023c00 	.word	0x40023c00

080053dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005400:	2b00      	cmp	r3, #0
 8005402:	d038      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005404:	4b68      	ldr	r3, [pc, #416]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800540a:	f7fc f951 	bl	80016b0 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005412:	f7fc f94d 	bl	80016b0 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0bd      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005424:	4b61      	ldr	r3, [pc, #388]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f0      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	071b      	lsls	r3, r3, #28
 8005442:	495a      	ldr	r1, [pc, #360]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800544a:	4b57      	ldr	r3, [pc, #348]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005450:	f7fc f92e 	bl	80016b0 <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005458:	f7fc f92a 	bl	80016b0 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e09a      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800546a:	4b50      	ldr	r3, [pc, #320]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8083 	beq.w	800558a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	4b48      	ldr	r3, [pc, #288]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	4a47      	ldr	r2, [pc, #284]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005492:	6413      	str	r3, [r2, #64]	@ 0x40
 8005494:	4b45      	ldr	r3, [pc, #276]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054a0:	4b43      	ldr	r3, [pc, #268]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a42      	ldr	r2, [pc, #264]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054aa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ac:	f7fc f900 	bl	80016b0 <HAL_GetTick>
 80054b0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b4:	f7fc f8fc 	bl	80016b0 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e06c      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054c6:	4b3a      	ldr	r3, [pc, #232]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d2:	4b36      	ldr	r3, [pc, #216]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054da:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02f      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d028      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f0:	4b2e      	ldr	r3, [pc, #184]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fa:	4b2e      	ldr	r3, [pc, #184]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005500:	4b2c      	ldr	r3, [pc, #176]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005506:	4a29      	ldr	r2, [pc, #164]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800550c:	4b27      	ldr	r3, [pc, #156]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d114      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005518:	f7fc f8ca 	bl	80016b0 <HAL_GetTick>
 800551c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fc f8c6 	bl	80016b0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e034      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	4b1d      	ldr	r3, [pc, #116]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ee      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800554e:	d10d      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005550:	4b16      	ldr	r3, [pc, #88]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005564:	4911      	ldr	r1, [pc, #68]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
 800556a:	e005      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800556c:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a0e      	ldr	r2, [pc, #56]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005572:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005576:	6093      	str	r3, [r2, #8]
 8005578:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005584:	4909      	ldr	r1, [pc, #36]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005586:	4313      	orrs	r3, r2
 8005588:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7d1a      	ldrb	r2, [r3, #20]
 800559a:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800559c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	42470068 	.word	0x42470068
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40007000 	.word	0x40007000
 80055b4:	42470e40 	.word	0x42470e40
 80055b8:	424711e0 	.word	0x424711e0

080055bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d141      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80055da:	4b25      	ldr	r3, [pc, #148]	@ (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d006      	beq.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055f0:	d131      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055f2:	4b20      	ldr	r3, [pc, #128]	@ (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80055f4:	617b      	str	r3, [r7, #20]
          break;
 80055f6:	e031      	b.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005604:	d109      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005606:	4b1a      	ldr	r3, [pc, #104]	@ (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800560c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005610:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005612:	fbb2 f3f3 	udiv	r3, r2, r3
 8005616:	613b      	str	r3, [r7, #16]
 8005618:	e008      	b.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800561a:	4b15      	ldr	r3, [pc, #84]	@ (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800561c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005624:	4a15      	ldr	r2, [pc, #84]	@ (800567c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800562c:	4b10      	ldr	r3, [pc, #64]	@ (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800562e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005632:	099b      	lsrs	r3, r3, #6
 8005634:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	fb02 f303 	mul.w	r3, r2, r3
 800563e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005646:	0f1b      	lsrs	r3, r3, #28
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	617b      	str	r3, [r7, #20]
          break;
 8005654:	e002      	b.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
          break;
 800565a:	bf00      	nop
        }
      }
      break;
 800565c:	e000      	b.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800565e:	bf00      	nop
    }
  }
  return frequency;
 8005660:	697b      	ldr	r3, [r7, #20]
}
 8005662:	4618      	mov	r0, r3
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800
 8005674:	00bb8000 	.word	0x00bb8000
 8005678:	007a1200 	.word	0x007a1200
 800567c:	00f42400 	.word	0x00f42400

08005680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e07b      	b.n	800578a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056a2:	d009      	beq.n	80056b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	61da      	str	r2, [r3, #28]
 80056aa:	e005      	b.n	80056b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb fe2a 	bl	800132c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573c:	ea42 0103 	orr.w	r1, r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	f003 0104 	and.w	r1, r3, #4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	f003 0210 	and.w	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b088      	sub	sp, #32
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057a2:	f7fb ff85 	bl	80016b0 <HAL_GetTick>
 80057a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d001      	beq.n	80057bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
 80057ba:	e12a      	b.n	8005a12 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_Transmit+0x36>
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e122      	b.n	8005a12 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_SPI_Transmit+0x48>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e11b      	b.n	8005a12 <HAL_SPI_Transmit+0x280>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2203      	movs	r2, #3
 80057e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005828:	d10f      	bne.n	800584a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005838:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005848:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d007      	beq.n	8005868 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005866:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005870:	d152      	bne.n	8005918 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_Transmit+0xee>
 800587a:	8b7b      	ldrh	r3, [r7, #26]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d145      	bne.n	800590c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	1c9a      	adds	r2, r3, #2
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058a4:	e032      	b.n	800590c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d112      	bne.n	80058da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b8:	881a      	ldrh	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c4:	1c9a      	adds	r2, r3, #2
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058d8:	e018      	b.n	800590c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058da:	f7fb fee9 	bl	80016b0 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d803      	bhi.n	80058f2 <HAL_SPI_Transmit+0x160>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d102      	bne.n	80058f8 <HAL_SPI_Transmit+0x166>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e082      	b.n	8005a12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1c7      	bne.n	80058a6 <HAL_SPI_Transmit+0x114>
 8005916:	e053      	b.n	80059c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Transmit+0x194>
 8005920:	8b7b      	ldrh	r3, [r7, #26]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d147      	bne.n	80059b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800594c:	e033      	b.n	80059b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b02      	cmp	r3, #2
 800595a:	d113      	bne.n	8005984 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	7812      	ldrb	r2, [r2, #0]
 8005968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005982:	e018      	b.n	80059b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005984:	f7fb fe94 	bl	80016b0 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d803      	bhi.n	800599c <HAL_SPI_Transmit+0x20a>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_Transmit+0x210>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e02d      	b.n	8005a12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1c6      	bne.n	800594e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 fbd9 	bl	800617c <SPI_EndRxTxTransaction>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005a10:	2300      	movs	r3, #0
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b088      	sub	sp, #32
 8005a1e:	af02      	add	r7, sp, #8
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d001      	beq.n	8005a3a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005a36:	2302      	movs	r3, #2
 8005a38:	e104      	b.n	8005c44 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a42:	d112      	bne.n	8005a6a <HAL_SPI_Receive+0x50>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10e      	bne.n	8005a6a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f8f3 	bl	8005c4c <HAL_SPI_TransmitReceive>
 8005a66:	4603      	mov	r3, r0
 8005a68:	e0ec      	b.n	8005c44 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6a:	f7fb fe21 	bl	80016b0 <HAL_GetTick>
 8005a6e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_SPI_Receive+0x62>
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0e1      	b.n	8005c44 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_SPI_Receive+0x74>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e0da      	b.n	8005c44 <HAL_SPI_Receive+0x22a>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	88fa      	ldrh	r2, [r7, #6]
 8005aae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005adc:	d10f      	bne.n	8005afe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005afc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b08:	2b40      	cmp	r3, #64	@ 0x40
 8005b0a:	d007      	beq.n	8005b1c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d170      	bne.n	8005c06 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b24:	e035      	b.n	8005b92 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d115      	bne.n	8005b60 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f103 020c 	add.w	r2, r3, #12
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b5e:	e018      	b.n	8005b92 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b60:	f7fb fda6 	bl	80016b0 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d803      	bhi.n	8005b78 <HAL_SPI_Receive+0x15e>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d102      	bne.n	8005b7e <HAL_SPI_Receive+0x164>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e058      	b.n	8005c44 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1c4      	bne.n	8005b26 <HAL_SPI_Receive+0x10c>
 8005b9c:	e038      	b.n	8005c10 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d113      	bne.n	8005bd4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb6:	b292      	uxth	r2, r2
 8005bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	1c9a      	adds	r2, r3, #2
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bd2:	e018      	b.n	8005c06 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd4:	f7fb fd6c 	bl	80016b0 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d803      	bhi.n	8005bec <HAL_SPI_Receive+0x1d2>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d102      	bne.n	8005bf2 <HAL_SPI_Receive+0x1d8>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e01e      	b.n	8005c44 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1c6      	bne.n	8005b9e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fa4b 	bl	80060b0 <SPI_EndRxTransaction>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
  }
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	@ 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c5e:	f7fb fd27 	bl	80016b0 <HAL_GetTick>
 8005c62:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c6a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c76:	7ffb      	ldrb	r3, [r7, #31]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d00c      	beq.n	8005c96 <HAL_SPI_TransmitReceive+0x4a>
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c82:	d106      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x46>
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d001      	beq.n	8005c96 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
 8005c94:	e17f      	b.n	8005f96 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x5c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x5c>
 8005ca2:	887b      	ldrh	r3, [r7, #2]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e174      	b.n	8005f96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x6e>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e16d      	b.n	8005f96 <HAL_SPI_TransmitReceive+0x34a>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d003      	beq.n	8005cd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2205      	movs	r2, #5
 8005cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	887a      	ldrh	r2, [r7, #2]
 8005ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	887a      	ldrh	r2, [r7, #2]
 8005cec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	887a      	ldrh	r2, [r7, #2]
 8005cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	887a      	ldrh	r2, [r7, #2]
 8005cfe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d16:	2b40      	cmp	r3, #64	@ 0x40
 8005d18:	d007      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d32:	d17e      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_TransmitReceive+0xf6>
 8005d3c:	8afb      	ldrh	r3, [r7, #22]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d16c      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d46:	881a      	ldrh	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d52:	1c9a      	adds	r2, r3, #2
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d66:	e059      	b.n	8005e1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d11b      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x162>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d016      	beq.n	8005dae <HAL_SPI_TransmitReceive+0x162>
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d113      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	881a      	ldrh	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	1c9a      	adds	r2, r3, #2
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d119      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x1a4>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d014      	beq.n	8005df0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	b292      	uxth	r2, r2
 8005dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	1c9a      	adds	r2, r3, #2
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dec:	2301      	movs	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005df0:	f7fb fc5e 	bl	80016b0 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d80d      	bhi.n	8005e1c <HAL_SPI_TransmitReceive+0x1d0>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	d009      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e0bc      	b.n	8005f96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1a0      	bne.n	8005d68 <HAL_SPI_TransmitReceive+0x11c>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d19b      	bne.n	8005d68 <HAL_SPI_TransmitReceive+0x11c>
 8005e30:	e082      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_SPI_TransmitReceive+0x1f4>
 8005e3a:	8afb      	ldrh	r3, [r7, #22]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d171      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	330c      	adds	r3, #12
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e66:	e05d      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d11c      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x264>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d017      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x264>
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d114      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d119      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x2a6>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d014      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ef2:	f7fb fbdd 	bl	80016b0 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d803      	bhi.n	8005f0a <HAL_SPI_TransmitReceive+0x2be>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d102      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x2c4>
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e038      	b.n	8005f96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d19c      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x21c>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d197      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f38:	6a3a      	ldr	r2, [r7, #32]
 8005f3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f91d 	bl	800617c <SPI_EndRxTxTransaction>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01d      	b.n	8005f96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3728      	adds	r7, #40	@ 0x28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fb0:	f7fb fb7e 	bl	80016b0 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fc0:	f7fb fb76 	bl	80016b0 <HAL_GetTick>
 8005fc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fc6:	4b39      	ldr	r3, [pc, #228]	@ (80060ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	015b      	lsls	r3, r3, #5
 8005fcc:	0d1b      	lsrs	r3, r3, #20
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd6:	e054      	b.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d050      	beq.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fe0:	f7fb fb66 	bl	80016b0 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d902      	bls.n	8005ff6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d13d      	bne.n	8006072 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800600e:	d111      	bne.n	8006034 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006018:	d004      	beq.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006022:	d107      	bne.n	8006034 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800603c:	d10f      	bne.n	800605e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800605c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e017      	b.n	80060a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	3b01      	subs	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	bf0c      	ite	eq
 8006092:	2301      	moveq	r3, #1
 8006094:	2300      	movne	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	429a      	cmp	r2, r3
 800609e:	d19b      	bne.n	8005fd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000000 	.word	0x20000000

080060b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060c4:	d111      	bne.n	80060ea <SPI_EndRxTransaction+0x3a>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ce:	d004      	beq.n	80060da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d8:	d107      	bne.n	80060ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f2:	d12a      	bne.n	800614a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fc:	d012      	beq.n	8006124 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	2180      	movs	r1, #128	@ 0x80
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ff49 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d02d      	beq.n	8006170 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006118:	f043 0220 	orr.w	r2, r3, #32
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e026      	b.n	8006172 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	2101      	movs	r1, #1
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff ff36 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01a      	beq.n	8006170 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613e:	f043 0220 	orr.w	r2, r3, #32
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e013      	b.n	8006172 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2200      	movs	r2, #0
 8006152:	2101      	movs	r1, #1
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff ff23 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e000      	b.n	8006172 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2201      	movs	r2, #1
 8006190:	2102      	movs	r1, #2
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff ff04 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a2:	f043 0220 	orr.w	r2, r3, #32
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e032      	b.n	8006214 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061ae:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <SPI_EndRxTxTransaction+0xa0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006220 <SPI_EndRxTxTransaction+0xa4>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	0d5b      	lsrs	r3, r3, #21
 80061ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061cc:	d112      	bne.n	80061f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	2180      	movs	r1, #128	@ 0x80
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fee1 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d016      	beq.n	8006212 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e8:	f043 0220 	orr.w	r2, r3, #32
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e00f      	b.n	8006214 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620a:	2b80      	cmp	r3, #128	@ 0x80
 800620c:	d0f2      	beq.n	80061f4 <SPI_EndRxTxTransaction+0x78>
 800620e:	e000      	b.n	8006212 <SPI_EndRxTxTransaction+0x96>
        break;
 8006210:	bf00      	nop
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000000 	.word	0x20000000
 8006220:	165e9f81 	.word	0x165e9f81

08006224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e041      	b.n	80062ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fb f8b6 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f000 fc96 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d001      	beq.n	80062dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e03c      	b.n	8006356 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006364 <HAL_TIM_Base_Start+0xa0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f6:	d013      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006368 <HAL_TIM_Base_Start+0xa4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a19      	ldr	r2, [pc, #100]	@ (800636c <HAL_TIM_Base_Start+0xa8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a17      	ldr	r2, [pc, #92]	@ (8006370 <HAL_TIM_Base_Start+0xac>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a16      	ldr	r2, [pc, #88]	@ (8006374 <HAL_TIM_Base_Start+0xb0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d111      	bne.n	8006344 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b06      	cmp	r3, #6
 8006330:	d010      	beq.n	8006354 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e007      	b.n	8006354 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40010000 	.word	0x40010000
 8006368:	40000400 	.word	0x40000400
 800636c:	40000800 	.word	0x40000800
 8006370:	40000c00 	.word	0x40000c00
 8006374:	40014000 	.word	0x40014000

08006378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	d001      	beq.n	8006390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e044      	b.n	800641a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006428 <HAL_TIM_Base_Start_IT+0xb0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d018      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x6c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	d013      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x6c>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1a      	ldr	r2, [pc, #104]	@ (800642c <HAL_TIM_Base_Start_IT+0xb4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00e      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x6c>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a19      	ldr	r2, [pc, #100]	@ (8006430 <HAL_TIM_Base_Start_IT+0xb8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d009      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x6c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a17      	ldr	r2, [pc, #92]	@ (8006434 <HAL_TIM_Base_Start_IT+0xbc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x6c>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a16      	ldr	r2, [pc, #88]	@ (8006438 <HAL_TIM_Base_Start_IT+0xc0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d111      	bne.n	8006408 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b06      	cmp	r3, #6
 80063f4:	d010      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0201 	orr.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006406:	e007      	b.n	8006418 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40010000 	.word	0x40010000
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	40000c00 	.word	0x40000c00
 8006438:	40014000 	.word	0x40014000

0800643c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e041      	b.n	80064d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f839 	bl	80064da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3304      	adds	r3, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f000 fb8a 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d109      	bne.n	8006514 <HAL_TIM_PWM_Start+0x24>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	bf14      	ite	ne
 800650c:	2301      	movne	r3, #1
 800650e:	2300      	moveq	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e022      	b.n	800655a <HAL_TIM_PWM_Start+0x6a>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b04      	cmp	r3, #4
 8006518:	d109      	bne.n	800652e <HAL_TIM_PWM_Start+0x3e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b01      	cmp	r3, #1
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e015      	b.n	800655a <HAL_TIM_PWM_Start+0x6a>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b08      	cmp	r3, #8
 8006532:	d109      	bne.n	8006548 <HAL_TIM_PWM_Start+0x58>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e008      	b.n	800655a <HAL_TIM_PWM_Start+0x6a>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e068      	b.n	8006634 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <HAL_TIM_PWM_Start+0x82>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006570:	e013      	b.n	800659a <HAL_TIM_PWM_Start+0xaa>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b04      	cmp	r3, #4
 8006576:	d104      	bne.n	8006582 <HAL_TIM_PWM_Start+0x92>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006580:	e00b      	b.n	800659a <HAL_TIM_PWM_Start+0xaa>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d104      	bne.n	8006592 <HAL_TIM_PWM_Start+0xa2>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006590:	e003      	b.n	800659a <HAL_TIM_PWM_Start+0xaa>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2201      	movs	r2, #1
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fda8 	bl	80070f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a23      	ldr	r2, [pc, #140]	@ (800663c <HAL_TIM_PWM_Start+0x14c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1d      	ldr	r2, [pc, #116]	@ (800663c <HAL_TIM_PWM_Start+0x14c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d018      	beq.n	80065fe <HAL_TIM_PWM_Start+0x10e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d4:	d013      	beq.n	80065fe <HAL_TIM_PWM_Start+0x10e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a19      	ldr	r2, [pc, #100]	@ (8006640 <HAL_TIM_PWM_Start+0x150>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00e      	beq.n	80065fe <HAL_TIM_PWM_Start+0x10e>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a17      	ldr	r2, [pc, #92]	@ (8006644 <HAL_TIM_PWM_Start+0x154>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_TIM_PWM_Start+0x10e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a16      	ldr	r2, [pc, #88]	@ (8006648 <HAL_TIM_PWM_Start+0x158>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_TIM_PWM_Start+0x10e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a14      	ldr	r2, [pc, #80]	@ (800664c <HAL_TIM_PWM_Start+0x15c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d111      	bne.n	8006622 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b06      	cmp	r3, #6
 800660e:	d010      	beq.n	8006632 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006620:	e007      	b.n	8006632 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0201 	orr.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40010000 	.word	0x40010000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40014000 	.word	0x40014000

08006650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d020      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0202 	mvn.w	r2, #2
 8006684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa5b 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa4d 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fa5e 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d020      	beq.n	8006700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0204 	mvn.w	r2, #4
 80066d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa35 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa27 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fa38 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d020      	beq.n	800674c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01b      	beq.n	800674c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0208 	mvn.w	r2, #8
 800671c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2204      	movs	r2, #4
 8006722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa0f 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 8006738:	e005      	b.n	8006746 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa01 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fa12 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	2b00      	cmp	r3, #0
 8006754:	d020      	beq.n	8006798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01b      	beq.n	8006798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0210 	mvn.w	r2, #16
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2208      	movs	r2, #8
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f9e9 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f9db 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f9ec 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0201 	mvn.w	r2, #1
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fa fc62 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fd2a 	bl	8007234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9bd 	bl	8006b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0220 	mvn.w	r2, #32
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fcfc 	bl	8007220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800684a:	2302      	movs	r3, #2
 800684c:	e0ae      	b.n	80069ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b0c      	cmp	r3, #12
 800685a:	f200 809f 	bhi.w	800699c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800685e:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	08006899 	.word	0x08006899
 8006868:	0800699d 	.word	0x0800699d
 800686c:	0800699d 	.word	0x0800699d
 8006870:	0800699d 	.word	0x0800699d
 8006874:	080068d9 	.word	0x080068d9
 8006878:	0800699d 	.word	0x0800699d
 800687c:	0800699d 	.word	0x0800699d
 8006880:	0800699d 	.word	0x0800699d
 8006884:	0800691b 	.word	0x0800691b
 8006888:	0800699d 	.word	0x0800699d
 800688c:	0800699d 	.word	0x0800699d
 8006890:	0800699d 	.word	0x0800699d
 8006894:	0800695b 	.word	0x0800695b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fa04 	bl	8006cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0208 	orr.w	r2, r2, #8
 80068b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0204 	bic.w	r2, r2, #4
 80068c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6999      	ldr	r1, [r3, #24]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	619a      	str	r2, [r3, #24]
      break;
 80068d6:	e064      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fa4a 	bl	8006d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6999      	ldr	r1, [r3, #24]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	021a      	lsls	r2, r3, #8
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	619a      	str	r2, [r3, #24]
      break;
 8006918:	e043      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fa95 	bl	8006e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0208 	orr.w	r2, r2, #8
 8006934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69da      	ldr	r2, [r3, #28]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0204 	bic.w	r2, r2, #4
 8006944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69d9      	ldr	r1, [r3, #28]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	61da      	str	r2, [r3, #28]
      break;
 8006958:	e023      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fadf 	bl	8006f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69d9      	ldr	r1, [r3, #28]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	021a      	lsls	r2, r3, #8
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	61da      	str	r2, [r3, #28]
      break;
 800699a:	e002      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
      break;
 80069a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_TIM_ConfigClockSource+0x1c>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e0b4      	b.n	8006b3a <HAL_TIM_ConfigClockSource+0x186>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a08:	d03e      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0xd4>
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a0e:	f200 8087 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a16:	f000 8086 	beq.w	8006b26 <HAL_TIM_ConfigClockSource+0x172>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a1e:	d87f      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a20:	2b70      	cmp	r3, #112	@ 0x70
 8006a22:	d01a      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0xa6>
 8006a24:	2b70      	cmp	r3, #112	@ 0x70
 8006a26:	d87b      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a28:	2b60      	cmp	r3, #96	@ 0x60
 8006a2a:	d050      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x11a>
 8006a2c:	2b60      	cmp	r3, #96	@ 0x60
 8006a2e:	d877      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a30:	2b50      	cmp	r3, #80	@ 0x50
 8006a32:	d03c      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0xfa>
 8006a34:	2b50      	cmp	r3, #80	@ 0x50
 8006a36:	d873      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a38:	2b40      	cmp	r3, #64	@ 0x40
 8006a3a:	d058      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x13a>
 8006a3c:	2b40      	cmp	r3, #64	@ 0x40
 8006a3e:	d86f      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a40:	2b30      	cmp	r3, #48	@ 0x30
 8006a42:	d064      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x15a>
 8006a44:	2b30      	cmp	r3, #48	@ 0x30
 8006a46:	d86b      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d060      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x15a>
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d867      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05c      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x15a>
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d05a      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x15a>
 8006a58:	e062      	b.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a6a:	f000 fb25 	bl	80070b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	609a      	str	r2, [r3, #8]
      break;
 8006a86:	e04f      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a98:	f000 fb0e 	bl	80070b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006aaa:	609a      	str	r2, [r3, #8]
      break;
 8006aac:	e03c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	461a      	mov	r2, r3
 8006abc:	f000 fa82 	bl	8006fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2150      	movs	r1, #80	@ 0x50
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fadb 	bl	8007082 <TIM_ITRx_SetConfig>
      break;
 8006acc:	e02c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ada:	461a      	mov	r2, r3
 8006adc:	f000 faa1 	bl	8007022 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2160      	movs	r1, #96	@ 0x60
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 facb 	bl	8007082 <TIM_ITRx_SetConfig>
      break;
 8006aec:	e01c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	461a      	mov	r2, r3
 8006afc:	f000 fa62 	bl	8006fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2140      	movs	r1, #64	@ 0x40
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fabb 	bl	8007082 <TIM_ITRx_SetConfig>
      break;
 8006b0c:	e00c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fab2 	bl	8007082 <TIM_ITRx_SetConfig>
      break;
 8006b1e:	e003      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]
      break;
 8006b24:	e000      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3a      	ldr	r2, [pc, #232]	@ (8006c90 <TIM_Base_SetConfig+0xfc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00f      	beq.n	8006bcc <TIM_Base_SetConfig+0x38>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb2:	d00b      	beq.n	8006bcc <TIM_Base_SetConfig+0x38>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a37      	ldr	r2, [pc, #220]	@ (8006c94 <TIM_Base_SetConfig+0x100>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d007      	beq.n	8006bcc <TIM_Base_SetConfig+0x38>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a36      	ldr	r2, [pc, #216]	@ (8006c98 <TIM_Base_SetConfig+0x104>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_Base_SetConfig+0x38>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a35      	ldr	r2, [pc, #212]	@ (8006c9c <TIM_Base_SetConfig+0x108>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d108      	bne.n	8006bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c90 <TIM_Base_SetConfig+0xfc>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01b      	beq.n	8006c1e <TIM_Base_SetConfig+0x8a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bec:	d017      	beq.n	8006c1e <TIM_Base_SetConfig+0x8a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a28      	ldr	r2, [pc, #160]	@ (8006c94 <TIM_Base_SetConfig+0x100>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <TIM_Base_SetConfig+0x8a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a27      	ldr	r2, [pc, #156]	@ (8006c98 <TIM_Base_SetConfig+0x104>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00f      	beq.n	8006c1e <TIM_Base_SetConfig+0x8a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a26      	ldr	r2, [pc, #152]	@ (8006c9c <TIM_Base_SetConfig+0x108>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00b      	beq.n	8006c1e <TIM_Base_SetConfig+0x8a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a25      	ldr	r2, [pc, #148]	@ (8006ca0 <TIM_Base_SetConfig+0x10c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d007      	beq.n	8006c1e <TIM_Base_SetConfig+0x8a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a24      	ldr	r2, [pc, #144]	@ (8006ca4 <TIM_Base_SetConfig+0x110>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d003      	beq.n	8006c1e <TIM_Base_SetConfig+0x8a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a23      	ldr	r2, [pc, #140]	@ (8006ca8 <TIM_Base_SetConfig+0x114>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d108      	bne.n	8006c30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a0e      	ldr	r2, [pc, #56]	@ (8006c90 <TIM_Base_SetConfig+0xfc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d103      	bne.n	8006c64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d105      	bne.n	8006c82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f023 0201 	bic.w	r2, r3, #1
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	611a      	str	r2, [r3, #16]
  }
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800

08006cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f023 0201 	bic.w	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f023 0302 	bic.w	r3, r3, #2
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1c      	ldr	r2, [pc, #112]	@ (8006d74 <TIM_OC1_SetConfig+0xc8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10c      	bne.n	8006d22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0308 	bic.w	r3, r3, #8
 8006d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 0304 	bic.w	r3, r3, #4
 8006d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a13      	ldr	r2, [pc, #76]	@ (8006d74 <TIM_OC1_SetConfig+0xc8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d111      	bne.n	8006d4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	621a      	str	r2, [r3, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40010000 	.word	0x40010000

08006d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f023 0210 	bic.w	r2, r3, #16
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	021b      	lsls	r3, r3, #8
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f023 0320 	bic.w	r3, r3, #32
 8006dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e4c <TIM_OC2_SetConfig+0xd4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d10d      	bne.n	8006df4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006df2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a15      	ldr	r2, [pc, #84]	@ (8006e4c <TIM_OC2_SetConfig+0xd4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d113      	bne.n	8006e24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000

08006e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f20 <TIM_OC3_SetConfig+0xd0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d10d      	bne.n	8006eca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a14      	ldr	r2, [pc, #80]	@ (8006f20 <TIM_OC3_SetConfig+0xd0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d113      	bne.n	8006efa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	621a      	str	r2, [r3, #32]
}
 8006f14:	bf00      	nop
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	40010000 	.word	0x40010000

08006f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a10      	ldr	r2, [pc, #64]	@ (8006fc0 <TIM_OC4_SetConfig+0x9c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d109      	bne.n	8006f98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	019b      	lsls	r3, r3, #6
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40010000 	.word	0x40010000

08006fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f023 0201 	bic.w	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 030a 	bic.w	r3, r3, #10
 8007000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007022:	b480      	push	{r7}
 8007024:	b087      	sub	sp, #28
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f023 0210 	bic.w	r2, r3, #16
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800704c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	031b      	lsls	r3, r3, #12
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800705e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	f043 0307 	orr.w	r3, r3, #7
 80070a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	609a      	str	r2, [r3, #8]
}
 80070ac:	bf00      	nop
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	021a      	lsls	r2, r3, #8
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	431a      	orrs	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4313      	orrs	r3, r2
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	609a      	str	r2, [r3, #8]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2201      	movs	r2, #1
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	43db      	mvns	r3, r3
 800711a:	401a      	ands	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1a      	ldr	r2, [r3, #32]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	fa01 f303 	lsl.w	r3, r1, r3
 8007130:	431a      	orrs	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
}
 8007136:	bf00      	nop
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
	...

08007144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007158:	2302      	movs	r3, #2
 800715a:	e050      	b.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1c      	ldr	r2, [pc, #112]	@ (800720c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d018      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a8:	d013      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a18      	ldr	r2, [pc, #96]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00e      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a16      	ldr	r2, [pc, #88]	@ (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d009      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a15      	ldr	r2, [pc, #84]	@ (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d004      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a13      	ldr	r2, [pc, #76]	@ (800721c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d10c      	bne.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40010000 	.word	0x40010000
 8007210:	40000400 	.word	0x40000400
 8007214:	40000800 	.word	0x40000800
 8007218:	40000c00 	.word	0x40000c00
 800721c:	40014000 	.word	0x40014000

08007220 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007248:	b084      	sub	sp, #16
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	f107 001c 	add.w	r0, r7, #28
 8007256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800725a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800725e:	2b01      	cmp	r3, #1
 8007260:	d123      	bne.n	80072aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007266:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800728a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800728e:	2b01      	cmp	r3, #1
 8007290:	d105      	bne.n	800729e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 fae8 	bl	8008874 <USB_CoreReset>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]
 80072a8:	e01b      	b.n	80072e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fadc 	bl	8008874 <USB_CoreReset>
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80072d4:	e005      	b.n	80072e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072e2:	7fbb      	ldrb	r3, [r7, #30]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d10b      	bne.n	8007300 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f043 0206 	orr.w	r2, r3, #6
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f043 0220 	orr.w	r2, r3, #32
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800730c:	b004      	add	sp, #16
 800730e:	4770      	bx	lr

08007310 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d165      	bne.n	80073f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4a41      	ldr	r2, [pc, #260]	@ (800742c <USB_SetTurnaroundTime+0x11c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d906      	bls.n	800733a <USB_SetTurnaroundTime+0x2a>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4a40      	ldr	r2, [pc, #256]	@ (8007430 <USB_SetTurnaroundTime+0x120>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d202      	bcs.n	800733a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007334:	230f      	movs	r3, #15
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e062      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4a3c      	ldr	r2, [pc, #240]	@ (8007430 <USB_SetTurnaroundTime+0x120>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d306      	bcc.n	8007350 <USB_SetTurnaroundTime+0x40>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4a3b      	ldr	r2, [pc, #236]	@ (8007434 <USB_SetTurnaroundTime+0x124>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d202      	bcs.n	8007350 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800734a:	230e      	movs	r3, #14
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e057      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4a38      	ldr	r2, [pc, #224]	@ (8007434 <USB_SetTurnaroundTime+0x124>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d306      	bcc.n	8007366 <USB_SetTurnaroundTime+0x56>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4a37      	ldr	r2, [pc, #220]	@ (8007438 <USB_SetTurnaroundTime+0x128>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d202      	bcs.n	8007366 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007360:	230d      	movs	r3, #13
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e04c      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4a33      	ldr	r2, [pc, #204]	@ (8007438 <USB_SetTurnaroundTime+0x128>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d306      	bcc.n	800737c <USB_SetTurnaroundTime+0x6c>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4a32      	ldr	r2, [pc, #200]	@ (800743c <USB_SetTurnaroundTime+0x12c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d802      	bhi.n	800737c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007376:	230c      	movs	r3, #12
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e041      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a2f      	ldr	r2, [pc, #188]	@ (800743c <USB_SetTurnaroundTime+0x12c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d906      	bls.n	8007392 <USB_SetTurnaroundTime+0x82>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a2e      	ldr	r2, [pc, #184]	@ (8007440 <USB_SetTurnaroundTime+0x130>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d802      	bhi.n	8007392 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800738c:	230b      	movs	r3, #11
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e036      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4a2a      	ldr	r2, [pc, #168]	@ (8007440 <USB_SetTurnaroundTime+0x130>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d906      	bls.n	80073a8 <USB_SetTurnaroundTime+0x98>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	4a29      	ldr	r2, [pc, #164]	@ (8007444 <USB_SetTurnaroundTime+0x134>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d802      	bhi.n	80073a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80073a2:	230a      	movs	r3, #10
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e02b      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4a26      	ldr	r2, [pc, #152]	@ (8007444 <USB_SetTurnaroundTime+0x134>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d906      	bls.n	80073be <USB_SetTurnaroundTime+0xae>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4a25      	ldr	r2, [pc, #148]	@ (8007448 <USB_SetTurnaroundTime+0x138>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d202      	bcs.n	80073be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80073b8:	2309      	movs	r3, #9
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e020      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4a21      	ldr	r2, [pc, #132]	@ (8007448 <USB_SetTurnaroundTime+0x138>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d306      	bcc.n	80073d4 <USB_SetTurnaroundTime+0xc4>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4a20      	ldr	r2, [pc, #128]	@ (800744c <USB_SetTurnaroundTime+0x13c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d802      	bhi.n	80073d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80073ce:	2308      	movs	r3, #8
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	e015      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4a1d      	ldr	r2, [pc, #116]	@ (800744c <USB_SetTurnaroundTime+0x13c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d906      	bls.n	80073ea <USB_SetTurnaroundTime+0xda>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4a1c      	ldr	r2, [pc, #112]	@ (8007450 <USB_SetTurnaroundTime+0x140>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d202      	bcs.n	80073ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80073e4:	2307      	movs	r3, #7
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e00a      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80073ea:	2306      	movs	r3, #6
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	e007      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d102      	bne.n	80073fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80073f6:	2309      	movs	r3, #9
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e001      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80073fc:	2309      	movs	r3, #9
 80073fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	029b      	lsls	r3, r3, #10
 8007414:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007418:	431a      	orrs	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	00d8acbf 	.word	0x00d8acbf
 8007430:	00e4e1c0 	.word	0x00e4e1c0
 8007434:	00f42400 	.word	0x00f42400
 8007438:	01067380 	.word	0x01067380
 800743c:	011a499f 	.word	0x011a499f
 8007440:	01312cff 	.word	0x01312cff
 8007444:	014ca43f 	.word	0x014ca43f
 8007448:	016e3600 	.word	0x016e3600
 800744c:	01a6ab1f 	.word	0x01a6ab1f
 8007450:	01e84800 	.word	0x01e84800

08007454 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f043 0201 	orr.w	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f023 0201 	bic.w	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d115      	bne.n	80074e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074c6:	200a      	movs	r0, #10
 80074c8:	f7fa f8fe 	bl	80016c8 <HAL_Delay>
      ms += 10U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	330a      	adds	r3, #10
 80074d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 f93f 	bl	8008756 <USB_GetMode>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d01e      	beq.n	800751c <USB_SetCurrentMode+0x84>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80074e2:	d9f0      	bls.n	80074c6 <USB_SetCurrentMode+0x2e>
 80074e4:	e01a      	b.n	800751c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d115      	bne.n	8007518 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074f8:	200a      	movs	r0, #10
 80074fa:	f7fa f8e5 	bl	80016c8 <HAL_Delay>
      ms += 10U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	330a      	adds	r3, #10
 8007502:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 f926 	bl	8008756 <USB_GetMode>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <USB_SetCurrentMode+0x84>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2bc7      	cmp	r3, #199	@ 0xc7
 8007514:	d9f0      	bls.n	80074f8 <USB_SetCurrentMode+0x60>
 8007516:	e001      	b.n	800751c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e005      	b.n	8007528 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007520:	d101      	bne.n	8007526 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007530:	b084      	sub	sp, #16
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800753e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	e009      	b.n	8007564 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	3340      	adds	r3, #64	@ 0x40
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	2200      	movs	r2, #0
 800755c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	3301      	adds	r3, #1
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	2b0e      	cmp	r3, #14
 8007568:	d9f2      	bls.n	8007550 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800756a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800756e:	2b00      	cmp	r3, #0
 8007570:	d11c      	bne.n	80075ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007580:	f043 0302 	orr.w	r3, r3, #2
 8007584:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007596:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80075aa:	e00b      	b.n	80075c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075ca:	461a      	mov	r2, r3
 80075cc:	2300      	movs	r3, #0
 80075ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10d      	bne.n	80075f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075e0:	2100      	movs	r1, #0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f968 	bl	80078b8 <USB_SetDevSpeed>
 80075e8:	e008      	b.n	80075fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075ea:	2101      	movs	r1, #1
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f963 	bl	80078b8 <USB_SetDevSpeed>
 80075f2:	e003      	b.n	80075fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075f4:	2103      	movs	r1, #3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f95e 	bl	80078b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075fc:	2110      	movs	r1, #16
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f8fa 	bl	80077f8 <USB_FlushTxFifo>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f924 	bl	800785c <USB_FlushRxFifo>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007624:	461a      	mov	r2, r3
 8007626:	2300      	movs	r3, #0
 8007628:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007630:	461a      	mov	r2, r3
 8007632:	2300      	movs	r3, #0
 8007634:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763c:	461a      	mov	r2, r3
 800763e:	2300      	movs	r3, #0
 8007640:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007642:	2300      	movs	r3, #0
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	e043      	b.n	80076d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800765a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800765e:	d118      	bne.n	8007692 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007672:	461a      	mov	r2, r3
 8007674:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e013      	b.n	80076a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007688:	461a      	mov	r2, r3
 800768a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	e008      	b.n	80076a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769e:	461a      	mov	r2, r3
 80076a0:	2300      	movs	r3, #0
 80076a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b0:	461a      	mov	r2, r3
 80076b2:	2300      	movs	r3, #0
 80076b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c2:	461a      	mov	r2, r3
 80076c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	3301      	adds	r3, #1
 80076ce:	613b      	str	r3, [r7, #16]
 80076d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076d4:	461a      	mov	r2, r3
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	4293      	cmp	r3, r2
 80076da:	d3b5      	bcc.n	8007648 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	e043      	b.n	800776a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076f8:	d118      	bne.n	800772c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770c:	461a      	mov	r2, r3
 800770e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	e013      	b.n	800773e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007722:	461a      	mov	r2, r3
 8007724:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	e008      	b.n	800773e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007738:	461a      	mov	r2, r3
 800773a:	2300      	movs	r3, #0
 800773c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774a:	461a      	mov	r2, r3
 800774c:	2300      	movs	r3, #0
 800774e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775c:	461a      	mov	r2, r3
 800775e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	3301      	adds	r3, #1
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800776e:	461a      	mov	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	4293      	cmp	r3, r2
 8007774:	d3b5      	bcc.n	80076e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007788:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007796:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007798:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	f043 0210 	orr.w	r2, r3, #16
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699a      	ldr	r2, [r3, #24]
 80077b0:	4b10      	ldr	r3, [pc, #64]	@ (80077f4 <USB_DevInit+0x2c4>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f043 0208 	orr.w	r2, r3, #8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d107      	bne.n	80077e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077dc:	f043 0304 	orr.w	r3, r3, #4
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077f0:	b004      	add	sp, #16
 80077f2:	4770      	bx	lr
 80077f4:	803c3800 	.word	0x803c3800

080077f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007812:	d901      	bls.n	8007818 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e01b      	b.n	8007850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	daf2      	bge.n	8007806 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	019b      	lsls	r3, r3, #6
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800783c:	d901      	bls.n	8007842 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e006      	b.n	8007850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b20      	cmp	r3, #32
 800784c:	d0f0      	beq.n	8007830 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3301      	adds	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007874:	d901      	bls.n	800787a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e018      	b.n	80078ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	daf2      	bge.n	8007868 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2210      	movs	r2, #16
 800788a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3301      	adds	r3, #1
 8007890:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007898:	d901      	bls.n	800789e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e006      	b.n	80078ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b10      	cmp	r3, #16
 80078a8:	d0f0      	beq.n	800788c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078d8:	4313      	orrs	r3, r2
 80078da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b087      	sub	sp, #28
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0306 	and.w	r3, r3, #6
 8007902:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800790a:	2300      	movs	r3, #0
 800790c:	75fb      	strb	r3, [r7, #23]
 800790e:	e00a      	b.n	8007926 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d002      	beq.n	800791c <USB_GetDevSpeed+0x32>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b06      	cmp	r3, #6
 800791a:	d102      	bne.n	8007922 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800791c:	2302      	movs	r3, #2
 800791e:	75fb      	strb	r3, [r7, #23]
 8007920:	e001      	b.n	8007926 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007922:	230f      	movs	r3, #15
 8007924:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
}
 8007928:	4618      	mov	r0, r3
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d13a      	bne.n	80079c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	2101      	movs	r1, #1
 8007962:	fa01 f303 	lsl.w	r3, r1, r3
 8007966:	b29b      	uxth	r3, r3
 8007968:	68f9      	ldr	r1, [r7, #12]
 800796a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800796e:	4313      	orrs	r3, r2
 8007970:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d155      	bne.n	8007a34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	059b      	lsls	r3, r3, #22
 80079aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079ac:	4313      	orrs	r3, r2
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	0151      	lsls	r1, r2, #5
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	440a      	add	r2, r1
 80079b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	e036      	b.n	8007a34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079cc:	69da      	ldr	r2, [r3, #28]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	2101      	movs	r1, #1
 80079d8:	fa01 f303 	lsl.w	r3, r1, r3
 80079dc:	041b      	lsls	r3, r3, #16
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079e4:	4313      	orrs	r3, r2
 80079e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d11a      	bne.n	8007a34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	791b      	ldrb	r3, [r3, #4]
 8007a18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d161      	bne.n	8007b24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a76:	d11f      	bne.n	8007ab8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	2101      	movs	r1, #1
 8007aca:	fa01 f303 	lsl.w	r3, r1, r3
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ad8:	4013      	ands	r3, r2
 8007ada:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	f003 030f 	and.w	r3, r3, #15
 8007aec:	2101      	movs	r1, #1
 8007aee:	fa01 f303 	lsl.w	r3, r1, r3
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	43db      	mvns	r3, r3
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007afc:	4013      	ands	r3, r2
 8007afe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	0159      	lsls	r1, r3, #5
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	440b      	add	r3, r1
 8007b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4b35      	ldr	r3, [pc, #212]	@ (8007bf4 <USB_DeactivateEndpoint+0x1b0>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	600b      	str	r3, [r1, #0]
 8007b22:	e060      	b.n	8007be6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b3a:	d11f      	bne.n	8007b7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 030f 	and.w	r3, r3, #15
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	43db      	mvns	r3, r3
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba6:	69da      	ldr	r2, [r3, #28]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	0159      	lsls	r1, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	440b      	add	r3, r1
 8007bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bde:	4619      	mov	r1, r3
 8007be0:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <USB_DeactivateEndpoint+0x1b4>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	ec337800 	.word	0xec337800
 8007bf8:	eff37800 	.word	0xeff37800

08007bfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	@ 0x28
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	4613      	mov	r3, r2
 8007c08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	f040 817f 	bne.w	8007f1c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d132      	bne.n	8007c8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c84:	0cdb      	lsrs	r3, r3, #19
 8007c86:	04db      	lsls	r3, r3, #19
 8007c88:	6113      	str	r3, [r2, #16]
 8007c8a:	e097      	b.n	8007dbc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	0151      	lsls	r1, r2, #5
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ca6:	0cdb      	lsrs	r3, r3, #19
 8007ca8:	04db      	lsls	r3, r3, #19
 8007caa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cc6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007cca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007cce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d11a      	bne.n	8007d0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d903      	bls.n	8007cea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	0151      	lsls	r1, r2, #5
 8007cfc:	69fa      	ldr	r2, [r7, #28]
 8007cfe:	440a      	add	r2, r1
 8007d00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d08:	6113      	str	r3, [r2, #16]
 8007d0a:	e044      	b.n	8007d96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	4413      	add	r3, r2
 8007d16:	1e5a      	subs	r2, r3, #1
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2e:	691a      	ldr	r2, [r3, #16]
 8007d30:	8afb      	ldrh	r3, [r7, #22]
 8007d32:	04d9      	lsls	r1, r3, #19
 8007d34:	4ba4      	ldr	r3, [pc, #656]	@ (8007fc8 <USB_EPStartXfer+0x3cc>)
 8007d36:	400b      	ands	r3, r1
 8007d38:	69b9      	ldr	r1, [r7, #24]
 8007d3a:	0148      	lsls	r0, r1, #5
 8007d3c:	69f9      	ldr	r1, [r7, #28]
 8007d3e:	4401      	add	r1, r0
 8007d40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d44:	4313      	orrs	r3, r2
 8007d46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	791b      	ldrb	r3, [r3, #4]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d122      	bne.n	8007d96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	0151      	lsls	r1, r2, #5
 8007d62:	69fa      	ldr	r2, [r7, #28]
 8007d64:	440a      	add	r2, r1
 8007d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007d6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	8afb      	ldrh	r3, [r7, #22]
 8007d80:	075b      	lsls	r3, r3, #29
 8007d82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007d86:	69b9      	ldr	r1, [r7, #24]
 8007d88:	0148      	lsls	r0, r1, #5
 8007d8a:	69f9      	ldr	r1, [r7, #28]
 8007d8c:	4401      	add	r1, r0
 8007d8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d92:	4313      	orrs	r3, r2
 8007d94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dac:	69b9      	ldr	r1, [r7, #24]
 8007dae:	0148      	lsls	r0, r1, #5
 8007db0:	69f9      	ldr	r1, [r7, #28]
 8007db2:	4401      	add	r1, r0
 8007db4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007db8:	4313      	orrs	r3, r2
 8007dba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d14b      	bne.n	8007e5a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	791b      	ldrb	r3, [r3, #4]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d128      	bne.n	8007e38 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d110      	bne.n	8007e18 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	69fa      	ldr	r2, [r7, #28]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	e00f      	b.n	8007e38 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	0151      	lsls	r1, r2, #5
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e36:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	0151      	lsls	r1, r2, #5
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	440a      	add	r2, r1
 8007e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	e166      	b.n	8008128 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	0151      	lsls	r1, r2, #5
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	440a      	add	r2, r1
 8007e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e78:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	791b      	ldrb	r3, [r3, #4]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d015      	beq.n	8007eae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 814e 	beq.w	8008128 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea2:	69f9      	ldr	r1, [r7, #28]
 8007ea4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	634b      	str	r3, [r1, #52]	@ 0x34
 8007eac:	e13c      	b.n	8008128 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d110      	bne.n	8007ee0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ed8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	e00f      	b.n	8007f00 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007efe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	68d9      	ldr	r1, [r3, #12]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	781a      	ldrb	r2, [r3, #0]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	b298      	uxth	r0, r3
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	4603      	mov	r3, r0
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f9b9 	bl	800828c <USB_WritePacket>
 8007f1a:	e105      	b.n	8008128 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	0151      	lsls	r1, r2, #5
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	440a      	add	r2, r1
 8007f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f36:	0cdb      	lsrs	r3, r3, #19
 8007f38:	04db      	lsls	r3, r3, #19
 8007f3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	0151      	lsls	r1, r2, #5
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	440a      	add	r2, r1
 8007f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f5e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d132      	bne.n	8007fcc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f94:	69b9      	ldr	r1, [r7, #24]
 8007f96:	0148      	lsls	r0, r1, #5
 8007f98:	69f9      	ldr	r1, [r7, #28]
 8007f9a:	4401      	add	r1, r0
 8007f9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	0151      	lsls	r1, r2, #5
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	440a      	add	r2, r1
 8007fba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fc2:	6113      	str	r3, [r2, #16]
 8007fc4:	e062      	b.n	800808c <USB_EPStartXfer+0x490>
 8007fc6:	bf00      	nop
 8007fc8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d123      	bne.n	800801c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fea:	69b9      	ldr	r1, [r7, #24]
 8007fec:	0148      	lsls	r0, r1, #5
 8007fee:	69f9      	ldr	r1, [r7, #28]
 8007ff0:	4401      	add	r1, r0
 8007ff2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	0151      	lsls	r1, r2, #5
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	440a      	add	r2, r1
 8008010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008014:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008018:	6113      	str	r3, [r2, #16]
 800801a:	e037      	b.n	800808c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	691a      	ldr	r2, [r3, #16]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	4413      	add	r3, r2
 8008026:	1e5a      	subs	r2, r3, #1
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008030:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	8afa      	ldrh	r2, [r7, #22]
 8008038:	fb03 f202 	mul.w	r2, r3, r2
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	8afb      	ldrh	r3, [r7, #22]
 8008050:	04d9      	lsls	r1, r3, #19
 8008052:	4b38      	ldr	r3, [pc, #224]	@ (8008134 <USB_EPStartXfer+0x538>)
 8008054:	400b      	ands	r3, r1
 8008056:	69b9      	ldr	r1, [r7, #24]
 8008058:	0148      	lsls	r0, r1, #5
 800805a:	69f9      	ldr	r1, [r7, #28]
 800805c:	4401      	add	r1, r0
 800805e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008062:	4313      	orrs	r3, r2
 8008064:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	0148      	lsls	r0, r1, #5
 8008080:	69f9      	ldr	r1, [r7, #28]
 8008082:	4401      	add	r1, r0
 8008084:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008088:	4313      	orrs	r3, r2
 800808a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d10d      	bne.n	80080ae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	68d9      	ldr	r1, [r3, #12]
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080aa:	460a      	mov	r2, r1
 80080ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	791b      	ldrb	r3, [r3, #4]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d128      	bne.n	8008108 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d110      	bne.n	80080e8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	0151      	lsls	r1, r2, #5
 80080d8:	69fa      	ldr	r2, [r7, #28]
 80080da:	440a      	add	r2, r1
 80080dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	e00f      	b.n	8008108 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	0151      	lsls	r1, r2, #5
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	440a      	add	r2, r1
 80080fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008106:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	0151      	lsls	r1, r2, #5
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	440a      	add	r2, r1
 800811e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008122:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008126:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	1ff80000 	.word	0x1ff80000

08008138 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d14a      	bne.n	80081ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800816a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800816e:	f040 8086 	bne.w	800827e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	7812      	ldrb	r2, [r2, #0]
 8008186:	0151      	lsls	r1, r2, #5
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	440a      	add	r2, r1
 800818c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008190:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008194:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	7812      	ldrb	r2, [r2, #0]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d902      	bls.n	80081d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
          break;
 80081ce:	e056      	b.n	800827e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081e8:	d0e7      	beq.n	80081ba <USB_EPStopXfer+0x82>
 80081ea:	e048      	b.n	800827e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008204:	d13b      	bne.n	800827e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	7812      	ldrb	r2, [r2, #0]
 800821a:	0151      	lsls	r1, r2, #5
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	440a      	add	r2, r1
 8008220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008224:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008228:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	7812      	ldrb	r2, [r2, #0]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008248:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800824c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3301      	adds	r3, #1
 8008252:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f242 7210 	movw	r2, #10000	@ 0x2710
 800825a:	4293      	cmp	r3, r2
 800825c:	d902      	bls.n	8008264 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	75fb      	strb	r3, [r7, #23]
          break;
 8008262:	e00c      	b.n	800827e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800827c:	d0e7      	beq.n	800824e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008280:	4618      	mov	r0, r3
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800828c:	b480      	push	{r7}
 800828e:	b089      	sub	sp, #36	@ 0x24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4611      	mov	r1, r2
 8008298:	461a      	mov	r2, r3
 800829a:	460b      	mov	r3, r1
 800829c:	71fb      	strb	r3, [r7, #7]
 800829e:	4613      	mov	r3, r2
 80082a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d123      	bne.n	80082fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082b2:	88bb      	ldrh	r3, [r7, #4]
 80082b4:	3303      	adds	r3, #3
 80082b6:	089b      	lsrs	r3, r3, #2
 80082b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082ba:	2300      	movs	r3, #0
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	e018      	b.n	80082f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	031a      	lsls	r2, r3, #12
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082cc:	461a      	mov	r2, r3
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	3301      	adds	r3, #1
 80082d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	3301      	adds	r3, #1
 80082de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	3301      	adds	r3, #1
 80082e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	3301      	adds	r3, #1
 80082ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	3301      	adds	r3, #1
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d3e2      	bcc.n	80082c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3724      	adds	r7, #36	@ 0x24
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008308:	b480      	push	{r7}
 800830a:	b08b      	sub	sp, #44	@ 0x2c
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	089b      	lsrs	r3, r3, #2
 8008322:	b29b      	uxth	r3, r3
 8008324:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800832e:	2300      	movs	r3, #0
 8008330:	623b      	str	r3, [r7, #32]
 8008332:	e014      	b.n	800835e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	3301      	adds	r3, #1
 8008344:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	3301      	adds	r3, #1
 800834a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800834c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834e:	3301      	adds	r3, #1
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	3301      	adds	r3, #1
 8008356:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	3301      	adds	r3, #1
 800835c:	623b      	str	r3, [r7, #32]
 800835e:	6a3a      	ldr	r2, [r7, #32]
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	429a      	cmp	r2, r3
 8008364:	d3e6      	bcc.n	8008334 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008366:	8bfb      	ldrh	r3, [r7, #30]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01e      	beq.n	80083aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008376:	461a      	mov	r2, r3
 8008378:	f107 0310 	add.w	r3, r7, #16
 800837c:	6812      	ldr	r2, [r2, #0]
 800837e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	fa22 f303 	lsr.w	r3, r2, r3
 800838c:	b2da      	uxtb	r2, r3
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	701a      	strb	r2, [r3, #0]
      i++;
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	3301      	adds	r3, #1
 8008396:	623b      	str	r3, [r7, #32]
      pDest++;
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	3301      	adds	r3, #1
 800839c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800839e:	8bfb      	ldrh	r3, [r7, #30]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083a4:	8bfb      	ldrh	r3, [r7, #30]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1ea      	bne.n	8008380 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	372c      	adds	r7, #44	@ 0x2c
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	785b      	ldrb	r3, [r3, #1]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d12c      	bne.n	800842e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	db12      	blt.n	800840c <USB_EPSetStall+0x54>
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00f      	beq.n	800840c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008406:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800840a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	440a      	add	r2, r1
 8008422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008426:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e02b      	b.n	8008486 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	db12      	blt.n	8008466 <USB_EPSetStall+0xae>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00f      	beq.n	8008466 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	440a      	add	r2, r1
 800845c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008460:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008464:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	0151      	lsls	r1, r2, #5
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	440a      	add	r2, r1
 800847c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008484:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d128      	bne.n	8008502 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	0151      	lsls	r1, r2, #5
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	440a      	add	r2, r1
 80084c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	791b      	ldrb	r3, [r3, #4]
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d003      	beq.n	80084e0 <USB_EPClearStall+0x4c>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d138      	bne.n	8008552 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	e027      	b.n	8008552 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800851c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008520:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	791b      	ldrb	r3, [r3, #4]
 8008526:	2b03      	cmp	r3, #3
 8008528:	d003      	beq.n	8008532 <USB_EPClearStall+0x9e>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	791b      	ldrb	r3, [r3, #4]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d10f      	bne.n	8008552 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	440a      	add	r2, r1
 8008548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800854c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008550:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800857e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008582:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008594:	68f9      	ldr	r1, [r7, #12]
 8008596:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800859a:	4313      	orrs	r3, r2
 800859c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80085c6:	f023 0303 	bic.w	r3, r3, #3
 80085ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085da:	f023 0302 	bic.w	r3, r3, #2
 80085de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800861c:	f043 0302 	orr.w	r3, r3, #2
 8008620:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4013      	ands	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008648:	68fb      	ldr	r3, [r7, #12]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008656:	b480      	push	{r7}
 8008658:	b085      	sub	sp, #20
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	4013      	ands	r3, r2
 8008678:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	0c1b      	lsrs	r3, r3, #16
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	4013      	ands	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	b29b      	uxth	r3, r3
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086be:	b480      	push	{r7}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	4013      	ands	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086ec:	68bb      	ldr	r3, [r7, #8]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b087      	sub	sp, #28
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800871a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	fa22 f303 	lsr.w	r3, r2, r3
 800872a:	01db      	lsls	r3, r3, #7
 800872c:	b2db      	uxtb	r3, r3
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	4313      	orrs	r3, r2
 8008732:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	4013      	ands	r3, r2
 8008746:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008748:	68bb      	ldr	r3, [r7, #8]
}
 800874a:	4618      	mov	r0, r3
 800874c:	371c      	adds	r7, #28
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	f003 0301 	and.w	r3, r3, #1
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800878c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008790:	f023 0307 	bic.w	r3, r3, #7
 8008794:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	460b      	mov	r3, r1
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	333c      	adds	r3, #60	@ 0x3c
 80087ce:	3304      	adds	r3, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	4a26      	ldr	r2, [pc, #152]	@ (8008870 <USB_EP0_OutStart+0xb8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d90a      	bls.n	80087f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ec:	d101      	bne.n	80087f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e037      	b.n	8008862 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f8:	461a      	mov	r2, r3
 80087fa:	2300      	movs	r3, #0
 80087fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800880c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008810:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008820:	f043 0318 	orr.w	r3, r3, #24
 8008824:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008834:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008838:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800883a:	7afb      	ldrb	r3, [r7, #11]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d10f      	bne.n	8008860 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008846:	461a      	mov	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800885a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800885e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	4f54300a 	.word	0x4f54300a

08008874 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3301      	adds	r3, #1
 8008884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800888c:	d901      	bls.n	8008892 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e01b      	b.n	80088ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	daf2      	bge.n	8008880 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f043 0201 	orr.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088b6:	d901      	bls.n	80088bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e006      	b.n	80088ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d0f0      	beq.n	80088aa <USB_CoreReset+0x36>

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f103 0208 	add.w	r2, r3, #8
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295
 80088ee:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f103 0208 	add.w	r2, r3, #8
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f103 0208 	add.w	r2, r3, #8
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008946:	d103      	bne.n	8008950 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	e00c      	b.n	800896a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3308      	adds	r3, #8
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	e002      	b.n	800895e <vListInsert+0x2e>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	d2f6      	bcs.n	8008958 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	601a      	str	r2, [r3, #0]
}
 8008996:	bf00      	nop
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6892      	ldr	r2, [r2, #8]
 80089b8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6852      	ldr	r2, [r2, #4]
 80089c2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d103      	bne.n	80089d6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	1e5a      	subs	r2, r3, #1
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
	...

080089f8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008a02:	2301      	movs	r3, #1
 8008a04:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10b      	bne.n	8008a28 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	e7fd      	b.n	8008a24 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d05d      	beq.n	8008aea <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d059      	beq.n	8008aea <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3e:	2100      	movs	r1, #0
 8008a40:	fba3 2302 	umull	r2, r3, r3, r2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d000      	beq.n	8008a4a <xQueueGenericReset+0x52>
 8008a48:	2101      	movs	r1, #1
 8008a4a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d14c      	bne.n	8008aea <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8008a50:	f002 fb0c 	bl	800b06c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5c:	6939      	ldr	r1, [r7, #16]
 8008a5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a60:	fb01 f303 	mul.w	r3, r1, r3
 8008a64:	441a      	add	r2, r3
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a80:	3b01      	subs	r3, #1
 8008a82:	6939      	ldr	r1, [r7, #16]
 8008a84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a86:	fb01 f303 	mul.w	r3, r1, r3
 8008a8a:	441a      	add	r2, r3
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	22ff      	movs	r2, #255	@ 0xff
 8008a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	22ff      	movs	r2, #255	@ 0xff
 8008a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d114      	bne.n	8008ad0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01a      	beq.n	8008ae4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	3310      	adds	r3, #16
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 fa54 	bl	8009f60 <xTaskRemoveFromEventList>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d012      	beq.n	8008ae4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008abe:	4b16      	ldr	r3, [pc, #88]	@ (8008b18 <xQueueGenericReset+0x120>)
 8008ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	e009      	b.n	8008ae4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	3310      	adds	r3, #16
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff fefe 	bl	80088d6 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	3324      	adds	r3, #36	@ 0x24
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff fef9 	bl	80088d6 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008ae4:	f002 faf4 	bl	800b0d0 <vPortExitCritical>
 8008ae8:	e001      	b.n	8008aee <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <xQueueGenericReset+0x114>
        __asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60bb      	str	r3, [r7, #8]
    }
 8008b06:	bf00      	nop
 8008b08:	bf00      	nop
 8008b0a:	e7fd      	b.n	8008b08 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8008b0c:	697b      	ldr	r3, [r7, #20]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	@ 0x28
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4613      	mov	r3, r2
 8008b28:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d02e      	beq.n	8008b92 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008b34:	2100      	movs	r1, #0
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d000      	beq.n	8008b44 <xQueueGenericCreate+0x28>
 8008b42:	2101      	movs	r1, #1
 8008b44:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d123      	bne.n	8008b92 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008b52:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008b56:	d81c      	bhi.n	8008b92 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	fb02 f303 	mul.w	r3, r2, r3
 8008b60:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	3350      	adds	r3, #80	@ 0x50
 8008b66:	4618      	mov	r0, r3
 8008b68:	f002 fb68 	bl	800b23c <pvPortMalloc>
 8008b6c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01d      	beq.n	8008bb0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	3350      	adds	r3, #80	@ 0x50
 8008b7c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b7e:	79fa      	ldrb	r2, [r7, #7]
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	68b9      	ldr	r1, [r7, #8]
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f000 f815 	bl	8008bba <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008b90:	e00e      	b.n	8008bb0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10b      	bne.n	8008bb0 <xQueueGenericCreate+0x94>
        __asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	613b      	str	r3, [r7, #16]
    }
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
    }
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3720      	adds	r7, #32
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d103      	bne.n	8008bd6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	e002      	b.n	8008bdc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008be8:	2101      	movs	r1, #1
 8008bea:	69b8      	ldr	r0, [r7, #24]
 8008bec:	f7ff ff04 	bl	80089f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8008bf8:	bf00      	nop
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00e      	beq.n	8008c2c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008c20:	2300      	movs	r3, #0
 8008c22:	2200      	movs	r2, #0
 8008c24:	2100      	movs	r1, #0
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f81c 	bl	8008c64 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	2300      	movs	r3, #0
 8008c44:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6939      	ldr	r1, [r7, #16]
 8008c4c:	6978      	ldr	r0, [r7, #20]
 8008c4e:	f7ff ff65 	bl	8008b1c <xQueueGenericCreate>
 8008c52:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f7ff ffd3 	bl	8008c00 <prvInitialiseMutex>

        return xNewQueue;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
    }
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08e      	sub	sp, #56	@ 0x38
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10b      	bne.n	8008c98 <xQueueGenericSend+0x34>
        __asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	e7fd      	b.n	8008c94 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d103      	bne.n	8008ca6 <xQueueGenericSend+0x42>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <xQueueGenericSend+0x46>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <xQueueGenericSend+0x48>
 8008caa:	2300      	movs	r3, #0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10b      	bne.n	8008cc8 <xQueueGenericSend+0x64>
        __asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d103      	bne.n	8008cd6 <xQueueGenericSend+0x72>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <xQueueGenericSend+0x76>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e000      	b.n	8008cdc <xQueueGenericSend+0x78>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10b      	bne.n	8008cf8 <xQueueGenericSend+0x94>
        __asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	623b      	str	r3, [r7, #32]
    }
 8008cf2:	bf00      	nop
 8008cf4:	bf00      	nop
 8008cf6:	e7fd      	b.n	8008cf4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cf8:	f001 fb46 	bl	800a388 <xTaskGetSchedulerState>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <xQueueGenericSend+0xa4>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <xQueueGenericSend+0xa8>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <xQueueGenericSend+0xaa>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10b      	bne.n	8008d2a <xQueueGenericSend+0xc6>
        __asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	61fb      	str	r3, [r7, #28]
    }
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008d2a:	f002 f99f 	bl	800b06c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d302      	bcc.n	8008d40 <xQueueGenericSend+0xdc>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d129      	bne.n	8008d94 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d46:	f000 fa89 	bl	800925c <prvCopyDataToQueue>
 8008d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d010      	beq.n	8008d76 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d56:	3324      	adds	r3, #36	@ 0x24
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 f901 	bl	8009f60 <xTaskRemoveFromEventList>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d013      	beq.n	8008d8c <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8008d64:	4b3f      	ldr	r3, [pc, #252]	@ (8008e64 <xQueueGenericSend+0x200>)
 8008d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	e00a      	b.n	8008d8c <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8008d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d007      	beq.n	8008d8c <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8008d7c:	4b39      	ldr	r3, [pc, #228]	@ (8008e64 <xQueueGenericSend+0x200>)
 8008d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008d8c:	f002 f9a0 	bl	800b0d0 <vPortExitCritical>
                return pdPASS;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e063      	b.n	8008e5c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d103      	bne.n	8008da2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008d9a:	f002 f999 	bl	800b0d0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e05c      	b.n	8008e5c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d106      	bne.n	8008db6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 f9af 	bl	800a110 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008db2:	2301      	movs	r3, #1
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008db6:	f002 f98b 	bl	800b0d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008dba:	f000 fdd7 	bl	800996c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008dbe:	f002 f955 	bl	800b06c <vPortEnterCritical>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d103      	bne.n	8008dd8 <xQueueGenericSend+0x174>
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dde:	b25b      	sxtb	r3, r3
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de4:	d103      	bne.n	8008dee <xQueueGenericSend+0x18a>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dee:	f002 f96f 	bl	800b0d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008df2:	1d3a      	adds	r2, r7, #4
 8008df4:	f107 0314 	add.w	r3, r7, #20
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 f99e 	bl	800a13c <xTaskCheckForTimeOut>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d124      	bne.n	8008e50 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e08:	f000 fb20 	bl	800944c <prvIsQueueFull>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d018      	beq.n	8008e44 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	3310      	adds	r3, #16
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 f834 	bl	8009e88 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e22:	f000 faab 	bl	800937c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008e26:	f000 fdaf 	bl	8009988 <xTaskResumeAll>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f47f af7c 	bne.w	8008d2a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8008e32:	4b0c      	ldr	r3, [pc, #48]	@ (8008e64 <xQueueGenericSend+0x200>)
 8008e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	e772      	b.n	8008d2a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e46:	f000 fa99 	bl	800937c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008e4a:	f000 fd9d 	bl	8009988 <xTaskResumeAll>
 8008e4e:	e76c      	b.n	8008d2a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e52:	f000 fa93 	bl	800937c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008e56:	f000 fd97 	bl	8009988 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8008e5a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3738      	adds	r7, #56	@ 0x38
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	e000ed04 	.word	0xe000ed04

08008e68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08c      	sub	sp, #48	@ 0x30
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10b      	bne.n	8008e9a <xQueueReceive+0x32>
        __asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	623b      	str	r3, [r7, #32]
    }
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	e7fd      	b.n	8008e96 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <xQueueReceive+0x40>
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <xQueueReceive+0x44>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e000      	b.n	8008eae <xQueueReceive+0x46>
 8008eac:	2300      	movs	r3, #0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <xQueueReceive+0x62>
        __asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	61fb      	str	r3, [r7, #28]
    }
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eca:	f001 fa5d 	bl	800a388 <xTaskGetSchedulerState>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d102      	bne.n	8008eda <xQueueReceive+0x72>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <xQueueReceive+0x76>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e000      	b.n	8008ee0 <xQueueReceive+0x78>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10b      	bne.n	8008efc <xQueueReceive+0x94>
        __asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	61bb      	str	r3, [r7, #24]
    }
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	e7fd      	b.n	8008ef8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008efc:	f002 f8b6 	bl	800b06c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f04:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01f      	beq.n	8008f4c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f10:	f000 fa0e 	bl	8009330 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00f      	beq.n	8008f44 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f26:	3310      	adds	r3, #16
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 f819 	bl	8009f60 <xTaskRemoveFromEventList>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008f34:	4b3c      	ldr	r3, [pc, #240]	@ (8009028 <xQueueReceive+0x1c0>)
 8008f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008f44:	f002 f8c4 	bl	800b0d0 <vPortExitCritical>
                return pdPASS;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e069      	b.n	8009020 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d103      	bne.n	8008f5a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008f52:	f002 f8bd 	bl	800b0d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8008f56:	2300      	movs	r3, #0
 8008f58:	e062      	b.n	8009020 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d106      	bne.n	8008f6e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008f60:	f107 0310 	add.w	r3, r7, #16
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 f8d3 	bl	800a110 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008f6e:	f002 f8af 	bl	800b0d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008f72:	f000 fcfb 	bl	800996c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008f76:	f002 f879 	bl	800b06c <vPortEnterCritical>
 8008f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f80:	b25b      	sxtb	r3, r3
 8008f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f86:	d103      	bne.n	8008f90 <xQueueReceive+0x128>
 8008f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f96:	b25b      	sxtb	r3, r3
 8008f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9c:	d103      	bne.n	8008fa6 <xQueueReceive+0x13e>
 8008f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fa6:	f002 f893 	bl	800b0d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008faa:	1d3a      	adds	r2, r7, #4
 8008fac:	f107 0310 	add.w	r3, r7, #16
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f8c2 	bl	800a13c <xTaskCheckForTimeOut>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d123      	bne.n	8009006 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fc0:	f000 fa2e 	bl	8009420 <prvIsQueueEmpty>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d017      	beq.n	8008ffa <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fcc:	3324      	adds	r3, #36	@ 0x24
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 ff58 	bl	8009e88 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008fd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fda:	f000 f9cf 	bl	800937c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008fde:	f000 fcd3 	bl	8009988 <xTaskResumeAll>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d189      	bne.n	8008efc <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8009028 <xQueueReceive+0x1c0>)
 8008fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	e780      	b.n	8008efc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ffc:	f000 f9be 	bl	800937c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009000:	f000 fcc2 	bl	8009988 <xTaskResumeAll>
 8009004:	e77a      	b.n	8008efc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009008:	f000 f9b8 	bl	800937c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800900c:	f000 fcbc 	bl	8009988 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009012:	f000 fa05 	bl	8009420 <prvIsQueueEmpty>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	f43f af6f 	beq.w	8008efc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800901e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009020:	4618      	mov	r0, r3
 8009022:	3730      	adds	r7, #48	@ 0x30
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08c      	sub	sp, #48	@ 0x30
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	61bb      	str	r3, [r7, #24]
    }
 800905a:	bf00      	nop
 800905c:	bf00      	nop
 800905e:	e7fd      	b.n	800905c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	617b      	str	r3, [r7, #20]
    }
 800907a:	bf00      	nop
 800907c:	bf00      	nop
 800907e:	e7fd      	b.n	800907c <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009080:	f001 f982 	bl	800a388 <xTaskGetSchedulerState>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <xQueueSemaphoreTake+0x64>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <xQueueSemaphoreTake+0x68>
 8009090:	2301      	movs	r3, #1
 8009092:	e000      	b.n	8009096 <xQueueSemaphoreTake+0x6a>
 8009094:	2300      	movs	r3, #0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <xQueueSemaphoreTake+0x86>
        __asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	613b      	str	r3, [r7, #16]
    }
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80090b2:	f001 ffdb 	bl	800b06c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ba:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d024      	beq.n	800910c <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	1e5a      	subs	r2, r3, #1
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80090d2:	f001 fb75 	bl	800a7c0 <pvTaskIncrementMutexHeldCount>
 80090d6:	4602      	mov	r2, r0
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00f      	beq.n	8009104 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	3310      	adds	r3, #16
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 ff39 	bl	8009f60 <xTaskRemoveFromEventList>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80090f4:	4b4c      	ldr	r3, [pc, #304]	@ (8009228 <xQueueSemaphoreTake+0x1fc>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009104:	f001 ffe4 	bl	800b0d0 <vPortExitCritical>
                return pdPASS;
 8009108:	2301      	movs	r3, #1
 800910a:	e089      	b.n	8009220 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d103      	bne.n	800911a <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009112:	f001 ffdd 	bl	800b0d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8009116:	2300      	movs	r3, #0
 8009118:	e082      	b.n	8009220 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 800911a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009120:	f107 0308 	add.w	r3, r7, #8
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fff3 	bl	800a110 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800912a:	2301      	movs	r3, #1
 800912c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800912e:	f001 ffcf 	bl	800b0d0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009132:	f000 fc1b 	bl	800996c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009136:	f001 ff99 	bl	800b06c <vPortEnterCritical>
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009140:	b25b      	sxtb	r3, r3
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009146:	d103      	bne.n	8009150 <xQueueSemaphoreTake+0x124>
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009156:	b25b      	sxtb	r3, r3
 8009158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915c:	d103      	bne.n	8009166 <xQueueSemaphoreTake+0x13a>
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009166:	f001 ffb3 	bl	800b0d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800916a:	463a      	mov	r2, r7
 800916c:	f107 0308 	add.w	r3, r7, #8
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f000 ffe2 	bl	800a13c <xTaskCheckForTimeOut>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d132      	bne.n	80091e4 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800917e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009180:	f000 f94e 	bl	8009420 <prvIsQueueEmpty>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d026      	beq.n	80091d8 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 8009192:	f001 ff6b 	bl	800b06c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	4618      	mov	r0, r3
 800919c:	f001 f912 	bl	800a3c4 <xTaskPriorityInherit>
 80091a0:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 80091a2:	f001 ff95 	bl	800b0d0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	3324      	adds	r3, #36	@ 0x24
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	4611      	mov	r1, r2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 fe6a 	bl	8009e88 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80091b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091b6:	f000 f8e1 	bl	800937c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80091ba:	f000 fbe5 	bl	8009988 <xTaskResumeAll>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f47f af76 	bne.w	80090b2 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 80091c6:	4b18      	ldr	r3, [pc, #96]	@ (8009228 <xQueueSemaphoreTake+0x1fc>)
 80091c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	e76c      	b.n	80090b2 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80091d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091da:	f000 f8cf 	bl	800937c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80091de:	f000 fbd3 	bl	8009988 <xTaskResumeAll>
 80091e2:	e766      	b.n	80090b2 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80091e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091e6:	f000 f8c9 	bl	800937c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80091ea:	f000 fbcd 	bl	8009988 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091f0:	f000 f916 	bl	8009420 <prvIsQueueEmpty>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f43f af5b 	beq.w	80090b2 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00d      	beq.n	800921e <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 8009202:	f001 ff33 	bl	800b06c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009208:	f000 f810 	bl	800922c <prvGetDisinheritPriorityAfterTimeout>
 800920c:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	69f9      	ldr	r1, [r7, #28]
 8009214:	4618      	mov	r0, r3
 8009216:	f001 fa19 	bl	800a64c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800921a:	f001 ff59 	bl	800b0d0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800921e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009220:	4618      	mov	r0, r3
 8009222:	3730      	adds	r7, #48	@ 0x30
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	e000ed04 	.word	0xe000ed04

0800922c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	d006      	beq.n	800924a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f1c3 0305 	rsb	r3, r3, #5
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e001      	b.n	800924e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800924e:	68fb      	ldr	r3, [r7, #12]
    }
 8009250:	4618      	mov	r0, r3
 8009252:	3714      	adds	r7, #20
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009270:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10d      	bne.n	8009296 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d14d      	bne.n	800931e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	4618      	mov	r0, r3
 8009288:	f001 f93a 	bl	800a500 <xTaskPriorityDisinherit>
 800928c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	609a      	str	r2, [r3, #8]
 8009294:	e043      	b.n	800931e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d119      	bne.n	80092d0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6858      	ldr	r0, [r3, #4]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a4:	461a      	mov	r2, r3
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	f004 ff54 	bl	800e154 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b4:	441a      	add	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d32b      	bcc.n	800931e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	605a      	str	r2, [r3, #4]
 80092ce:	e026      	b.n	800931e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	68d8      	ldr	r0, [r3, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d8:	461a      	mov	r2, r3
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	f004 ff3a 	bl	800e154 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e8:	425b      	negs	r3, r3
 80092ea:	441a      	add	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d207      	bcs.n	800930c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009304:	425b      	negs	r3, r3
 8009306:	441a      	add	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d105      	bne.n	800931e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	3b01      	subs	r3, #1
 800931c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8009326:	697b      	ldr	r3, [r7, #20]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d018      	beq.n	8009374 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934a:	441a      	add	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	429a      	cmp	r2, r3
 800935a:	d303      	bcc.n	8009364 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68d9      	ldr	r1, [r3, #12]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936c:	461a      	mov	r2, r3
 800936e:	6838      	ldr	r0, [r7, #0]
 8009370:	f004 fef0 	bl	800e154 <memcpy>
    }
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009384:	f001 fe72 	bl	800b06c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800938e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009390:	e011      	b.n	80093b6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d012      	beq.n	80093c0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3324      	adds	r3, #36	@ 0x24
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fdde 	bl	8009f60 <xTaskRemoveFromEventList>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80093aa:	f000 ff2f 	bl	800a20c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80093b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dce9      	bgt.n	8009392 <prvUnlockQueue+0x16>
 80093be:	e000      	b.n	80093c2 <prvUnlockQueue+0x46>
                    break;
 80093c0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	22ff      	movs	r2, #255	@ 0xff
 80093c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80093ca:	f001 fe81 	bl	800b0d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80093ce:	f001 fe4d 	bl	800b06c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093d8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80093da:	e011      	b.n	8009400 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d012      	beq.n	800940a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3310      	adds	r3, #16
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fdb9 	bl	8009f60 <xTaskRemoveFromEventList>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80093f4:	f000 ff0a 	bl	800a20c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dce9      	bgt.n	80093dc <prvUnlockQueue+0x60>
 8009408:	e000      	b.n	800940c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800940a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	22ff      	movs	r2, #255	@ 0xff
 8009410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009414:	f001 fe5c 	bl	800b0d0 <vPortExitCritical>
}
 8009418:	bf00      	nop
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009428:	f001 fe20 	bl	800b06c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e001      	b.n	800943e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800943e:	f001 fe47 	bl	800b0d0 <vPortExitCritical>

    return xReturn;
 8009442:	68fb      	ldr	r3, [r7, #12]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009454:	f001 fe0a 	bl	800b06c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009460:	429a      	cmp	r2, r3
 8009462:	d102      	bne.n	800946a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009464:	2301      	movs	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e001      	b.n	800946e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800946a:	2300      	movs	r3, #0
 800946c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800946e:	f001 fe2f 	bl	800b0d0 <vPortExitCritical>

    return xReturn;
 8009472:	68fb      	ldr	r3, [r7, #12]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10b      	bne.n	80094a8 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	60fb      	str	r3, [r7, #12]
    }
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	e7fd      	b.n	80094a4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d024      	beq.n	80094f8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ae:	2300      	movs	r3, #0
 80094b0:	617b      	str	r3, [r7, #20]
 80094b2:	e01e      	b.n	80094f2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80094b4:	4a18      	ldr	r2, [pc, #96]	@ (8009518 <vQueueAddToRegistry+0x9c>)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	4413      	add	r3, r2
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d105      	bne.n	80094d0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	00db      	lsls	r3, r3, #3
 80094c8:	4a13      	ldr	r2, [pc, #76]	@ (8009518 <vQueueAddToRegistry+0x9c>)
 80094ca:	4413      	add	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
                    break;
 80094ce:	e013      	b.n	80094f8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10a      	bne.n	80094ec <vQueueAddToRegistry+0x70>
 80094d6:	4a10      	ldr	r2, [pc, #64]	@ (8009518 <vQueueAddToRegistry+0x9c>)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d104      	bne.n	80094ec <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009518 <vQueueAddToRegistry+0x9c>)
 80094e8:	4413      	add	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	3301      	adds	r3, #1
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b07      	cmp	r3, #7
 80094f6:	d9dd      	bls.n	80094b4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d005      	beq.n	800950a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800950a:	bf00      	nop
 800950c:	371c      	adds	r7, #28
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000300 	.word	0x20000300

0800951c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800952c:	f001 fd9e 	bl	800b06c <vPortEnterCritical>
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009536:	b25b      	sxtb	r3, r3
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d103      	bne.n	8009546 <vQueueWaitForMessageRestricted+0x2a>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800954c:	b25b      	sxtb	r3, r3
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d103      	bne.n	800955c <vQueueWaitForMessageRestricted+0x40>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800955c:	f001 fdb8 	bl	800b0d0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3324      	adds	r3, #36	@ 0x24
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fcaf 	bl	8009ed4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009576:	6978      	ldr	r0, [r7, #20]
 8009578:	f7ff ff00 	bl	800937c <prvUnlockQueue>
    }
 800957c:	bf00      	nop
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009584:	b580      	push	{r7, lr}
 8009586:	b08c      	sub	sp, #48	@ 0x30
 8009588:	af04      	add	r7, sp, #16
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009594:	88fb      	ldrh	r3, [r7, #6]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4618      	mov	r0, r3
 800959a:	f001 fe4f 	bl	800b23c <pvPortMalloc>
 800959e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d013      	beq.n	80095ce <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095a6:	2058      	movs	r0, #88	@ 0x58
 80095a8:	f001 fe48 	bl	800b23c <pvPortMalloc>
 80095ac:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d008      	beq.n	80095c6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80095b4:	2258      	movs	r2, #88	@ 0x58
 80095b6:	2100      	movs	r1, #0
 80095b8:	69f8      	ldr	r0, [r7, #28]
 80095ba:	f004 fd9f 	bl	800e0fc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80095c4:	e005      	b.n	80095d2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80095c6:	6978      	ldr	r0, [r7, #20]
 80095c8:	f001 fef4 	bl	800b3b4 <vPortFree>
 80095cc:	e001      	b.n	80095d2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d013      	beq.n	8009600 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095d8:	88fa      	ldrh	r2, [r7, #6]
 80095da:	2300      	movs	r3, #0
 80095dc:	9303      	str	r3, [sp, #12]
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	9302      	str	r3, [sp, #8]
 80095e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 f80e 	bl	8009610 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80095f4:	69f8      	ldr	r0, [r7, #28]
 80095f6:	f000 f89b 	bl	8009730 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80095fa:	2301      	movs	r3, #1
 80095fc:	61bb      	str	r3, [r7, #24]
 80095fe:	e002      	b.n	8009606 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009600:	f04f 33ff 	mov.w	r3, #4294967295
 8009604:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009606:	69bb      	ldr	r3, [r7, #24]
    }
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	461a      	mov	r2, r3
 8009628:	21a5      	movs	r1, #165	@ 0xa5
 800962a:	f004 fd67 	bl	800e0fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009638:	3b01      	subs	r3, #1
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	f023 0307 	bic.w	r3, r3, #7
 8009646:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00b      	beq.n	800966a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	617b      	str	r3, [r7, #20]
    }
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01e      	beq.n	80096ae <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009670:	2300      	movs	r3, #0
 8009672:	61fb      	str	r3, [r7, #28]
 8009674:	e012      	b.n	800969c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	4413      	add	r3, r2
 800967c:	7819      	ldrb	r1, [r3, #0]
 800967e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	4413      	add	r3, r2
 8009684:	3334      	adds	r3, #52	@ 0x34
 8009686:	460a      	mov	r2, r1
 8009688:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	4413      	add	r3, r2
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	3301      	adds	r3, #1
 800969a:	61fb      	str	r3, [r7, #28]
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	2b09      	cmp	r3, #9
 80096a0:	d9e9      	bls.n	8009676 <prvInitialiseNewTask+0x66>
 80096a2:	e000      	b.n	80096a6 <prvInitialiseNewTask+0x96>
            {
                break;
 80096a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	2b04      	cmp	r3, #4
 80096b2:	d90b      	bls.n	80096cc <prvInitialiseNewTask+0xbc>
        __asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	613b      	str	r3, [r7, #16]
    }
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	e7fd      	b.n	80096c8 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d901      	bls.n	80096d6 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096d2:	2304      	movs	r3, #4
 80096d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80096d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096da:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096e0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	3304      	adds	r3, #4
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff f915 	bl	8008916 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ee:	3318      	adds	r3, #24
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff f910 	bl	8008916 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096fa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fe:	f1c3 0205 	rsb	r2, r3, #5
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800970a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	69b8      	ldr	r0, [r7, #24]
 8009712:	f001 fb75 	bl	800ae00 <pxPortInitialiseStack>
 8009716:	4602      	mov	r2, r0
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800971c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009726:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009728:	bf00      	nop
 800972a:	3720      	adds	r7, #32
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009738:	f001 fc98 	bl	800b06c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800973c:	4b40      	ldr	r3, [pc, #256]	@ (8009840 <prvAddNewTaskToReadyList+0x110>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	4a3f      	ldr	r2, [pc, #252]	@ (8009840 <prvAddNewTaskToReadyList+0x110>)
 8009744:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009746:	4b3f      	ldr	r3, [pc, #252]	@ (8009844 <prvAddNewTaskToReadyList+0x114>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800974e:	4a3d      	ldr	r2, [pc, #244]	@ (8009844 <prvAddNewTaskToReadyList+0x114>)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009754:	4b3a      	ldr	r3, [pc, #232]	@ (8009840 <prvAddNewTaskToReadyList+0x110>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d110      	bne.n	800977e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800975c:	f000 fd7a 	bl	800a254 <prvInitialiseTaskLists>
 8009760:	e00d      	b.n	800977e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009762:	4b39      	ldr	r3, [pc, #228]	@ (8009848 <prvAddNewTaskToReadyList+0x118>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d109      	bne.n	800977e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800976a:	4b36      	ldr	r3, [pc, #216]	@ (8009844 <prvAddNewTaskToReadyList+0x114>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009774:	429a      	cmp	r2, r3
 8009776:	d802      	bhi.n	800977e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009778:	4a32      	ldr	r2, [pc, #200]	@ (8009844 <prvAddNewTaskToReadyList+0x114>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800977e:	4b33      	ldr	r3, [pc, #204]	@ (800984c <prvAddNewTaskToReadyList+0x11c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3301      	adds	r3, #1
 8009784:	4a31      	ldr	r2, [pc, #196]	@ (800984c <prvAddNewTaskToReadyList+0x11c>)
 8009786:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009788:	4b30      	ldr	r3, [pc, #192]	@ (800984c <prvAddNewTaskToReadyList+0x11c>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009794:	2201      	movs	r2, #1
 8009796:	409a      	lsls	r2, r3
 8009798:	4b2d      	ldr	r3, [pc, #180]	@ (8009850 <prvAddNewTaskToReadyList+0x120>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4313      	orrs	r3, r2
 800979e:	4a2c      	ldr	r2, [pc, #176]	@ (8009850 <prvAddNewTaskToReadyList+0x120>)
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a6:	492b      	ldr	r1, [pc, #172]	@ (8009854 <prvAddNewTaskToReadyList+0x124>)
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	440b      	add	r3, r1
 80097b2:	3304      	adds	r3, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	609a      	str	r2, [r3, #8]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	689a      	ldr	r2, [r3, #8]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60da      	str	r2, [r3, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	3204      	adds	r2, #4
 80097ce:	605a      	str	r2, [r3, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	1d1a      	adds	r2, r3, #4
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	609a      	str	r2, [r3, #8]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009854 <prvAddNewTaskToReadyList+0x124>)
 80097e6:	441a      	add	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	615a      	str	r2, [r3, #20]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f0:	4918      	ldr	r1, [pc, #96]	@ (8009854 <prvAddNewTaskToReadyList+0x124>)
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	1c59      	adds	r1, r3, #1
 8009800:	4814      	ldr	r0, [pc, #80]	@ (8009854 <prvAddNewTaskToReadyList+0x124>)
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4403      	add	r3, r0
 800980c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800980e:	f001 fc5f 	bl	800b0d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009812:	4b0d      	ldr	r3, [pc, #52]	@ (8009848 <prvAddNewTaskToReadyList+0x118>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00e      	beq.n	8009838 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800981a:	4b0a      	ldr	r3, [pc, #40]	@ (8009844 <prvAddNewTaskToReadyList+0x114>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	429a      	cmp	r2, r3
 8009826:	d207      	bcs.n	8009838 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009828:	4b0b      	ldr	r3, [pc, #44]	@ (8009858 <prvAddNewTaskToReadyList+0x128>)
 800982a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20000418 	.word	0x20000418
 8009844:	20000340 	.word	0x20000340
 8009848:	20000424 	.word	0x20000424
 800984c:	20000434 	.word	0x20000434
 8009850:	20000420 	.word	0x20000420
 8009854:	20000344 	.word	0x20000344
 8009858:	e000ed04 	.word	0xe000ed04

0800985c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d018      	beq.n	80098a0 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800986e:	4b14      	ldr	r3, [pc, #80]	@ (80098c0 <vTaskDelay+0x64>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00b      	beq.n	800988e <vTaskDelay+0x32>
        __asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	60bb      	str	r3, [r7, #8]
    }
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	e7fd      	b.n	800988a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800988e:	f000 f86d 	bl	800996c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009892:	2100      	movs	r1, #0
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 ffa7 	bl	800a7e8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800989a:	f000 f875 	bl	8009988 <xTaskResumeAll>
 800989e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d107      	bne.n	80098b6 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80098a6:	4b07      	ldr	r3, [pc, #28]	@ (80098c4 <vTaskDelay+0x68>)
 80098a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000440 	.word	0x20000440
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80098ce:	4b20      	ldr	r3, [pc, #128]	@ (8009950 <vTaskStartScheduler+0x88>)
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	2300      	movs	r3, #0
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	2300      	movs	r3, #0
 80098d8:	2282      	movs	r2, #130	@ 0x82
 80098da:	491e      	ldr	r1, [pc, #120]	@ (8009954 <vTaskStartScheduler+0x8c>)
 80098dc:	481e      	ldr	r0, [pc, #120]	@ (8009958 <vTaskStartScheduler+0x90>)
 80098de:	f7ff fe51 	bl	8009584 <xTaskCreate>
 80098e2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d102      	bne.n	80098f0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80098ea:	f000 fffd 	bl	800a8e8 <xTimerCreateTimerTask>
 80098ee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d116      	bne.n	8009924 <vTaskStartScheduler+0x5c>
        __asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60bb      	str	r3, [r7, #8]
    }
 8009908:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800990a:	4b14      	ldr	r3, [pc, #80]	@ (800995c <vTaskStartScheduler+0x94>)
 800990c:	f04f 32ff 	mov.w	r2, #4294967295
 8009910:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009912:	4b13      	ldr	r3, [pc, #76]	@ (8009960 <vTaskStartScheduler+0x98>)
 8009914:	2201      	movs	r2, #1
 8009916:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009918:	4b12      	ldr	r3, [pc, #72]	@ (8009964 <vTaskStartScheduler+0x9c>)
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800991e:	f001 fb01 	bl	800af24 <xPortStartScheduler>
 8009922:	e00f      	b.n	8009944 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d10b      	bne.n	8009944 <vTaskStartScheduler+0x7c>
        __asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	607b      	str	r3, [r7, #4]
    }
 800993e:	bf00      	nop
 8009940:	bf00      	nop
 8009942:	e7fd      	b.n	8009940 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009944:	4b08      	ldr	r3, [pc, #32]	@ (8009968 <vTaskStartScheduler+0xa0>)
 8009946:	681b      	ldr	r3, [r3, #0]
}
 8009948:	bf00      	nop
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	2000043c 	.word	0x2000043c
 8009954:	0800e1c4 	.word	0x0800e1c4
 8009958:	0800a225 	.word	0x0800a225
 800995c:	20000438 	.word	0x20000438
 8009960:	20000424 	.word	0x20000424
 8009964:	2000041c 	.word	0x2000041c
 8009968:	2000000c 	.word	0x2000000c

0800996c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009970:	4b04      	ldr	r3, [pc, #16]	@ (8009984 <vTaskSuspendAll+0x18>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3301      	adds	r3, #1
 8009976:	4a03      	ldr	r2, [pc, #12]	@ (8009984 <vTaskSuspendAll+0x18>)
 8009978:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800997a:	bf00      	nop
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	20000440 	.word	0x20000440

08009988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009992:	2300      	movs	r3, #0
 8009994:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009996:	4b71      	ldr	r3, [pc, #452]	@ (8009b5c <xTaskResumeAll+0x1d4>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10b      	bne.n	80099b6 <xTaskResumeAll+0x2e>
        __asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	607b      	str	r3, [r7, #4]
    }
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	e7fd      	b.n	80099b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80099b6:	f001 fb59 	bl	800b06c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80099ba:	4b68      	ldr	r3, [pc, #416]	@ (8009b5c <xTaskResumeAll+0x1d4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3b01      	subs	r3, #1
 80099c0:	4a66      	ldr	r2, [pc, #408]	@ (8009b5c <xTaskResumeAll+0x1d4>)
 80099c2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c4:	4b65      	ldr	r3, [pc, #404]	@ (8009b5c <xTaskResumeAll+0x1d4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f040 80c0 	bne.w	8009b4e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099ce:	4b64      	ldr	r3, [pc, #400]	@ (8009b60 <xTaskResumeAll+0x1d8>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 80bb 	beq.w	8009b4e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099d8:	e08a      	b.n	8009af0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099da:	4b62      	ldr	r3, [pc, #392]	@ (8009b64 <xTaskResumeAll+0x1dc>)
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e6:	613b      	str	r3, [r7, #16]
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	69fa      	ldr	r2, [r7, #28]
 80099ee:	6a12      	ldr	r2, [r2, #32]
 80099f0:	609a      	str	r2, [r3, #8]
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	69d2      	ldr	r2, [r2, #28]
 80099fa:	605a      	str	r2, [r3, #4]
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	3318      	adds	r3, #24
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d103      	bne.n	8009a10 <xTaskResumeAll+0x88>
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	6a1a      	ldr	r2, [r3, #32]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	605a      	str	r2, [r3, #4]
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	2200      	movs	r2, #0
 8009a14:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	1e5a      	subs	r2, r3, #1
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	68d2      	ldr	r2, [r2, #12]
 8009a2e:	609a      	str	r2, [r3, #8]
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	6892      	ldr	r2, [r2, #8]
 8009a38:	605a      	str	r2, [r3, #4]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	3304      	adds	r3, #4
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d103      	bne.n	8009a4e <xTaskResumeAll+0xc6>
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	605a      	str	r2, [r3, #4]
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	2200      	movs	r2, #0
 8009a52:	615a      	str	r2, [r3, #20]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	1e5a      	subs	r2, r3, #1
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a62:	2201      	movs	r2, #1
 8009a64:	409a      	lsls	r2, r3
 8009a66:	4b40      	ldr	r3, [pc, #256]	@ (8009b68 <xTaskResumeAll+0x1e0>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	4a3e      	ldr	r2, [pc, #248]	@ (8009b68 <xTaskResumeAll+0x1e0>)
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a74:	493d      	ldr	r1, [pc, #244]	@ (8009b6c <xTaskResumeAll+0x1e4>)
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	3304      	adds	r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60bb      	str	r3, [r7, #8]
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	609a      	str	r2, [r3, #8]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	60da      	str	r2, [r3, #12]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	3204      	adds	r2, #4
 8009a9c:	605a      	str	r2, [r3, #4]
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	1d1a      	adds	r2, r3, #4
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	609a      	str	r2, [r3, #8]
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8009b6c <xTaskResumeAll+0x1e4>)
 8009ab4:	441a      	add	r2, r3
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	615a      	str	r2, [r3, #20]
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abe:	492b      	ldr	r1, [pc, #172]	@ (8009b6c <xTaskResumeAll+0x1e4>)
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	440b      	add	r3, r1
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	1c59      	adds	r1, r3, #1
 8009ace:	4827      	ldr	r0, [pc, #156]	@ (8009b6c <xTaskResumeAll+0x1e4>)
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4403      	add	r3, r0
 8009ada:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae0:	4b23      	ldr	r3, [pc, #140]	@ (8009b70 <xTaskResumeAll+0x1e8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d302      	bcc.n	8009af0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8009aea:	4b22      	ldr	r3, [pc, #136]	@ (8009b74 <xTaskResumeAll+0x1ec>)
 8009aec:	2201      	movs	r2, #1
 8009aee:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009af0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b64 <xTaskResumeAll+0x1dc>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f47f af70 	bne.w	80099da <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009b00:	f000 fc26 	bl	800a350 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b04:	4b1c      	ldr	r3, [pc, #112]	@ (8009b78 <xTaskResumeAll+0x1f0>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d010      	beq.n	8009b32 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009b10:	f000 f846 	bl	8009ba0 <xTaskIncrementTick>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8009b1a:	4b16      	ldr	r3, [pc, #88]	@ (8009b74 <xTaskResumeAll+0x1ec>)
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1f1      	bne.n	8009b10 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8009b2c:	4b12      	ldr	r3, [pc, #72]	@ (8009b78 <xTaskResumeAll+0x1f0>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009b32:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <xTaskResumeAll+0x1ec>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d009      	beq.n	8009b4e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b7c <xTaskResumeAll+0x1f4>)
 8009b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009b4e:	f001 fabf 	bl	800b0d0 <vPortExitCritical>

    return xAlreadyYielded;
 8009b52:	69bb      	ldr	r3, [r7, #24]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20000440 	.word	0x20000440
 8009b60:	20000418 	.word	0x20000418
 8009b64:	200003d8 	.word	0x200003d8
 8009b68:	20000420 	.word	0x20000420
 8009b6c:	20000344 	.word	0x20000344
 8009b70:	20000340 	.word	0x20000340
 8009b74:	2000042c 	.word	0x2000042c
 8009b78:	20000428 	.word	0x20000428
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009b86:	4b05      	ldr	r3, [pc, #20]	@ (8009b9c <xTaskGetTickCount+0x1c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009b8c:	687b      	ldr	r3, [r7, #4]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	2000041c 	.word	0x2000041c

08009ba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08a      	sub	sp, #40	@ 0x28
 8009ba4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009baa:	4b7e      	ldr	r3, [pc, #504]	@ (8009da4 <xTaskIncrementTick+0x204>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f040 80ed 	bne.w	8009d8e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bb4:	4b7c      	ldr	r3, [pc, #496]	@ (8009da8 <xTaskIncrementTick+0x208>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009bbc:	4a7a      	ldr	r2, [pc, #488]	@ (8009da8 <xTaskIncrementTick+0x208>)
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d121      	bne.n	8009c0c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009bc8:	4b78      	ldr	r3, [pc, #480]	@ (8009dac <xTaskIncrementTick+0x20c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00b      	beq.n	8009bea <xTaskIncrementTick+0x4a>
        __asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	607b      	str	r3, [r7, #4]
    }
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	e7fd      	b.n	8009be6 <xTaskIncrementTick+0x46>
 8009bea:	4b70      	ldr	r3, [pc, #448]	@ (8009dac <xTaskIncrementTick+0x20c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	61fb      	str	r3, [r7, #28]
 8009bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8009db0 <xTaskIncrementTick+0x210>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a6d      	ldr	r2, [pc, #436]	@ (8009dac <xTaskIncrementTick+0x20c>)
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	4a6d      	ldr	r2, [pc, #436]	@ (8009db0 <xTaskIncrementTick+0x210>)
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8009db4 <xTaskIncrementTick+0x214>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3301      	adds	r3, #1
 8009c04:	4a6b      	ldr	r2, [pc, #428]	@ (8009db4 <xTaskIncrementTick+0x214>)
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	f000 fba2 	bl	800a350 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8009db8 <xTaskIncrementTick+0x218>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a3a      	ldr	r2, [r7, #32]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	f0c0 80a6 	bcc.w	8009d64 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c18:	4b64      	ldr	r3, [pc, #400]	@ (8009dac <xTaskIncrementTick+0x20c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d104      	bne.n	8009c2c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c22:	4b65      	ldr	r3, [pc, #404]	@ (8009db8 <xTaskIncrementTick+0x218>)
 8009c24:	f04f 32ff 	mov.w	r2, #4294967295
 8009c28:	601a      	str	r2, [r3, #0]
                    break;
 8009c2a:	e09b      	b.n	8009d64 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c2c:	4b5f      	ldr	r3, [pc, #380]	@ (8009dac <xTaskIncrementTick+0x20c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009c3c:	6a3a      	ldr	r2, [r7, #32]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d203      	bcs.n	8009c4c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009c44:	4a5c      	ldr	r2, [pc, #368]	@ (8009db8 <xTaskIncrementTick+0x218>)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009c4a:	e08b      	b.n	8009d64 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	68d2      	ldr	r2, [r2, #12]
 8009c5a:	609a      	str	r2, [r3, #8]
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	6892      	ldr	r2, [r2, #8]
 8009c64:	605a      	str	r2, [r3, #4]
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d103      	bne.n	8009c7a <xTaskIncrementTick+0xda>
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	605a      	str	r2, [r3, #4]
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	615a      	str	r2, [r3, #20]
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	1e5a      	subs	r2, r3, #1
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d01e      	beq.n	8009cd0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	6a12      	ldr	r2, [r2, #32]
 8009ca0:	609a      	str	r2, [r3, #8]
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	69d2      	ldr	r2, [r2, #28]
 8009caa:	605a      	str	r2, [r3, #4]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	3318      	adds	r3, #24
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d103      	bne.n	8009cc0 <xTaskIncrementTick+0x120>
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	6a1a      	ldr	r2, [r3, #32]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	605a      	str	r2, [r3, #4]
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	1e5a      	subs	r2, r3, #1
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	409a      	lsls	r2, r3
 8009cd8:	4b38      	ldr	r3, [pc, #224]	@ (8009dbc <xTaskIncrementTick+0x21c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	4a37      	ldr	r2, [pc, #220]	@ (8009dbc <xTaskIncrementTick+0x21c>)
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce6:	4936      	ldr	r1, [pc, #216]	@ (8009dc0 <xTaskIncrementTick+0x220>)
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60bb      	str	r3, [r7, #8]
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	609a      	str	r2, [r3, #8]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	60da      	str	r2, [r3, #12]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	3204      	adds	r2, #4
 8009d0e:	605a      	str	r2, [r3, #4]
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	1d1a      	adds	r2, r3, #4
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	609a      	str	r2, [r3, #8]
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4a26      	ldr	r2, [pc, #152]	@ (8009dc0 <xTaskIncrementTick+0x220>)
 8009d26:	441a      	add	r2, r3
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	615a      	str	r2, [r3, #20]
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d30:	4923      	ldr	r1, [pc, #140]	@ (8009dc0 <xTaskIncrementTick+0x220>)
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	1c59      	adds	r1, r3, #1
 8009d40:	481f      	ldr	r0, [pc, #124]	@ (8009dc0 <xTaskIncrementTick+0x220>)
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4403      	add	r3, r0
 8009d4c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d52:	4b1c      	ldr	r3, [pc, #112]	@ (8009dc4 <xTaskIncrementTick+0x224>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	f67f af5d 	bls.w	8009c18 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d62:	e759      	b.n	8009c18 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d64:	4b17      	ldr	r3, [pc, #92]	@ (8009dc4 <xTaskIncrementTick+0x224>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d6a:	4915      	ldr	r1, [pc, #84]	@ (8009dc0 <xTaskIncrementTick+0x220>)
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d901      	bls.n	8009d80 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8009d80:	4b11      	ldr	r3, [pc, #68]	@ (8009dc8 <xTaskIncrementTick+0x228>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d007      	beq.n	8009d98 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d8c:	e004      	b.n	8009d98 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009dcc <xTaskIncrementTick+0x22c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a0d      	ldr	r2, [pc, #52]	@ (8009dcc <xTaskIncrementTick+0x22c>)
 8009d96:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8009d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3728      	adds	r7, #40	@ 0x28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000440 	.word	0x20000440
 8009da8:	2000041c 	.word	0x2000041c
 8009dac:	200003d0 	.word	0x200003d0
 8009db0:	200003d4 	.word	0x200003d4
 8009db4:	20000430 	.word	0x20000430
 8009db8:	20000438 	.word	0x20000438
 8009dbc:	20000420 	.word	0x20000420
 8009dc0:	20000344 	.word	0x20000344
 8009dc4:	20000340 	.word	0x20000340
 8009dc8:	2000042c 	.word	0x2000042c
 8009dcc:	20000428 	.word	0x20000428

08009dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dd6:	4b27      	ldr	r3, [pc, #156]	@ (8009e74 <vTaskSwitchContext+0xa4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8009dde:	4b26      	ldr	r3, [pc, #152]	@ (8009e78 <vTaskSwitchContext+0xa8>)
 8009de0:	2201      	movs	r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8009de4:	e040      	b.n	8009e68 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8009de6:	4b24      	ldr	r3, [pc, #144]	@ (8009e78 <vTaskSwitchContext+0xa8>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dec:	4b23      	ldr	r3, [pc, #140]	@ (8009e7c <vTaskSwitchContext+0xac>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	fab3 f383 	clz	r3, r3
 8009df8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
 8009dfc:	f1c3 031f 	rsb	r3, r3, #31
 8009e00:	617b      	str	r3, [r7, #20]
 8009e02:	491f      	ldr	r1, [pc, #124]	@ (8009e80 <vTaskSwitchContext+0xb0>)
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	4613      	mov	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	440b      	add	r3, r1
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10b      	bne.n	8009e2e <vTaskSwitchContext+0x5e>
        __asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	607b      	str	r3, [r7, #4]
    }
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	e7fd      	b.n	8009e2a <vTaskSwitchContext+0x5a>
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4613      	mov	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4a11      	ldr	r2, [pc, #68]	@ (8009e80 <vTaskSwitchContext+0xb0>)
 8009e3a:	4413      	add	r3, r2
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	605a      	str	r2, [r3, #4]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d104      	bne.n	8009e5e <vTaskSwitchContext+0x8e>
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	605a      	str	r2, [r3, #4]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	4a07      	ldr	r2, [pc, #28]	@ (8009e84 <vTaskSwitchContext+0xb4>)
 8009e66:	6013      	str	r3, [r2, #0]
}
 8009e68:	bf00      	nop
 8009e6a:	371c      	adds	r7, #28
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	20000440 	.word	0x20000440
 8009e78:	2000042c 	.word	0x2000042c
 8009e7c:	20000420 	.word	0x20000420
 8009e80:	20000344 	.word	0x20000344
 8009e84:	20000340 	.word	0x20000340

08009e88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10b      	bne.n	8009eb0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	60fb      	str	r3, [r7, #12]
    }
 8009eaa:	bf00      	nop
 8009eac:	bf00      	nop
 8009eae:	e7fd      	b.n	8009eac <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eb0:	4b07      	ldr	r3, [pc, #28]	@ (8009ed0 <vTaskPlaceOnEventList+0x48>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3318      	adds	r3, #24
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7fe fd39 	bl	8008930 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	6838      	ldr	r0, [r7, #0]
 8009ec2:	f000 fc91 	bl	800a7e8 <prvAddCurrentTaskToDelayedList>
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000340 	.word	0x20000340

08009ed4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10b      	bne.n	8009efe <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	613b      	str	r3, [r7, #16]
    }
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	4b15      	ldr	r3, [pc, #84]	@ (8009f5c <vTaskPlaceOnEventListRestricted+0x88>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	61da      	str	r2, [r3, #28]
 8009f0c:	4b13      	ldr	r3, [pc, #76]	@ (8009f5c <vTaskPlaceOnEventListRestricted+0x88>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	6892      	ldr	r2, [r2, #8]
 8009f14:	621a      	str	r2, [r3, #32]
 8009f16:	4b11      	ldr	r3, [pc, #68]	@ (8009f5c <vTaskPlaceOnEventListRestricted+0x88>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	3218      	adds	r2, #24
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	4b0e      	ldr	r3, [pc, #56]	@ (8009f5c <vTaskPlaceOnEventListRestricted+0x88>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f103 0218 	add.w	r2, r3, #24
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	609a      	str	r2, [r3, #8]
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f5c <vTaskPlaceOnEventListRestricted+0x88>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	1c5a      	adds	r2, r3, #1
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8009f46:	f04f 33ff 	mov.w	r3, #4294967295
 8009f4a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	68b8      	ldr	r0, [r7, #8]
 8009f50:	f000 fc4a 	bl	800a7e8 <prvAddCurrentTaskToDelayedList>
    }
 8009f54:	bf00      	nop
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20000340 	.word	0x20000340

08009f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b08b      	sub	sp, #44	@ 0x2c
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10b      	bne.n	8009f8e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60fb      	str	r3, [r7, #12]
    }
 8009f88:	bf00      	nop
 8009f8a:	bf00      	nop
 8009f8c:	e7fd      	b.n	8009f8a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f92:	61fb      	str	r3, [r7, #28]
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	6a3a      	ldr	r2, [r7, #32]
 8009f9a:	6a12      	ldr	r2, [r2, #32]
 8009f9c:	609a      	str	r2, [r3, #8]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	6a3a      	ldr	r2, [r7, #32]
 8009fa4:	69d2      	ldr	r2, [r2, #28]
 8009fa6:	605a      	str	r2, [r3, #4]
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	3318      	adds	r3, #24
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d103      	bne.n	8009fbc <xTaskRemoveFromEventList+0x5c>
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	6a1a      	ldr	r2, [r3, #32]
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	605a      	str	r2, [r3, #4]
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	1e5a      	subs	r2, r3, #1
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fcc:	4b4a      	ldr	r3, [pc, #296]	@ (800a0f8 <xTaskRemoveFromEventList+0x198>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d15e      	bne.n	800a092 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	617b      	str	r3, [r7, #20]
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	6a3a      	ldr	r2, [r7, #32]
 8009fe0:	68d2      	ldr	r2, [r2, #12]
 8009fe2:	609a      	str	r2, [r3, #8]
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	6a3a      	ldr	r2, [r7, #32]
 8009fea:	6892      	ldr	r2, [r2, #8]
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d103      	bne.n	800a002 <xTaskRemoveFromEventList+0xa2>
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	2200      	movs	r2, #0
 800a006:	615a      	str	r2, [r3, #20]
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a016:	2201      	movs	r2, #1
 800a018:	409a      	lsls	r2, r3
 800a01a:	4b38      	ldr	r3, [pc, #224]	@ (800a0fc <xTaskRemoveFromEventList+0x19c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4313      	orrs	r3, r2
 800a020:	4a36      	ldr	r2, [pc, #216]	@ (800a0fc <xTaskRemoveFromEventList+0x19c>)
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a028:	4935      	ldr	r1, [pc, #212]	@ (800a100 <xTaskRemoveFromEventList+0x1a0>)
 800a02a:	4613      	mov	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	3304      	adds	r3, #4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	609a      	str	r2, [r3, #8]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	60da      	str	r2, [r3, #12]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	6a3a      	ldr	r2, [r7, #32]
 800a04e:	3204      	adds	r2, #4
 800a050:	605a      	str	r2, [r3, #4]
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	1d1a      	adds	r2, r3, #4
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	609a      	str	r2, [r3, #8]
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05e:	4613      	mov	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4a26      	ldr	r2, [pc, #152]	@ (800a100 <xTaskRemoveFromEventList+0x1a0>)
 800a068:	441a      	add	r2, r3
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	615a      	str	r2, [r3, #20]
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a072:	4923      	ldr	r1, [pc, #140]	@ (800a100 <xTaskRemoveFromEventList+0x1a0>)
 800a074:	4613      	mov	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	1c59      	adds	r1, r3, #1
 800a082:	481f      	ldr	r0, [pc, #124]	@ (800a100 <xTaskRemoveFromEventList+0x1a0>)
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4403      	add	r3, r0
 800a08e:	6019      	str	r1, [r3, #0]
 800a090:	e01b      	b.n	800a0ca <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a092:	4b1c      	ldr	r3, [pc, #112]	@ (800a104 <xTaskRemoveFromEventList+0x1a4>)
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	61bb      	str	r3, [r7, #24]
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	61da      	str	r2, [r3, #28]
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	689a      	ldr	r2, [r3, #8]
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	621a      	str	r2, [r3, #32]
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	6a3a      	ldr	r2, [r7, #32]
 800a0ac:	3218      	adds	r2, #24
 800a0ae:	605a      	str	r2, [r3, #4]
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	f103 0218 	add.w	r2, r3, #24
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	609a      	str	r2, [r3, #8]
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	4a11      	ldr	r2, [pc, #68]	@ (800a104 <xTaskRemoveFromEventList+0x1a4>)
 800a0be:	629a      	str	r2, [r3, #40]	@ 0x28
 800a0c0:	4b10      	ldr	r3, [pc, #64]	@ (800a104 <xTaskRemoveFromEventList+0x1a4>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a104 <xTaskRemoveFromEventList+0x1a4>)
 800a0c8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a108 <xTaskRemoveFromEventList+0x1a8>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d905      	bls.n	800a0e4 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a10c <xTaskRemoveFromEventList+0x1ac>)
 800a0de:	2201      	movs	r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	e001      	b.n	800a0e8 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	372c      	adds	r7, #44	@ 0x2c
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	20000440 	.word	0x20000440
 800a0fc:	20000420 	.word	0x20000420
 800a100:	20000344 	.word	0x20000344
 800a104:	200003d8 	.word	0x200003d8
 800a108:	20000340 	.word	0x20000340
 800a10c:	2000042c 	.word	0x2000042c

0800a110 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a118:	4b06      	ldr	r3, [pc, #24]	@ (800a134 <vTaskInternalSetTimeOutState+0x24>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a120:	4b05      	ldr	r3, [pc, #20]	@ (800a138 <vTaskInternalSetTimeOutState+0x28>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	605a      	str	r2, [r3, #4]
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	20000430 	.word	0x20000430
 800a138:	2000041c 	.word	0x2000041c

0800a13c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10b      	bne.n	800a164 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	613b      	str	r3, [r7, #16]
    }
 800a15e:	bf00      	nop
 800a160:	bf00      	nop
 800a162:	e7fd      	b.n	800a160 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10b      	bne.n	800a182 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	60fb      	str	r3, [r7, #12]
    }
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	e7fd      	b.n	800a17e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800a182:	f000 ff73 	bl	800b06c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a186:	4b1f      	ldr	r3, [pc, #124]	@ (800a204 <xTaskCheckForTimeOut+0xc8>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19e:	d102      	bne.n	800a1a6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61fb      	str	r3, [r7, #28]
 800a1a4:	e026      	b.n	800a1f4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	4b17      	ldr	r3, [pc, #92]	@ (800a208 <xTaskCheckForTimeOut+0xcc>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d00a      	beq.n	800a1c8 <xTaskCheckForTimeOut+0x8c>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d305      	bcc.n	800a1c8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	e015      	b.n	800a1f4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d20b      	bcs.n	800a1ea <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	1ad2      	subs	r2, r2, r3
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff ff96 	bl	800a110 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	61fb      	str	r3, [r7, #28]
 800a1e8:	e004      	b.n	800a1f4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a1f4:	f000 ff6c 	bl	800b0d0 <vPortExitCritical>

    return xReturn;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	2000041c 	.word	0x2000041c
 800a208:	20000430 	.word	0x20000430

0800a20c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a210:	4b03      	ldr	r3, [pc, #12]	@ (800a220 <vTaskMissedYield+0x14>)
 800a212:	2201      	movs	r2, #1
 800a214:	601a      	str	r2, [r3, #0]
}
 800a216:	bf00      	nop
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	2000042c 	.word	0x2000042c

0800a224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a22c:	f000 f852 	bl	800a2d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a230:	4b06      	ldr	r3, [pc, #24]	@ (800a24c <prvIdleTask+0x28>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d9f9      	bls.n	800a22c <prvIdleTask+0x8>
            {
                taskYIELD();
 800a238:	4b05      	ldr	r3, [pc, #20]	@ (800a250 <prvIdleTask+0x2c>)
 800a23a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a23e:	601a      	str	r2, [r3, #0]
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a248:	e7f0      	b.n	800a22c <prvIdleTask+0x8>
 800a24a:	bf00      	nop
 800a24c:	20000344 	.word	0x20000344
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
 800a25e:	e00c      	b.n	800a27a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4a12      	ldr	r2, [pc, #72]	@ (800a2b4 <prvInitialiseTaskLists+0x60>)
 800a26c:	4413      	add	r3, r2
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fb31 	bl	80088d6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3301      	adds	r3, #1
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d9ef      	bls.n	800a260 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a280:	480d      	ldr	r0, [pc, #52]	@ (800a2b8 <prvInitialiseTaskLists+0x64>)
 800a282:	f7fe fb28 	bl	80088d6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a286:	480d      	ldr	r0, [pc, #52]	@ (800a2bc <prvInitialiseTaskLists+0x68>)
 800a288:	f7fe fb25 	bl	80088d6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a28c:	480c      	ldr	r0, [pc, #48]	@ (800a2c0 <prvInitialiseTaskLists+0x6c>)
 800a28e:	f7fe fb22 	bl	80088d6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a292:	480c      	ldr	r0, [pc, #48]	@ (800a2c4 <prvInitialiseTaskLists+0x70>)
 800a294:	f7fe fb1f 	bl	80088d6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a298:	480b      	ldr	r0, [pc, #44]	@ (800a2c8 <prvInitialiseTaskLists+0x74>)
 800a29a:	f7fe fb1c 	bl	80088d6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a29e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2cc <prvInitialiseTaskLists+0x78>)
 800a2a0:	4a05      	ldr	r2, [pc, #20]	@ (800a2b8 <prvInitialiseTaskLists+0x64>)
 800a2a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d0 <prvInitialiseTaskLists+0x7c>)
 800a2a6:	4a05      	ldr	r2, [pc, #20]	@ (800a2bc <prvInitialiseTaskLists+0x68>)
 800a2a8:	601a      	str	r2, [r3, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20000344 	.word	0x20000344
 800a2b8:	200003a8 	.word	0x200003a8
 800a2bc:	200003bc 	.word	0x200003bc
 800a2c0:	200003d8 	.word	0x200003d8
 800a2c4:	200003ec 	.word	0x200003ec
 800a2c8:	20000404 	.word	0x20000404
 800a2cc:	200003d0 	.word	0x200003d0
 800a2d0:	200003d4 	.word	0x200003d4

0800a2d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2da:	e019      	b.n	800a310 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a2dc:	f000 fec6 	bl	800b06c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e0:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <prvCheckTasksWaitingTermination+0x50>)
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe fb58 	bl	80089a2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <prvCheckTasksWaitingTermination+0x54>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	4a0b      	ldr	r2, [pc, #44]	@ (800a328 <prvCheckTasksWaitingTermination+0x54>)
 800a2fa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a32c <prvCheckTasksWaitingTermination+0x58>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3b01      	subs	r3, #1
 800a302:	4a0a      	ldr	r2, [pc, #40]	@ (800a32c <prvCheckTasksWaitingTermination+0x58>)
 800a304:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a306:	f000 fee3 	bl	800b0d0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f810 	bl	800a330 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <prvCheckTasksWaitingTermination+0x58>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e1      	bne.n	800a2dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	200003ec 	.word	0x200003ec
 800a328:	20000418 	.word	0x20000418
 800a32c:	20000400 	.word	0x20000400

0800a330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a33c:	4618      	mov	r0, r3
 800a33e:	f001 f839 	bl	800b3b4 <vPortFree>
            vPortFree( pxTCB );
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f001 f836 	bl	800b3b4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a348:	bf00      	nop
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a354:	4b0a      	ldr	r3, [pc, #40]	@ (800a380 <prvResetNextTaskUnblockTime+0x30>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a35e:	4b09      	ldr	r3, [pc, #36]	@ (800a384 <prvResetNextTaskUnblockTime+0x34>)
 800a360:	f04f 32ff 	mov.w	r2, #4294967295
 800a364:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a366:	e005      	b.n	800a374 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a368:	4b05      	ldr	r3, [pc, #20]	@ (800a380 <prvResetNextTaskUnblockTime+0x30>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a04      	ldr	r2, [pc, #16]	@ (800a384 <prvResetNextTaskUnblockTime+0x34>)
 800a372:	6013      	str	r3, [r2, #0]
}
 800a374:	bf00      	nop
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	200003d0 	.word	0x200003d0
 800a384:	20000438 	.word	0x20000438

0800a388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a38e:	4b0b      	ldr	r3, [pc, #44]	@ (800a3bc <xTaskGetSchedulerState+0x34>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d102      	bne.n	800a39c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a396:	2301      	movs	r3, #1
 800a398:	607b      	str	r3, [r7, #4]
 800a39a:	e008      	b.n	800a3ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a39c:	4b08      	ldr	r3, [pc, #32]	@ (800a3c0 <xTaskGetSchedulerState+0x38>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	607b      	str	r3, [r7, #4]
 800a3a8:	e001      	b.n	800a3ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a3ae:	687b      	ldr	r3, [r7, #4]
    }
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20000424 	.word	0x20000424
 800a3c0:	20000440 	.word	0x20000440

0800a3c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 8087 	beq.w	800a4ea <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e0:	4b44      	ldr	r3, [pc, #272]	@ (800a4f4 <xTaskPriorityInherit+0x130>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d276      	bcs.n	800a4d8 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	db06      	blt.n	800a400 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3f2:	4b40      	ldr	r3, [pc, #256]	@ (800a4f4 <xTaskPriorityInherit+0x130>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f8:	f1c3 0205 	rsb	r2, r3, #5
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	6959      	ldr	r1, [r3, #20]
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a408:	4613      	mov	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4a39      	ldr	r2, [pc, #228]	@ (800a4f8 <xTaskPriorityInherit+0x134>)
 800a412:	4413      	add	r3, r2
 800a414:	4299      	cmp	r1, r3
 800a416:	d157      	bne.n	800a4c8 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe fac0 	bl	80089a2 <uxListRemove>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42c:	2201      	movs	r2, #1
 800a42e:	fa02 f303 	lsl.w	r3, r2, r3
 800a432:	43da      	mvns	r2, r3
 800a434:	4b31      	ldr	r3, [pc, #196]	@ (800a4fc <xTaskPriorityInherit+0x138>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4013      	ands	r3, r2
 800a43a:	4a30      	ldr	r2, [pc, #192]	@ (800a4fc <xTaskPriorityInherit+0x138>)
 800a43c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a43e:	4b2d      	ldr	r3, [pc, #180]	@ (800a4f4 <xTaskPriorityInherit+0x130>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44c:	2201      	movs	r2, #1
 800a44e:	409a      	lsls	r2, r3
 800a450:	4b2a      	ldr	r3, [pc, #168]	@ (800a4fc <xTaskPriorityInherit+0x138>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4313      	orrs	r3, r2
 800a456:	4a29      	ldr	r2, [pc, #164]	@ (800a4fc <xTaskPriorityInherit+0x138>)
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45e:	4926      	ldr	r1, [pc, #152]	@ (800a4f8 <xTaskPriorityInherit+0x134>)
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	440b      	add	r3, r1
 800a46a:	3304      	adds	r3, #4
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	609a      	str	r2, [r3, #8]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	60da      	str	r2, [r3, #12]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	3204      	adds	r2, #4
 800a486:	605a      	str	r2, [r3, #4]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	1d1a      	adds	r2, r3, #4
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	609a      	str	r2, [r3, #8]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a494:	4613      	mov	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4a16      	ldr	r2, [pc, #88]	@ (800a4f8 <xTaskPriorityInherit+0x134>)
 800a49e:	441a      	add	r2, r3
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	615a      	str	r2, [r3, #20]
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a8:	4913      	ldr	r1, [pc, #76]	@ (800a4f8 <xTaskPriorityInherit+0x134>)
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	440b      	add	r3, r1
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	1c59      	adds	r1, r3, #1
 800a4b8:	480f      	ldr	r0, [pc, #60]	@ (800a4f8 <xTaskPriorityInherit+0x134>)
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4403      	add	r3, r0
 800a4c4:	6019      	str	r1, [r3, #0]
 800a4c6:	e004      	b.n	800a4d2 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f4 <xTaskPriorityInherit+0x130>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	e008      	b.n	800a4ea <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4dc:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <xTaskPriorityInherit+0x130>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d201      	bcs.n	800a4ea <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a4ea:	697b      	ldr	r3, [r7, #20]
    }
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20000340 	.word	0x20000340
 800a4f8:	20000344 	.word	0x20000344
 800a4fc:	20000420 	.word	0x20000420

0800a500 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a500:	b580      	push	{r7, lr}
 800a502:	b088      	sub	sp, #32
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800a50c:	2300      	movs	r3, #0
 800a50e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 808e 	beq.w	800a634 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a518:	4b49      	ldr	r3, [pc, #292]	@ (800a640 <xTaskPriorityDisinherit+0x140>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	69ba      	ldr	r2, [r7, #24]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d00b      	beq.n	800a53a <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	613b      	str	r3, [r7, #16]
    }
 800a534:	bf00      	nop
 800a536:	bf00      	nop
 800a538:	e7fd      	b.n	800a536 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10b      	bne.n	800a55a <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 800a542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	60fb      	str	r3, [r7, #12]
    }
 800a554:	bf00      	nop
 800a556:	bf00      	nop
 800a558:	e7fd      	b.n	800a556 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a55e:	1e5a      	subs	r2, r3, #1
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d061      	beq.n	800a634 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d15d      	bne.n	800a634 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe fa10 	bl	80089a2 <uxListRemove>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	2201      	movs	r2, #1
 800a58e:	fa02 f303 	lsl.w	r3, r2, r3
 800a592:	43da      	mvns	r2, r3
 800a594:	4b2b      	ldr	r3, [pc, #172]	@ (800a644 <xTaskPriorityDisinherit+0x144>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4013      	ands	r3, r2
 800a59a:	4a2a      	ldr	r2, [pc, #168]	@ (800a644 <xTaskPriorityDisinherit+0x144>)
 800a59c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5aa:	f1c3 0205 	rsb	r2, r3, #5
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	409a      	lsls	r2, r3
 800a5ba:	4b22      	ldr	r3, [pc, #136]	@ (800a644 <xTaskPriorityDisinherit+0x144>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	4a20      	ldr	r2, [pc, #128]	@ (800a644 <xTaskPriorityDisinherit+0x144>)
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c8:	491f      	ldr	r1, [pc, #124]	@ (800a648 <xTaskPriorityDisinherit+0x148>)
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	440b      	add	r3, r1
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	609a      	str	r2, [r3, #8]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	689a      	ldr	r2, [r3, #8]
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	60da      	str	r2, [r3, #12]
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	69ba      	ldr	r2, [r7, #24]
 800a5ee:	3204      	adds	r2, #4
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	1d1a      	adds	r2, r3, #4
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	609a      	str	r2, [r3, #8]
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fe:	4613      	mov	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4a10      	ldr	r2, [pc, #64]	@ (800a648 <xTaskPriorityDisinherit+0x148>)
 800a608:	441a      	add	r2, r3
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	615a      	str	r2, [r3, #20]
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a612:	490d      	ldr	r1, [pc, #52]	@ (800a648 <xTaskPriorityDisinherit+0x148>)
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	440b      	add	r3, r1
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	1c59      	adds	r1, r3, #1
 800a622:	4809      	ldr	r0, [pc, #36]	@ (800a648 <xTaskPriorityDisinherit+0x148>)
 800a624:	4613      	mov	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4413      	add	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4403      	add	r3, r0
 800a62e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a630:	2301      	movs	r3, #1
 800a632:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a634:	69fb      	ldr	r3, [r7, #28]
    }
 800a636:	4618      	mov	r0, r3
 800a638:	3720      	adds	r7, #32
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20000340 	.word	0x20000340
 800a644:	20000420 	.word	0x20000420
 800a648:	20000344 	.word	0x20000344

0800a64c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08a      	sub	sp, #40	@ 0x28
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a65a:	2301      	movs	r3, #1
 800a65c:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 80a3 	beq.w	800a7ac <vTaskPriorityDisinheritAfterTimeout+0x160>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10b      	bne.n	800a686 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	613b      	str	r3, [r7, #16]
    }
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d902      	bls.n	800a696 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	627b      	str	r3, [r7, #36]	@ 0x24
 800a694:	e002      	b.n	800a69c <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a69a:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	f000 8082 	beq.w	800a7ac <vTaskPriorityDisinheritAfterTimeout+0x160>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6ac:	69fa      	ldr	r2, [r7, #28]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d17c      	bne.n	800a7ac <vTaskPriorityDisinheritAfterTimeout+0x160>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800a6b2:	4b40      	ldr	r3, [pc, #256]	@ (800a7b4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6a3a      	ldr	r2, [r7, #32]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d10b      	bne.n	800a6d4 <vTaskPriorityDisinheritAfterTimeout+0x88>
        __asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	60fb      	str	r3, [r7, #12]
    }
 800a6ce:	bf00      	nop
 800a6d0:	bf00      	nop
 800a6d2:	e7fd      	b.n	800a6d0 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d8:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6de:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	db04      	blt.n	800a6f2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ea:	f1c3 0205 	rsb	r2, r3, #5
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	6959      	ldr	r1, [r3, #20]
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4a2d      	ldr	r2, [pc, #180]	@ (800a7b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800a702:	4413      	add	r3, r2
 800a704:	4299      	cmp	r1, r3
 800a706:	d151      	bne.n	800a7ac <vTaskPriorityDisinheritAfterTimeout+0x160>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe f948 	bl	80089a2 <uxListRemove>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71c:	2201      	movs	r2, #1
 800a71e:	fa02 f303 	lsl.w	r3, r2, r3
 800a722:	43da      	mvns	r2, r3
 800a724:	4b25      	ldr	r3, [pc, #148]	@ (800a7bc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4013      	ands	r3, r2
 800a72a:	4a24      	ldr	r2, [pc, #144]	@ (800a7bc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800a72c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a732:	2201      	movs	r2, #1
 800a734:	409a      	lsls	r2, r3
 800a736:	4b21      	ldr	r3, [pc, #132]	@ (800a7bc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	4a1f      	ldr	r2, [pc, #124]	@ (800a7bc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a744:	491c      	ldr	r1, [pc, #112]	@ (800a7b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	440b      	add	r3, r1
 800a750:	3304      	adds	r3, #4
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	609a      	str	r2, [r3, #8]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	60da      	str	r2, [r3, #12]
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	6a3a      	ldr	r2, [r7, #32]
 800a76a:	3204      	adds	r2, #4
 800a76c:	605a      	str	r2, [r3, #4]
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	1d1a      	adds	r2, r3, #4
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	609a      	str	r2, [r3, #8]
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4a0d      	ldr	r2, [pc, #52]	@ (800a7b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800a784:	441a      	add	r2, r3
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	615a      	str	r2, [r3, #20]
 800a78a:	6a3b      	ldr	r3, [r7, #32]
 800a78c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a78e:	490a      	ldr	r1, [pc, #40]	@ (800a7b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	440b      	add	r3, r1
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	1c59      	adds	r1, r3, #1
 800a79e:	4806      	ldr	r0, [pc, #24]	@ (800a7b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4403      	add	r3, r0
 800a7aa:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a7ac:	bf00      	nop
 800a7ae:	3728      	adds	r7, #40	@ 0x28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20000340 	.word	0x20000340
 800a7b8:	20000344 	.word	0x20000344
 800a7bc:	20000420 	.word	0x20000420

0800a7c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800a7c4:	4b07      	ldr	r3, [pc, #28]	@ (800a7e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800a7cc:	4b05      	ldr	r3, [pc, #20]	@ (800a7e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7d2:	3201      	adds	r2, #1
 800a7d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800a7d6:	4b03      	ldr	r3, [pc, #12]	@ (800a7e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
    }
 800a7da:	4618      	mov	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	20000340 	.word	0x20000340

0800a7e8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a7f2:	4b36      	ldr	r3, [pc, #216]	@ (800a8cc <prvAddCurrentTaskToDelayedList+0xe4>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7f8:	4b35      	ldr	r3, [pc, #212]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe f8cf 	bl	80089a2 <uxListRemove>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10b      	bne.n	800a822 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a80a:	4b31      	ldr	r3, [pc, #196]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a810:	2201      	movs	r2, #1
 800a812:	fa02 f303 	lsl.w	r3, r2, r3
 800a816:	43da      	mvns	r2, r3
 800a818:	4b2e      	ldr	r3, [pc, #184]	@ (800a8d4 <prvAddCurrentTaskToDelayedList+0xec>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4013      	ands	r3, r2
 800a81e:	4a2d      	ldr	r2, [pc, #180]	@ (800a8d4 <prvAddCurrentTaskToDelayedList+0xec>)
 800a820:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a828:	d124      	bne.n	800a874 <prvAddCurrentTaskToDelayedList+0x8c>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d021      	beq.n	800a874 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a830:	4b29      	ldr	r3, [pc, #164]	@ (800a8d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	613b      	str	r3, [r7, #16]
 800a836:	4b26      	ldr	r3, [pc, #152]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	609a      	str	r2, [r3, #8]
 800a83e:	4b24      	ldr	r3, [pc, #144]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	6892      	ldr	r2, [r2, #8]
 800a846:	60da      	str	r2, [r3, #12]
 800a848:	4b21      	ldr	r3, [pc, #132]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	3204      	adds	r2, #4
 800a852:	605a      	str	r2, [r3, #4]
 800a854:	4b1e      	ldr	r3, [pc, #120]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	1d1a      	adds	r2, r3, #4
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	609a      	str	r2, [r3, #8]
 800a85e:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800a864:	615a      	str	r2, [r3, #20]
 800a866:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3301      	adds	r3, #1
 800a86c:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a872:	e026      	b.n	800a8c2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4413      	add	r3, r2
 800a87a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a87c:	4b14      	ldr	r3, [pc, #80]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d209      	bcs.n	800a8a0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a88c:	4b13      	ldr	r3, [pc, #76]	@ (800a8dc <prvAddCurrentTaskToDelayedList+0xf4>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3304      	adds	r3, #4
 800a896:	4619      	mov	r1, r3
 800a898:	4610      	mov	r0, r2
 800a89a:	f7fe f849 	bl	8008930 <vListInsert>
}
 800a89e:	e010      	b.n	800a8c2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e0 <prvAddCurrentTaskToDelayedList+0xf8>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	f7fe f83f 	bl	8008930 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800a8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d202      	bcs.n	800a8c2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800a8bc:	4a09      	ldr	r2, [pc, #36]	@ (800a8e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6013      	str	r3, [r2, #0]
}
 800a8c2:	bf00      	nop
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	2000041c 	.word	0x2000041c
 800a8d0:	20000340 	.word	0x20000340
 800a8d4:	20000420 	.word	0x20000420
 800a8d8:	20000404 	.word	0x20000404
 800a8dc:	200003d4 	.word	0x200003d4
 800a8e0:	200003d0 	.word	0x200003d0
 800a8e4:	20000438 	.word	0x20000438

0800a8e8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a8f2:	f000 fa4f 	bl	800ad94 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a8f6:	4b12      	ldr	r3, [pc, #72]	@ (800a940 <xTimerCreateTimerTask+0x58>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00b      	beq.n	800a916 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800a8fe:	4b11      	ldr	r3, [pc, #68]	@ (800a944 <xTimerCreateTimerTask+0x5c>)
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	2302      	movs	r3, #2
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	2300      	movs	r3, #0
 800a908:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a90c:	490e      	ldr	r1, [pc, #56]	@ (800a948 <xTimerCreateTimerTask+0x60>)
 800a90e:	480f      	ldr	r0, [pc, #60]	@ (800a94c <xTimerCreateTimerTask+0x64>)
 800a910:	f7fe fe38 	bl	8009584 <xTaskCreate>
 800a914:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10b      	bne.n	800a934 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	603b      	str	r3, [r7, #0]
    }
 800a92e:	bf00      	nop
 800a930:	bf00      	nop
 800a932:	e7fd      	b.n	800a930 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a934:	687b      	ldr	r3, [r7, #4]
    }
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000474 	.word	0x20000474
 800a944:	20000478 	.word	0x20000478
 800a948:	0800e1cc 	.word	0x0800e1cc
 800a94c:	0800a9f5 	.word	0x0800a9f5

0800a950 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a95c:	e008      	b.n	800a970 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	4413      	add	r3, r2
 800a966:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	699a      	ldr	r2, [r3, #24]
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	18d1      	adds	r1, r2, r3
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f8df 	bl	800ab40 <prvInsertTimerInActiveList>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1ea      	bne.n	800a95e <prvReloadTimer+0xe>
        }
    }
 800a988:	bf00      	nop
 800a98a:	bf00      	nop
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a99e:	4b14      	ldr	r3, [pc, #80]	@ (800a9f0 <prvProcessExpiredTimer+0x5c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fd fff8 	bl	80089a2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d005      	beq.n	800a9cc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7ff ffc3 	bl	800a950 <prvReloadTimer>
 800a9ca:	e008      	b.n	800a9de <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9d2:	f023 0301 	bic.w	r3, r3, #1
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	4798      	blx	r3
    }
 800a9e6:	bf00      	nop
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	2000046c 	.word	0x2000046c

0800a9f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9fc:	f107 0308 	add.w	r3, r7, #8
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 f859 	bl	800aab8 <prvGetNextExpireTime>
 800aa06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 f805 	bl	800aa1c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800aa12:	f000 f8d7 	bl	800abc4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa16:	bf00      	nop
 800aa18:	e7f0      	b.n	800a9fc <prvTimerTask+0x8>
	...

0800aa1c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800aa26:	f7fe ffa1 	bl	800996c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa2a:	f107 0308 	add.w	r3, r7, #8
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 f866 	bl	800ab00 <prvSampleTimeNow>
 800aa34:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d130      	bne.n	800aa9e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <prvProcessTimerOrBlockTask+0x3c>
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d806      	bhi.n	800aa58 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800aa4a:	f7fe ff9d 	bl	8009988 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa4e:	68f9      	ldr	r1, [r7, #12]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7ff ff9f 	bl	800a994 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800aa56:	e024      	b.n	800aaa2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d008      	beq.n	800aa70 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa5e:	4b13      	ldr	r3, [pc, #76]	@ (800aaac <prvProcessTimerOrBlockTask+0x90>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <prvProcessTimerOrBlockTask+0x50>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e000      	b.n	800aa6e <prvProcessTimerOrBlockTask+0x52>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa70:	4b0f      	ldr	r3, [pc, #60]	@ (800aab0 <prvProcessTimerOrBlockTask+0x94>)
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f7fe fd4d 	bl	800951c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800aa82:	f7fe ff81 	bl	8009988 <xTaskResumeAll>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800aa8c:	4b09      	ldr	r3, [pc, #36]	@ (800aab4 <prvProcessTimerOrBlockTask+0x98>)
 800aa8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	f3bf 8f6f 	isb	sy
    }
 800aa9c:	e001      	b.n	800aaa2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800aa9e:	f7fe ff73 	bl	8009988 <xTaskResumeAll>
    }
 800aaa2:	bf00      	nop
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000470 	.word	0x20000470
 800aab0:	20000474 	.word	0x20000474
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aac0:	4b0e      	ldr	r3, [pc, #56]	@ (800aafc <prvGetNextExpireTime+0x44>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <prvGetNextExpireTime+0x16>
 800aaca:	2201      	movs	r2, #1
 800aacc:	e000      	b.n	800aad0 <prvGetNextExpireTime+0x18>
 800aace:	2200      	movs	r2, #0
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d105      	bne.n	800aae8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aadc:	4b07      	ldr	r3, [pc, #28]	@ (800aafc <prvGetNextExpireTime+0x44>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	e001      	b.n	800aaec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800aaec:	68fb      	ldr	r3, [r7, #12]
    }
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	2000046c 	.word	0x2000046c

0800ab00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800ab08:	f7ff f83a 	bl	8009b80 <xTaskGetTickCount>
 800ab0c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800ab0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab3c <prvSampleTimeNow+0x3c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d205      	bcs.n	800ab24 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800ab18:	f000 f916 	bl	800ad48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	e002      	b.n	800ab2a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800ab2a:	4a04      	ldr	r2, [pc, #16]	@ (800ab3c <prvSampleTimeNow+0x3c>)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800ab30:	68fb      	ldr	r3, [r7, #12]
    }
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	2000047c 	.word	0x2000047c

0800ab40 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d812      	bhi.n	800ab8c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	1ad2      	subs	r2, r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d302      	bcc.n	800ab7a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800ab74:	2301      	movs	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
 800ab78:	e01b      	b.n	800abb2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab7a:	4b10      	ldr	r3, [pc, #64]	@ (800abbc <prvInsertTimerInActiveList+0x7c>)
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3304      	adds	r3, #4
 800ab82:	4619      	mov	r1, r3
 800ab84:	4610      	mov	r0, r2
 800ab86:	f7fd fed3 	bl	8008930 <vListInsert>
 800ab8a:	e012      	b.n	800abb2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d206      	bcs.n	800aba2 <prvInsertTimerInActiveList+0x62>
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d302      	bcc.n	800aba2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	e007      	b.n	800abb2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aba2:	4b07      	ldr	r3, [pc, #28]	@ (800abc0 <prvInsertTimerInActiveList+0x80>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3304      	adds	r3, #4
 800abaa:	4619      	mov	r1, r3
 800abac:	4610      	mov	r0, r2
 800abae:	f7fd febf 	bl	8008930 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800abb2:	697b      	ldr	r3, [r7, #20]
    }
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	20000470 	.word	0x20000470
 800abc0:	2000046c 	.word	0x2000046c

0800abc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abca:	e0a9      	b.n	800ad20 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f2c0 80a6 	blt.w	800ad20 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d004      	beq.n	800abea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fd fedc 	bl	80089a2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abea:	1d3b      	adds	r3, r7, #4
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff ff87 	bl	800ab00 <prvSampleTimeNow>
 800abf2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	f200 808e 	bhi.w	800ad1a <prvProcessReceivedCommands+0x156>
 800abfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <prvProcessReceivedCommands+0x40>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac29 	.word	0x0800ac29
 800ac08:	0800ac29 	.word	0x0800ac29
 800ac0c:	0800ac91 	.word	0x0800ac91
 800ac10:	0800aca5 	.word	0x0800aca5
 800ac14:	0800acf1 	.word	0x0800acf1
 800ac18:	0800ac29 	.word	0x0800ac29
 800ac1c:	0800ac29 	.word	0x0800ac29
 800ac20:	0800ac91 	.word	0x0800ac91
 800ac24:	0800aca5 	.word	0x0800aca5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac2e:	f043 0301 	orr.w	r3, r3, #1
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	18d1      	adds	r1, r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	69f8      	ldr	r0, [r7, #28]
 800ac48:	f7ff ff7a 	bl	800ab40 <prvInsertTimerInActiveList>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d065      	beq.n	800ad1e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d009      	beq.n	800ac74 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	4413      	add	r3, r2
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	69f8      	ldr	r0, [r7, #28]
 800ac6e:	f7ff fe6f 	bl	800a950 <prvReloadTimer>
 800ac72:	e008      	b.n	800ac86 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac7a:	f023 0301 	bic.w	r3, r3, #1
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	69f8      	ldr	r0, [r7, #28]
 800ac8c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800ac8e:	e046      	b.n	800ad1e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac96:	f023 0301 	bic.w	r3, r3, #1
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800aca2:	e03d      	b.n	800ad20 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10b      	bne.n	800acdc <prvProcessReceivedCommands+0x118>
        __asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	617b      	str	r3, [r7, #20]
    }
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	e7fd      	b.n	800acd8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	18d1      	adds	r1, r2, r3
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	69f8      	ldr	r0, [r7, #28]
 800acea:	f7ff ff29 	bl	800ab40 <prvInsertTimerInActiveList>
                        break;
 800acee:	e017      	b.n	800ad20 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acf6:	f003 0302 	and.w	r3, r3, #2
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d103      	bne.n	800ad06 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800acfe:	69f8      	ldr	r0, [r7, #28]
 800ad00:	f000 fb58 	bl	800b3b4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800ad04:	e00c      	b.n	800ad20 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad0c:	f023 0301 	bic.w	r3, r3, #1
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800ad18:	e002      	b.n	800ad20 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800ad1a:	bf00      	nop
 800ad1c:	e000      	b.n	800ad20 <prvProcessReceivedCommands+0x15c>
                        break;
 800ad1e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad20:	4b08      	ldr	r3, [pc, #32]	@ (800ad44 <prvProcessReceivedCommands+0x180>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f107 0108 	add.w	r1, r7, #8
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe f89c 	bl	8008e68 <xQueueReceive>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f47f af4a 	bne.w	800abcc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800ad38:	bf00      	nop
 800ad3a:	bf00      	nop
 800ad3c:	3720      	adds	r7, #32
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20000474 	.word	0x20000474

0800ad48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad4e:	e009      	b.n	800ad64 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad50:	4b0e      	ldr	r3, [pc, #56]	@ (800ad8c <prvSwitchTimerLists+0x44>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ad5a:	f04f 31ff 	mov.w	r1, #4294967295
 800ad5e:	6838      	ldr	r0, [r7, #0]
 800ad60:	f7ff fe18 	bl	800a994 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad64:	4b09      	ldr	r3, [pc, #36]	@ (800ad8c <prvSwitchTimerLists+0x44>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1f0      	bne.n	800ad50 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800ad6e:	4b07      	ldr	r3, [pc, #28]	@ (800ad8c <prvSwitchTimerLists+0x44>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800ad74:	4b06      	ldr	r3, [pc, #24]	@ (800ad90 <prvSwitchTimerLists+0x48>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a04      	ldr	r2, [pc, #16]	@ (800ad8c <prvSwitchTimerLists+0x44>)
 800ad7a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ad7c:	4a04      	ldr	r2, [pc, #16]	@ (800ad90 <prvSwitchTimerLists+0x48>)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6013      	str	r3, [r2, #0]
    }
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	2000046c 	.word	0x2000046c
 800ad90:	20000470 	.word	0x20000470

0800ad94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ad98:	f000 f968 	bl	800b06c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ad9c:	4b12      	ldr	r3, [pc, #72]	@ (800ade8 <prvCheckForValidListAndQueue+0x54>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d11d      	bne.n	800ade0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800ada4:	4811      	ldr	r0, [pc, #68]	@ (800adec <prvCheckForValidListAndQueue+0x58>)
 800ada6:	f7fd fd96 	bl	80088d6 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800adaa:	4811      	ldr	r0, [pc, #68]	@ (800adf0 <prvCheckForValidListAndQueue+0x5c>)
 800adac:	f7fd fd93 	bl	80088d6 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800adb0:	4b10      	ldr	r3, [pc, #64]	@ (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800adb2:	4a0e      	ldr	r2, [pc, #56]	@ (800adec <prvCheckForValidListAndQueue+0x58>)
 800adb4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800adb6:	4b10      	ldr	r3, [pc, #64]	@ (800adf8 <prvCheckForValidListAndQueue+0x64>)
 800adb8:	4a0d      	ldr	r2, [pc, #52]	@ (800adf0 <prvCheckForValidListAndQueue+0x5c>)
 800adba:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800adbc:	2200      	movs	r2, #0
 800adbe:	210c      	movs	r1, #12
 800adc0:	200a      	movs	r0, #10
 800adc2:	f7fd feab 	bl	8008b1c <xQueueGenericCreate>
 800adc6:	4603      	mov	r3, r0
 800adc8:	4a07      	ldr	r2, [pc, #28]	@ (800ade8 <prvCheckForValidListAndQueue+0x54>)
 800adca:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800adcc:	4b06      	ldr	r3, [pc, #24]	@ (800ade8 <prvCheckForValidListAndQueue+0x54>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d005      	beq.n	800ade0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800add4:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <prvCheckForValidListAndQueue+0x54>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4908      	ldr	r1, [pc, #32]	@ (800adfc <prvCheckForValidListAndQueue+0x68>)
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe fb4e 	bl	800947c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800ade0:	f000 f976 	bl	800b0d0 <vPortExitCritical>
    }
 800ade4:	bf00      	nop
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	20000474 	.word	0x20000474
 800adec:	20000444 	.word	0x20000444
 800adf0:	20000458 	.word	0x20000458
 800adf4:	2000046c 	.word	0x2000046c
 800adf8:	20000470 	.word	0x20000470
 800adfc:	0800e1d4 	.word	0x0800e1d4

0800ae00 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3b04      	subs	r3, #4
 800ae10:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3b04      	subs	r3, #4
 800ae1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f023 0201 	bic.w	r2, r3, #1
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3b04      	subs	r3, #4
 800ae2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800ae30:	4a0c      	ldr	r2, [pc, #48]	@ (800ae64 <pxPortInitialiseStack+0x64>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3b14      	subs	r3, #20
 800ae3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3b04      	subs	r3, #4
 800ae46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f06f 0202 	mvn.w	r2, #2
 800ae4e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3b20      	subs	r3, #32
 800ae54:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800ae56:	68fb      	ldr	r3, [r7, #12]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	0800ae69 	.word	0x0800ae69

0800ae68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800ae72:	4b13      	ldr	r3, [pc, #76]	@ (800aec0 <prvTaskExitError+0x58>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d00b      	beq.n	800ae94 <prvTaskExitError+0x2c>
        __asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	60fb      	str	r3, [r7, #12]
    }
 800ae8e:	bf00      	nop
 800ae90:	bf00      	nop
 800ae92:	e7fd      	b.n	800ae90 <prvTaskExitError+0x28>
        __asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60bb      	str	r3, [r7, #8]
    }
 800aea6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800aea8:	bf00      	nop
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d0fc      	beq.n	800aeaa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800aeb0:	bf00      	nop
 800aeb2:	bf00      	nop
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	20000010 	.word	0x20000010
	...

0800aed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800aed0:	4b07      	ldr	r3, [pc, #28]	@ (800aef0 <pxCurrentTCBConst2>)
 800aed2:	6819      	ldr	r1, [r3, #0]
 800aed4:	6808      	ldr	r0, [r1, #0]
 800aed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeda:	f380 8809 	msr	PSP, r0
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f04f 0000 	mov.w	r0, #0
 800aee6:	f380 8811 	msr	BASEPRI, r0
 800aeea:	4770      	bx	lr
 800aeec:	f3af 8000 	nop.w

0800aef0 <pxCurrentTCBConst2>:
 800aef0:	20000340 	.word	0x20000340
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800aef8:	4808      	ldr	r0, [pc, #32]	@ (800af1c <prvPortStartFirstTask+0x24>)
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	6800      	ldr	r0, [r0, #0]
 800aefe:	f380 8808 	msr	MSP, r0
 800af02:	f04f 0000 	mov.w	r0, #0
 800af06:	f380 8814 	msr	CONTROL, r0
 800af0a:	b662      	cpsie	i
 800af0c:	b661      	cpsie	f
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	df00      	svc	0
 800af18:	bf00      	nop
 800af1a:	0000      	.short	0x0000
 800af1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800af20:	bf00      	nop
 800af22:	bf00      	nop

0800af24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af2a:	4b47      	ldr	r3, [pc, #284]	@ (800b048 <xPortStartScheduler+0x124>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a47      	ldr	r2, [pc, #284]	@ (800b04c <xPortStartScheduler+0x128>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d10b      	bne.n	800af4c <xPortStartScheduler+0x28>
        __asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	613b      	str	r3, [r7, #16]
    }
 800af46:	bf00      	nop
 800af48:	bf00      	nop
 800af4a:	e7fd      	b.n	800af48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af4c:	4b3e      	ldr	r3, [pc, #248]	@ (800b048 <xPortStartScheduler+0x124>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a3f      	ldr	r2, [pc, #252]	@ (800b050 <xPortStartScheduler+0x12c>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d10b      	bne.n	800af6e <xPortStartScheduler+0x4a>
        __asm volatile
 800af56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	60fb      	str	r3, [r7, #12]
    }
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	e7fd      	b.n	800af6a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af6e:	4b39      	ldr	r3, [pc, #228]	@ (800b054 <xPortStartScheduler+0x130>)
 800af70:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	b2db      	uxtb	r3, r3
 800af78:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	22ff      	movs	r2, #255	@ 0xff
 800af7e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	b2db      	uxtb	r3, r3
 800af86:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af88:	78fb      	ldrb	r3, [r7, #3]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af90:	b2da      	uxtb	r2, r3
 800af92:	4b31      	ldr	r3, [pc, #196]	@ (800b058 <xPortStartScheduler+0x134>)
 800af94:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af96:	4b31      	ldr	r3, [pc, #196]	@ (800b05c <xPortStartScheduler+0x138>)
 800af98:	2207      	movs	r2, #7
 800af9a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af9c:	e009      	b.n	800afb2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800af9e:	4b2f      	ldr	r3, [pc, #188]	@ (800b05c <xPortStartScheduler+0x138>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	4a2d      	ldr	r2, [pc, #180]	@ (800b05c <xPortStartScheduler+0x138>)
 800afa6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afb2:	78fb      	ldrb	r3, [r7, #3]
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afba:	2b80      	cmp	r3, #128	@ 0x80
 800afbc:	d0ef      	beq.n	800af9e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afbe:	4b27      	ldr	r3, [pc, #156]	@ (800b05c <xPortStartScheduler+0x138>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f1c3 0307 	rsb	r3, r3, #7
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	d00b      	beq.n	800afe2 <xPortStartScheduler+0xbe>
        __asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	60bb      	str	r3, [r7, #8]
    }
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
 800afe0:	e7fd      	b.n	800afde <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afe2:	4b1e      	ldr	r3, [pc, #120]	@ (800b05c <xPortStartScheduler+0x138>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	021b      	lsls	r3, r3, #8
 800afe8:	4a1c      	ldr	r2, [pc, #112]	@ (800b05c <xPortStartScheduler+0x138>)
 800afea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afec:	4b1b      	ldr	r3, [pc, #108]	@ (800b05c <xPortStartScheduler+0x138>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aff4:	4a19      	ldr	r2, [pc, #100]	@ (800b05c <xPortStartScheduler+0x138>)
 800aff6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	b2da      	uxtb	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b000:	4b17      	ldr	r3, [pc, #92]	@ (800b060 <xPortStartScheduler+0x13c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a16      	ldr	r2, [pc, #88]	@ (800b060 <xPortStartScheduler+0x13c>)
 800b006:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b00a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b00c:	4b14      	ldr	r3, [pc, #80]	@ (800b060 <xPortStartScheduler+0x13c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a13      	ldr	r2, [pc, #76]	@ (800b060 <xPortStartScheduler+0x13c>)
 800b012:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b016:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b018:	f000 f8e0 	bl	800b1dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b01c:	4b11      	ldr	r3, [pc, #68]	@ (800b064 <xPortStartScheduler+0x140>)
 800b01e:	2200      	movs	r2, #0
 800b020:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b022:	f000 f8ff 	bl	800b224 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b026:	4b10      	ldr	r3, [pc, #64]	@ (800b068 <xPortStartScheduler+0x144>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a0f      	ldr	r2, [pc, #60]	@ (800b068 <xPortStartScheduler+0x144>)
 800b02c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b030:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b032:	f7ff ff61 	bl	800aef8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b036:	f7fe fecb 	bl	8009dd0 <vTaskSwitchContext>
    prvTaskExitError();
 800b03a:	f7ff ff15 	bl	800ae68 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	e000ed00 	.word	0xe000ed00
 800b04c:	410fc271 	.word	0x410fc271
 800b050:	410fc270 	.word	0x410fc270
 800b054:	e000e400 	.word	0xe000e400
 800b058:	20000480 	.word	0x20000480
 800b05c:	20000484 	.word	0x20000484
 800b060:	e000ed20 	.word	0xe000ed20
 800b064:	20000010 	.word	0x20000010
 800b068:	e000ef34 	.word	0xe000ef34

0800b06c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
        __asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	607b      	str	r3, [r7, #4]
    }
 800b084:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b086:	4b10      	ldr	r3, [pc, #64]	@ (800b0c8 <vPortEnterCritical+0x5c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3301      	adds	r3, #1
 800b08c:	4a0e      	ldr	r2, [pc, #56]	@ (800b0c8 <vPortEnterCritical+0x5c>)
 800b08e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b090:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c8 <vPortEnterCritical+0x5c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d110      	bne.n	800b0ba <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b098:	4b0c      	ldr	r3, [pc, #48]	@ (800b0cc <vPortEnterCritical+0x60>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00b      	beq.n	800b0ba <vPortEnterCritical+0x4e>
        __asm volatile
 800b0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	603b      	str	r3, [r7, #0]
    }
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop
 800b0b8:	e7fd      	b.n	800b0b6 <vPortEnterCritical+0x4a>
    }
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	20000010 	.word	0x20000010
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b0d6:	4b12      	ldr	r3, [pc, #72]	@ (800b120 <vPortExitCritical+0x50>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10b      	bne.n	800b0f6 <vPortExitCritical+0x26>
        __asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	607b      	str	r3, [r7, #4]
    }
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	e7fd      	b.n	800b0f2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b120 <vPortExitCritical+0x50>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	4a08      	ldr	r2, [pc, #32]	@ (800b120 <vPortExitCritical+0x50>)
 800b0fe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b100:	4b07      	ldr	r3, [pc, #28]	@ (800b120 <vPortExitCritical+0x50>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d105      	bne.n	800b114 <vPortExitCritical+0x44>
 800b108:	2300      	movs	r3, #0
 800b10a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800b112:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	20000010 	.word	0x20000010
	...

0800b130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b130:	f3ef 8009 	mrs	r0, PSP
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	4b15      	ldr	r3, [pc, #84]	@ (800b190 <pxCurrentTCBConst>)
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	f01e 0f10 	tst.w	lr, #16
 800b140:	bf08      	it	eq
 800b142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14a:	6010      	str	r0, [r2, #0]
 800b14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b154:	f380 8811 	msr	BASEPRI, r0
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f7fe fe36 	bl	8009dd0 <vTaskSwitchContext>
 800b164:	f04f 0000 	mov.w	r0, #0
 800b168:	f380 8811 	msr	BASEPRI, r0
 800b16c:	bc09      	pop	{r0, r3}
 800b16e:	6819      	ldr	r1, [r3, #0]
 800b170:	6808      	ldr	r0, [r1, #0]
 800b172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b176:	f01e 0f10 	tst.w	lr, #16
 800b17a:	bf08      	it	eq
 800b17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b180:	f380 8809 	msr	PSP, r0
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	f3af 8000 	nop.w

0800b190 <pxCurrentTCBConst>:
 800b190:	20000340 	.word	0x20000340
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop

0800b198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
        __asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	607b      	str	r3, [r7, #4]
    }
 800b1b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b1b2:	f7fe fcf5 	bl	8009ba0 <xTaskIncrementTick>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1bc:	4b06      	ldr	r3, [pc, #24]	@ (800b1d8 <SysTick_Handler+0x40>)
 800b1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	f383 8811 	msr	BASEPRI, r3
    }
 800b1ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b1dc:	b480      	push	{r7}
 800b1de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b210 <vPortSetupTimerInterrupt+0x34>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b214 <vPortSetupTimerInterrupt+0x38>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b218 <vPortSetupTimerInterrupt+0x3c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b21c <vPortSetupTimerInterrupt+0x40>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	099b      	lsrs	r3, r3, #6
 800b1f8:	4a09      	ldr	r2, [pc, #36]	@ (800b220 <vPortSetupTimerInterrupt+0x44>)
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1fe:	4b04      	ldr	r3, [pc, #16]	@ (800b210 <vPortSetupTimerInterrupt+0x34>)
 800b200:	2207      	movs	r2, #7
 800b202:	601a      	str	r2, [r3, #0]
}
 800b204:	bf00      	nop
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	e000e010 	.word	0xe000e010
 800b214:	e000e018 	.word	0xe000e018
 800b218:	20000000 	.word	0x20000000
 800b21c:	10624dd3 	.word	0x10624dd3
 800b220:	e000e014 	.word	0xe000e014

0800b224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b234 <vPortEnableVFP+0x10>
 800b228:	6801      	ldr	r1, [r0, #0]
 800b22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b22e:	6001      	str	r1, [r0, #0]
 800b230:	4770      	bx	lr
 800b232:	0000      	.short	0x0000
 800b234:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b238:	bf00      	nop
 800b23a:	bf00      	nop

0800b23c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08a      	sub	sp, #40	@ 0x28
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800b244:	2300      	movs	r3, #0
 800b246:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800b248:	f7fe fb90 	bl	800996c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b24c:	4b54      	ldr	r3, [pc, #336]	@ (800b3a0 <pvPortMalloc+0x164>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d101      	bne.n	800b258 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b254:	f000 f90c 	bl	800b470 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d012      	beq.n	800b284 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800b25e:	2208      	movs	r2, #8
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f003 0307 	and.w	r3, r3, #7
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	3308      	adds	r3, #8
 800b26a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	43db      	mvns	r3, r3
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	429a      	cmp	r2, r3
 800b274:	d804      	bhi.n	800b280 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	4413      	add	r3, r2
 800b27c:	607b      	str	r3, [r7, #4]
 800b27e:	e001      	b.n	800b284 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800b280:	2300      	movs	r3, #0
 800b282:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	db71      	blt.n	800b36e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d06e      	beq.n	800b36e <pvPortMalloc+0x132>
 800b290:	4b44      	ldr	r3, [pc, #272]	@ (800b3a4 <pvPortMalloc+0x168>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	429a      	cmp	r2, r3
 800b298:	d869      	bhi.n	800b36e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b29a:	4b43      	ldr	r3, [pc, #268]	@ (800b3a8 <pvPortMalloc+0x16c>)
 800b29c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b29e:	4b42      	ldr	r3, [pc, #264]	@ (800b3a8 <pvPortMalloc+0x16c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2a4:	e004      	b.n	800b2b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d903      	bls.n	800b2c2 <pvPortMalloc+0x86>
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f1      	bne.n	800b2a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b2c2:	4b37      	ldr	r3, [pc, #220]	@ (800b3a0 <pvPortMalloc+0x164>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d050      	beq.n	800b36e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2208      	movs	r2, #8
 800b2d2:	4413      	add	r3, r2
 800b2d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	1ad2      	subs	r2, r2, r3
 800b2e6:	2308      	movs	r3, #8
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d920      	bls.n	800b330 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f003 0307 	and.w	r3, r3, #7
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <pvPortMalloc+0xdc>
        __asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	613b      	str	r3, [r7, #16]
    }
 800b312:	bf00      	nop
 800b314:	bf00      	nop
 800b316:	e7fd      	b.n	800b314 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	1ad2      	subs	r2, r2, r3
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b32a:	6978      	ldr	r0, [r7, #20]
 800b32c:	f000 f8fc 	bl	800b528 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b330:	4b1c      	ldr	r3, [pc, #112]	@ (800b3a4 <pvPortMalloc+0x168>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	4a1a      	ldr	r2, [pc, #104]	@ (800b3a4 <pvPortMalloc+0x168>)
 800b33c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b33e:	4b19      	ldr	r3, [pc, #100]	@ (800b3a4 <pvPortMalloc+0x168>)
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	4b1a      	ldr	r3, [pc, #104]	@ (800b3ac <pvPortMalloc+0x170>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	429a      	cmp	r2, r3
 800b348:	d203      	bcs.n	800b352 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b34a:	4b16      	ldr	r3, [pc, #88]	@ (800b3a4 <pvPortMalloc+0x168>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a17      	ldr	r2, [pc, #92]	@ (800b3ac <pvPortMalloc+0x170>)
 800b350:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b364:	4b12      	ldr	r3, [pc, #72]	@ (800b3b0 <pvPortMalloc+0x174>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3301      	adds	r3, #1
 800b36a:	4a11      	ldr	r2, [pc, #68]	@ (800b3b0 <pvPortMalloc+0x174>)
 800b36c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b36e:	f7fe fb0b 	bl	8009988 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	f003 0307 	and.w	r3, r3, #7
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00b      	beq.n	800b394 <pvPortMalloc+0x158>
        __asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	60fb      	str	r3, [r7, #12]
    }
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	e7fd      	b.n	800b390 <pvPortMalloc+0x154>
    return pvReturn;
 800b394:	69fb      	ldr	r3, [r7, #28]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3728      	adds	r7, #40	@ 0x28
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20013090 	.word	0x20013090
 800b3a4:	20013094 	.word	0x20013094
 800b3a8:	20013088 	.word	0x20013088
 800b3ac:	20013098 	.word	0x20013098
 800b3b0:	2001309c 	.word	0x2001309c

0800b3b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d04b      	beq.n	800b45e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800b3c6:	2308      	movs	r3, #8
 800b3c8:	425b      	negs	r3, r3
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db0b      	blt.n	800b3f4 <vPortFree+0x40>
        __asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	60fb      	str	r3, [r7, #12]
    }
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
 800b3f2:	e7fd      	b.n	800b3f0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00b      	beq.n	800b414 <vPortFree+0x60>
        __asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	60bb      	str	r3, [r7, #8]
    }
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	0fdb      	lsrs	r3, r3, #31
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d01c      	beq.n	800b45e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d118      	bne.n	800b45e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800b438:	f7fe fa98 	bl	800996c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	4b09      	ldr	r3, [pc, #36]	@ (800b468 <vPortFree+0xb4>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4413      	add	r3, r2
 800b446:	4a08      	ldr	r2, [pc, #32]	@ (800b468 <vPortFree+0xb4>)
 800b448:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b44a:	6938      	ldr	r0, [r7, #16]
 800b44c:	f000 f86c 	bl	800b528 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800b450:	4b06      	ldr	r3, [pc, #24]	@ (800b46c <vPortFree+0xb8>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	3301      	adds	r3, #1
 800b456:	4a05      	ldr	r2, [pc, #20]	@ (800b46c <vPortFree+0xb8>)
 800b458:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800b45a:	f7fe fa95 	bl	8009988 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800b45e:	bf00      	nop
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20013094 	.word	0x20013094
 800b46c:	200130a0 	.word	0x200130a0

0800b470 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b476:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800b47a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b47c:	4b25      	ldr	r3, [pc, #148]	@ (800b514 <prvHeapInit+0xa4>)
 800b47e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f003 0307 	and.w	r3, r3, #7
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00c      	beq.n	800b4a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3307      	adds	r3, #7
 800b48e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f023 0307 	bic.w	r3, r3, #7
 800b496:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	4a1d      	ldr	r2, [pc, #116]	@ (800b514 <prvHeapInit+0xa4>)
 800b4a0:	4413      	add	r3, r2
 800b4a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4a8:	4a1b      	ldr	r2, [pc, #108]	@ (800b518 <prvHeapInit+0xa8>)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800b4ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b518 <prvHeapInit+0xa8>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800b4bc:	2208      	movs	r2, #8
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	1a9b      	subs	r3, r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f023 0307 	bic.w	r3, r3, #7
 800b4ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	4a13      	ldr	r2, [pc, #76]	@ (800b51c <prvHeapInit+0xac>)
 800b4d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800b4d2:	4b12      	ldr	r3, [pc, #72]	@ (800b51c <prvHeapInit+0xac>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800b4da:	4b10      	ldr	r3, [pc, #64]	@ (800b51c <prvHeapInit+0xac>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	1ad2      	subs	r2, r2, r3
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b51c <prvHeapInit+0xac>)
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	4a08      	ldr	r2, [pc, #32]	@ (800b520 <prvHeapInit+0xb0>)
 800b4fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	4a07      	ldr	r2, [pc, #28]	@ (800b524 <prvHeapInit+0xb4>)
 800b506:	6013      	str	r3, [r2, #0]
}
 800b508:	bf00      	nop
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	20000488 	.word	0x20000488
 800b518:	20013088 	.word	0x20013088
 800b51c:	20013090 	.word	0x20013090
 800b520:	20013098 	.word	0x20013098
 800b524:	20013094 	.word	0x20013094

0800b528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b530:	4b28      	ldr	r3, [pc, #160]	@ (800b5d4 <prvInsertBlockIntoFreeList+0xac>)
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	e002      	b.n	800b53c <prvInsertBlockIntoFreeList+0x14>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	429a      	cmp	r2, r3
 800b544:	d8f7      	bhi.n	800b536 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	4413      	add	r3, r2
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	d108      	bne.n	800b56a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	441a      	add	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	68ba      	ldr	r2, [r7, #8]
 800b574:	441a      	add	r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d118      	bne.n	800b5b0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	4b15      	ldr	r3, [pc, #84]	@ (800b5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d00d      	beq.n	800b5a6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	441a      	add	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	e008      	b.n	800b5b8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	601a      	str	r2, [r3, #0]
 800b5ae:	e003      	b.n	800b5b8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d002      	beq.n	800b5c6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b5c6:	bf00      	nop
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20013088 	.word	0x20013088
 800b5d8:	20013090 	.word	0x20013090

0800b5dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b5e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b5ec:	f002 fd42 	bl	800e074 <USBD_static_malloc>
 800b5f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d109      	bne.n	800b60c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	32b0      	adds	r2, #176	@ 0xb0
 800b602:	2100      	movs	r1, #0
 800b604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b608:	2302      	movs	r3, #2
 800b60a:	e0d4      	b.n	800b7b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b60c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b610:	2100      	movs	r1, #0
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f002 fd72 	bl	800e0fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	32b0      	adds	r2, #176	@ 0xb0
 800b622:	68f9      	ldr	r1, [r7, #12]
 800b624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	32b0      	adds	r2, #176	@ 0xb0
 800b632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	7c1b      	ldrb	r3, [r3, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d138      	bne.n	800b6b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b644:	4b5e      	ldr	r3, [pc, #376]	@ (800b7c0 <USBD_CDC_Init+0x1e4>)
 800b646:	7819      	ldrb	r1, [r3, #0]
 800b648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b64c:	2202      	movs	r2, #2
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f002 fbed 	bl	800de2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b654:	4b5a      	ldr	r3, [pc, #360]	@ (800b7c0 <USBD_CDC_Init+0x1e4>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	f003 020f 	and.w	r2, r3, #15
 800b65c:	6879      	ldr	r1, [r7, #4]
 800b65e:	4613      	mov	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	440b      	add	r3, r1
 800b668:	3324      	adds	r3, #36	@ 0x24
 800b66a:	2201      	movs	r2, #1
 800b66c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b66e:	4b55      	ldr	r3, [pc, #340]	@ (800b7c4 <USBD_CDC_Init+0x1e8>)
 800b670:	7819      	ldrb	r1, [r3, #0]
 800b672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b676:	2202      	movs	r2, #2
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f002 fbd8 	bl	800de2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b67e:	4b51      	ldr	r3, [pc, #324]	@ (800b7c4 <USBD_CDC_Init+0x1e8>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	f003 020f 	and.w	r2, r3, #15
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	4613      	mov	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4413      	add	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	440b      	add	r3, r1
 800b692:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b696:	2201      	movs	r2, #1
 800b698:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b69a:	4b4b      	ldr	r3, [pc, #300]	@ (800b7c8 <USBD_CDC_Init+0x1ec>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	f003 020f 	and.w	r2, r3, #15
 800b6a2:	6879      	ldr	r1, [r7, #4]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	440b      	add	r3, r1
 800b6ae:	3326      	adds	r3, #38	@ 0x26
 800b6b0:	2210      	movs	r2, #16
 800b6b2:	801a      	strh	r2, [r3, #0]
 800b6b4:	e035      	b.n	800b722 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b6b6:	4b42      	ldr	r3, [pc, #264]	@ (800b7c0 <USBD_CDC_Init+0x1e4>)
 800b6b8:	7819      	ldrb	r1, [r3, #0]
 800b6ba:	2340      	movs	r3, #64	@ 0x40
 800b6bc:	2202      	movs	r2, #2
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f002 fbb5 	bl	800de2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b6c4:	4b3e      	ldr	r3, [pc, #248]	@ (800b7c0 <USBD_CDC_Init+0x1e4>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 020f 	and.w	r2, r3, #15
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	3324      	adds	r3, #36	@ 0x24
 800b6da:	2201      	movs	r2, #1
 800b6dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b6de:	4b39      	ldr	r3, [pc, #228]	@ (800b7c4 <USBD_CDC_Init+0x1e8>)
 800b6e0:	7819      	ldrb	r1, [r3, #0]
 800b6e2:	2340      	movs	r3, #64	@ 0x40
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f002 fba1 	bl	800de2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b6ec:	4b35      	ldr	r3, [pc, #212]	@ (800b7c4 <USBD_CDC_Init+0x1e8>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	f003 020f 	and.w	r2, r3, #15
 800b6f4:	6879      	ldr	r1, [r7, #4]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	440b      	add	r3, r1
 800b700:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b704:	2201      	movs	r2, #1
 800b706:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b708:	4b2f      	ldr	r3, [pc, #188]	@ (800b7c8 <USBD_CDC_Init+0x1ec>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	f003 020f 	and.w	r2, r3, #15
 800b710:	6879      	ldr	r1, [r7, #4]
 800b712:	4613      	mov	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	440b      	add	r3, r1
 800b71c:	3326      	adds	r3, #38	@ 0x26
 800b71e:	2210      	movs	r2, #16
 800b720:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b722:	4b29      	ldr	r3, [pc, #164]	@ (800b7c8 <USBD_CDC_Init+0x1ec>)
 800b724:	7819      	ldrb	r1, [r3, #0]
 800b726:	2308      	movs	r3, #8
 800b728:	2203      	movs	r2, #3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f002 fb7f 	bl	800de2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b730:	4b25      	ldr	r3, [pc, #148]	@ (800b7c8 <USBD_CDC_Init+0x1ec>)
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	f003 020f 	and.w	r2, r3, #15
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	4613      	mov	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	440b      	add	r3, r1
 800b744:	3324      	adds	r3, #36	@ 0x24
 800b746:	2201      	movs	r2, #1
 800b748:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	33b0      	adds	r3, #176	@ 0xb0
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b780:	2302      	movs	r3, #2
 800b782:	e018      	b.n	800b7b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7c1b      	ldrb	r3, [r3, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b78c:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c4 <USBD_CDC_Init+0x1e8>)
 800b78e:	7819      	ldrb	r1, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f002 fc36 	bl	800e00c <USBD_LL_PrepareReceive>
 800b7a0:	e008      	b.n	800b7b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7a2:	4b08      	ldr	r3, [pc, #32]	@ (800b7c4 <USBD_CDC_Init+0x1e8>)
 800b7a4:	7819      	ldrb	r1, [r3, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7ac:	2340      	movs	r3, #64	@ 0x40
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f002 fc2c 	bl	800e00c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	2000009b 	.word	0x2000009b
 800b7c4:	2000009c 	.word	0x2000009c
 800b7c8:	2000009d 	.word	0x2000009d

0800b7cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b7d8:	4b3a      	ldr	r3, [pc, #232]	@ (800b8c4 <USBD_CDC_DeInit+0xf8>)
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f002 fb4b 	bl	800de7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b7e4:	4b37      	ldr	r3, [pc, #220]	@ (800b8c4 <USBD_CDC_DeInit+0xf8>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	f003 020f 	and.w	r2, r3, #15
 800b7ec:	6879      	ldr	r1, [r7, #4]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	440b      	add	r3, r1
 800b7f8:	3324      	adds	r3, #36	@ 0x24
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b7fe:	4b32      	ldr	r3, [pc, #200]	@ (800b8c8 <USBD_CDC_DeInit+0xfc>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f002 fb38 	bl	800de7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b80a:	4b2f      	ldr	r3, [pc, #188]	@ (800b8c8 <USBD_CDC_DeInit+0xfc>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	f003 020f 	and.w	r2, r3, #15
 800b812:	6879      	ldr	r1, [r7, #4]
 800b814:	4613      	mov	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4413      	add	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	440b      	add	r3, r1
 800b81e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b822:	2200      	movs	r2, #0
 800b824:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b826:	4b29      	ldr	r3, [pc, #164]	@ (800b8cc <USBD_CDC_DeInit+0x100>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f002 fb24 	bl	800de7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b832:	4b26      	ldr	r3, [pc, #152]	@ (800b8cc <USBD_CDC_DeInit+0x100>)
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	f003 020f 	and.w	r2, r3, #15
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	440b      	add	r3, r1
 800b846:	3324      	adds	r3, #36	@ 0x24
 800b848:	2200      	movs	r2, #0
 800b84a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b84c:	4b1f      	ldr	r3, [pc, #124]	@ (800b8cc <USBD_CDC_DeInit+0x100>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f003 020f 	and.w	r2, r3, #15
 800b854:	6879      	ldr	r1, [r7, #4]
 800b856:	4613      	mov	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4413      	add	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	440b      	add	r3, r1
 800b860:	3326      	adds	r3, #38	@ 0x26
 800b862:	2200      	movs	r2, #0
 800b864:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	32b0      	adds	r2, #176	@ 0xb0
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d01f      	beq.n	800b8b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	33b0      	adds	r3, #176	@ 0xb0
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	32b0      	adds	r2, #176	@ 0xb0
 800b896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f002 fbf8 	bl	800e090 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	32b0      	adds	r2, #176	@ 0xb0
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	2000009b 	.word	0x2000009b
 800b8c8:	2000009c 	.word	0x2000009c
 800b8cc:	2000009d 	.word	0x2000009d

0800b8d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	32b0      	adds	r2, #176	@ 0xb0
 800b8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e0bf      	b.n	800ba80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d050      	beq.n	800b9ae <USBD_CDC_Setup+0xde>
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	f040 80af 	bne.w	800ba70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	88db      	ldrh	r3, [r3, #6]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d03a      	beq.n	800b990 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	b25b      	sxtb	r3, r3
 800b920:	2b00      	cmp	r3, #0
 800b922:	da1b      	bge.n	800b95c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	33b0      	adds	r3, #176	@ 0xb0
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b93a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	88d2      	ldrh	r2, [r2, #6]
 800b940:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	88db      	ldrh	r3, [r3, #6]
 800b946:	2b07      	cmp	r3, #7
 800b948:	bf28      	it	cs
 800b94a:	2307      	movcs	r3, #7
 800b94c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	89fa      	ldrh	r2, [r7, #14]
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f001 fd93 	bl	800d480 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b95a:	e090      	b.n	800ba7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	785a      	ldrb	r2, [r3, #1]
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	88db      	ldrh	r3, [r3, #6]
 800b96a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b96c:	d803      	bhi.n	800b976 <USBD_CDC_Setup+0xa6>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	88db      	ldrh	r3, [r3, #6]
 800b972:	b2da      	uxtb	r2, r3
 800b974:	e000      	b.n	800b978 <USBD_CDC_Setup+0xa8>
 800b976:	2240      	movs	r2, #64	@ 0x40
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b97e:	6939      	ldr	r1, [r7, #16]
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b986:	461a      	mov	r2, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f001 fda5 	bl	800d4d8 <USBD_CtlPrepareRx>
      break;
 800b98e:	e076      	b.n	800ba7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	33b0      	adds	r3, #176	@ 0xb0
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	7850      	ldrb	r0, [r2, #1]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	4798      	blx	r3
      break;
 800b9ac:	e067      	b.n	800ba7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	785b      	ldrb	r3, [r3, #1]
 800b9b2:	2b0b      	cmp	r3, #11
 800b9b4:	d851      	bhi.n	800ba5a <USBD_CDC_Setup+0x18a>
 800b9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9bc <USBD_CDC_Setup+0xec>)
 800b9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9bc:	0800b9ed 	.word	0x0800b9ed
 800b9c0:	0800ba69 	.word	0x0800ba69
 800b9c4:	0800ba5b 	.word	0x0800ba5b
 800b9c8:	0800ba5b 	.word	0x0800ba5b
 800b9cc:	0800ba5b 	.word	0x0800ba5b
 800b9d0:	0800ba5b 	.word	0x0800ba5b
 800b9d4:	0800ba5b 	.word	0x0800ba5b
 800b9d8:	0800ba5b 	.word	0x0800ba5b
 800b9dc:	0800ba5b 	.word	0x0800ba5b
 800b9e0:	0800ba5b 	.word	0x0800ba5b
 800b9e4:	0800ba17 	.word	0x0800ba17
 800b9e8:	0800ba41 	.word	0x0800ba41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	d107      	bne.n	800ba08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9f8:	f107 030a 	add.w	r3, r7, #10
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 fd3d 	bl	800d480 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba06:	e032      	b.n	800ba6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f001 fcbb 	bl	800d386 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	75fb      	strb	r3, [r7, #23]
          break;
 800ba14:	e02b      	b.n	800ba6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d107      	bne.n	800ba32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ba22:	f107 030d 	add.w	r3, r7, #13
 800ba26:	2201      	movs	r2, #1
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f001 fd28 	bl	800d480 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba30:	e01d      	b.n	800ba6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 fca6 	bl	800d386 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	75fb      	strb	r3, [r7, #23]
          break;
 800ba3e:	e016      	b.n	800ba6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d00f      	beq.n	800ba6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f001 fc99 	bl	800d386 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba54:	2303      	movs	r3, #3
 800ba56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ba58:	e008      	b.n	800ba6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f001 fc92 	bl	800d386 <USBD_CtlError>
          ret = USBD_FAIL;
 800ba62:	2303      	movs	r3, #3
 800ba64:	75fb      	strb	r3, [r7, #23]
          break;
 800ba66:	e002      	b.n	800ba6e <USBD_CDC_Setup+0x19e>
          break;
 800ba68:	bf00      	nop
 800ba6a:	e008      	b.n	800ba7e <USBD_CDC_Setup+0x1ae>
          break;
 800ba6c:	bf00      	nop
      }
      break;
 800ba6e:	e006      	b.n	800ba7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f001 fc87 	bl	800d386 <USBD_CtlError>
      ret = USBD_FAIL;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba7c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3718      	adds	r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	32b0      	adds	r2, #176	@ 0xb0
 800baa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800baae:	2303      	movs	r3, #3
 800bab0:	e065      	b.n	800bb7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	32b0      	adds	r2, #176	@ 0xb0
 800babc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	f003 020f 	and.w	r2, r3, #15
 800bac8:	6879      	ldr	r1, [r7, #4]
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	440b      	add	r3, r1
 800bad4:	3318      	adds	r3, #24
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d02f      	beq.n	800bb3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	f003 020f 	and.w	r2, r3, #15
 800bae2:	6879      	ldr	r1, [r7, #4]
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	440b      	add	r3, r1
 800baee:	3318      	adds	r3, #24
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	78fb      	ldrb	r3, [r7, #3]
 800baf4:	f003 010f 	and.w	r1, r3, #15
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	460b      	mov	r3, r1
 800bafc:	00db      	lsls	r3, r3, #3
 800bafe:	440b      	add	r3, r1
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4403      	add	r3, r0
 800bb04:	331c      	adds	r3, #28
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	fbb2 f1f3 	udiv	r1, r2, r3
 800bb0c:	fb01 f303 	mul.w	r3, r1, r3
 800bb10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d112      	bne.n	800bb3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	f003 020f 	and.w	r2, r3, #15
 800bb1c:	6879      	ldr	r1, [r7, #4]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	440b      	add	r3, r1
 800bb28:	3318      	adds	r3, #24
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bb2e:	78f9      	ldrb	r1, [r7, #3]
 800bb30:	2300      	movs	r3, #0
 800bb32:	2200      	movs	r2, #0
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f002 fa48 	bl	800dfca <USBD_LL_Transmit>
 800bb3a:	e01f      	b.n	800bb7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	33b0      	adds	r3, #176	@ 0xb0
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d010      	beq.n	800bb7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	33b0      	adds	r3, #176	@ 0xb0
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bb78:	78fa      	ldrb	r2, [r7, #3]
 800bb7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	32b0      	adds	r2, #176	@ 0xb0
 800bb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	32b0      	adds	r2, #176	@ 0xb0
 800bbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d101      	bne.n	800bbb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e01a      	b.n	800bbee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bbb8:	78fb      	ldrb	r3, [r7, #3]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f002 fa46 	bl	800e04e <USBD_LL_GetRxDataSize>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	33b0      	adds	r3, #176	@ 0xb0
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bbe8:	4611      	mov	r1, r2
 800bbea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	32b0      	adds	r2, #176	@ 0xb0
 800bc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e024      	b.n	800bc62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	33b0      	adds	r3, #176	@ 0xb0
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d019      	beq.n	800bc60 <USBD_CDC_EP0_RxReady+0x6a>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bc32:	2bff      	cmp	r3, #255	@ 0xff
 800bc34:	d014      	beq.n	800bc60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	33b0      	adds	r3, #176	@ 0xb0
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bc4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bc56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	22ff      	movs	r2, #255	@ 0xff
 800bc5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc74:	2182      	movs	r1, #130	@ 0x82
 800bc76:	4818      	ldr	r0, [pc, #96]	@ (800bcd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc78:	f000 fd4f 	bl	800c71a <USBD_GetEpDesc>
 800bc7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc7e:	2101      	movs	r1, #1
 800bc80:	4815      	ldr	r0, [pc, #84]	@ (800bcd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc82:	f000 fd4a 	bl	800c71a <USBD_GetEpDesc>
 800bc86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc88:	2181      	movs	r1, #129	@ 0x81
 800bc8a:	4813      	ldr	r0, [pc, #76]	@ (800bcd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc8c:	f000 fd45 	bl	800c71a <USBD_GetEpDesc>
 800bc90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2210      	movs	r2, #16
 800bc9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d006      	beq.n	800bcb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcac:	711a      	strb	r2, [r3, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d006      	beq.n	800bcc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcc0:	711a      	strb	r2, [r3, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2243      	movs	r2, #67	@ 0x43
 800bcca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bccc:	4b02      	ldr	r3, [pc, #8]	@ (800bcd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20000058 	.word	0x20000058

0800bcdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bce4:	2182      	movs	r1, #130	@ 0x82
 800bce6:	4818      	ldr	r0, [pc, #96]	@ (800bd48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bce8:	f000 fd17 	bl	800c71a <USBD_GetEpDesc>
 800bcec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bcee:	2101      	movs	r1, #1
 800bcf0:	4815      	ldr	r0, [pc, #84]	@ (800bd48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bcf2:	f000 fd12 	bl	800c71a <USBD_GetEpDesc>
 800bcf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bcf8:	2181      	movs	r1, #129	@ 0x81
 800bcfa:	4813      	ldr	r0, [pc, #76]	@ (800bd48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bcfc:	f000 fd0d 	bl	800c71a <USBD_GetEpDesc>
 800bd00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d002      	beq.n	800bd0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	2210      	movs	r2, #16
 800bd0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d006      	beq.n	800bd22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	2200      	movs	r2, #0
 800bd18:	711a      	strb	r2, [r3, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f042 0202 	orr.w	r2, r2, #2
 800bd20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d006      	beq.n	800bd36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	711a      	strb	r2, [r3, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f042 0202 	orr.w	r2, r2, #2
 800bd34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2243      	movs	r2, #67	@ 0x43
 800bd3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bd3c:	4b02      	ldr	r3, [pc, #8]	@ (800bd48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3718      	adds	r7, #24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20000058 	.word	0x20000058

0800bd4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd54:	2182      	movs	r1, #130	@ 0x82
 800bd56:	4818      	ldr	r0, [pc, #96]	@ (800bdb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd58:	f000 fcdf 	bl	800c71a <USBD_GetEpDesc>
 800bd5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd5e:	2101      	movs	r1, #1
 800bd60:	4815      	ldr	r0, [pc, #84]	@ (800bdb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd62:	f000 fcda 	bl	800c71a <USBD_GetEpDesc>
 800bd66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd68:	2181      	movs	r1, #129	@ 0x81
 800bd6a:	4813      	ldr	r0, [pc, #76]	@ (800bdb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd6c:	f000 fcd5 	bl	800c71a <USBD_GetEpDesc>
 800bd70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2210      	movs	r2, #16
 800bd7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d006      	beq.n	800bd92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd8c:	711a      	strb	r2, [r3, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d006      	beq.n	800bda6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bda0:	711a      	strb	r2, [r3, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2243      	movs	r2, #67	@ 0x43
 800bdaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bdac:	4b02      	ldr	r3, [pc, #8]	@ (800bdb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3718      	adds	r7, #24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000058 	.word	0x20000058

0800bdbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	220a      	movs	r2, #10
 800bdc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bdca:	4b03      	ldr	r3, [pc, #12]	@ (800bdd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr
 800bdd8:	20000014 	.word	0x20000014

0800bddc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bdec:	2303      	movs	r3, #3
 800bdee:	e009      	b.n	800be04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	33b0      	adds	r3, #176	@ 0xb0
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	32b0      	adds	r2, #176	@ 0xb0
 800be26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800be32:	2303      	movs	r3, #3
 800be34:	e008      	b.n	800be48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	32b0      	adds	r2, #176	@ 0xb0
 800be68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800be74:	2303      	movs	r3, #3
 800be76:	e004      	b.n	800be82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
	...

0800be90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	32b0      	adds	r2, #176	@ 0xb0
 800bea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bea8:	2301      	movs	r3, #1
 800beaa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e025      	b.n	800bf02 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d11f      	bne.n	800bf00 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bec8:	4b10      	ldr	r3, [pc, #64]	@ (800bf0c <USBD_CDC_TransmitPacket+0x7c>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	f003 020f 	and.w	r2, r3, #15
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	4613      	mov	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4403      	add	r3, r0
 800bee2:	3318      	adds	r3, #24
 800bee4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bee6:	4b09      	ldr	r3, [pc, #36]	@ (800bf0c <USBD_CDC_TransmitPacket+0x7c>)
 800bee8:	7819      	ldrb	r1, [r3, #0]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f002 f867 	bl	800dfca <USBD_LL_Transmit>

    ret = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	2000009b 	.word	0x2000009b

0800bf10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	32b0      	adds	r2, #176	@ 0xb0
 800bf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	32b0      	adds	r2, #176	@ 0xb0
 800bf32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d101      	bne.n	800bf3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e018      	b.n	800bf70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	7c1b      	ldrb	r3, [r3, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10a      	bne.n	800bf5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf46:	4b0c      	ldr	r3, [pc, #48]	@ (800bf78 <USBD_CDC_ReceivePacket+0x68>)
 800bf48:	7819      	ldrb	r1, [r3, #0]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bf50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f002 f859 	bl	800e00c <USBD_LL_PrepareReceive>
 800bf5a:	e008      	b.n	800bf6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf5c:	4b06      	ldr	r3, [pc, #24]	@ (800bf78 <USBD_CDC_ReceivePacket+0x68>)
 800bf5e:	7819      	ldrb	r1, [r3, #0]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bf66:	2340      	movs	r3, #64	@ 0x40
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f002 f84f 	bl	800e00c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	2000009c 	.word	0x2000009c

0800bf7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	4613      	mov	r3, r2
 800bf88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e01f      	b.n	800bfd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	79fa      	ldrb	r2, [r7, #7]
 800bfc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f001 fec9 	bl	800dd60 <USBD_LL_Init>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e025      	b.n	800c040 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	32ae      	adds	r2, #174	@ 0xae
 800c006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00f      	beq.n	800c030 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	32ae      	adds	r2, #174	@ 0xae
 800c01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c020:	f107 020e 	add.w	r2, r7, #14
 800c024:	4610      	mov	r0, r2
 800c026:	4798      	blx	r3
 800c028:	4602      	mov	r2, r0
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c036:	1c5a      	adds	r2, r3, #1
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f001 fed1 	bl	800ddf8 <USBD_LL_Start>
 800c056:	4603      	mov	r3, r0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c068:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b084      	sub	sp, #16
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	460b      	mov	r3, r1
 800c080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d009      	beq.n	800c0a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	4611      	mov	r1, r2
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	4798      	blx	r3
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	78fa      	ldrb	r2, [r7, #3]
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	4798      	blx	r3
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d001      	beq.n	800c0d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f001 f90c 	bl	800d312 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c108:	461a      	mov	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c116:	f003 031f 	and.w	r3, r3, #31
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d01a      	beq.n	800c154 <USBD_LL_SetupStage+0x72>
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d822      	bhi.n	800c168 <USBD_LL_SetupStage+0x86>
 800c122:	2b00      	cmp	r3, #0
 800c124:	d002      	beq.n	800c12c <USBD_LL_SetupStage+0x4a>
 800c126:	2b01      	cmp	r3, #1
 800c128:	d00a      	beq.n	800c140 <USBD_LL_SetupStage+0x5e>
 800c12a:	e01d      	b.n	800c168 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 fb63 	bl	800c800 <USBD_StdDevReq>
 800c13a:	4603      	mov	r3, r0
 800c13c:	73fb      	strb	r3, [r7, #15]
      break;
 800c13e:	e020      	b.n	800c182 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fbcb 	bl	800c8e4 <USBD_StdItfReq>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]
      break;
 800c152:	e016      	b.n	800c182 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c15a:	4619      	mov	r1, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fc2d 	bl	800c9bc <USBD_StdEPReq>
 800c162:	4603      	mov	r3, r0
 800c164:	73fb      	strb	r3, [r7, #15]
      break;
 800c166:	e00c      	b.n	800c182 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c16e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c172:	b2db      	uxtb	r3, r3
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f001 fe9e 	bl	800deb8 <USBD_LL_StallEP>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73fb      	strb	r3, [r7, #15]
      break;
 800c180:	bf00      	nop
  }

  return ret;
 800c182:	7bfb      	ldrb	r3, [r7, #15]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	460b      	mov	r3, r1
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c19e:	7afb      	ldrb	r3, [r7, #11]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d16e      	bne.n	800c282 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c1aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c1b2:	2b03      	cmp	r3, #3
 800c1b4:	f040 8098 	bne.w	800c2e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	689a      	ldr	r2, [r3, #8]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d913      	bls.n	800c1ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	689a      	ldr	r2, [r3, #8]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	1ad2      	subs	r2, r2, r3
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	bf28      	it	cs
 800c1de:	4613      	movcs	r3, r2
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f001 f994 	bl	800d512 <USBD_CtlContinueRx>
 800c1ea:	e07d      	b.n	800c2e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c1f2:	f003 031f 	and.w	r3, r3, #31
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	d014      	beq.n	800c224 <USBD_LL_DataOutStage+0x98>
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d81d      	bhi.n	800c23a <USBD_LL_DataOutStage+0xae>
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <USBD_LL_DataOutStage+0x7c>
 800c202:	2b01      	cmp	r3, #1
 800c204:	d003      	beq.n	800c20e <USBD_LL_DataOutStage+0x82>
 800c206:	e018      	b.n	800c23a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c208:	2300      	movs	r3, #0
 800c20a:	75bb      	strb	r3, [r7, #22]
            break;
 800c20c:	e018      	b.n	800c240 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c214:	b2db      	uxtb	r3, r3
 800c216:	4619      	mov	r1, r3
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f000 fa64 	bl	800c6e6 <USBD_CoreFindIF>
 800c21e:	4603      	mov	r3, r0
 800c220:	75bb      	strb	r3, [r7, #22]
            break;
 800c222:	e00d      	b.n	800c240 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	4619      	mov	r1, r3
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 fa66 	bl	800c700 <USBD_CoreFindEP>
 800c234:	4603      	mov	r3, r0
 800c236:	75bb      	strb	r3, [r7, #22]
            break;
 800c238:	e002      	b.n	800c240 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c23a:	2300      	movs	r3, #0
 800c23c:	75bb      	strb	r3, [r7, #22]
            break;
 800c23e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c240:	7dbb      	ldrb	r3, [r7, #22]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d119      	bne.n	800c27a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d113      	bne.n	800c27a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c252:	7dba      	ldrb	r2, [r7, #22]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	32ae      	adds	r2, #174	@ 0xae
 800c258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00b      	beq.n	800c27a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c262:	7dba      	ldrb	r2, [r7, #22]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c26a:	7dba      	ldrb	r2, [r7, #22]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	32ae      	adds	r2, #174	@ 0xae
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f001 f95a 	bl	800d534 <USBD_CtlSendStatus>
 800c280:	e032      	b.n	800c2e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c282:	7afb      	ldrb	r3, [r7, #11]
 800c284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	4619      	mov	r1, r3
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f000 fa37 	bl	800c700 <USBD_CoreFindEP>
 800c292:	4603      	mov	r3, r0
 800c294:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c296:	7dbb      	ldrb	r3, [r7, #22]
 800c298:	2bff      	cmp	r3, #255	@ 0xff
 800c29a:	d025      	beq.n	800c2e8 <USBD_LL_DataOutStage+0x15c>
 800c29c:	7dbb      	ldrb	r3, [r7, #22]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d122      	bne.n	800c2e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d117      	bne.n	800c2de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c2ae:	7dba      	ldrb	r2, [r7, #22]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	32ae      	adds	r2, #174	@ 0xae
 800c2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00f      	beq.n	800c2de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c2be:	7dba      	ldrb	r2, [r7, #22]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c2c6:	7dba      	ldrb	r2, [r7, #22]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	32ae      	adds	r2, #174	@ 0xae
 800c2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	7afa      	ldrb	r2, [r7, #11]
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	4798      	blx	r3
 800c2da:	4603      	mov	r3, r0
 800c2dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c2de:	7dfb      	ldrb	r3, [r7, #23]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d001      	beq.n	800c2e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c2e4:	7dfb      	ldrb	r3, [r7, #23]
 800c2e6:	e000      	b.n	800c2ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b086      	sub	sp, #24
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	607a      	str	r2, [r7, #4]
 800c2fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d16f      	bne.n	800c3e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3314      	adds	r3, #20
 800c30a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c312:	2b02      	cmp	r3, #2
 800c314:	d15a      	bne.n	800c3cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	689a      	ldr	r2, [r3, #8]
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d914      	bls.n	800c34c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	1ad2      	subs	r2, r2, r3
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	461a      	mov	r2, r3
 800c336:	6879      	ldr	r1, [r7, #4]
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f001 f8bc 	bl	800d4b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c33e:	2300      	movs	r3, #0
 800c340:	2200      	movs	r2, #0
 800c342:	2100      	movs	r1, #0
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f001 fe61 	bl	800e00c <USBD_LL_PrepareReceive>
 800c34a:	e03f      	b.n	800c3cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	68da      	ldr	r2, [r3, #12]
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	429a      	cmp	r2, r3
 800c356:	d11c      	bne.n	800c392 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c360:	429a      	cmp	r2, r3
 800c362:	d316      	bcc.n	800c392 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c36e:	429a      	cmp	r2, r3
 800c370:	d20f      	bcs.n	800c392 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c372:	2200      	movs	r2, #0
 800c374:	2100      	movs	r1, #0
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f001 f89d 	bl	800d4b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c384:	2300      	movs	r3, #0
 800c386:	2200      	movs	r2, #0
 800c388:	2100      	movs	r1, #0
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f001 fe3e 	bl	800e00c <USBD_LL_PrepareReceive>
 800c390:	e01c      	b.n	800c3cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d10f      	bne.n	800c3be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d009      	beq.n	800c3be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3be:	2180      	movs	r1, #128	@ 0x80
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f001 fd79 	bl	800deb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f001 f8c7 	bl	800d55a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d03a      	beq.n	800c44c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f7ff fe42 	bl	800c060 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c3e4:	e032      	b.n	800c44c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c3e6:	7afb      	ldrb	r3, [r7, #11]
 800c3e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f000 f985 	bl	800c700 <USBD_CoreFindEP>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	2bff      	cmp	r3, #255	@ 0xff
 800c3fe:	d025      	beq.n	800c44c <USBD_LL_DataInStage+0x15a>
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d122      	bne.n	800c44c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d11c      	bne.n	800c44c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c412:	7dfa      	ldrb	r2, [r7, #23]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	32ae      	adds	r2, #174	@ 0xae
 800c418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d014      	beq.n	800c44c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c422:	7dfa      	ldrb	r2, [r7, #23]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c42a:	7dfa      	ldrb	r2, [r7, #23]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	32ae      	adds	r2, #174	@ 0xae
 800c430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c434:	695b      	ldr	r3, [r3, #20]
 800c436:	7afa      	ldrb	r2, [r7, #11]
 800c438:	4611      	mov	r1, r2
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	4798      	blx	r3
 800c43e:	4603      	mov	r3, r0
 800c440:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c442:	7dbb      	ldrb	r3, [r7, #22]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d001      	beq.n	800c44c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c448:	7dbb      	ldrb	r3, [r7, #22]
 800c44a:	e000      	b.n	800c44e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2201      	movs	r2, #1
 800c466:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d014      	beq.n	800c4bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00e      	beq.n	800c4bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	6852      	ldr	r2, [r2, #4]
 800c4aa:	b2d2      	uxtb	r2, r2
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	4798      	blx	r3
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4bc:	2340      	movs	r3, #64	@ 0x40
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f001 fcb3 	bl	800de2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2240      	movs	r2, #64	@ 0x40
 800c4d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4d8:	2340      	movs	r3, #64	@ 0x40
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2180      	movs	r1, #128	@ 0x80
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f001 fca5 	bl	800de2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2240      	movs	r2, #64	@ 0x40
 800c4ee:	621a      	str	r2, [r3, #32]

  return ret;
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b083      	sub	sp, #12
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	460b      	mov	r3, r1
 800c504:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	78fa      	ldrb	r2, [r7, #3]
 800c50a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b04      	cmp	r3, #4
 800c52c:	d006      	beq.n	800c53c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c534:	b2da      	uxtb	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2204      	movs	r2, #4
 800c540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c552:	b480      	push	{r7}
 800c554:	b083      	sub	sp, #12
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b04      	cmp	r3, #4
 800c564:	d106      	bne.n	800c574 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b03      	cmp	r3, #3
 800c594:	d110      	bne.n	800c5b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00b      	beq.n	800c5b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d005      	beq.n	800c5b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	32ae      	adds	r2, #174	@ 0xae
 800c5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	e01c      	b.n	800c61e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b03      	cmp	r3, #3
 800c5ee:	d115      	bne.n	800c61c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	32ae      	adds	r2, #174	@ 0xae
 800c5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00b      	beq.n	800c61c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	32ae      	adds	r2, #174	@ 0xae
 800c60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c612:	6a1b      	ldr	r3, [r3, #32]
 800c614:	78fa      	ldrb	r2, [r7, #3]
 800c616:	4611      	mov	r1, r2
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
 800c62e:	460b      	mov	r3, r1
 800c630:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	32ae      	adds	r2, #174	@ 0xae
 800c63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c644:	2303      	movs	r3, #3
 800c646:	e01c      	b.n	800c682 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b03      	cmp	r3, #3
 800c652:	d115      	bne.n	800c680 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	32ae      	adds	r2, #174	@ 0xae
 800c65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00b      	beq.n	800c680 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	32ae      	adds	r2, #174	@ 0xae
 800c672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c678:	78fa      	ldrb	r2, [r7, #3]
 800c67a:	4611      	mov	r1, r2
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c68a:	b480      	push	{r7}
 800c68c:	b083      	sub	sp, #12
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00e      	beq.n	800c6dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	6852      	ldr	r2, [r2, #4]
 800c6ca:	b2d2      	uxtb	r2, r2
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	4798      	blx	r3
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c6d8:	2303      	movs	r3, #3
 800c6da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b083      	sub	sp, #12
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c6f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	460b      	mov	r3, r1
 800c70a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c70c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c70e:	4618      	mov	r0, r3
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b086      	sub	sp, #24
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	460b      	mov	r3, r1
 800c724:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c72e:	2300      	movs	r3, #0
 800c730:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	885b      	ldrh	r3, [r3, #2]
 800c736:	b29b      	uxth	r3, r3
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	7812      	ldrb	r2, [r2, #0]
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d91f      	bls.n	800c780 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c746:	e013      	b.n	800c770 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c748:	f107 030a 	add.w	r3, r7, #10
 800c74c:	4619      	mov	r1, r3
 800c74e:	6978      	ldr	r0, [r7, #20]
 800c750:	f000 f81b 	bl	800c78a <USBD_GetNextDesc>
 800c754:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	785b      	ldrb	r3, [r3, #1]
 800c75a:	2b05      	cmp	r3, #5
 800c75c:	d108      	bne.n	800c770 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	789b      	ldrb	r3, [r3, #2]
 800c766:	78fa      	ldrb	r2, [r7, #3]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d008      	beq.n	800c77e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c76c:	2300      	movs	r3, #0
 800c76e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	885b      	ldrh	r3, [r3, #2]
 800c774:	b29a      	uxth	r2, r3
 800c776:	897b      	ldrh	r3, [r7, #10]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d8e5      	bhi.n	800c748 <USBD_GetEpDesc+0x2e>
 800c77c:	e000      	b.n	800c780 <USBD_GetEpDesc+0x66>
          break;
 800c77e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c780:	693b      	ldr	r3, [r7, #16]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c78a:	b480      	push	{r7}
 800c78c:	b085      	sub	sp, #20
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	7812      	ldrb	r2, [r2, #0]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b087      	sub	sp, #28
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c7e0:	8a3b      	ldrh	r3, [r7, #16]
 800c7e2:	021b      	lsls	r3, r3, #8
 800c7e4:	b21a      	sxth	r2, r3
 800c7e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	b21b      	sxth	r3, r3
 800c7ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c7f0:	89fb      	ldrh	r3, [r7, #14]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	371c      	adds	r7, #28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
	...

0800c800 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c80a:	2300      	movs	r3, #0
 800c80c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c816:	2b40      	cmp	r3, #64	@ 0x40
 800c818:	d005      	beq.n	800c826 <USBD_StdDevReq+0x26>
 800c81a:	2b40      	cmp	r3, #64	@ 0x40
 800c81c:	d857      	bhi.n	800c8ce <USBD_StdDevReq+0xce>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00f      	beq.n	800c842 <USBD_StdDevReq+0x42>
 800c822:	2b20      	cmp	r3, #32
 800c824:	d153      	bne.n	800c8ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	32ae      	adds	r2, #174	@ 0xae
 800c830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	6839      	ldr	r1, [r7, #0]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	4798      	blx	r3
 800c83c:	4603      	mov	r3, r0
 800c83e:	73fb      	strb	r3, [r7, #15]
      break;
 800c840:	e04a      	b.n	800c8d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	785b      	ldrb	r3, [r3, #1]
 800c846:	2b09      	cmp	r3, #9
 800c848:	d83b      	bhi.n	800c8c2 <USBD_StdDevReq+0xc2>
 800c84a:	a201      	add	r2, pc, #4	@ (adr r2, 800c850 <USBD_StdDevReq+0x50>)
 800c84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c850:	0800c8a5 	.word	0x0800c8a5
 800c854:	0800c8b9 	.word	0x0800c8b9
 800c858:	0800c8c3 	.word	0x0800c8c3
 800c85c:	0800c8af 	.word	0x0800c8af
 800c860:	0800c8c3 	.word	0x0800c8c3
 800c864:	0800c883 	.word	0x0800c883
 800c868:	0800c879 	.word	0x0800c879
 800c86c:	0800c8c3 	.word	0x0800c8c3
 800c870:	0800c89b 	.word	0x0800c89b
 800c874:	0800c88d 	.word	0x0800c88d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c878:	6839      	ldr	r1, [r7, #0]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fa3c 	bl	800ccf8 <USBD_GetDescriptor>
          break;
 800c880:	e024      	b.n	800c8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 fba1 	bl	800cfcc <USBD_SetAddress>
          break;
 800c88a:	e01f      	b.n	800c8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c88c:	6839      	ldr	r1, [r7, #0]
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fbe0 	bl	800d054 <USBD_SetConfig>
 800c894:	4603      	mov	r3, r0
 800c896:	73fb      	strb	r3, [r7, #15]
          break;
 800c898:	e018      	b.n	800c8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fc83 	bl	800d1a8 <USBD_GetConfig>
          break;
 800c8a2:	e013      	b.n	800c8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fcb4 	bl	800d214 <USBD_GetStatus>
          break;
 800c8ac:	e00e      	b.n	800c8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fce3 	bl	800d27c <USBD_SetFeature>
          break;
 800c8b6:	e009      	b.n	800c8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fd07 	bl	800d2ce <USBD_ClrFeature>
          break;
 800c8c0:	e004      	b.n	800c8cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fd5e 	bl	800d386 <USBD_CtlError>
          break;
 800c8ca:	bf00      	nop
      }
      break;
 800c8cc:	e004      	b.n	800c8d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fd58 	bl	800d386 <USBD_CtlError>
      break;
 800c8d6:	bf00      	nop
  }

  return ret;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop

0800c8e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c8fa:	2b40      	cmp	r3, #64	@ 0x40
 800c8fc:	d005      	beq.n	800c90a <USBD_StdItfReq+0x26>
 800c8fe:	2b40      	cmp	r3, #64	@ 0x40
 800c900:	d852      	bhi.n	800c9a8 <USBD_StdItfReq+0xc4>
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <USBD_StdItfReq+0x26>
 800c906:	2b20      	cmp	r3, #32
 800c908:	d14e      	bne.n	800c9a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c910:	b2db      	uxtb	r3, r3
 800c912:	3b01      	subs	r3, #1
 800c914:	2b02      	cmp	r3, #2
 800c916:	d840      	bhi.n	800c99a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	889b      	ldrh	r3, [r3, #4]
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d836      	bhi.n	800c990 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	889b      	ldrh	r3, [r3, #4]
 800c926:	b2db      	uxtb	r3, r3
 800c928:	4619      	mov	r1, r3
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff fedb 	bl	800c6e6 <USBD_CoreFindIF>
 800c930:	4603      	mov	r3, r0
 800c932:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c934:	7bbb      	ldrb	r3, [r7, #14]
 800c936:	2bff      	cmp	r3, #255	@ 0xff
 800c938:	d01d      	beq.n	800c976 <USBD_StdItfReq+0x92>
 800c93a:	7bbb      	ldrb	r3, [r7, #14]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d11a      	bne.n	800c976 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c940:	7bba      	ldrb	r2, [r7, #14]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	32ae      	adds	r2, #174	@ 0xae
 800c946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00f      	beq.n	800c970 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c950:	7bba      	ldrb	r2, [r7, #14]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c958:	7bba      	ldrb	r2, [r7, #14]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	32ae      	adds	r2, #174	@ 0xae
 800c95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	4798      	blx	r3
 800c96a:	4603      	mov	r3, r0
 800c96c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c96e:	e004      	b.n	800c97a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c970:	2303      	movs	r3, #3
 800c972:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c974:	e001      	b.n	800c97a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c976:	2303      	movs	r3, #3
 800c978:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	88db      	ldrh	r3, [r3, #6]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d110      	bne.n	800c9a4 <USBD_StdItfReq+0xc0>
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10d      	bne.n	800c9a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fdd3 	bl	800d534 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c98e:	e009      	b.n	800c9a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fcf7 	bl	800d386 <USBD_CtlError>
          break;
 800c998:	e004      	b.n	800c9a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fcf2 	bl	800d386 <USBD_CtlError>
          break;
 800c9a2:	e000      	b.n	800c9a6 <USBD_StdItfReq+0xc2>
          break;
 800c9a4:	bf00      	nop
      }
      break;
 800c9a6:	e004      	b.n	800c9b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fceb 	bl	800d386 <USBD_CtlError>
      break;
 800c9b0:	bf00      	nop
  }

  return ret;
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	889b      	ldrh	r3, [r3, #4]
 800c9ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9d8:	2b40      	cmp	r3, #64	@ 0x40
 800c9da:	d007      	beq.n	800c9ec <USBD_StdEPReq+0x30>
 800c9dc:	2b40      	cmp	r3, #64	@ 0x40
 800c9de:	f200 817f 	bhi.w	800cce0 <USBD_StdEPReq+0x324>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d02a      	beq.n	800ca3c <USBD_StdEPReq+0x80>
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	f040 817a 	bne.w	800cce0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff fe85 	bl	800c700 <USBD_CoreFindEP>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9fa:	7b7b      	ldrb	r3, [r7, #13]
 800c9fc:	2bff      	cmp	r3, #255	@ 0xff
 800c9fe:	f000 8174 	beq.w	800ccea <USBD_StdEPReq+0x32e>
 800ca02:	7b7b      	ldrb	r3, [r7, #13]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f040 8170 	bne.w	800ccea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ca0a:	7b7a      	ldrb	r2, [r7, #13]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ca12:	7b7a      	ldrb	r2, [r7, #13]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	32ae      	adds	r2, #174	@ 0xae
 800ca18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 8163 	beq.w	800ccea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ca24:	7b7a      	ldrb	r2, [r7, #13]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	32ae      	adds	r2, #174	@ 0xae
 800ca2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	4798      	blx	r3
 800ca36:	4603      	mov	r3, r0
 800ca38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca3a:	e156      	b.n	800ccea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	785b      	ldrb	r3, [r3, #1]
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d008      	beq.n	800ca56 <USBD_StdEPReq+0x9a>
 800ca44:	2b03      	cmp	r3, #3
 800ca46:	f300 8145 	bgt.w	800ccd4 <USBD_StdEPReq+0x318>
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 809b 	beq.w	800cb86 <USBD_StdEPReq+0x1ca>
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d03c      	beq.n	800cace <USBD_StdEPReq+0x112>
 800ca54:	e13e      	b.n	800ccd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d002      	beq.n	800ca68 <USBD_StdEPReq+0xac>
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	d016      	beq.n	800ca94 <USBD_StdEPReq+0xd8>
 800ca66:	e02c      	b.n	800cac2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00d      	beq.n	800ca8a <USBD_StdEPReq+0xce>
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	2b80      	cmp	r3, #128	@ 0x80
 800ca72:	d00a      	beq.n	800ca8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f001 fa1d 	bl	800deb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca7e:	2180      	movs	r1, #128	@ 0x80
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f001 fa19 	bl	800deb8 <USBD_LL_StallEP>
 800ca86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca88:	e020      	b.n	800cacc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ca8a:	6839      	ldr	r1, [r7, #0]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fc7a 	bl	800d386 <USBD_CtlError>
              break;
 800ca92:	e01b      	b.n	800cacc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	885b      	ldrh	r3, [r3, #2]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10e      	bne.n	800caba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca9c:	7bbb      	ldrb	r3, [r7, #14]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00b      	beq.n	800caba <USBD_StdEPReq+0xfe>
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
 800caa4:	2b80      	cmp	r3, #128	@ 0x80
 800caa6:	d008      	beq.n	800caba <USBD_StdEPReq+0xfe>
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	88db      	ldrh	r3, [r3, #6]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d104      	bne.n	800caba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cab0:	7bbb      	ldrb	r3, [r7, #14]
 800cab2:	4619      	mov	r1, r3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f001 f9ff 	bl	800deb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fd3a 	bl	800d534 <USBD_CtlSendStatus>

              break;
 800cac0:	e004      	b.n	800cacc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fc5e 	bl	800d386 <USBD_CtlError>
              break;
 800caca:	bf00      	nop
          }
          break;
 800cacc:	e107      	b.n	800ccde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d002      	beq.n	800cae0 <USBD_StdEPReq+0x124>
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d016      	beq.n	800cb0c <USBD_StdEPReq+0x150>
 800cade:	e04b      	b.n	800cb78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00d      	beq.n	800cb02 <USBD_StdEPReq+0x146>
 800cae6:	7bbb      	ldrb	r3, [r7, #14]
 800cae8:	2b80      	cmp	r3, #128	@ 0x80
 800caea:	d00a      	beq.n	800cb02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800caec:	7bbb      	ldrb	r3, [r7, #14]
 800caee:	4619      	mov	r1, r3
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f001 f9e1 	bl	800deb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800caf6:	2180      	movs	r1, #128	@ 0x80
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f001 f9dd 	bl	800deb8 <USBD_LL_StallEP>
 800cafe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb00:	e040      	b.n	800cb84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cb02:	6839      	ldr	r1, [r7, #0]
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fc3e 	bl	800d386 <USBD_CtlError>
              break;
 800cb0a:	e03b      	b.n	800cb84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	885b      	ldrh	r3, [r3, #2]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d136      	bne.n	800cb82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb14:	7bbb      	ldrb	r3, [r7, #14]
 800cb16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d004      	beq.n	800cb28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb1e:	7bbb      	ldrb	r3, [r7, #14]
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f001 f9e7 	bl	800def6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fd03 	bl	800d534 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb2e:	7bbb      	ldrb	r3, [r7, #14]
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff fde4 	bl	800c700 <USBD_CoreFindEP>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb3c:	7b7b      	ldrb	r3, [r7, #13]
 800cb3e:	2bff      	cmp	r3, #255	@ 0xff
 800cb40:	d01f      	beq.n	800cb82 <USBD_StdEPReq+0x1c6>
 800cb42:	7b7b      	ldrb	r3, [r7, #13]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d11c      	bne.n	800cb82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cb48:	7b7a      	ldrb	r2, [r7, #13]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cb50:	7b7a      	ldrb	r2, [r7, #13]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	32ae      	adds	r2, #174	@ 0xae
 800cb56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d010      	beq.n	800cb82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb60:	7b7a      	ldrb	r2, [r7, #13]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	32ae      	adds	r2, #174	@ 0xae
 800cb66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	4798      	blx	r3
 800cb72:	4603      	mov	r3, r0
 800cb74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cb76:	e004      	b.n	800cb82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cb78:	6839      	ldr	r1, [r7, #0]
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fc03 	bl	800d386 <USBD_CtlError>
              break;
 800cb80:	e000      	b.n	800cb84 <USBD_StdEPReq+0x1c8>
              break;
 800cb82:	bf00      	nop
          }
          break;
 800cb84:	e0ab      	b.n	800ccde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d002      	beq.n	800cb98 <USBD_StdEPReq+0x1dc>
 800cb92:	2b03      	cmp	r3, #3
 800cb94:	d032      	beq.n	800cbfc <USBD_StdEPReq+0x240>
 800cb96:	e097      	b.n	800ccc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <USBD_StdEPReq+0x1f2>
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
 800cba0:	2b80      	cmp	r3, #128	@ 0x80
 800cba2:	d004      	beq.n	800cbae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fbed 	bl	800d386 <USBD_CtlError>
                break;
 800cbac:	e091      	b.n	800ccd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	da0b      	bge.n	800cbce <USBD_StdEPReq+0x212>
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
 800cbb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	3310      	adds	r3, #16
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	4413      	add	r3, r2
 800cbca:	3304      	adds	r3, #4
 800cbcc:	e00b      	b.n	800cbe6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbce:	7bbb      	ldrb	r3, [r7, #14]
 800cbd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4413      	add	r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	2200      	movs	r2, #0
 800cbec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fc43 	bl	800d480 <USBD_CtlSendData>
              break;
 800cbfa:	e06a      	b.n	800ccd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cbfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	da11      	bge.n	800cc28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
 800cc06:	f003 020f 	and.w	r2, r3, #15
 800cc0a:	6879      	ldr	r1, [r7, #4]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	440b      	add	r3, r1
 800cc16:	3324      	adds	r3, #36	@ 0x24
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d117      	bne.n	800cc4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 fbb0 	bl	800d386 <USBD_CtlError>
                  break;
 800cc26:	e054      	b.n	800ccd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
 800cc2a:	f003 020f 	and.w	r2, r3, #15
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	4613      	mov	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	440b      	add	r3, r1
 800cc3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d104      	bne.n	800cc4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fb9d 	bl	800d386 <USBD_CtlError>
                  break;
 800cc4c:	e041      	b.n	800ccd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	da0b      	bge.n	800cc6e <USBD_StdEPReq+0x2b2>
 800cc56:	7bbb      	ldrb	r3, [r7, #14]
 800cc58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4413      	add	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	3310      	adds	r3, #16
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	4413      	add	r3, r2
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	e00b      	b.n	800cc86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	4413      	add	r3, r2
 800cc84:	3304      	adds	r3, #4
 800cc86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc88:	7bbb      	ldrb	r3, [r7, #14]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d002      	beq.n	800cc94 <USBD_StdEPReq+0x2d8>
 800cc8e:	7bbb      	ldrb	r3, [r7, #14]
 800cc90:	2b80      	cmp	r3, #128	@ 0x80
 800cc92:	d103      	bne.n	800cc9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2200      	movs	r2, #0
 800cc98:	601a      	str	r2, [r3, #0]
 800cc9a:	e00e      	b.n	800ccba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f001 f947 	bl	800df34 <USBD_LL_IsStallEP>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]
 800ccb2:	e002      	b.n	800ccba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fbdd 	bl	800d480 <USBD_CtlSendData>
              break;
 800ccc6:	e004      	b.n	800ccd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fb5b 	bl	800d386 <USBD_CtlError>
              break;
 800ccd0:	bf00      	nop
          }
          break;
 800ccd2:	e004      	b.n	800ccde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fb55 	bl	800d386 <USBD_CtlError>
          break;
 800ccdc:	bf00      	nop
      }
      break;
 800ccde:	e005      	b.n	800ccec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fb4f 	bl	800d386 <USBD_CtlError>
      break;
 800cce8:	e000      	b.n	800ccec <USBD_StdEPReq+0x330>
      break;
 800ccea:	bf00      	nop
  }

  return ret;
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
	...

0800ccf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd02:	2300      	movs	r3, #0
 800cd04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd06:	2300      	movs	r3, #0
 800cd08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	885b      	ldrh	r3, [r3, #2]
 800cd12:	0a1b      	lsrs	r3, r3, #8
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3b01      	subs	r3, #1
 800cd18:	2b06      	cmp	r3, #6
 800cd1a:	f200 8128 	bhi.w	800cf6e <USBD_GetDescriptor+0x276>
 800cd1e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd24 <USBD_GetDescriptor+0x2c>)
 800cd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd24:	0800cd41 	.word	0x0800cd41
 800cd28:	0800cd59 	.word	0x0800cd59
 800cd2c:	0800cd99 	.word	0x0800cd99
 800cd30:	0800cf6f 	.word	0x0800cf6f
 800cd34:	0800cf6f 	.word	0x0800cf6f
 800cd38:	0800cf0f 	.word	0x0800cf0f
 800cd3c:	0800cf3b 	.word	0x0800cf3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	7c12      	ldrb	r2, [r2, #16]
 800cd4c:	f107 0108 	add.w	r1, r7, #8
 800cd50:	4610      	mov	r0, r2
 800cd52:	4798      	blx	r3
 800cd54:	60f8      	str	r0, [r7, #12]
      break;
 800cd56:	e112      	b.n	800cf7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	7c1b      	ldrb	r3, [r3, #16]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10d      	bne.n	800cd7c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd68:	f107 0208 	add.w	r2, r7, #8
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4798      	blx	r3
 800cd70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3301      	adds	r3, #1
 800cd76:	2202      	movs	r2, #2
 800cd78:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd7a:	e100      	b.n	800cf7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd84:	f107 0208 	add.w	r2, r7, #8
 800cd88:	4610      	mov	r0, r2
 800cd8a:	4798      	blx	r3
 800cd8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3301      	adds	r3, #1
 800cd92:	2202      	movs	r2, #2
 800cd94:	701a      	strb	r2, [r3, #0]
      break;
 800cd96:	e0f2      	b.n	800cf7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	885b      	ldrh	r3, [r3, #2]
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b05      	cmp	r3, #5
 800cda0:	f200 80ac 	bhi.w	800cefc <USBD_GetDescriptor+0x204>
 800cda4:	a201      	add	r2, pc, #4	@ (adr r2, 800cdac <USBD_GetDescriptor+0xb4>)
 800cda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdaa:	bf00      	nop
 800cdac:	0800cdc5 	.word	0x0800cdc5
 800cdb0:	0800cdf9 	.word	0x0800cdf9
 800cdb4:	0800ce2d 	.word	0x0800ce2d
 800cdb8:	0800ce61 	.word	0x0800ce61
 800cdbc:	0800ce95 	.word	0x0800ce95
 800cdc0:	0800cec9 	.word	0x0800cec9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00b      	beq.n	800cde8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	7c12      	ldrb	r2, [r2, #16]
 800cddc:	f107 0108 	add.w	r1, r7, #8
 800cde0:	4610      	mov	r0, r2
 800cde2:	4798      	blx	r3
 800cde4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cde6:	e091      	b.n	800cf0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cde8:	6839      	ldr	r1, [r7, #0]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 facb 	bl	800d386 <USBD_CtlError>
            err++;
 800cdf0:	7afb      	ldrb	r3, [r7, #11]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	72fb      	strb	r3, [r7, #11]
          break;
 800cdf6:	e089      	b.n	800cf0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d00b      	beq.n	800ce1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	7c12      	ldrb	r2, [r2, #16]
 800ce10:	f107 0108 	add.w	r1, r7, #8
 800ce14:	4610      	mov	r0, r2
 800ce16:	4798      	blx	r3
 800ce18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce1a:	e077      	b.n	800cf0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce1c:	6839      	ldr	r1, [r7, #0]
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fab1 	bl	800d386 <USBD_CtlError>
            err++;
 800ce24:	7afb      	ldrb	r3, [r7, #11]
 800ce26:	3301      	adds	r3, #1
 800ce28:	72fb      	strb	r3, [r7, #11]
          break;
 800ce2a:	e06f      	b.n	800cf0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00b      	beq.n	800ce50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	7c12      	ldrb	r2, [r2, #16]
 800ce44:	f107 0108 	add.w	r1, r7, #8
 800ce48:	4610      	mov	r0, r2
 800ce4a:	4798      	blx	r3
 800ce4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce4e:	e05d      	b.n	800cf0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fa97 	bl	800d386 <USBD_CtlError>
            err++;
 800ce58:	7afb      	ldrb	r3, [r7, #11]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce5e:	e055      	b.n	800cf0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00b      	beq.n	800ce84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	7c12      	ldrb	r2, [r2, #16]
 800ce78:	f107 0108 	add.w	r1, r7, #8
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	4798      	blx	r3
 800ce80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce82:	e043      	b.n	800cf0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce84:	6839      	ldr	r1, [r7, #0]
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fa7d 	bl	800d386 <USBD_CtlError>
            err++;
 800ce8c:	7afb      	ldrb	r3, [r7, #11]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	72fb      	strb	r3, [r7, #11]
          break;
 800ce92:	e03b      	b.n	800cf0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00b      	beq.n	800ceb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	7c12      	ldrb	r2, [r2, #16]
 800ceac:	f107 0108 	add.w	r1, r7, #8
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	4798      	blx	r3
 800ceb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceb6:	e029      	b.n	800cf0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 fa63 	bl	800d386 <USBD_CtlError>
            err++;
 800cec0:	7afb      	ldrb	r3, [r7, #11]
 800cec2:	3301      	adds	r3, #1
 800cec4:	72fb      	strb	r3, [r7, #11]
          break;
 800cec6:	e021      	b.n	800cf0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00b      	beq.n	800ceec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	7c12      	ldrb	r2, [r2, #16]
 800cee0:	f107 0108 	add.w	r1, r7, #8
 800cee4:	4610      	mov	r0, r2
 800cee6:	4798      	blx	r3
 800cee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceea:	e00f      	b.n	800cf0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fa49 	bl	800d386 <USBD_CtlError>
            err++;
 800cef4:	7afb      	ldrb	r3, [r7, #11]
 800cef6:	3301      	adds	r3, #1
 800cef8:	72fb      	strb	r3, [r7, #11]
          break;
 800cefa:	e007      	b.n	800cf0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fa41 	bl	800d386 <USBD_CtlError>
          err++;
 800cf04:	7afb      	ldrb	r3, [r7, #11]
 800cf06:	3301      	adds	r3, #1
 800cf08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cf0a:	bf00      	nop
      }
      break;
 800cf0c:	e037      	b.n	800cf7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	7c1b      	ldrb	r3, [r3, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d109      	bne.n	800cf2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf1e:	f107 0208 	add.w	r2, r7, #8
 800cf22:	4610      	mov	r0, r2
 800cf24:	4798      	blx	r3
 800cf26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf28:	e029      	b.n	800cf7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf2a:	6839      	ldr	r1, [r7, #0]
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fa2a 	bl	800d386 <USBD_CtlError>
        err++;
 800cf32:	7afb      	ldrb	r3, [r7, #11]
 800cf34:	3301      	adds	r3, #1
 800cf36:	72fb      	strb	r3, [r7, #11]
      break;
 800cf38:	e021      	b.n	800cf7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	7c1b      	ldrb	r3, [r3, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10d      	bne.n	800cf5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf4a:	f107 0208 	add.w	r2, r7, #8
 800cf4e:	4610      	mov	r0, r2
 800cf50:	4798      	blx	r3
 800cf52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3301      	adds	r3, #1
 800cf58:	2207      	movs	r2, #7
 800cf5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf5c:	e00f      	b.n	800cf7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf5e:	6839      	ldr	r1, [r7, #0]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fa10 	bl	800d386 <USBD_CtlError>
        err++;
 800cf66:	7afb      	ldrb	r3, [r7, #11]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf6c:	e007      	b.n	800cf7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fa08 	bl	800d386 <USBD_CtlError>
      err++;
 800cf76:	7afb      	ldrb	r3, [r7, #11]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf7c:	bf00      	nop
  }

  if (err != 0U)
 800cf7e:	7afb      	ldrb	r3, [r7, #11]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d11e      	bne.n	800cfc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	88db      	ldrh	r3, [r3, #6]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d016      	beq.n	800cfba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cf8c:	893b      	ldrh	r3, [r7, #8]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00e      	beq.n	800cfb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	88da      	ldrh	r2, [r3, #6]
 800cf96:	893b      	ldrh	r3, [r7, #8]
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	bf28      	it	cs
 800cf9c:	4613      	movcs	r3, r2
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfa2:	893b      	ldrh	r3, [r7, #8]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	68f9      	ldr	r1, [r7, #12]
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 fa69 	bl	800d480 <USBD_CtlSendData>
 800cfae:	e009      	b.n	800cfc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f9e7 	bl	800d386 <USBD_CtlError>
 800cfb8:	e004      	b.n	800cfc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 faba 	bl	800d534 <USBD_CtlSendStatus>
 800cfc0:	e000      	b.n	800cfc4 <USBD_GetDescriptor+0x2cc>
    return;
 800cfc2:	bf00      	nop
  }
}
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop

0800cfcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	889b      	ldrh	r3, [r3, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d131      	bne.n	800d042 <USBD_SetAddress+0x76>
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	88db      	ldrh	r3, [r3, #6]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d12d      	bne.n	800d042 <USBD_SetAddress+0x76>
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	885b      	ldrh	r3, [r3, #2]
 800cfea:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfec:	d829      	bhi.n	800d042 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	885b      	ldrh	r3, [r3, #2]
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cff8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b03      	cmp	r3, #3
 800d004:	d104      	bne.n	800d010 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f9bc 	bl	800d386 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d00e:	e01d      	b.n	800d04c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	7bfa      	ldrb	r2, [r7, #15]
 800d014:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d018:	7bfb      	ldrb	r3, [r7, #15]
 800d01a:	4619      	mov	r1, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 ffb5 	bl	800df8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fa86 	bl	800d534 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d004      	beq.n	800d038 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2202      	movs	r2, #2
 800d032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d036:	e009      	b.n	800d04c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d040:	e004      	b.n	800d04c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d042:	6839      	ldr	r1, [r7, #0]
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f99e 	bl	800d386 <USBD_CtlError>
  }
}
 800d04a:	bf00      	nop
 800d04c:	bf00      	nop
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	885b      	ldrh	r3, [r3, #2]
 800d066:	b2da      	uxtb	r2, r3
 800d068:	4b4e      	ldr	r3, [pc, #312]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d06a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d06c:	4b4d      	ldr	r3, [pc, #308]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d905      	bls.n	800d080 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f985 	bl	800d386 <USBD_CtlError>
    return USBD_FAIL;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e08c      	b.n	800d19a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d002      	beq.n	800d092 <USBD_SetConfig+0x3e>
 800d08c:	2b03      	cmp	r3, #3
 800d08e:	d029      	beq.n	800d0e4 <USBD_SetConfig+0x90>
 800d090:	e075      	b.n	800d17e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d092:	4b44      	ldr	r3, [pc, #272]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d020      	beq.n	800d0dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d09a:	4b42      	ldr	r3, [pc, #264]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0a4:	4b3f      	ldr	r3, [pc, #252]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7fe ffe3 	bl	800c076 <USBD_SetClassConfig>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0b4:	7bfb      	ldrb	r3, [r7, #15]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d008      	beq.n	800d0cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 f962 	bl	800d386 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2202      	movs	r2, #2
 800d0c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0ca:	e065      	b.n	800d198 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fa31 	bl	800d534 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2203      	movs	r2, #3
 800d0d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d0da:	e05d      	b.n	800d198 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fa29 	bl	800d534 <USBD_CtlSendStatus>
      break;
 800d0e2:	e059      	b.n	800d198 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d0e4:	4b2f      	ldr	r3, [pc, #188]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d112      	bne.n	800d112 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d0f4:	4b2b      	ldr	r3, [pc, #172]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0fe:	4b29      	ldr	r3, [pc, #164]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	4619      	mov	r1, r3
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7fe ffd2 	bl	800c0ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fa12 	bl	800d534 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d110:	e042      	b.n	800d198 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d112:	4b24      	ldr	r3, [pc, #144]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d02a      	beq.n	800d176 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	b2db      	uxtb	r3, r3
 800d126:	4619      	mov	r1, r3
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7fe ffc0 	bl	800c0ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d12e:	4b1d      	ldr	r3, [pc, #116]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d138:	4b1a      	ldr	r3, [pc, #104]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	4619      	mov	r1, r3
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7fe ff99 	bl	800c076 <USBD_SetClassConfig>
 800d144:	4603      	mov	r3, r0
 800d146:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d148:	7bfb      	ldrb	r3, [r7, #15]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00f      	beq.n	800d16e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 f918 	bl	800d386 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	4619      	mov	r1, r3
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7fe ffa5 	bl	800c0ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2202      	movs	r2, #2
 800d168:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d16c:	e014      	b.n	800d198 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f9e0 	bl	800d534 <USBD_CtlSendStatus>
      break;
 800d174:	e010      	b.n	800d198 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 f9dc 	bl	800d534 <USBD_CtlSendStatus>
      break;
 800d17c:	e00c      	b.n	800d198 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d17e:	6839      	ldr	r1, [r7, #0]
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 f900 	bl	800d386 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d186:	4b07      	ldr	r3, [pc, #28]	@ (800d1a4 <USBD_SetConfig+0x150>)
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7fe ff8e 	bl	800c0ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d192:	2303      	movs	r3, #3
 800d194:	73fb      	strb	r3, [r7, #15]
      break;
 800d196:	bf00      	nop
  }

  return ret;
 800d198:	7bfb      	ldrb	r3, [r7, #15]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	200130a4 	.word	0x200130a4

0800d1a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	88db      	ldrh	r3, [r3, #6]
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d004      	beq.n	800d1c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f8e2 	bl	800d386 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1c2:	e023      	b.n	800d20c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	dc02      	bgt.n	800d1d6 <USBD_GetConfig+0x2e>
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dc03      	bgt.n	800d1dc <USBD_GetConfig+0x34>
 800d1d4:	e015      	b.n	800d202 <USBD_GetConfig+0x5a>
 800d1d6:	2b03      	cmp	r3, #3
 800d1d8:	d00b      	beq.n	800d1f2 <USBD_GetConfig+0x4a>
 800d1da:	e012      	b.n	800d202 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f948 	bl	800d480 <USBD_CtlSendData>
        break;
 800d1f0:	e00c      	b.n	800d20c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f940 	bl	800d480 <USBD_CtlSendData>
        break;
 800d200:	e004      	b.n	800d20c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 f8be 	bl	800d386 <USBD_CtlError>
        break;
 800d20a:	bf00      	nop
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d224:	b2db      	uxtb	r3, r3
 800d226:	3b01      	subs	r3, #1
 800d228:	2b02      	cmp	r3, #2
 800d22a:	d81e      	bhi.n	800d26a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	88db      	ldrh	r3, [r3, #6]
 800d230:	2b02      	cmp	r3, #2
 800d232:	d004      	beq.n	800d23e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f8a5 	bl	800d386 <USBD_CtlError>
        break;
 800d23c:	e01a      	b.n	800d274 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d005      	beq.n	800d25a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	f043 0202 	orr.w	r2, r3, #2
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	330c      	adds	r3, #12
 800d25e:	2202      	movs	r2, #2
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f90c 	bl	800d480 <USBD_CtlSendData>
      break;
 800d268:	e004      	b.n	800d274 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f88a 	bl	800d386 <USBD_CtlError>
      break;
 800d272:	bf00      	nop
  }
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	885b      	ldrh	r3, [r3, #2]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d107      	bne.n	800d29e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f94c 	bl	800d534 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d29c:	e013      	b.n	800d2c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	885b      	ldrh	r3, [r3, #2]
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d10b      	bne.n	800d2be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	889b      	ldrh	r3, [r3, #4]
 800d2aa:	0a1b      	lsrs	r3, r3, #8
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f93c 	bl	800d534 <USBD_CtlSendStatus>
}
 800d2bc:	e003      	b.n	800d2c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 f860 	bl	800d386 <USBD_CtlError>
}
 800d2c6:	bf00      	nop
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d80b      	bhi.n	800d2fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	885b      	ldrh	r3, [r3, #2]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d10c      	bne.n	800d308 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f91c 	bl	800d534 <USBD_CtlSendStatus>
      }
      break;
 800d2fc:	e004      	b.n	800d308 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d2fe:	6839      	ldr	r1, [r7, #0]
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 f840 	bl	800d386 <USBD_CtlError>
      break;
 800d306:	e000      	b.n	800d30a <USBD_ClrFeature+0x3c>
      break;
 800d308:	bf00      	nop
  }
}
 800d30a:	bf00      	nop
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b084      	sub	sp, #16
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	781a      	ldrb	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3301      	adds	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	781a      	ldrb	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3301      	adds	r3, #1
 800d33a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f7ff fa40 	bl	800c7c2 <SWAPBYTE>
 800d342:	4603      	mov	r3, r0
 800d344:	461a      	mov	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	3301      	adds	r3, #1
 800d34e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	3301      	adds	r3, #1
 800d354:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f7ff fa33 	bl	800c7c2 <SWAPBYTE>
 800d35c:	4603      	mov	r3, r0
 800d35e:	461a      	mov	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3301      	adds	r3, #1
 800d368:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	3301      	adds	r3, #1
 800d36e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f7ff fa26 	bl	800c7c2 <SWAPBYTE>
 800d376:	4603      	mov	r3, r0
 800d378:	461a      	mov	r2, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	80da      	strh	r2, [r3, #6]
}
 800d37e:	bf00      	nop
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b082      	sub	sp, #8
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d390:	2180      	movs	r1, #128	@ 0x80
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fd90 	bl	800deb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d398:	2100      	movs	r1, #0
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 fd8c 	bl	800deb8 <USBD_LL_StallEP>
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d042      	beq.n	800d444 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d3c2:	6938      	ldr	r0, [r7, #16]
 800d3c4:	f000 f842 	bl	800d44c <USBD_GetLen>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	005b      	lsls	r3, r3, #1
 800d3ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3d2:	d808      	bhi.n	800d3e6 <USBD_GetString+0x3e>
 800d3d4:	6938      	ldr	r0, [r7, #16]
 800d3d6:	f000 f839 	bl	800d44c <USBD_GetLen>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	3301      	adds	r3, #1
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	b29a      	uxth	r2, r3
 800d3e4:	e001      	b.n	800d3ea <USBD_GetString+0x42>
 800d3e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3ee:	7dfb      	ldrb	r3, [r7, #23]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	7812      	ldrb	r2, [r2, #0]
 800d3f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	4413      	add	r3, r2
 800d406:	2203      	movs	r2, #3
 800d408:	701a      	strb	r2, [r3, #0]
  idx++;
 800d40a:	7dfb      	ldrb	r3, [r7, #23]
 800d40c:	3301      	adds	r3, #1
 800d40e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d410:	e013      	b.n	800d43a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d412:	7dfb      	ldrb	r3, [r7, #23]
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	4413      	add	r3, r2
 800d418:	693a      	ldr	r2, [r7, #16]
 800d41a:	7812      	ldrb	r2, [r2, #0]
 800d41c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	3301      	adds	r3, #1
 800d422:	613b      	str	r3, [r7, #16]
    idx++;
 800d424:	7dfb      	ldrb	r3, [r7, #23]
 800d426:	3301      	adds	r3, #1
 800d428:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	4413      	add	r3, r2
 800d430:	2200      	movs	r2, #0
 800d432:	701a      	strb	r2, [r3, #0]
    idx++;
 800d434:	7dfb      	ldrb	r3, [r7, #23]
 800d436:	3301      	adds	r3, #1
 800d438:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e7      	bne.n	800d412 <USBD_GetString+0x6a>
 800d442:	e000      	b.n	800d446 <USBD_GetString+0x9e>
    return;
 800d444:	bf00      	nop
  }
}
 800d446:	3718      	adds	r7, #24
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d454:	2300      	movs	r3, #0
 800d456:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d45c:	e005      	b.n	800d46a <USBD_GetLen+0x1e>
  {
    len++;
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
 800d460:	3301      	adds	r3, #1
 800d462:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	3301      	adds	r3, #1
 800d468:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1f5      	bne.n	800d45e <USBD_GetLen+0x12>
  }

  return len;
 800d472:	7bfb      	ldrb	r3, [r7, #15]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2202      	movs	r2, #2
 800d490:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f000 fd8f 	bl	800dfca <USBD_LL_Transmit>

  return USBD_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b084      	sub	sp, #16
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	60f8      	str	r0, [r7, #12]
 800d4be:	60b9      	str	r1, [r7, #8]
 800d4c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f000 fd7e 	bl	800dfca <USBD_LL_Transmit>

  return USBD_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2203      	movs	r2, #3
 800d4e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	2100      	movs	r1, #0
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f000 fd82 	bl	800e00c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b084      	sub	sp, #16
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	60b9      	str	r1, [r7, #8]
 800d51c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	68ba      	ldr	r2, [r7, #8]
 800d522:	2100      	movs	r1, #0
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f000 fd71 	bl	800e00c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2204      	movs	r2, #4
 800d540:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d544:	2300      	movs	r3, #0
 800d546:	2200      	movs	r2, #0
 800d548:	2100      	movs	r1, #0
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fd3d 	bl	800dfca <USBD_LL_Transmit>

  return USBD_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2205      	movs	r2, #5
 800d566:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d56a:	2300      	movs	r3, #0
 800d56c:	2200      	movs	r2, #0
 800d56e:	2100      	movs	r1, #0
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fd4b 	bl	800e00c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d584:	2200      	movs	r2, #0
 800d586:	4912      	ldr	r1, [pc, #72]	@ (800d5d0 <MX_USB_DEVICE_Init+0x50>)
 800d588:	4812      	ldr	r0, [pc, #72]	@ (800d5d4 <MX_USB_DEVICE_Init+0x54>)
 800d58a:	f7fe fcf7 	bl	800bf7c <USBD_Init>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d594:	f7f3 fd86 	bl	80010a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d598:	490f      	ldr	r1, [pc, #60]	@ (800d5d8 <MX_USB_DEVICE_Init+0x58>)
 800d59a:	480e      	ldr	r0, [pc, #56]	@ (800d5d4 <MX_USB_DEVICE_Init+0x54>)
 800d59c:	f7fe fd1e 	bl	800bfdc <USBD_RegisterClass>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d001      	beq.n	800d5aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d5a6:	f7f3 fd7d 	bl	80010a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d5aa:	490c      	ldr	r1, [pc, #48]	@ (800d5dc <MX_USB_DEVICE_Init+0x5c>)
 800d5ac:	4809      	ldr	r0, [pc, #36]	@ (800d5d4 <MX_USB_DEVICE_Init+0x54>)
 800d5ae:	f7fe fc15 	bl	800bddc <USBD_CDC_RegisterInterface>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d5b8:	f7f3 fd74 	bl	80010a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d5bc:	4805      	ldr	r0, [pc, #20]	@ (800d5d4 <MX_USB_DEVICE_Init+0x54>)
 800d5be:	f7fe fd43 	bl	800c048 <USBD_Start>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d5c8:	f7f3 fd6c 	bl	80010a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d5cc:	bf00      	nop
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	200000b4 	.word	0x200000b4
 800d5d4:	200130a8 	.word	0x200130a8
 800d5d8:	20000020 	.word	0x20000020
 800d5dc:	200000a0 	.word	0x200000a0

0800d5e0 <parse_packet>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
int8_t parse_packet(uint8_t *buffer, uint16_t packet_length, SensorData *data) {
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	817b      	strh	r3, [r7, #10]
    // Ensure the packet is large enough
    if (packet_length < 8) { // Minimum size: danger(1) + proximity(4) + roadTypeLength(1) + quality(4)
 800d5ee:	897b      	ldrh	r3, [r7, #10]
 800d5f0:	2b07      	cmp	r3, #7
 800d5f2:	d801      	bhi.n	800d5f8 <parse_packet+0x18>
        return 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e050      	b.n	800d69a <parse_packet+0xba>
    }

    // Step 1: Extract fields
    uint8_t *ptr = buffer + 3;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	3303      	adds	r3, #3
 800d5fc:	617b      	str	r3, [r7, #20]
    data->danger = *ptr; // 1 byte
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	b25a      	sxtb	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	701a      	strb	r2, [r3, #0]
    ptr += 1;
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	3301      	adds	r3, #1
 800d60c:	617b      	str	r3, [r7, #20]

    data->dangerProximity = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	061a      	lsls	r2, r3, #24
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	3301      	adds	r3, #1
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	041b      	lsls	r3, r3, #16
 800d61c:	431a      	orrs	r2, r3
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	3302      	adds	r3, #2
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	021b      	lsls	r3, r3, #8
 800d626:	4313      	orrs	r3, r2
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	3203      	adds	r2, #3
 800d62c:	7812      	ldrb	r2, [r2, #0]
 800d62e:	431a      	orrs	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	605a      	str	r2, [r3, #4]
    ptr += 4;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	3304      	adds	r3, #4
 800d638:	617b      	str	r3, [r7, #20]

    uint8_t roadTypeLength = *ptr; // 1 byte
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	74fb      	strb	r3, [r7, #19]
    ptr += 1;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	3301      	adds	r3, #1
 800d644:	617b      	str	r3, [r7, #20]

    // Ensure the roadType string fits within the buffer
    if (roadTypeLength >= sizeof(data->roadType)) {
 800d646:	7cfb      	ldrb	r3, [r7, #19]
 800d648:	2b04      	cmp	r3, #4
 800d64a:	d901      	bls.n	800d650 <parse_packet+0x70>
        return 0; // String too long
 800d64c:	2300      	movs	r3, #0
 800d64e:	e024      	b.n	800d69a <parse_packet+0xba>
    }

    // Copy roadType string
    memcpy(data->roadType, ptr, roadTypeLength);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3308      	adds	r3, #8
 800d654:	7cfa      	ldrb	r2, [r7, #19]
 800d656:	6979      	ldr	r1, [r7, #20]
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 fd7b 	bl	800e154 <memcpy>
    data->roadType[roadTypeLength] = '\0'; // Null-terminate
 800d65e:	7cfb      	ldrb	r3, [r7, #19]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	4413      	add	r3, r2
 800d664:	2200      	movs	r2, #0
 800d666:	721a      	strb	r2, [r3, #8]
    ptr += roadTypeLength;
 800d668:	7cfb      	ldrb	r3, [r7, #19]
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	4413      	add	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]

    // Extract roadQuality
    data->roadQuality = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	061a      	lsls	r2, r3, #24
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	3301      	adds	r3, #1
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	041b      	lsls	r3, r3, #16
 800d67e:	431a      	orrs	r2, r3
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	3302      	adds	r3, #2
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	021b      	lsls	r3, r3, #8
 800d688:	4313      	orrs	r3, r2
 800d68a:	697a      	ldr	r2, [r7, #20]
 800d68c:	3203      	adds	r2, #3
 800d68e:	7812      	ldrb	r2, [r2, #0]
 800d690:	4313      	orrs	r3, r2
 800d692:	461a      	mov	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	611a      	str	r2, [r3, #16]

    return 1;
 800d698:	2301      	movs	r3, #1
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
	...

0800d6a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	4905      	ldr	r1, [pc, #20]	@ (800d6c0 <CDC_Init_FS+0x1c>)
 800d6ac:	4805      	ldr	r0, [pc, #20]	@ (800d6c4 <CDC_Init_FS+0x20>)
 800d6ae:	f7fe fbaf 	bl	800be10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d6b2:	4905      	ldr	r1, [pc, #20]	@ (800d6c8 <CDC_Init_FS+0x24>)
 800d6b4:	4803      	ldr	r0, [pc, #12]	@ (800d6c4 <CDC_Init_FS+0x20>)
 800d6b6:	f7fe fbcd 	bl	800be54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d6ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	20013b84 	.word	0x20013b84
 800d6c4:	200130a8 	.word	0x200130a8
 800d6c8:	20013384 	.word	0x20013384

0800d6cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d6d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	6039      	str	r1, [r7, #0]
 800d6e6:	71fb      	strb	r3, [r7, #7]
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d6ec:	79fb      	ldrb	r3, [r7, #7]
 800d6ee:	2b23      	cmp	r3, #35	@ 0x23
 800d6f0:	d84a      	bhi.n	800d788 <CDC_Control_FS+0xac>
 800d6f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6f8 <CDC_Control_FS+0x1c>)
 800d6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f8:	0800d789 	.word	0x0800d789
 800d6fc:	0800d789 	.word	0x0800d789
 800d700:	0800d789 	.word	0x0800d789
 800d704:	0800d789 	.word	0x0800d789
 800d708:	0800d789 	.word	0x0800d789
 800d70c:	0800d789 	.word	0x0800d789
 800d710:	0800d789 	.word	0x0800d789
 800d714:	0800d789 	.word	0x0800d789
 800d718:	0800d789 	.word	0x0800d789
 800d71c:	0800d789 	.word	0x0800d789
 800d720:	0800d789 	.word	0x0800d789
 800d724:	0800d789 	.word	0x0800d789
 800d728:	0800d789 	.word	0x0800d789
 800d72c:	0800d789 	.word	0x0800d789
 800d730:	0800d789 	.word	0x0800d789
 800d734:	0800d789 	.word	0x0800d789
 800d738:	0800d789 	.word	0x0800d789
 800d73c:	0800d789 	.word	0x0800d789
 800d740:	0800d789 	.word	0x0800d789
 800d744:	0800d789 	.word	0x0800d789
 800d748:	0800d789 	.word	0x0800d789
 800d74c:	0800d789 	.word	0x0800d789
 800d750:	0800d789 	.word	0x0800d789
 800d754:	0800d789 	.word	0x0800d789
 800d758:	0800d789 	.word	0x0800d789
 800d75c:	0800d789 	.word	0x0800d789
 800d760:	0800d789 	.word	0x0800d789
 800d764:	0800d789 	.word	0x0800d789
 800d768:	0800d789 	.word	0x0800d789
 800d76c:	0800d789 	.word	0x0800d789
 800d770:	0800d789 	.word	0x0800d789
 800d774:	0800d789 	.word	0x0800d789
 800d778:	0800d789 	.word	0x0800d789
 800d77c:	0800d789 	.word	0x0800d789
 800d780:	0800d789 	.word	0x0800d789
 800d784:	0800d789 	.word	0x0800d789
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d788:	bf00      	nop
  }

  return (USBD_OK);
 800d78a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d798:	b5b0      	push	{r4, r5, r7, lr}
 800d79a:	b08e      	sub	sp, #56	@ 0x38
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SensorData data;
	if(!parse_packet(Buf, *Len, &data)){
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff ff16 	bl	800d5e0 <parse_packet>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d119      	bne.n	800d7ee <CDC_Receive_FS+0x56>
		uint8_t error_response[] = "Invalid packet format";
 800d7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800d828 <CDC_Receive_FS+0x90>)
 800d7bc:	f107 040c 	add.w	r4, r7, #12
 800d7c0:	461d      	mov	r5, r3
 800d7c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d7ca:	6020      	str	r0, [r4, #0]
 800d7cc:	3404      	adds	r4, #4
 800d7ce:	8021      	strh	r1, [r4, #0]
		CDC_Transmit_FS(error_response, strlen((char*)error_response));
 800d7d0:	f107 030c 	add.w	r3, r7, #12
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7f2 fd03 	bl	80001e0 <strlen>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	f107 030c 	add.w	r3, r7, #12
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 f829 	bl	800d83c <CDC_Transmit_FS>
		return USBD_FAIL;
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	e017      	b.n	800d81e <CDC_Receive_FS+0x86>
	}

	recivedData = data;
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d82c <CDC_Receive_FS+0x94>)
 800d7f0:	461d      	mov	r5, r3
 800d7f2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800d7f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7fa:	6823      	ldr	r3, [r4, #0]
 800d7fc:	602b      	str	r3, [r5, #0]
	isDefined = 1;
 800d7fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d830 <CDC_Receive_FS+0x98>)
 800d800:	2201      	movs	r2, #1
 800d802:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	480b      	ldr	r0, [pc, #44]	@ (800d834 <CDC_Receive_FS+0x9c>)
 800d808:	f7fe fb24 	bl	800be54 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d80c:	4809      	ldr	r0, [pc, #36]	@ (800d834 <CDC_Receive_FS+0x9c>)
 800d80e:	f7fe fb7f 	bl	800bf10 <USBD_CDC_ReceivePacket>

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800d812:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d816:	4808      	ldr	r0, [pc, #32]	@ (800d838 <CDC_Receive_FS+0xa0>)
 800d818:	f7f4 f9f9 	bl	8001c0e <HAL_GPIO_TogglePin>
	return (USBD_OK);
 800d81c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3738      	adds	r7, #56	@ 0x38
 800d822:	46bd      	mov	sp, r7
 800d824:	bdb0      	pop	{r4, r5, r7, pc}
 800d826:	bf00      	nop
 800d828:	0800e1dc 	.word	0x0800e1dc
 800d82c:	20014388 	.word	0x20014388
 800d830:	20014384 	.word	0x20014384
 800d834:	200130a8 	.word	0x200130a8
 800d838:	40020c00 	.word	0x40020c00

0800d83c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	460b      	mov	r3, r1
 800d846:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d84c:	4b0d      	ldr	r3, [pc, #52]	@ (800d884 <CDC_Transmit_FS+0x48>)
 800d84e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d852:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d001      	beq.n	800d862 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d85e:	2301      	movs	r3, #1
 800d860:	e00b      	b.n	800d87a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d862:	887b      	ldrh	r3, [r7, #2]
 800d864:	461a      	mov	r2, r3
 800d866:	6879      	ldr	r1, [r7, #4]
 800d868:	4806      	ldr	r0, [pc, #24]	@ (800d884 <CDC_Transmit_FS+0x48>)
 800d86a:	f7fe fad1 	bl	800be10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d86e:	4805      	ldr	r0, [pc, #20]	@ (800d884 <CDC_Transmit_FS+0x48>)
 800d870:	f7fe fb0e 	bl	800be90 <USBD_CDC_TransmitPacket>
 800d874:	4603      	mov	r3, r0
 800d876:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d878:	7bfb      	ldrb	r3, [r7, #15]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	200130a8 	.word	0x200130a8

0800d888 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d888:	b480      	push	{r7}
 800d88a:	b087      	sub	sp, #28
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	4613      	mov	r3, r2
 800d894:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d896:	2300      	movs	r3, #0
 800d898:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d89a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	371c      	adds	r7, #28
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
	...

0800d8ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	6039      	str	r1, [r7, #0]
 800d8b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2212      	movs	r2, #18
 800d8bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d8be:	4b03      	ldr	r3, [pc, #12]	@ (800d8cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	200000d0 	.word	0x200000d0

0800d8d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	6039      	str	r1, [r7, #0]
 800d8da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2204      	movs	r2, #4
 800d8e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d8e2:	4b03      	ldr	r3, [pc, #12]	@ (800d8f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	200000e4 	.word	0x200000e4

0800d8f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	6039      	str	r1, [r7, #0]
 800d8fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d900:	79fb      	ldrb	r3, [r7, #7]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d105      	bne.n	800d912 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	4907      	ldr	r1, [pc, #28]	@ (800d928 <USBD_FS_ProductStrDescriptor+0x34>)
 800d90a:	4808      	ldr	r0, [pc, #32]	@ (800d92c <USBD_FS_ProductStrDescriptor+0x38>)
 800d90c:	f7ff fd4c 	bl	800d3a8 <USBD_GetString>
 800d910:	e004      	b.n	800d91c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	4904      	ldr	r1, [pc, #16]	@ (800d928 <USBD_FS_ProductStrDescriptor+0x34>)
 800d916:	4805      	ldr	r0, [pc, #20]	@ (800d92c <USBD_FS_ProductStrDescriptor+0x38>)
 800d918:	f7ff fd46 	bl	800d3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d91c:	4b02      	ldr	r3, [pc, #8]	@ (800d928 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	2001439c 	.word	0x2001439c
 800d92c:	0800e1f4 	.word	0x0800e1f4

0800d930 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	6039      	str	r1, [r7, #0]
 800d93a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	4904      	ldr	r1, [pc, #16]	@ (800d950 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d940:	4804      	ldr	r0, [pc, #16]	@ (800d954 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d942:	f7ff fd31 	bl	800d3a8 <USBD_GetString>
  return USBD_StrDesc;
 800d946:	4b02      	ldr	r3, [pc, #8]	@ (800d950 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	2001439c 	.word	0x2001439c
 800d954:	0800e204 	.word	0x0800e204

0800d958 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	6039      	str	r1, [r7, #0]
 800d962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	221a      	movs	r2, #26
 800d968:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d96a:	f000 f843 	bl	800d9f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d96e:	4b02      	ldr	r3, [pc, #8]	@ (800d978 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	200000e8 	.word	0x200000e8

0800d97c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	6039      	str	r1, [r7, #0]
 800d986:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d988:	79fb      	ldrb	r3, [r7, #7]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d105      	bne.n	800d99a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	4907      	ldr	r1, [pc, #28]	@ (800d9b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d992:	4808      	ldr	r0, [pc, #32]	@ (800d9b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d994:	f7ff fd08 	bl	800d3a8 <USBD_GetString>
 800d998:	e004      	b.n	800d9a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d99a:	683a      	ldr	r2, [r7, #0]
 800d99c:	4904      	ldr	r1, [pc, #16]	@ (800d9b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d99e:	4805      	ldr	r0, [pc, #20]	@ (800d9b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d9a0:	f7ff fd02 	bl	800d3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9a4:	4b02      	ldr	r3, [pc, #8]	@ (800d9b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	2001439c 	.word	0x2001439c
 800d9b4:	0800e218 	.word	0x0800e218

0800d9b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	4603      	mov	r3, r0
 800d9c0:	6039      	str	r1, [r7, #0]
 800d9c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d105      	bne.n	800d9d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	4907      	ldr	r1, [pc, #28]	@ (800d9ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d9ce:	4808      	ldr	r0, [pc, #32]	@ (800d9f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d9d0:	f7ff fcea 	bl	800d3a8 <USBD_GetString>
 800d9d4:	e004      	b.n	800d9e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d9d6:	683a      	ldr	r2, [r7, #0]
 800d9d8:	4904      	ldr	r1, [pc, #16]	@ (800d9ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d9da:	4805      	ldr	r0, [pc, #20]	@ (800d9f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d9dc:	f7ff fce4 	bl	800d3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9e0:	4b02      	ldr	r3, [pc, #8]	@ (800d9ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	2001439c 	.word	0x2001439c
 800d9f0:	0800e224 	.word	0x0800e224

0800d9f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800da38 <Get_SerialNum+0x44>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800da00:	4b0e      	ldr	r3, [pc, #56]	@ (800da3c <Get_SerialNum+0x48>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800da06:	4b0e      	ldr	r3, [pc, #56]	@ (800da40 <Get_SerialNum+0x4c>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4413      	add	r3, r2
 800da12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d009      	beq.n	800da2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800da1a:	2208      	movs	r2, #8
 800da1c:	4909      	ldr	r1, [pc, #36]	@ (800da44 <Get_SerialNum+0x50>)
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f000 f814 	bl	800da4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800da24:	2204      	movs	r2, #4
 800da26:	4908      	ldr	r1, [pc, #32]	@ (800da48 <Get_SerialNum+0x54>)
 800da28:	68b8      	ldr	r0, [r7, #8]
 800da2a:	f000 f80f 	bl	800da4c <IntToUnicode>
  }
}
 800da2e:	bf00      	nop
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	1fff7a10 	.word	0x1fff7a10
 800da3c:	1fff7a14 	.word	0x1fff7a14
 800da40:	1fff7a18 	.word	0x1fff7a18
 800da44:	200000ea 	.word	0x200000ea
 800da48:	200000fa 	.word	0x200000fa

0800da4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b087      	sub	sp, #28
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	4613      	mov	r3, r2
 800da58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800da5a:	2300      	movs	r3, #0
 800da5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800da5e:	2300      	movs	r3, #0
 800da60:	75fb      	strb	r3, [r7, #23]
 800da62:	e027      	b.n	800dab4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	0f1b      	lsrs	r3, r3, #28
 800da68:	2b09      	cmp	r3, #9
 800da6a:	d80b      	bhi.n	800da84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	0f1b      	lsrs	r3, r3, #28
 800da70:	b2da      	uxtb	r2, r3
 800da72:	7dfb      	ldrb	r3, [r7, #23]
 800da74:	005b      	lsls	r3, r3, #1
 800da76:	4619      	mov	r1, r3
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	440b      	add	r3, r1
 800da7c:	3230      	adds	r2, #48	@ 0x30
 800da7e:	b2d2      	uxtb	r2, r2
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	e00a      	b.n	800da9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	0f1b      	lsrs	r3, r3, #28
 800da88:	b2da      	uxtb	r2, r3
 800da8a:	7dfb      	ldrb	r3, [r7, #23]
 800da8c:	005b      	lsls	r3, r3, #1
 800da8e:	4619      	mov	r1, r3
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	440b      	add	r3, r1
 800da94:	3237      	adds	r2, #55	@ 0x37
 800da96:	b2d2      	uxtb	r2, r2
 800da98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	011b      	lsls	r3, r3, #4
 800da9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800daa0:	7dfb      	ldrb	r3, [r7, #23]
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	3301      	adds	r3, #1
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	4413      	add	r3, r2
 800daaa:	2200      	movs	r2, #0
 800daac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800daae:	7dfb      	ldrb	r3, [r7, #23]
 800dab0:	3301      	adds	r3, #1
 800dab2:	75fb      	strb	r3, [r7, #23]
 800dab4:	7dfa      	ldrb	r2, [r7, #23]
 800dab6:	79fb      	ldrb	r3, [r7, #7]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d3d3      	bcc.n	800da64 <IntToUnicode+0x18>
  }
}
 800dabc:	bf00      	nop
 800dabe:	bf00      	nop
 800dac0:	371c      	adds	r7, #28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
	...

0800dacc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08a      	sub	sp, #40	@ 0x28
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dad4:	f107 0314 	add.w	r3, r7, #20
 800dad8:	2200      	movs	r2, #0
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	605a      	str	r2, [r3, #4]
 800dade:	609a      	str	r2, [r3, #8]
 800dae0:	60da      	str	r2, [r3, #12]
 800dae2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800daec:	d147      	bne.n	800db7e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800daee:	2300      	movs	r3, #0
 800daf0:	613b      	str	r3, [r7, #16]
 800daf2:	4b25      	ldr	r3, [pc, #148]	@ (800db88 <HAL_PCD_MspInit+0xbc>)
 800daf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daf6:	4a24      	ldr	r2, [pc, #144]	@ (800db88 <HAL_PCD_MspInit+0xbc>)
 800daf8:	f043 0301 	orr.w	r3, r3, #1
 800dafc:	6313      	str	r3, [r2, #48]	@ 0x30
 800dafe:	4b22      	ldr	r3, [pc, #136]	@ (800db88 <HAL_PCD_MspInit+0xbc>)
 800db00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db02:	f003 0301 	and.w	r3, r3, #1
 800db06:	613b      	str	r3, [r7, #16]
 800db08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800db0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800db10:	2300      	movs	r3, #0
 800db12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db14:	2300      	movs	r3, #0
 800db16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800db18:	f107 0314 	add.w	r3, r7, #20
 800db1c:	4619      	mov	r1, r3
 800db1e:	481b      	ldr	r0, [pc, #108]	@ (800db8c <HAL_PCD_MspInit+0xc0>)
 800db20:	f7f3 fed8 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800db24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800db28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db2a:	2302      	movs	r3, #2
 800db2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db2e:	2300      	movs	r3, #0
 800db30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db32:	2303      	movs	r3, #3
 800db34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800db36:	230a      	movs	r3, #10
 800db38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db3a:	f107 0314 	add.w	r3, r7, #20
 800db3e:	4619      	mov	r1, r3
 800db40:	4812      	ldr	r0, [pc, #72]	@ (800db8c <HAL_PCD_MspInit+0xc0>)
 800db42:	f7f3 fec7 	bl	80018d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db46:	4b10      	ldr	r3, [pc, #64]	@ (800db88 <HAL_PCD_MspInit+0xbc>)
 800db48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db4a:	4a0f      	ldr	r2, [pc, #60]	@ (800db88 <HAL_PCD_MspInit+0xbc>)
 800db4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db50:	6353      	str	r3, [r2, #52]	@ 0x34
 800db52:	2300      	movs	r3, #0
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	4b0c      	ldr	r3, [pc, #48]	@ (800db88 <HAL_PCD_MspInit+0xbc>)
 800db58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db5a:	4a0b      	ldr	r2, [pc, #44]	@ (800db88 <HAL_PCD_MspInit+0xbc>)
 800db5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800db60:	6453      	str	r3, [r2, #68]	@ 0x44
 800db62:	4b09      	ldr	r3, [pc, #36]	@ (800db88 <HAL_PCD_MspInit+0xbc>)
 800db64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800db6e:	2200      	movs	r2, #0
 800db70:	2100      	movs	r1, #0
 800db72:	2043      	movs	r0, #67	@ 0x43
 800db74:	f7f3 fe84 	bl	8001880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db78:	2043      	movs	r0, #67	@ 0x43
 800db7a:	f7f3 fe9d 	bl	80018b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db7e:	bf00      	nop
 800db80:	3728      	adds	r7, #40	@ 0x28
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	40023800 	.word	0x40023800
 800db8c:	40020000 	.word	0x40020000

0800db90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dba4:	4619      	mov	r1, r3
 800dba6:	4610      	mov	r0, r2
 800dba8:	f7fe fa9b 	bl	800c0e2 <USBD_LL_SetupStage>
}
 800dbac:	bf00      	nop
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dbc6:	78fa      	ldrb	r2, [r7, #3]
 800dbc8:	6879      	ldr	r1, [r7, #4]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	4413      	add	r3, r2
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	440b      	add	r3, r1
 800dbd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	78fb      	ldrb	r3, [r7, #3]
 800dbdc:	4619      	mov	r1, r3
 800dbde:	f7fe fad5 	bl	800c18c <USBD_LL_DataOutStage>
}
 800dbe2:	bf00      	nop
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b082      	sub	sp, #8
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dbfc:	78fa      	ldrb	r2, [r7, #3]
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	4613      	mov	r3, r2
 800dc02:	00db      	lsls	r3, r3, #3
 800dc04:	4413      	add	r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	440b      	add	r3, r1
 800dc0a:	3320      	adds	r3, #32
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	78fb      	ldrb	r3, [r7, #3]
 800dc10:	4619      	mov	r1, r3
 800dc12:	f7fe fb6e 	bl	800c2f2 <USBD_LL_DataInStage>
}
 800dc16:	bf00      	nop
 800dc18:	3708      	adds	r7, #8
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b082      	sub	sp, #8
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fe fca8 	bl	800c582 <USBD_LL_SOF>
}
 800dc32:	bf00      	nop
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b084      	sub	sp, #16
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dc42:	2301      	movs	r3, #1
 800dc44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	79db      	ldrb	r3, [r3, #7]
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	d001      	beq.n	800dc52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dc4e:	f7f3 fa29 	bl	80010a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc58:	7bfa      	ldrb	r2, [r7, #15]
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fe fc4c 	bl	800c4fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fe fbf4 	bl	800c456 <USBD_LL_Reset>
}
 800dc6e:	bf00      	nop
 800dc70:	3710      	adds	r7, #16
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
	...

0800dc78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe fc47 	bl	800c51a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	6812      	ldr	r2, [r2, #0]
 800dc9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dc9e:	f043 0301 	orr.w	r3, r3, #1
 800dca2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	7adb      	ldrb	r3, [r3, #11]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d005      	beq.n	800dcb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dcac:	4b04      	ldr	r3, [pc, #16]	@ (800dcc0 <HAL_PCD_SuspendCallback+0x48>)
 800dcae:	691b      	ldr	r3, [r3, #16]
 800dcb0:	4a03      	ldr	r2, [pc, #12]	@ (800dcc0 <HAL_PCD_SuspendCallback+0x48>)
 800dcb2:	f043 0306 	orr.w	r3, r3, #6
 800dcb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dcb8:	bf00      	nop
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	e000ed00 	.word	0xe000ed00

0800dcc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fe fc3d 	bl	800c552 <USBD_LL_Resume>
}
 800dcd8:	bf00      	nop
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcf2:	78fa      	ldrb	r2, [r7, #3]
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fc95 	bl	800c626 <USBD_LL_IsoOUTIncomplete>
}
 800dcfc:	bf00      	nop
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd16:	78fa      	ldrb	r2, [r7, #3]
 800dd18:	4611      	mov	r1, r2
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fe fc51 	bl	800c5c2 <USBD_LL_IsoINIncomplete>
}
 800dd20:	bf00      	nop
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fe fca7 	bl	800c68a <USBD_LL_DevConnected>
}
 800dd3c:	bf00      	nop
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe fca4 	bl	800c6a0 <USBD_LL_DevDisconnected>
}
 800dd58:	bf00      	nop
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d13c      	bne.n	800ddea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dd70:	4a20      	ldr	r2, [pc, #128]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	4a1e      	ldr	r2, [pc, #120]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dd7c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd80:	4b1c      	ldr	r3, [pc, #112]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dd82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dd86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dd88:	4b1a      	ldr	r3, [pc, #104]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dd8a:	2204      	movs	r2, #4
 800dd8c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dd8e:	4b19      	ldr	r3, [pc, #100]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dd90:	2202      	movs	r2, #2
 800dd92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dd94:	4b17      	ldr	r3, [pc, #92]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dd9a:	4b16      	ldr	r3, [pc, #88]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dda0:	4b14      	ldr	r3, [pc, #80]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dda6:	4b13      	ldr	r3, [pc, #76]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dda8:	2200      	movs	r2, #0
 800ddaa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ddac:	4b11      	ldr	r3, [pc, #68]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ddb2:	4b10      	ldr	r3, [pc, #64]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ddb8:	4b0e      	ldr	r3, [pc, #56]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ddbe:	480d      	ldr	r0, [pc, #52]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800ddc0:	f7f5 fc04 	bl	80035cc <HAL_PCD_Init>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ddca:	f7f3 f96b 	bl	80010a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ddce:	2180      	movs	r1, #128	@ 0x80
 800ddd0:	4808      	ldr	r0, [pc, #32]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800ddd2:	f7f6 fe30 	bl	8004a36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ddd6:	2240      	movs	r2, #64	@ 0x40
 800ddd8:	2100      	movs	r1, #0
 800ddda:	4806      	ldr	r0, [pc, #24]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dddc:	f7f6 fde4 	bl	80049a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dde0:	2280      	movs	r2, #128	@ 0x80
 800dde2:	2101      	movs	r1, #1
 800dde4:	4803      	ldr	r0, [pc, #12]	@ (800ddf4 <USBD_LL_Init+0x94>)
 800dde6:	f7f6 fddf 	bl	80049a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	2001459c 	.word	0x2001459c

0800ddf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de0e:	4618      	mov	r0, r3
 800de10:	f7f5 fceb 	bl	80037ea <HAL_PCD_Start>
 800de14:	4603      	mov	r3, r0
 800de16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de18:	7bfb      	ldrb	r3, [r7, #15]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 f942 	bl	800e0a4 <USBD_Get_USB_Status>
 800de20:	4603      	mov	r3, r0
 800de22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de24:	7bbb      	ldrb	r3, [r7, #14]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b084      	sub	sp, #16
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
 800de36:	4608      	mov	r0, r1
 800de38:	4611      	mov	r1, r2
 800de3a:	461a      	mov	r2, r3
 800de3c:	4603      	mov	r3, r0
 800de3e:	70fb      	strb	r3, [r7, #3]
 800de40:	460b      	mov	r3, r1
 800de42:	70bb      	strb	r3, [r7, #2]
 800de44:	4613      	mov	r3, r2
 800de46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de56:	78bb      	ldrb	r3, [r7, #2]
 800de58:	883a      	ldrh	r2, [r7, #0]
 800de5a:	78f9      	ldrb	r1, [r7, #3]
 800de5c:	f7f6 f9bf 	bl	80041de <HAL_PCD_EP_Open>
 800de60:	4603      	mov	r3, r0
 800de62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de64:	7bfb      	ldrb	r3, [r7, #15]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f91c 	bl	800e0a4 <USBD_Get_USB_Status>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de70:	7bbb      	ldrb	r3, [r7, #14]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	460b      	mov	r3, r1
 800de84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de94:	78fa      	ldrb	r2, [r7, #3]
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f6 fa0a 	bl	80042b2 <HAL_PCD_EP_Close>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f8fd 	bl	800e0a4 <USBD_Get_USB_Status>
 800deaa:	4603      	mov	r3, r0
 800deac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deae:	7bbb      	ldrb	r3, [r7, #14]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ded2:	78fa      	ldrb	r2, [r7, #3]
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7f6 fac2 	bl	8004460 <HAL_PCD_EP_SetStall>
 800dedc:	4603      	mov	r3, r0
 800dede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 f8de 	bl	800e0a4 <USBD_Get_USB_Status>
 800dee8:	4603      	mov	r3, r0
 800deea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deec:	7bbb      	ldrb	r3, [r7, #14]
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800def6:	b580      	push	{r7, lr}
 800def8:	b084      	sub	sp, #16
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
 800defe:	460b      	mov	r3, r1
 800df00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df02:	2300      	movs	r3, #0
 800df04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df06:	2300      	movs	r3, #0
 800df08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df10:	78fa      	ldrb	r2, [r7, #3]
 800df12:	4611      	mov	r1, r2
 800df14:	4618      	mov	r0, r3
 800df16:	f7f6 fb06 	bl	8004526 <HAL_PCD_EP_ClrStall>
 800df1a:	4603      	mov	r3, r0
 800df1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	4618      	mov	r0, r3
 800df22:	f000 f8bf 	bl	800e0a4 <USBD_Get_USB_Status>
 800df26:	4603      	mov	r3, r0
 800df28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df34:	b480      	push	{r7}
 800df36:	b085      	sub	sp, #20
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800df48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	da0b      	bge.n	800df68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800df50:	78fb      	ldrb	r3, [r7, #3]
 800df52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800df56:	68f9      	ldr	r1, [r7, #12]
 800df58:	4613      	mov	r3, r2
 800df5a:	00db      	lsls	r3, r3, #3
 800df5c:	4413      	add	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	440b      	add	r3, r1
 800df62:	3316      	adds	r3, #22
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	e00b      	b.n	800df80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800df68:	78fb      	ldrb	r3, [r7, #3]
 800df6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800df6e:	68f9      	ldr	r1, [r7, #12]
 800df70:	4613      	mov	r3, r2
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	4413      	add	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	440b      	add	r3, r1
 800df7a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800df7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df80:	4618      	mov	r0, r3
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	460b      	mov	r3, r1
 800df96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfa6:	78fa      	ldrb	r2, [r7, #3]
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7f6 f8f3 	bl	8004196 <HAL_PCD_SetAddress>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f000 f874 	bl	800e0a4 <USBD_Get_USB_Status>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b086      	sub	sp, #24
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	60f8      	str	r0, [r7, #12]
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	603b      	str	r3, [r7, #0]
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dfe8:	7af9      	ldrb	r1, [r7, #11]
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	f7f6 f9fd 	bl	80043ec <HAL_PCD_EP_Transmit>
 800dff2:	4603      	mov	r3, r0
 800dff4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dff6:	7dfb      	ldrb	r3, [r7, #23]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f000 f853 	bl	800e0a4 <USBD_Get_USB_Status>
 800dffe:	4603      	mov	r3, r0
 800e000:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e002:	7dbb      	ldrb	r3, [r7, #22]
}
 800e004:	4618      	mov	r0, r3
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	607a      	str	r2, [r7, #4]
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	460b      	mov	r3, r1
 800e01a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e02a:	7af9      	ldrb	r1, [r7, #11]
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	f7f6 f989 	bl	8004346 <HAL_PCD_EP_Receive>
 800e034:	4603      	mov	r3, r0
 800e036:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e038:	7dfb      	ldrb	r3, [r7, #23]
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 f832 	bl	800e0a4 <USBD_Get_USB_Status>
 800e040:	4603      	mov	r3, r0
 800e042:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e044:	7dbb      	ldrb	r3, [r7, #22]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3718      	adds	r7, #24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
 800e056:	460b      	mov	r3, r1
 800e058:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e060:	78fa      	ldrb	r2, [r7, #3]
 800e062:	4611      	mov	r1, r2
 800e064:	4618      	mov	r0, r3
 800e066:	f7f6 f9a9 	bl	80043bc <HAL_PCD_EP_GetRxCount>
 800e06a:	4603      	mov	r3, r0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e07c:	4b03      	ldr	r3, [pc, #12]	@ (800e08c <USBD_static_malloc+0x18>)
}
 800e07e:	4618      	mov	r0, r3
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	20014a80 	.word	0x20014a80

0800e090 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]

}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e0b2:	79fb      	ldrb	r3, [r7, #7]
 800e0b4:	2b03      	cmp	r3, #3
 800e0b6:	d817      	bhi.n	800e0e8 <USBD_Get_USB_Status+0x44>
 800e0b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e0c0 <USBD_Get_USB_Status+0x1c>)
 800e0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0be:	bf00      	nop
 800e0c0:	0800e0d1 	.word	0x0800e0d1
 800e0c4:	0800e0d7 	.word	0x0800e0d7
 800e0c8:	0800e0dd 	.word	0x0800e0dd
 800e0cc:	0800e0e3 	.word	0x0800e0e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0d4:	e00b      	b.n	800e0ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e0da:	e008      	b.n	800e0ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e0:	e005      	b.n	800e0ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e6:	e002      	b.n	800e0ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ec:	bf00      	nop
  }
  return usb_status;
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <memset>:
 800e0fc:	4402      	add	r2, r0
 800e0fe:	4603      	mov	r3, r0
 800e100:	4293      	cmp	r3, r2
 800e102:	d100      	bne.n	800e106 <memset+0xa>
 800e104:	4770      	bx	lr
 800e106:	f803 1b01 	strb.w	r1, [r3], #1
 800e10a:	e7f9      	b.n	800e100 <memset+0x4>

0800e10c <__libc_init_array>:
 800e10c:	b570      	push	{r4, r5, r6, lr}
 800e10e:	4d0d      	ldr	r5, [pc, #52]	@ (800e144 <__libc_init_array+0x38>)
 800e110:	4c0d      	ldr	r4, [pc, #52]	@ (800e148 <__libc_init_array+0x3c>)
 800e112:	1b64      	subs	r4, r4, r5
 800e114:	10a4      	asrs	r4, r4, #2
 800e116:	2600      	movs	r6, #0
 800e118:	42a6      	cmp	r6, r4
 800e11a:	d109      	bne.n	800e130 <__libc_init_array+0x24>
 800e11c:	4d0b      	ldr	r5, [pc, #44]	@ (800e14c <__libc_init_array+0x40>)
 800e11e:	4c0c      	ldr	r4, [pc, #48]	@ (800e150 <__libc_init_array+0x44>)
 800e120:	f000 f826 	bl	800e170 <_init>
 800e124:	1b64      	subs	r4, r4, r5
 800e126:	10a4      	asrs	r4, r4, #2
 800e128:	2600      	movs	r6, #0
 800e12a:	42a6      	cmp	r6, r4
 800e12c:	d105      	bne.n	800e13a <__libc_init_array+0x2e>
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
 800e130:	f855 3b04 	ldr.w	r3, [r5], #4
 800e134:	4798      	blx	r3
 800e136:	3601      	adds	r6, #1
 800e138:	e7ee      	b.n	800e118 <__libc_init_array+0xc>
 800e13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e13e:	4798      	blx	r3
 800e140:	3601      	adds	r6, #1
 800e142:	e7f2      	b.n	800e12a <__libc_init_array+0x1e>
 800e144:	0800e254 	.word	0x0800e254
 800e148:	0800e254 	.word	0x0800e254
 800e14c:	0800e254 	.word	0x0800e254
 800e150:	0800e258 	.word	0x0800e258

0800e154 <memcpy>:
 800e154:	440a      	add	r2, r1
 800e156:	4291      	cmp	r1, r2
 800e158:	f100 33ff 	add.w	r3, r0, #4294967295
 800e15c:	d100      	bne.n	800e160 <memcpy+0xc>
 800e15e:	4770      	bx	lr
 800e160:	b510      	push	{r4, lr}
 800e162:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e16a:	4291      	cmp	r1, r2
 800e16c:	d1f9      	bne.n	800e162 <memcpy+0xe>
 800e16e:	bd10      	pop	{r4, pc}

0800e170 <_init>:
 800e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e172:	bf00      	nop
 800e174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e176:	bc08      	pop	{r3}
 800e178:	469e      	mov	lr, r3
 800e17a:	4770      	bx	lr

0800e17c <_fini>:
 800e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17e:	bf00      	nop
 800e180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e182:	bc08      	pop	{r3}
 800e184:	469e      	mov	lr, r3
 800e186:	4770      	bx	lr
