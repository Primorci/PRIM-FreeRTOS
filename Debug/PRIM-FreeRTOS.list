
PRIM-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800e688  0800e688  0000f688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e768  0800e768  00010104  2**0
                  CONTENTS
  4 .ARM          00000008  0800e768  0800e768  0000f768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e770  0800e770  00010104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e770  0800e770  0000f770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e774  0800e774  0000f774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800e778  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014ba8  20000104  0800e87c  00010104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014cac  0800e87c  00010cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001feb8  00000000  00000000  00010134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f28  00000000  00000000  0002ffec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d38  00000000  00000000  00034f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001693  00000000  00000000  00036c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfb0  00000000  00000000  000382e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000253bb  00000000  00000000  00054293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd8e  00000000  00000000  0007964e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001193dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b64  00000000  00000000  00119420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00120f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e670 	.word	0x0800e670

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800e670 	.word	0x0800e670

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <i2c1_pisiRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af04      	add	r7, sp, #16
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	460b      	mov	r3, r1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	4613      	mov	r3, r2
 80004f0:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	b299      	uxth	r1, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	230a      	movs	r3, #10
 8000502:	9302      	str	r3, [sp, #8]
 8000504:	2301      	movs	r3, #1
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	1d7b      	adds	r3, r7, #5
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	4804      	ldr	r0, [pc, #16]	@ (8000520 <i2c1_pisiRegister+0x40>)
 8000510:	f001 fe42 	bl	8002198 <HAL_I2C_Mem_Write>
 8000514:	4603      	mov	r3, r0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000120 	.word	0x20000120

08000524 <i2c1_beriRegistre>:

HAL_StatusTypeDef i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af04      	add	r7, sp, #16
 800052a:	603a      	str	r2, [r7, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	460b      	mov	r3, r1
 8000534:	71bb      	strb	r3, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800053a:	797b      	ldrb	r3, [r7, #5]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d906      	bls.n	800054e <i2c1_beriRegistre+0x2a>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b19      	cmp	r3, #25
 8000544:	d103      	bne.n	800054e <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800054c:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	b299      	uxth	r1, r3
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	b298      	uxth	r0, r3
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	b29b      	uxth	r3, r3
 8000560:	797a      	ldrb	r2, [r7, #5]
 8000562:	9202      	str	r2, [sp, #8]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4602      	mov	r2, r0
 800056e:	4805      	ldr	r0, [pc, #20]	@ (8000584 <i2c1_beriRegistre+0x60>)
 8000570:	f001 ff0c 	bl	800238c <HAL_I2C_Mem_Read>
 8000574:	4603      	mov	r3, r0
 8000576:	73fb      	strb	r3, [r7, #15]

	return status;
 8000578:	7bfb      	ldrb	r3, [r7, #15]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000120 	.word	0x20000120

08000588 <initOrientation>:

void initOrientation() { // ne pozabit klicati te funkcije
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 800058c:	2227      	movs	r2, #39	@ 0x27
 800058e:	2120      	movs	r1, #32
 8000590:	2019      	movs	r0, #25
 8000592:	f7ff ffa5 	bl	80004e0 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000596:	2288      	movs	r2, #136	@ 0x88
 8000598:	2123      	movs	r1, #35	@ 0x23
 800059a:	2019      	movs	r0, #25
 800059c:	f7ff ffa0 	bl	80004e0 <i2c1_pisiRegister>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005b4:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2108      	movs	r1, #8
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <spi1_beriRegister+0x50>)
 80005c2:	f001 fc8b 	bl	8001edc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 80005c6:	f107 020c 	add.w	r2, r7, #12
 80005ca:	f107 010e 	add.w	r1, r7, #14
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2302      	movs	r3, #2
 80005d4:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <spi1_beriRegister+0x54>)
 80005d6:	f005 fc9f 	bl	8005f18 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2108      	movs	r1, #8
 80005de:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <spi1_beriRegister+0x50>)
 80005e0:	f001 fc7c 	bl	8001edc <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 80005e4:	89bb      	ldrh	r3, [r7, #12]
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	20000204 	.word	0x20000204

080005fc <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	b21a      	sxth	r2, r3
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	b21b      	sxth	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b21b      	sxth	r3, r3
 800061a:	b29b      	uxth	r3, r3
 800061c:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4809      	ldr	r0, [pc, #36]	@ (8000648 <spi1_pisiRegister+0x4c>)
 8000624:	f001 fc5a 	bl	8001edc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000628:	f107 010e 	add.w	r1, r7, #14
 800062c:	2302      	movs	r3, #2
 800062e:	2202      	movs	r2, #2
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <spi1_pisiRegister+0x50>)
 8000632:	f005 fa14 	bl	8005a5e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2108      	movs	r1, #8
 800063a:	4803      	ldr	r0, [pc, #12]	@ (8000648 <spi1_pisiRegister+0x4c>)
 800063c:	f001 fc4e 	bl	8001edc <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	20000204 	.word	0x20000204

08000650 <spi1_beriRegistre>:

HAL_StatusTypeDef spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000666:	b2db      	uxtb	r3, r3
 8000668:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2108      	movs	r1, #8
 800066e:	4813      	ldr	r0, [pc, #76]	@ (80006bc <spi1_beriRegistre+0x6c>)
 8000670:	f001 fc34 	bl	8001edc <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status_SPI_Transmit = HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8000674:	1df9      	adds	r1, r7, #7
 8000676:	230a      	movs	r3, #10
 8000678:	2201      	movs	r2, #1
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <spi1_beriRegistre+0x70>)
 800067c:	f005 f9ef 	bl	8005a5e <HAL_SPI_Transmit>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status_SPI_Receive = HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	b29a      	uxth	r2, r3
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	6839      	ldr	r1, [r7, #0]
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <spi1_beriRegistre+0x70>)
 800068e:	f005 fb2a 	bl	8005ce6 <HAL_SPI_Receive>
 8000692:	4603      	mov	r3, r0
 8000694:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2108      	movs	r1, #8
 800069a:	4808      	ldr	r0, [pc, #32]	@ (80006bc <spi1_beriRegistre+0x6c>)
 800069c:	f001 fc1e 	bl	8001edc <HAL_GPIO_WritePin>

    return status_SPI_Transmit != HAL_OK ? HAL_ERROR : status_SPI_Receive != HAL_OK ? HAL_ERROR : HAL_OK;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <spi1_beriRegistre+0x5c>
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <spi1_beriRegistre+0x60>
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <spi1_beriRegistre+0x62>
 80006b0:	2300      	movs	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	20000204 	.word	0x20000204

080006c4 <initGyro>:

void initGyro() { // ne pozabit klicat te funkcije
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
    // preverimo ali smo "poklicali" pravi senzor
    uint8_t cip = spi1_beriRegister(0x0F);
 80006ca:	200f      	movs	r0, #15
 80006cc:	f7ff ff6a 	bl	80005a4 <spi1_beriRegister>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2bd4      	cmp	r3, #212	@ 0xd4
 80006d8:	d004      	beq.n	80006e4 <initGyro+0x20>
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2bd3      	cmp	r3, #211	@ 0xd3
 80006de:	d001      	beq.n	80006e4 <initGyro+0x20>
        for (;;);
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x0F); // zbudi ziroskop in omogoci osi
 80006e4:	210f      	movs	r1, #15
 80006e6:	2020      	movs	r0, #32
 80006e8:	f7ff ff88 	bl	80005fc <spi1_pisiRegister>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <initMutex>:

void initMutex(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    dataMutex = xSemaphoreCreateMutex();
 80006f8:	2001      	movs	r0, #1
 80006fa:	f008 fc01 	bl	8008f00 <xQueueCreateMutex>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <initMutex+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
    if (dataMutex == NULL) {
 8000704:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <initMutex+0x20>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d101      	bne.n	8000710 <initMutex+0x1c>
        Error_Handler(); // Handle error if mutex creation fails
 800070c:	f000 fe32 	bl	8001374 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200002b4 	.word	0x200002b4

08000718 <getGyroData>:

void getGyroData(void *pvParameters) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	while (1) {
		int16_t gyro[3];
		if (spi1_beriRegistre(0x28, (uint8_t *)gyro, 6) == HAL_OK) {
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2206      	movs	r2, #6
 8000726:	4619      	mov	r1, r3
 8000728:	2028      	movs	r0, #40	@ 0x28
 800072a:	f7ff ff91 	bl	8000650 <spi1_beriRegistre>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d11f      	bne.n	8000774 <getGyroData+0x5c>
			// Protect shared data with mutex
			if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <getGyroData+0xc8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2164      	movs	r1, #100	@ 0x64
 800073a:	4618      	mov	r0, r3
 800073c:	f008 fddc 	bl	80092f8 <xQueueSemaphoreTake>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d112      	bne.n	800076c <getGyroData+0x54>
				memcpy(sharedSensorData.gyroData, gyro, sizeof(gyro));
 8000746:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <getGyroData+0xcc>)
 8000748:	f107 0208 	add.w	r2, r7, #8
 800074c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000750:	6018      	str	r0, [r3, #0]
 8000752:	3304      	adds	r3, #4
 8000754:	8019      	strh	r1, [r3, #0]
				xSemaphoreGive(dataMutex);
 8000756:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <getGyroData+0xc8>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	2300      	movs	r3, #0
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	f008 fbe6 	bl	8008f30 <xQueueGenericSend>
				sharedStatus.gyroStatus = 0; // Update status to OK
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <getGyroData+0xd0>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e035      	b.n	80007d8 <getGyroData+0xc0>
			} else {
				sharedStatus.gyroStatus = 2; // Mutex acquisition error
 800076c:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <getGyroData+0xd0>)
 800076e:	2202      	movs	r2, #2
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e031      	b.n	80007d8 <getGyroData+0xc0>
			}
		} else {
			sharedStatus.gyroStatus = 1; // Sensor read error
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <getGyroData+0xd0>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 3; i++)
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e009      	b.n	8000794 <getGyroData+0x7c>
				gyro[i] = 0;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	3310      	adds	r3, #16
 8000786:	443b      	add	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	f823 2c08 	strh.w	r2, [r3, #-8]
			for(uint8_t i = 0; i < 3; i++)
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d9f2      	bls.n	8000780 <getGyroData+0x68>
			if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <getGyroData+0xc8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2164      	movs	r1, #100	@ 0x64
 80007a0:	4618      	mov	r0, r3
 80007a2:	f008 fda9 	bl	80092f8 <xQueueSemaphoreTake>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d112      	bne.n	80007d2 <getGyroData+0xba>
				memcpy(sharedSensorData.gyroData, gyro, sizeof(gyro));
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <getGyroData+0xcc>)
 80007ae:	f107 0208 	add.w	r2, r7, #8
 80007b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b6:	6018      	str	r0, [r3, #0]
 80007b8:	3304      	adds	r3, #4
 80007ba:	8019      	strh	r1, [r3, #0]
				xSemaphoreGive(dataMutex);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <getGyroData+0xc8>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	2300      	movs	r3, #0
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	f008 fbb3 	bl	8008f30 <xQueueGenericSend>
				sharedStatus.gyroStatus = 0; // Update status to OK
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <getGyroData+0xd0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	e002      	b.n	80007d8 <getGyroData+0xc0>
			} else {
				sharedStatus.gyroStatus = 2; // Mutex acquisition error
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <getGyroData+0xd0>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	701a      	strb	r2, [r3, #0]
			}
		}
		vTaskDelay(pdMS_TO_TICKS(50)); // Adjust delay as needed
 80007d8:	2032      	movs	r0, #50	@ 0x32
 80007da:	f009 f9a5 	bl	8009b28 <vTaskDelay>
	while (1) {
 80007de:	e79f      	b.n	8000720 <getGyroData+0x8>
 80007e0:	200002b4 	.word	0x200002b4
 80007e4:	200002a8 	.word	0x200002a8
 80007e8:	200002b8 	.word	0x200002b8

080007ec <getAccelData>:
	}
}

void getAccelData(void *pvParameters) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	while (1) {
		int16_t accel[3];
		if (i2c1_beriRegistre(0x19, 0x28, (uint8_t *)accel, 6) == HAL_OK) {
 80007f4:	f107 0208 	add.w	r2, r7, #8
 80007f8:	2306      	movs	r3, #6
 80007fa:	2128      	movs	r1, #40	@ 0x28
 80007fc:	2019      	movs	r0, #25
 80007fe:	f7ff fe91 	bl	8000524 <i2c1_beriRegistre>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d11f      	bne.n	8000848 <getAccelData+0x5c>
			// Protect shared data with mutex
			if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <getAccelData+0xc8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2164      	movs	r1, #100	@ 0x64
 800080e:	4618      	mov	r0, r3
 8000810:	f008 fd72 	bl	80092f8 <xQueueSemaphoreTake>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d112      	bne.n	8000840 <getAccelData+0x54>
				memcpy(sharedSensorData.accelData, accel, sizeof(accel));
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <getAccelData+0xcc>)
 800081c:	3306      	adds	r3, #6
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	6810      	ldr	r0, [r2, #0]
 8000824:	6018      	str	r0, [r3, #0]
 8000826:	8892      	ldrh	r2, [r2, #4]
 8000828:	809a      	strh	r2, [r3, #4]
				xSemaphoreGive(dataMutex);
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <getAccelData+0xc8>)
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	f008 fb7c 	bl	8008f30 <xQueueGenericSend>
				sharedStatus.accelStatus = 0; // Update status to OK
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <getAccelData+0xd0>)
 800083a:	2200      	movs	r2, #0
 800083c:	705a      	strb	r2, [r3, #1]
 800083e:	e035      	b.n	80008ac <getAccelData+0xc0>
			} else {
				sharedStatus.accelStatus = 2; // Mutex acquisition error
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <getAccelData+0xd0>)
 8000842:	2202      	movs	r2, #2
 8000844:	705a      	strb	r2, [r3, #1]
 8000846:	e031      	b.n	80008ac <getAccelData+0xc0>
			}
		} else {
			sharedStatus.accelStatus = 1; // Sensor read error
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <getAccelData+0xd0>)
 800084a:	2201      	movs	r2, #1
 800084c:	705a      	strb	r2, [r3, #1]
			for(uint8_t i = 0; i < 3; i++)
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	e009      	b.n	8000868 <getAccelData+0x7c>
				accel[i] = 0;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	3310      	adds	r3, #16
 800085a:	443b      	add	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	f823 2c08 	strh.w	r2, [r3, #-8]
			for(uint8_t i = 0; i < 3; i++)
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	3301      	adds	r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d9f2      	bls.n	8000854 <getAccelData+0x68>
			if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <getAccelData+0xc8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2164      	movs	r1, #100	@ 0x64
 8000874:	4618      	mov	r0, r3
 8000876:	f008 fd3f 	bl	80092f8 <xQueueSemaphoreTake>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d112      	bne.n	80008a6 <getAccelData+0xba>
				memcpy(sharedSensorData.accelData, accel, sizeof(accel));
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <getAccelData+0xcc>)
 8000882:	3306      	adds	r3, #6
 8000884:	f107 0208 	add.w	r2, r7, #8
 8000888:	6810      	ldr	r0, [r2, #0]
 800088a:	6018      	str	r0, [r3, #0]
 800088c:	8892      	ldrh	r2, [r2, #4]
 800088e:	809a      	strh	r2, [r3, #4]
				xSemaphoreGive(dataMutex);
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <getAccelData+0xc8>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	f008 fb49 	bl	8008f30 <xQueueGenericSend>
				sharedStatus.accelStatus = 0; // Update status to OK
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <getAccelData+0xd0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	705a      	strb	r2, [r3, #1]
 80008a4:	e002      	b.n	80008ac <getAccelData+0xc0>
			} else {
				sharedStatus.accelStatus = 2; // Mutex acquisition error
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <getAccelData+0xd0>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	705a      	strb	r2, [r3, #1]
			}
		}
		vTaskDelay(pdMS_TO_TICKS(50)); // Adjust delay as needed
 80008ac:	2032      	movs	r0, #50	@ 0x32
 80008ae:	f009 f93b 	bl	8009b28 <vTaskDelay>
	while (1) {
 80008b2:	e79f      	b.n	80007f4 <getAccelData+0x8>
 80008b4:	200002b4 	.word	0x200002b4
 80008b8:	200002a8 	.word	0x200002a8
 80008bc:	200002b8 	.word	0x200002b8

080008c0 <sendData>:
	}
}

void sendData(void *pvParameters) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	6078      	str	r0, [r7, #4]
	SensorPacket packet;

	while (1) {
		// Safely copy shared sensor data
		xSemaphoreTake(dataMutex, portMAX_DELAY);
 80008c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <sendData+0x74>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	4618      	mov	r0, r3
 80008d2:	f008 fd11 	bl	80092f8 <xQueueSemaphoreTake>
		packet.data = sharedSensorData;
 80008d6:	4a18      	ldr	r2, [pc, #96]	@ (8000938 <sendData+0x78>)
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80008de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		xSemaphoreGive(dataMutex);
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <sendData+0x74>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	f008 fb20 	bl	8008f30 <xQueueGenericSend>

		// Populate the header
		packet.header.packetID = 0xab;
 80008f0:	23ab      	movs	r3, #171	@ 0xab
 80008f2:	733b      	strb	r3, [r7, #12]
		packet.header.dataSize = sizeof(SensorData);
 80008f4:	2314      	movs	r3, #20
 80008f6:	81fb      	strh	r3, [r7, #14]
		packet.header.timestamp = xTaskGetTickCount();
 80008f8:	f009 faa8 	bl	8009e4c <xTaskGetTickCount>
 80008fc:	4603      	mov	r3, r0
 80008fe:	613b      	str	r3, [r7, #16]

		// Send the complete packet (header + data)
		while (CDC_Transmit_FS((uint8_t *)&packet, sizeof(SensorPacket)));
 8000900:	bf00      	nop
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2114      	movs	r1, #20
 8000908:	4618      	mov	r0, r3
 800090a:	f00d fa17 	bl	800dd3c <CDC_Transmit_FS>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f6      	bne.n	8000902 <sendData+0x42>
		sharedStatus.sending = 1;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <sendData+0x7c>)
 8000916:	2201      	movs	r2, #1
 8000918:	709a      	strb	r2, [r3, #2]
        xTaskNotifyGive(txHandle);
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <sendData+0x80>)
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2302      	movs	r3, #2
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	f00a f8c4 	bl	800aab4 <xTaskGenericNotify>

		vTaskDelay(100 / portTICK_PERIOD_MS); // Adjust delay as needed
 800092c:	2064      	movs	r0, #100	@ 0x64
 800092e:	f009 f8fb 	bl	8009b28 <vTaskDelay>
		xSemaphoreTake(dataMutex, portMAX_DELAY);
 8000932:	e7c9      	b.n	80008c8 <sendData+0x8>
 8000934:	200002b4 	.word	0x200002b4
 8000938:	200002a8 	.word	0x200002a8
 800093c:	200002b8 	.word	0x200002b8
 8000940:	200002bc 	.word	0x200002bc

08000944 <update_pwm_brightness>:
	}
}

void update_pwm_brightness(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t brightness_level) {
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	4613      	mov	r3, r2
 8000950:	71fb      	strb	r3, [r7, #7]
    uint32_t ccr_value = (brightness_level * (999 + 1)) / 100;
 8000952:	79fa      	ldrb	r2, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	617b      	str	r3, [r7, #20]

    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d104      	bne.n	800096e <update_pwm_brightness+0x2a>
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800096c:	e013      	b.n	8000996 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d104      	bne.n	800097e <update_pwm_brightness+0x3a>
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800097c:	e00b      	b.n	8000996 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b08      	cmp	r3, #8
 8000982:	d104      	bne.n	800098e <update_pwm_brightness+0x4a>
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800098c:	e003      	b.n	8000996 <update_pwm_brightness+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000996:	bf00      	nop
 8000998:	371c      	adds	r7, #28
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <checkDir>:

void checkDir(uint8_t value, int8_t *dir, int8_t max, int8_t min){
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	460b      	mov	r3, r1
 80009b4:	71bb      	strb	r3, [r7, #6]
 80009b6:	4613      	mov	r3, r2
 80009b8:	717b      	strb	r3, [r7, #5]
	if(value >= max)
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	db03      	blt.n	80009cc <checkDir+0x2a>
		*dir = -1;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	22ff      	movs	r2, #255	@ 0xff
 80009c8:	701a      	strb	r2, [r3, #0]
	else if(value <= min)
		*dir = 1;
}
 80009ca:	e007      	b.n	80009dc <checkDir+0x3a>
	else if(value <= min)
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	dc02      	bgt.n	80009dc <checkDir+0x3a>
		*dir = 1;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <GPIO_control>:
			toggle = !toggle;
		}
	}
}

void GPIO_control(void *pvParameters){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	GPIOControlParams *params = (GPIOControlParams *)pvParameters;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	613b      	str	r3, [r7, #16]

	int8_t dir_status = params->dir_status;
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	f993 3000 	ldrsb.w	r3, [r3]
 80009fa:	73fb      	strb	r3, [r7, #15]
	int8_t dir_RoadType = params->dir_RoadType;
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a02:	73bb      	strb	r3, [r7, #14]
	uint8_t status = params->status;
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	789b      	ldrb	r3, [r3, #2]
 8000a08:	75fb      	strb	r3, [r7, #23]
	uint8_t roadType = params->roadType;
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	78db      	ldrb	r3, [r3, #3]
 8000a0e:	75bb      	strb	r3, [r7, #22]
    uint8_t toggle = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	757b      	strb	r3, [r7, #21]

	while(1){
		if (currentMode == DISPLAY_MODE) {
 8000a14:	4b7f      	ldr	r3, [pc, #508]	@ (8000c14 <GPIO_control+0x22c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 809f 	bne.w	8000b5e <GPIO_control+0x176>
			if(isDefined){
 8000a20:	4b7d      	ldr	r3, [pc, #500]	@ (8000c18 <GPIO_control+0x230>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d078      	beq.n	8000b1a <GPIO_control+0x132>
				// Update LED for danger status
				update_pwm_brightness(&htim4, TIM_CHANNEL_3, recivedData.danger ? 100 : 0);
 8000a28:	4b7c      	ldr	r3, [pc, #496]	@ (8000c1c <GPIO_control+0x234>)
 8000a2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <GPIO_control+0x4e>
 8000a32:	2364      	movs	r3, #100	@ 0x64
 8000a34:	e000      	b.n	8000a38 <GPIO_control+0x50>
 8000a36:	2300      	movs	r3, #0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	4878      	ldr	r0, [pc, #480]	@ (8000c20 <GPIO_control+0x238>)
 8000a3e:	f7ff ff81 	bl	8000944 <update_pwm_brightness>

				// Update LED for status
				update_pwm_brightness(&htim4, TIM_CHANNEL_2, (uint8_t)status);
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	461a      	mov	r2, r3
 8000a46:	2104      	movs	r1, #4
 8000a48:	4875      	ldr	r0, [pc, #468]	@ (8000c20 <GPIO_control+0x238>)
 8000a4a:	f7ff ff7b 	bl	8000944 <update_pwm_brightness>

				// Update LEDs for road type based on the first character
				if (recivedData.roadType[0] == 'A') {
 8000a4e:	4b73      	ldr	r3, [pc, #460]	@ (8000c1c <GPIO_control+0x234>)
 8000a50:	7a1b      	ldrb	r3, [r3, #8]
 8000a52:	2b41      	cmp	r3, #65	@ 0x41
 8000a54:	d10b      	bne.n	8000a6e <GPIO_control+0x86>
					update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4871      	ldr	r0, [pc, #452]	@ (8000c20 <GPIO_control+0x238>)
 8000a5c:	f7ff ff72 	bl	8000944 <update_pwm_brightness>
					update_pwm_brightness(&htim4, TIM_CHANNEL_4, (uint8_t)roadType);
 8000a60:	7dbb      	ldrb	r3, [r7, #22]
 8000a62:	461a      	mov	r2, r3
 8000a64:	210c      	movs	r1, #12
 8000a66:	486e      	ldr	r0, [pc, #440]	@ (8000c20 <GPIO_control+0x238>)
 8000a68:	f7ff ff6c 	bl	8000944 <update_pwm_brightness>
 8000a6c:	e00a      	b.n	8000a84 <GPIO_control+0x9c>
				} else {
					update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210c      	movs	r1, #12
 8000a72:	486b      	ldr	r0, [pc, #428]	@ (8000c20 <GPIO_control+0x238>)
 8000a74:	f7ff ff66 	bl	8000944 <update_pwm_brightness>
					update_pwm_brightness(&htim4, TIM_CHANNEL_1, (uint8_t)roadType);
 8000a78:	7dbb      	ldrb	r3, [r7, #22]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4868      	ldr	r0, [pc, #416]	@ (8000c20 <GPIO_control+0x238>)
 8000a80:	f7ff ff60 	bl	8000944 <update_pwm_brightness>
				}

				// Update status and roadType values dynamically
				status += recivedData.danger
 8000a84:	4b65      	ldr	r3, [pc, #404]	@ (8000c1c <GPIO_control+0x234>)
 8000a86:	f993 3000 	ldrsb.w	r3, [r3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d014      	beq.n	8000ab8 <GPIO_control+0xd0>
							  ? 10 * (recivedData.dangerProximity / 20) * dir_status
 8000a8e:	4b63      	ldr	r3, [pc, #396]	@ (8000c1c <GPIO_control+0x234>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4a64      	ldr	r2, [pc, #400]	@ (8000c24 <GPIO_control+0x23c>)
 8000a94:	fb82 1203 	smull	r1, r2, r2, r3
 8000a98:	10d2      	asrs	r2, r2, #3
 8000a9a:	17db      	asrs	r3, r3, #31
 8000a9c:	1ad3      	subs	r3, r2, r3
				status += recivedData.danger
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	fb12 f303 	smulbb	r3, r2, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	461a      	mov	r2, r3
 8000aae:	0092      	lsls	r2, r2, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	e007      	b.n	8000ac8 <GPIO_control+0xe0>
							  : 10 * dir_status;
 8000ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abc:	b2db      	uxtb	r3, r3
				status += recivedData.danger
 8000abe:	461a      	mov	r2, r3
 8000ac0:	0092      	lsls	r2, r2, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	7dfa      	ldrb	r2, [r7, #23]
 8000aca:	4413      	add	r3, r2
 8000acc:	75fb      	strb	r3, [r7, #23]
				roadType += 10 * ((100 - recivedData.roadQuality) / 20) * dir_RoadType;
 8000ace:	4b53      	ldr	r3, [pc, #332]	@ (8000c1c <GPIO_control+0x234>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000ad6:	4a54      	ldr	r2, [pc, #336]	@ (8000c28 <GPIO_control+0x240>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	091b      	lsrs	r3, r3, #4
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	fb12 f303 	smulbb	r3, r2, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	0092      	lsls	r2, r2, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	7dbb      	ldrb	r3, [r7, #22]
 8000af8:	4413      	add	r3, r2
 8000afa:	75bb      	strb	r3, [r7, #22]

				// Ensure values remain within bounds
				checkDir(status, &dir_status, 100, 0);
 8000afc:	f107 010f 	add.w	r1, r7, #15
 8000b00:	7df8      	ldrb	r0, [r7, #23]
 8000b02:	2300      	movs	r3, #0
 8000b04:	2264      	movs	r2, #100	@ 0x64
 8000b06:	f7ff ff4c 	bl	80009a2 <checkDir>
				checkDir(roadType, &dir_RoadType, 100, 0);
 8000b0a:	f107 010e 	add.w	r1, r7, #14
 8000b0e:	7db8      	ldrb	r0, [r7, #22]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2264      	movs	r2, #100	@ 0x64
 8000b14:	f7ff ff45 	bl	80009a2 <checkDir>
 8000b18:	e077      	b.n	8000c0a <GPIO_control+0x222>
			}
			else {
				// Fallback behavior: Toggle TIM_CHANNEL_3
				toggle = !toggle;
 8000b1a:	7d7b      	ldrb	r3, [r7, #21]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2301      	moveq	r3, #1
 8000b22:	2300      	movne	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	757b      	strb	r3, [r7, #21]
				update_pwm_brightness(&htim4, TIM_CHANNEL_3, toggle ? 100 : 0);
 8000b28:	7d7b      	ldrb	r3, [r7, #21]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <GPIO_control+0x14a>
 8000b2e:	2364      	movs	r3, #100	@ 0x64
 8000b30:	e000      	b.n	8000b34 <GPIO_control+0x14c>
 8000b32:	2300      	movs	r3, #0
 8000b34:	461a      	mov	r2, r3
 8000b36:	2108      	movs	r1, #8
 8000b38:	4839      	ldr	r0, [pc, #228]	@ (8000c20 <GPIO_control+0x238>)
 8000b3a:	f7ff ff03 	bl	8000944 <update_pwm_brightness>

				update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210c      	movs	r1, #12
 8000b42:	4837      	ldr	r0, [pc, #220]	@ (8000c20 <GPIO_control+0x238>)
 8000b44:	f7ff fefe 	bl	8000944 <update_pwm_brightness>
				update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4834      	ldr	r0, [pc, #208]	@ (8000c20 <GPIO_control+0x238>)
 8000b4e:	f7ff fef9 	bl	8000944 <update_pwm_brightness>
				update_pwm_brightness(&htim4, TIM_CHANNEL_2, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2104      	movs	r1, #4
 8000b56:	4832      	ldr	r0, [pc, #200]	@ (8000c20 <GPIO_control+0x238>)
 8000b58:	f7ff fef4 	bl	8000944 <update_pwm_brightness>
 8000b5c:	e055      	b.n	8000c0a <GPIO_control+0x222>
			}
		}
		else if(currentMode == DEBUG_MODE){
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c14 <GPIO_control+0x22c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d12f      	bne.n	8000bc8 <GPIO_control+0x1e0>
			update_pwm_brightness(&htim4, TIM_CHANNEL_1, (sharedStatus.accelStatus == 0 && sharedStatus.gyroStatus == 0) ? 100 : 0);
 8000b68:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <GPIO_control+0x244>)
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d105      	bne.n	8000b7c <GPIO_control+0x194>
 8000b70:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <GPIO_control+0x244>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <GPIO_control+0x194>
 8000b78:	2364      	movs	r3, #100	@ 0x64
 8000b7a:	e000      	b.n	8000b7e <GPIO_control+0x196>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	4827      	ldr	r0, [pc, #156]	@ (8000c20 <GPIO_control+0x238>)
 8000b84:	f7ff fede 	bl	8000944 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_2, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	4824      	ldr	r0, [pc, #144]	@ (8000c20 <GPIO_control+0x238>)
 8000b8e:	f7ff fed9 	bl	8000944 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_3, (sharedStatus.accelStatus != 0 || sharedStatus.gyroStatus != 0) ? 100 : 0);
 8000b92:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <GPIO_control+0x244>)
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d103      	bne.n	8000ba2 <GPIO_control+0x1ba>
 8000b9a:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <GPIO_control+0x244>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <GPIO_control+0x1be>
 8000ba2:	2364      	movs	r3, #100	@ 0x64
 8000ba4:	e000      	b.n	8000ba8 <GPIO_control+0x1c0>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2108      	movs	r1, #8
 8000bac:	481c      	ldr	r0, [pc, #112]	@ (8000c20 <GPIO_control+0x238>)
 8000bae:	f7ff fec9 	bl	8000944 <update_pwm_brightness>
			sharedStatus.sending = sharedStatus.sending == 1 ? 0 : sharedStatus.sending;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <GPIO_control+0x244>)
 8000bb4:	789b      	ldrb	r3, [r3, #2]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d002      	beq.n	8000bc0 <GPIO_control+0x1d8>
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <GPIO_control+0x244>)
 8000bbc:	789b      	ldrb	r3, [r3, #2]
 8000bbe:	e000      	b.n	8000bc2 <GPIO_control+0x1da>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <GPIO_control+0x244>)
 8000bc4:	7093      	strb	r3, [r2, #2]
 8000bc6:	e020      	b.n	8000c0a <GPIO_control+0x222>
		}
		else{
			toggle = !toggle;
 8000bc8:	7d7b      	ldrb	r3, [r7, #21]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf0c      	ite	eq
 8000bce:	2301      	moveq	r3, #1
 8000bd0:	2300      	movne	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	757b      	strb	r3, [r7, #21]
			update_pwm_brightness(&htim4, TIM_CHANNEL_2, toggle ? 100 : 0);
 8000bd6:	7d7b      	ldrb	r3, [r7, #21]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <GPIO_control+0x1f8>
 8000bdc:	2364      	movs	r3, #100	@ 0x64
 8000bde:	e000      	b.n	8000be2 <GPIO_control+0x1fa>
 8000be0:	2300      	movs	r3, #0
 8000be2:	461a      	mov	r2, r3
 8000be4:	2104      	movs	r1, #4
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <GPIO_control+0x238>)
 8000be8:	f7ff feac 	bl	8000944 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_4, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	210c      	movs	r1, #12
 8000bf0:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <GPIO_control+0x238>)
 8000bf2:	f7ff fea7 	bl	8000944 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_1, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <GPIO_control+0x238>)
 8000bfc:	f7ff fea2 	bl	8000944 <update_pwm_brightness>
			update_pwm_brightness(&htim4, TIM_CHANNEL_3, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2108      	movs	r1, #8
 8000c04:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <GPIO_control+0x238>)
 8000c06:	f7ff fe9d 	bl	8000944 <update_pwm_brightness>
		}
		// Delay for consistent updates
		vTaskDelay(pdMS_TO_TICKS(100));
 8000c0a:	2064      	movs	r0, #100	@ 0x64
 8000c0c:	f008 ff8c 	bl	8009b28 <vTaskDelay>
		if (currentMode == DISPLAY_MODE) {
 8000c10:	e700      	b.n	8000a14 <GPIO_control+0x2c>
 8000c12:	bf00      	nop
 8000c14:	200002a4 	.word	0x200002a4
 8000c18:	20014390 	.word	0x20014390
 8000c1c:	20014394 	.word	0x20014394
 8000c20:	2000025c 	.word	0x2000025c
 8000c24:	66666667 	.word	0x66666667
 8000c28:	cccccccd 	.word	0xcccccccd
 8000c2c:	200002b8 	.word	0x200002b8

08000c30 <buttonInterupt>:
	}
}

void buttonInterupt(void * pvParameters){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	GPIO_PinState button_prev = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4810      	ldr	r0, [pc, #64]	@ (8000c7c <buttonInterupt+0x4c>)
 8000c3c:	f001 f936 	bl	8001eac <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
	while(1){
		GPIO_PinState button_curr = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c44:	2101      	movs	r1, #1
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <buttonInterupt+0x4c>)
 8000c48:	f001 f930 	bl	8001eac <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	73bb      	strb	r3, [r7, #14]
		if(button_prev != button_curr && button_curr == GPIO_PIN_SET){
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d00e      	beq.n	8000c76 <buttonInterupt+0x46>
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d10b      	bne.n	8000c76 <buttonInterupt+0x46>
			if(currentMode == DISPLAY_MODE)
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <buttonInterupt+0x50>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d103      	bne.n	8000c70 <buttonInterupt+0x40>
				currentMode = DEBUG_MODE;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <buttonInterupt+0x50>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e002      	b.n	8000c76 <buttonInterupt+0x46>
			else
				currentMode = DISPLAY_MODE;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <buttonInterupt+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
		}
		button_prev = button_curr;
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	73fb      	strb	r3, [r7, #15]
	while(1){
 8000c7a:	e7e3      	b.n	8000c44 <buttonInterupt+0x14>
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	200002a4 	.word	0x200002a4

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f000 fe43 	bl	8001914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f8a3 	bl	8000dd8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c92:	f000 f909 	bl	8000ea8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c96:	f000 fa83 	bl	80011a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c9a:	f000 f925 	bl	8000ee8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000c9e:	f000 f953 	bl	8000f48 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000ca2:	f000 f97f 	bl	8000fa4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ca6:	f000 f9ad 	bl	8001004 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000caa:	f00c fef1 	bl	800da90 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000cae:	f000 f9df 	bl	8001070 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  GPIOControlParams gpioParams = {
 8000cb2:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <main+0x110>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	607b      	str	r3, [r7, #4]
      .dir_RoadType = 1,
      .status = 0,
      .roadType = 0
  };

  initMutex();
 8000cb8:	f7ff fd1c 	bl	80006f4 <initMutex>

  __HAL_I2C_ENABLE(&hi2c1);
 8000cbc:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <main+0x114>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	4b35      	ldr	r3, [pc, #212]	@ (8000d98 <main+0x114>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
  initOrientation();
 8000ccc:	f7ff fc5c 	bl	8000588 <initOrientation>

  __HAL_SPI_ENABLE(&hspi1);
 8000cd0:	4b32      	ldr	r3, [pc, #200]	@ (8000d9c <main+0x118>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <main+0x118>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cde:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	482e      	ldr	r0, [pc, #184]	@ (8000da0 <main+0x11c>)
 8000ce6:	f001 f8f9 	bl	8001edc <HAL_GPIO_WritePin>
  initGyro();
 8000cea:	f7ff fceb 	bl	80006c4 <initGyro>

  // zazenemo casovnik
  HAL_TIM_Base_Start(&htim4);
 8000cee:	482d      	ldr	r0, [pc, #180]	@ (8000da4 <main+0x120>)
 8000cf0:	f005 fc4e 	bl	8006590 <HAL_TIM_Base_Start>

  // zazenemo PWM - neinvertirani izhodi
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	482b      	ldr	r0, [pc, #172]	@ (8000da4 <main+0x120>)
 8000cf8:	f005 fd60 	bl	80067bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4829      	ldr	r0, [pc, #164]	@ (8000da4 <main+0x120>)
 8000d00:	f005 fd5c 	bl	80067bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000d04:	2108      	movs	r1, #8
 8000d06:	4827      	ldr	r0, [pc, #156]	@ (8000da4 <main+0x120>)
 8000d08:	f005 fd58 	bl	80067bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000d0c:	210c      	movs	r1, #12
 8000d0e:	4825      	ldr	r0, [pc, #148]	@ (8000da4 <main+0x120>)
 8000d10:	f005 fd54 	bl	80067bc <HAL_TIM_PWM_Start>

  xTaskCreate(
 8000d14:	2300      	movs	r3, #0
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2280      	movs	r2, #128	@ 0x80
 8000d20:	4921      	ldr	r1, [pc, #132]	@ (8000da8 <main+0x124>)
 8000d22:	4822      	ldr	r0, [pc, #136]	@ (8000dac <main+0x128>)
 8000d24:	f008 fd94 	bl	8009850 <xTaskCreate>
		"getGyroData",          /* Text name for the task. */
		128,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		NULL);      /* Used to pass out the created task's handle. */
  xTaskCreate(getAccelData, "getAccelData", 128, NULL, 1, NULL);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2300      	movs	r3, #0
 8000d32:	2280      	movs	r2, #128	@ 0x80
 8000d34:	491e      	ldr	r1, [pc, #120]	@ (8000db0 <main+0x12c>)
 8000d36:	481f      	ldr	r0, [pc, #124]	@ (8000db4 <main+0x130>)
 8000d38:	f008 fd8a 	bl	8009850 <xTaskCreate>
  xTaskCreate(sendData, "sendData", 128, NULL, 1, NULL);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	2280      	movs	r2, #128	@ 0x80
 8000d48:	491b      	ldr	r1, [pc, #108]	@ (8000db8 <main+0x134>)
 8000d4a:	481c      	ldr	r0, [pc, #112]	@ (8000dbc <main+0x138>)
 8000d4c:	f008 fd80 	bl	8009850 <xTaskCreate>
  xTaskCreate(GPIO_control, "GPIO_control", 128, (void *)&gpioParams, 2, NULL);
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	9201      	str	r2, [sp, #4]
 8000d56:	2202      	movs	r2, #2
 8000d58:	9200      	str	r2, [sp, #0]
 8000d5a:	2280      	movs	r2, #128	@ 0x80
 8000d5c:	4918      	ldr	r1, [pc, #96]	@ (8000dc0 <main+0x13c>)
 8000d5e:	4819      	ldr	r0, [pc, #100]	@ (8000dc4 <main+0x140>)
 8000d60:	f008 fd76 	bl	8009850 <xTaskCreate>
  xTaskCreate(GPIO_control, "debug_tx", 128, NULL, 2, &txHandle);
 8000d64:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <main+0x144>)
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	2302      	movs	r3, #2
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2280      	movs	r2, #128	@ 0x80
 8000d70:	4916      	ldr	r1, [pc, #88]	@ (8000dcc <main+0x148>)
 8000d72:	4814      	ldr	r0, [pc, #80]	@ (8000dc4 <main+0x140>)
 8000d74:	f008 fd6c 	bl	8009850 <xTaskCreate>
  xTaskCreate(buttonInterupt, "buttonInterupt", 128, NULL, 1, NULL);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	2280      	movs	r2, #128	@ 0x80
 8000d84:	4912      	ldr	r1, [pc, #72]	@ (8000dd0 <main+0x14c>)
 8000d86:	4813      	ldr	r0, [pc, #76]	@ (8000dd4 <main+0x150>)
 8000d88:	f008 fd62 	bl	8009850 <xTaskCreate>

  vTaskStartScheduler();
 8000d8c:	f008 ff02 	bl	8009b94 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <main+0x10c>
 8000d94:	0800e6dc 	.word	0x0800e6dc
 8000d98:	20000120 	.word	0x20000120
 8000d9c:	20000204 	.word	0x20000204
 8000da0:	40021000 	.word	0x40021000
 8000da4:	2000025c 	.word	0x2000025c
 8000da8:	0800e688 	.word	0x0800e688
 8000dac:	08000719 	.word	0x08000719
 8000db0:	0800e694 	.word	0x0800e694
 8000db4:	080007ed 	.word	0x080007ed
 8000db8:	0800e6a4 	.word	0x0800e6a4
 8000dbc:	080008c1 	.word	0x080008c1
 8000dc0:	0800e6b0 	.word	0x0800e6b0
 8000dc4:	080009e9 	.word	0x080009e9
 8000dc8:	200002bc 	.word	0x200002bc
 8000dcc:	0800e6c0 	.word	0x0800e6c0
 8000dd0:	0800e6cc 	.word	0x0800e6cc
 8000dd4:	08000c31 	.word	0x08000c31

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	@ 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	@ 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00d fc08 	bl	800e5fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <SystemClock_Config+0xc8>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	4a26      	ldr	r2, [pc, #152]	@ (8000ea0 <SystemClock_Config+0xc8>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <SystemClock_Config+0xc8>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <SystemClock_Config+0xcc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a20      	ldr	r2, [pc, #128]	@ (8000ea4 <SystemClock_Config+0xcc>)
 8000e22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <SystemClock_Config+0xcc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e4c:	23c0      	movs	r3, #192	@ 0xc0
 8000e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e54:	2308      	movs	r3, #8
 8000e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 ff6d 	bl	8004d3c <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e68:	f000 fa84 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2103      	movs	r1, #3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 f9cf 	bl	800522c <HAL_RCC_ClockConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e94:	f000 fa6e 	bl	8001374 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3750      	adds	r7, #80	@ 0x50
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000ec2:	23c8      	movs	r3, #200	@ 0xc8
 8000ec4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 fbe9 	bl	80056a8 <HAL_RCCEx_PeriphCLKConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000edc:	f000 fa4a 	bl	8001374 <Error_Handler>
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000eee:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <MX_I2C1_Init+0x58>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000ef4:	4a13      	ldr	r2, [pc, #76]	@ (8000f44 <MX_I2C1_Init+0x5c>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000efe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000f08:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000f28:	f000 fff2 	bl	8001f10 <HAL_I2C_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000f32:	f000 fa1f 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000120 	.word	0x20000120
 8000f40:	40005400 	.word	0x40005400
 8000f44:	00061a80 	.word	0x00061a80

08000f48 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f4e:	4a13      	ldr	r2, [pc, #76]	@ (8000f9c <MX_I2S2_Init+0x54>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f58:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <MX_I2S2_Init+0x58>)
 8000f70:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <MX_I2S2_Init+0x50>)
 8000f86:	f001 ffe7 	bl	8002f58 <HAL_I2S_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000f90:	f000 f9f0 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000174 	.word	0x20000174
 8000f9c:	40003800 	.word	0x40003800
 8000fa0:	00017700 	.word	0x00017700

08000fa4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000faa:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <MX_I2S3_Init+0x58>)
 8000fac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fae:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <MX_I2S3_Init+0x5c>)
 8000fce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_I2S3_Init+0x54>)
 8000fe4:	f001 ffb8 	bl	8002f58 <HAL_I2S_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000fee:	f000 f9c1 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001bc 	.word	0x200001bc
 8000ffc:	40003c00 	.word	0x40003c00
 8001000:	00017700 	.word	0x00017700

08001004 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001008:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <MX_SPI1_Init+0x64>)
 800100a:	4a18      	ldr	r2, [pc, #96]	@ (800106c <MX_SPI1_Init+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001024:	2202      	movs	r2, #2
 8001026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_SPI1_Init+0x64>)
 800102a:	2201      	movs	r2, #1
 800102c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001038:	2218      	movs	r2, #24
 800103a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001050:	220a      	movs	r2, #10
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001056:	f004 fc79 	bl	800594c <HAL_SPI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001060:	f000 f988 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000204 	.word	0x20000204
 800106c:	40013000 	.word	0x40013000

08001070 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010a2:	4a3e      	ldr	r2, [pc, #248]	@ (800119c <MX_TIM4_Init+0x12c>)
 80010a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010a8:	2253      	movs	r2, #83	@ 0x53
 80010aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b37      	ldr	r3, [pc, #220]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010c6:	4834      	ldr	r0, [pc, #208]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010c8:	f005 fa12 	bl	80064f0 <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010d2:	f000 f94f 	bl	8001374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	482d      	ldr	r0, [pc, #180]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010e4:	f005 fdcc 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80010ee:	f000 f941 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010f2:	4829      	ldr	r0, [pc, #164]	@ (8001198 <MX_TIM4_Init+0x128>)
 80010f4:	f005 fb08 	bl	8006708 <HAL_TIM_PWM_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010fe:	f000 f939 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	4619      	mov	r1, r3
 8001110:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_TIM4_Init+0x128>)
 8001112:	f006 f97d 	bl	8007410 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800111c:	f000 f92a 	bl	8001374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	@ 0x60
 8001122:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4818      	ldr	r0, [pc, #96]	@ (8001198 <MX_TIM4_Init+0x128>)
 8001138:	f005 fce0 	bl	8006afc <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001142:	f000 f917 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2204      	movs	r2, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4812      	ldr	r0, [pc, #72]	@ (8001198 <MX_TIM4_Init+0x128>)
 800114e:	f005 fcd5 	bl	8006afc <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001158:	f000 f90c 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2208      	movs	r2, #8
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_TIM4_Init+0x128>)
 8001164:	f005 fcca 	bl	8006afc <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800116e:	f000 f901 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	220c      	movs	r2, #12
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <MX_TIM4_Init+0x128>)
 800117a:	f005 fcbf 	bl	8006afc <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001184:	f000 f8f6 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <MX_TIM4_Init+0x128>)
 800118a:	f000 faa1 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	@ 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000025c 	.word	0x2000025c
 800119c:	40000800 	.word	0x40000800

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	@ 0x30
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b60      	ldr	r3, [pc, #384]	@ (800133c <MX_GPIO_Init+0x19c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a5f      	ldr	r2, [pc, #380]	@ (800133c <MX_GPIO_Init+0x19c>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b5d      	ldr	r3, [pc, #372]	@ (800133c <MX_GPIO_Init+0x19c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b59      	ldr	r3, [pc, #356]	@ (800133c <MX_GPIO_Init+0x19c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a58      	ldr	r2, [pc, #352]	@ (800133c <MX_GPIO_Init+0x19c>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b56      	ldr	r3, [pc, #344]	@ (800133c <MX_GPIO_Init+0x19c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b52      	ldr	r3, [pc, #328]	@ (800133c <MX_GPIO_Init+0x19c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a51      	ldr	r2, [pc, #324]	@ (800133c <MX_GPIO_Init+0x19c>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b4f      	ldr	r3, [pc, #316]	@ (800133c <MX_GPIO_Init+0x19c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b4b      	ldr	r3, [pc, #300]	@ (800133c <MX_GPIO_Init+0x19c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a4a      	ldr	r2, [pc, #296]	@ (800133c <MX_GPIO_Init+0x19c>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b48      	ldr	r3, [pc, #288]	@ (800133c <MX_GPIO_Init+0x19c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b44      	ldr	r3, [pc, #272]	@ (800133c <MX_GPIO_Init+0x19c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a43      	ldr	r2, [pc, #268]	@ (800133c <MX_GPIO_Init+0x19c>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b41      	ldr	r3, [pc, #260]	@ (800133c <MX_GPIO_Init+0x19c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <MX_GPIO_Init+0x19c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a3c      	ldr	r2, [pc, #240]	@ (800133c <MX_GPIO_Init+0x19c>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b3a      	ldr	r3, [pc, #232]	@ (800133c <MX_GPIO_Init+0x19c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2108      	movs	r1, #8
 8001262:	4837      	ldr	r0, [pc, #220]	@ (8001340 <MX_GPIO_Init+0x1a0>)
 8001264:	f000 fe3a 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	2101      	movs	r1, #1
 800126c:	4835      	ldr	r0, [pc, #212]	@ (8001344 <MX_GPIO_Init+0x1a4>)
 800126e:	f000 fe35 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2110      	movs	r1, #16
 8001276:	4834      	ldr	r0, [pc, #208]	@ (8001348 <MX_GPIO_Init+0x1a8>)
 8001278:	f000 fe30 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800127c:	2304      	movs	r3, #4
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	482c      	ldr	r0, [pc, #176]	@ (8001340 <MX_GPIO_Init+0x1a0>)
 8001290:	f000 fc88 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001294:	2308      	movs	r3, #8
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2302      	movs	r3, #2
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4825      	ldr	r0, [pc, #148]	@ (8001340 <MX_GPIO_Init+0x1a0>)
 80012ac:	f000 fc7a 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80012b0:	2332      	movs	r3, #50	@ 0x32
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	481e      	ldr	r0, [pc, #120]	@ (8001340 <MX_GPIO_Init+0x1a0>)
 80012c6:	f000 fc6d 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4818      	ldr	r0, [pc, #96]	@ (8001344 <MX_GPIO_Init+0x1a4>)
 80012e2:	f000 fc5f 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4814      	ldr	r0, [pc, #80]	@ (800134c <MX_GPIO_Init+0x1ac>)
 80012fc:	f000 fc52 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001300:	2310      	movs	r3, #16
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_GPIO_Init+0x1a8>)
 8001318:	f000 fc44 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800131c:	2320      	movs	r3, #32
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	@ (8001348 <MX_GPIO_Init+0x1a8>)
 8001330:	f000 fc38 	bl	8001ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001334:	bf00      	nop
 8001336:	3730      	adds	r7, #48	@ 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40021000 	.word	0x40021000
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001362:	f000 faf9 	bl	8001958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40000c00 	.word	0x40000c00

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <Error_Handler+0x8>

08001380 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	4a0f      	ldr	r2, [pc, #60]	@ (80013cc <HAL_MspInit+0x4c>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001394:	6453      	str	r3, [r2, #68]	@ 0x44
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <HAL_MspInit+0x4c>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <HAL_I2C_MspInit+0x84>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12c      	bne.n	800144c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_I2C_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_I2C_MspInit+0x88>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_I2C_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800140e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001420:	2304      	movs	r3, #4
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	@ (800145c <HAL_I2C_MspInit+0x8c>)
 800142c:	f000 fbba 	bl	8001ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_I2C_MspInit+0x88>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_I2C_MspInit+0x88>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_I2C_MspInit+0x88>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	@ 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	@ 0x38
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a59      	ldr	r2, [pc, #356]	@ (80015e4 <HAL_I2S_MspInit+0x184>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d15b      	bne.n	800153a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
 8001486:	4b58      	ldr	r3, [pc, #352]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a57      	ldr	r2, [pc, #348]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b55      	ldr	r3, [pc, #340]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	4b51      	ldr	r3, [pc, #324]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a50      	ldr	r2, [pc, #320]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b4e      	ldr	r3, [pc, #312]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a49      	ldr	r2, [pc, #292]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d6:	2304      	movs	r3, #4
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80014e6:	2306      	movs	r3, #6
 80014e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	483e      	ldr	r0, [pc, #248]	@ (80015ec <HAL_I2S_MspInit+0x18c>)
 80014f2:	f000 fb57 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014f6:	2308      	movs	r3, #8
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001506:	2305      	movs	r3, #5
 8001508:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4836      	ldr	r0, [pc, #216]	@ (80015ec <HAL_I2S_MspInit+0x18c>)
 8001512:	f000 fb47 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001516:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001528:	2305      	movs	r3, #5
 800152a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	482f      	ldr	r0, [pc, #188]	@ (80015f0 <HAL_I2S_MspInit+0x190>)
 8001534:	f000 fb36 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001538:	e04f      	b.n	80015da <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <HAL_I2S_MspInit+0x194>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d14a      	bne.n	80015da <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	4a26      	ldr	r2, [pc, #152]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 800154e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001552:	6413      	str	r3, [r2, #64]	@ 0x40
 8001554:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	4a1f      	ldr	r2, [pc, #124]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6313      	str	r3, [r2, #48]	@ 0x30
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_I2S_MspInit+0x188>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001598:	2310      	movs	r3, #16
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a8:	2306      	movs	r3, #6
 80015aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <HAL_I2S_MspInit+0x198>)
 80015b4:	f000 faf6 	bl	8001ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015b8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ca:	2306      	movs	r3, #6
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	@ (80015ec <HAL_I2S_MspInit+0x18c>)
 80015d6:	f000 fae5 	bl	8001ba4 <HAL_GPIO_Init>
}
 80015da:	bf00      	nop
 80015dc:	3738      	adds	r7, #56	@ 0x38
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40003800 	.word	0x40003800
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40003c00 	.word	0x40003c00
 80015f8:	40020000 	.word	0x40020000

080015fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_SPI_MspInit+0x84>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12b      	bne.n	8001676 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_SPI_MspInit+0x88>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <HAL_SPI_MspInit+0x88>)
 8001628:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800162c:	6453      	str	r3, [r2, #68]	@ 0x44
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_SPI_MspInit+0x88>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_SPI_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a10      	ldr	r2, [pc, #64]	@ (8001684 <HAL_SPI_MspInit+0x88>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_SPI_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001656:	23e0      	movs	r3, #224	@ 0xe0
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001666:	2305      	movs	r3, #5
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <HAL_SPI_MspInit+0x8c>)
 8001672:	f000 fa97 	bl	8001ba4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	@ 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40013000 	.word	0x40013000
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <HAL_TIM_Base_MspInit+0x3c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10d      	bne.n	80016ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_TIM_Base_MspInit+0x40>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a09      	ldr	r2, [pc, #36]	@ (80016cc <HAL_TIM_Base_MspInit+0x40>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <HAL_TIM_Base_MspInit+0x40>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40000800 	.word	0x40000800
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <HAL_TIM_MspPostInit+0x68>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d11e      	bne.n	8001730 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <HAL_TIM_MspPostInit+0x6c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a10      	ldr	r2, [pc, #64]	@ (800173c <HAL_TIM_MspPostInit+0x6c>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <HAL_TIM_MspPostInit+0x6c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800170e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001712:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001720:	2302      	movs	r3, #2
 8001722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <HAL_TIM_MspPostInit+0x70>)
 800172c:	f000 fa3a 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40000800 	.word	0x40000800
 800173c:	40023800 	.word	0x40023800
 8001740:	40020c00 	.word	0x40020c00

08001744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	@ 0x38
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <HAL_InitTick+0xe4>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	4a32      	ldr	r2, [pc, #200]	@ (8001828 <HAL_InitTick+0xe4>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6413      	str	r3, [r2, #64]	@ 0x40
 8001764:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <HAL_InitTick+0xe4>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001770:	f107 0210 	add.w	r2, r7, #16
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f003 ff62 	bl	8005644 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800178a:	f003 ff47 	bl	800561c <HAL_RCC_GetPCLK1Freq>
 800178e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001790:	e004      	b.n	800179c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001792:	f003 ff43 	bl	800561c <HAL_RCC_GetPCLK1Freq>
 8001796:	4603      	mov	r3, r0
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800179c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800179e:	4a23      	ldr	r2, [pc, #140]	@ (800182c <HAL_InitTick+0xe8>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	0c9b      	lsrs	r3, r3, #18
 80017a6:	3b01      	subs	r3, #1
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <HAL_InitTick+0xec>)
 80017ac:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <HAL_InitTick+0xf0>)
 80017ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <HAL_InitTick+0xec>)
 80017b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017b6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80017b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <HAL_InitTick+0xec>)
 80017ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017bc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_InitTick+0xec>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <HAL_InitTick+0xec>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_InitTick+0xec>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80017d0:	4817      	ldr	r0, [pc, #92]	@ (8001830 <HAL_InitTick+0xec>)
 80017d2:	f004 fe8d 	bl	80064f0 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11b      	bne.n	800181c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80017e4:	4812      	ldr	r0, [pc, #72]	@ (8001830 <HAL_InitTick+0xec>)
 80017e6:	f004 ff2d 	bl	8006644 <HAL_TIM_Base_Start_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017f8:	2032      	movs	r0, #50	@ 0x32
 80017fa:	f000 f9c5 	bl	8001b88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d808      	bhi.n	8001816 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	2032      	movs	r0, #50	@ 0x32
 800180a:	f000 f9a1 	bl	8001b50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_InitTick+0xf4>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e002      	b.n	800181c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800181c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001820:	4618      	mov	r0, r3
 8001822:	3738      	adds	r7, #56	@ 0x38
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	431bde83 	.word	0x431bde83
 8001830:	200002c0 	.word	0x200002c0
 8001834:	40000c00 	.word	0x40000c00
 8001838:	20000004 	.word	0x20000004

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <NMI_Handler+0x4>

08001844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <MemManage_Handler+0x4>

08001854 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <UsageFault_Handler+0x4>

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <TIM5_IRQHandler+0x10>)
 800187a:	f005 f84f 	bl	800691c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002c0 	.word	0x200002c0

08001888 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <OTG_FS_IRQHandler+0x10>)
 800188e:	f002 f947 	bl	8003b20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200145a8 	.word	0x200145a8

0800189c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <SystemInit+0x20>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <SystemInit+0x20>)
 80018a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c4:	f7ff ffea 	bl	800189c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c8:	480c      	ldr	r0, [pc, #48]	@ (80018fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ca:	490d      	ldr	r1, [pc, #52]	@ (8001900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e0:	4c0a      	ldr	r4, [pc, #40]	@ (800190c <LoopFillZerobss+0x22>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ee:	f00c fe8d 	bl	800e60c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f2:	f7ff f9c7 	bl	8000c84 <main>
  bx  lr    
 80018f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001904:	0800e778 	.word	0x0800e778
  ldr r2, =_sbss
 8001908:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800190c:	20014cac 	.word	0x20014cac

08001910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC_IRQHandler>
	...

08001914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <HAL_Init+0x40>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <HAL_Init+0x40>)
 800192a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <HAL_Init+0x40>)
 8001936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 f8fc 	bl	8001b3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001942:	200f      	movs	r0, #15
 8001944:	f7ff fefe 	bl	8001744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fd1a 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	@ (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	20000308 	.word	0x20000308

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000308 	.word	0x20000308

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff ffee 	bl	8001980 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffde 	bl	8001980 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	@ (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	@ (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	@ (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff4c 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b62:	f7ff ff61 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	6978      	ldr	r0, [r7, #20]
 8001b6e:	f7ff ffb1 	bl	8001ad4 <NVIC_EncodePriority>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff80 	bl	8001a80 <__NVIC_SetPriority>
}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff54 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e159      	b.n	8001e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 8148 	bne.w	8001e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d005      	beq.n	8001bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d130      	bne.n	8001c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 0201 	and.w	r2, r3, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d017      	beq.n	8001c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d123      	bne.n	8001ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a2 	beq.w	8001e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b57      	ldr	r3, [pc, #348]	@ (8001e8c <HAL_GPIO_Init+0x2e8>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	4a56      	ldr	r2, [pc, #344]	@ (8001e8c <HAL_GPIO_Init+0x2e8>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3a:	4b54      	ldr	r3, [pc, #336]	@ (8001e8c <HAL_GPIO_Init+0x2e8>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a52      	ldr	r2, [pc, #328]	@ (8001e90 <HAL_GPIO_Init+0x2ec>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a49      	ldr	r2, [pc, #292]	@ (8001e94 <HAL_GPIO_Init+0x2f0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x202>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a48      	ldr	r2, [pc, #288]	@ (8001e98 <HAL_GPIO_Init+0x2f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x1fe>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a47      	ldr	r2, [pc, #284]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x1fa>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a46      	ldr	r2, [pc, #280]	@ (8001ea0 <HAL_GPIO_Init+0x2fc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x1f6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a45      	ldr	r2, [pc, #276]	@ (8001ea4 <HAL_GPIO_Init+0x300>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x1f2>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e008      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e004      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001da6:	2300      	movs	r3, #0
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	f002 0203 	and.w	r2, r2, #3
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	4093      	lsls	r3, r2
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db8:	4935      	ldr	r1, [pc, #212]	@ (8001e90 <HAL_GPIO_Init+0x2ec>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dea:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e14:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e68:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3301      	adds	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	f67f aea2 	bls.w	8001bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e001      	b.n	8001ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e12b      	b.n	800217a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fa4a 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	@ 0x24
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f74:	f003 fb52 	bl	800561c <HAL_RCC_GetPCLK1Freq>
 8001f78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a81      	ldr	r2, [pc, #516]	@ (8002184 <HAL_I2C_Init+0x274>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d807      	bhi.n	8001f94 <HAL_I2C_Init+0x84>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a80      	ldr	r2, [pc, #512]	@ (8002188 <HAL_I2C_Init+0x278>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e006      	b.n	8001fa2 <HAL_I2C_Init+0x92>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a7d      	ldr	r2, [pc, #500]	@ (800218c <HAL_I2C_Init+0x27c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0e7      	b.n	800217a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a78      	ldr	r2, [pc, #480]	@ (8002190 <HAL_I2C_Init+0x280>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0c9b      	lsrs	r3, r3, #18
 8001fb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <HAL_I2C_Init+0x274>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_I2C_Init+0xd4>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	e009      	b.n	8001ff8 <HAL_I2C_Init+0xe8>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	4a69      	ldr	r2, [pc, #420]	@ (8002194 <HAL_I2C_Init+0x284>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800200a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	495c      	ldr	r1, [pc, #368]	@ (8002184 <HAL_I2C_Init+0x274>)
 8002014:	428b      	cmp	r3, r1
 8002016:	d819      	bhi.n	800204c <HAL_I2C_Init+0x13c>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e59      	subs	r1, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fbb1 f3f3 	udiv	r3, r1, r3
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800202c:	400b      	ands	r3, r1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_I2C_Init+0x138>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e59      	subs	r1, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	e051      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 8002048:	2304      	movs	r3, #4
 800204a:	e04f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d111      	bne.n	8002078 <HAL_I2C_Init+0x168>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e012      	b.n	800209e <HAL_I2C_Init+0x18e>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Init+0x196>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e022      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <HAL_I2C_Init+0x1bc>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e58      	subs	r0, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ca:	e00f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	6809      	ldr	r1, [r1, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800211a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6911      	ldr	r1, [r2, #16]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68d2      	ldr	r2, [r2, #12]
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	430b      	orrs	r3, r1
 800212e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	000186a0 	.word	0x000186a0
 8002188:	001e847f 	.word	0x001e847f
 800218c:	003d08ff 	.word	0x003d08ff
 8002190:	431bde83 	.word	0x431bde83
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	817b      	strh	r3, [r7, #10]
 80021aa:	460b      	mov	r3, r1
 80021ac:	813b      	strh	r3, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b2:	f7ff fbe5 	bl	8001980 <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 80d9 	bne.w	8002378 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2319      	movs	r3, #25
 80021cc:	2201      	movs	r2, #1
 80021ce:	496d      	ldr	r1, [pc, #436]	@ (8002384 <HAL_I2C_Mem_Write+0x1ec>)
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fc8b 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	e0cc      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Mem_Write+0x56>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0c5      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d007      	beq.n	8002214 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2221      	movs	r2, #33	@ 0x21
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a4d      	ldr	r2, [pc, #308]	@ (8002388 <HAL_I2C_Mem_Write+0x1f0>)
 8002254:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002256:	88f8      	ldrh	r0, [r7, #6]
 8002258:	893a      	ldrh	r2, [r7, #8]
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4603      	mov	r3, r0
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fac2 	bl	80027f0 <I2C_RequestMemoryWrite>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d052      	beq.n	8002318 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e081      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fd50 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d107      	bne.n	800229e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06b      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11b      	bne.n	8002318 <HAL_I2C_Mem_Write+0x180>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1aa      	bne.n	8002276 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fd43 	bl	8002db0 <I2C_WaitOnBTFFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b04      	cmp	r3, #4
 8002336:	d107      	bne.n	8002348 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002346:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e016      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	00100002 	.word	0x00100002
 8002388:	ffff0000 	.word	0xffff0000

0800238c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	@ 0x30
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a6:	f7ff faeb 	bl	8001980 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	f040 8214 	bne.w	80027e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2319      	movs	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	497b      	ldr	r1, [pc, #492]	@ (80025b0 <HAL_I2C_Mem_Read+0x224>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fb91 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	e207      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_I2C_Mem_Read+0x56>
 80023de:	2302      	movs	r3, #2
 80023e0:	e200      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d007      	beq.n	8002408 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2222      	movs	r2, #34	@ 0x22
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2240      	movs	r2, #64	@ 0x40
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a5b      	ldr	r2, [pc, #364]	@ (80025b4 <HAL_I2C_Mem_Read+0x228>)
 8002448:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800244a:	88f8      	ldrh	r0, [r7, #6]
 800244c:	893a      	ldrh	r2, [r7, #8]
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa5e 	bl	800291c <I2C_RequestMemoryRead>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1bc      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d113      	bne.n	800249a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e190      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d11b      	bne.n	80024da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e170      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d11b      	bne.n	800251a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	e150      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002530:	e144      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 80f1 	bhi.w	800271e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	2b01      	cmp	r3, #1
 8002542:	d123      	bne.n	800258c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002546:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fc79 	bl	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e145      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800258a:	e117      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	2b02      	cmp	r3, #2
 8002592:	d14e      	bne.n	8002632 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259a:	2200      	movs	r2, #0
 800259c:	4906      	ldr	r1, [pc, #24]	@ (80025b8 <HAL_I2C_Mem_Read+0x22c>)
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 faa4 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e11a      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
 80025ae:	bf00      	nop
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000
 80025b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002630:	e0c4      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002638:	2200      	movs	r2, #0
 800263a:	496c      	ldr	r1, [pc, #432]	@ (80027ec <HAL_I2C_Mem_Read+0x460>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fa55 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0cb      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002694:	2200      	movs	r2, #0
 8002696:	4955      	ldr	r1, [pc, #340]	@ (80027ec <HAL_I2C_Mem_Read+0x460>)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fa27 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e09d      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800271c:	e04e      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002720:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fb8c 	bl	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e058      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d124      	bne.n	80027bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	2b03      	cmp	r3, #3
 8002778:	d107      	bne.n	800278a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002788:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f aeb6 	bne.w	8002532 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3728      	adds	r7, #40	@ 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	00010004 	.word	0x00010004

080027f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002818:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	2200      	movs	r2, #0
 8002822:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f960 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002840:	d103      	bne.n	800284a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e05f      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800285c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	6a3a      	ldr	r2, [r7, #32]
 8002862:	492d      	ldr	r1, [pc, #180]	@ (8002918 <I2C_RequestMemoryWrite+0x128>)
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f9bb 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e04c      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa46 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e02b      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	e021      	b.n	800290c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fa20 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d107      	bne.n	80028fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e005      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002902:	893b      	ldrh	r3, [r7, #8]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	00010002 	.word	0x00010002

0800291c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	460b      	mov	r3, r1
 8002930:	813b      	strh	r3, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002944:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2200      	movs	r2, #0
 800295e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f8c2 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800297c:	d103      	bne.n	8002986 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e0aa      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002998:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	4952      	ldr	r1, [pc, #328]	@ (8002ae8 <I2C_RequestMemoryRead+0x1cc>)
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f91d 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e097      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9a8 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d107      	bne.n	80029ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e076      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f8:	893b      	ldrh	r3, [r7, #8]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	e021      	b.n	8002a48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a04:	893b      	ldrh	r3, [r7, #8]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f982 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d107      	bne.n	8002a3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e050      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4a:	6a39      	ldr	r1, [r7, #32]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f967 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d107      	bne.n	8002a70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e035      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f82b 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aaa:	d103      	bne.n	8002ab4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e013      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ab8:	897b      	ldrh	r3, [r7, #10]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	6a3a      	ldr	r2, [r7, #32]
 8002acc:	4906      	ldr	r1, [pc, #24]	@ (8002ae8 <I2C_RequestMemoryRead+0x1cc>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f886 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e048      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d044      	beq.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe ff3b 	bl	8001980 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d139      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	e00c      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e023      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10d      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	e00c      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d093      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	e071      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfe:	d123      	bne.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e067      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d041      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c50:	f7fe fe96 	bl	8001980 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d136      	bne.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10c      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e00b      	b.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e021      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10c      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af6d 	bne.w	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	e034      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8e3 	bl	8002efa <I2C_IsAcknowledgeFailed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d028      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe fe1b 	bl	8001980 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b80      	cmp	r3, #128	@ 0x80
 8002d68:	d016      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da2:	2b80      	cmp	r3, #128	@ 0x80
 8002da4:	d1c3      	bne.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f89b 	bl	8002efa <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d028      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe fdd3 	bl	8001980 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11d      	bne.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d016      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1c3      	bne.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e4c:	e049      	b.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d119      	bne.n	8002e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0210 	mvn.w	r2, #16
 8002e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e030      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e90:	f7fe fd76 	bl	8001980 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d302      	bcc.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11d      	bne.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb0:	2b40      	cmp	r3, #64	@ 0x40
 8002eb2:	d016      	beq.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e007      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d1ae      	bne.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f10:	d11b      	bne.n	8002f4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e128      	b.n	80031bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a90      	ldr	r2, [pc, #576]	@ (80031c4 <HAL_I2S_Init+0x26c>)
 8002f82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fe fa6b 	bl	8001460 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002fa0:	f023 030f 	bic.w	r3, r3, #15
 8002fa4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2202      	movs	r2, #2
 8002fac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d060      	beq.n	8003078 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e001      	b.n	8002fc8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d802      	bhi.n	8002fd6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f002 fc56 	bl	8005888 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fdc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fe6:	d125      	bne.n	8003034 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	461a      	mov	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	3305      	adds	r3, #5
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e01f      	b.n	8003052 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	3305      	adds	r3, #5
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	e00e      	b.n	8003052 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fbb2 f2f3 	udiv	r2, r2, r3
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	3305      	adds	r3, #5
 8003050:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4a5c      	ldr	r2, [pc, #368]	@ (80031c8 <HAL_I2S_Init+0x270>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	08db      	lsrs	r3, r3, #3
 800305c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	e003      	b.n	8003080 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003078:	2302      	movs	r3, #2
 800307a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d902      	bls.n	800308c <HAL_I2S_Init+0x134>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2bff      	cmp	r3, #255	@ 0xff
 800308a:	d907      	bls.n	800309c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e08f      	b.n	80031bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	ea42 0103 	orr.w	r1, r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80030ba:	f023 030f 	bic.w	r3, r3, #15
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6851      	ldr	r1, [r2, #4]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6892      	ldr	r2, [r2, #8]
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68d2      	ldr	r2, [r2, #12]
 80030cc:	4311      	orrs	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6992      	ldr	r2, [r2, #24]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d161      	bne.n	80031ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a38      	ldr	r2, [pc, #224]	@ (80031cc <HAL_I2S_Init+0x274>)
 80030ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a37      	ldr	r2, [pc, #220]	@ (80031d0 <HAL_I2S_Init+0x278>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_I2S_Init+0x1a4>
 80030f8:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <HAL_I2S_Init+0x27c>)
 80030fa:	e001      	b.n	8003100 <HAL_I2S_Init+0x1a8>
 80030fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	4932      	ldr	r1, [pc, #200]	@ (80031d0 <HAL_I2S_Init+0x278>)
 8003108:	428a      	cmp	r2, r1
 800310a:	d101      	bne.n	8003110 <HAL_I2S_Init+0x1b8>
 800310c:	4a31      	ldr	r2, [pc, #196]	@ (80031d4 <HAL_I2S_Init+0x27c>)
 800310e:	e001      	b.n	8003114 <HAL_I2S_Init+0x1bc>
 8003110:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003114:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003118:	f023 030f 	bic.w	r3, r3, #15
 800311c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2b      	ldr	r2, [pc, #172]	@ (80031d0 <HAL_I2S_Init+0x278>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_I2S_Init+0x1d4>
 8003128:	4b2a      	ldr	r3, [pc, #168]	@ (80031d4 <HAL_I2S_Init+0x27c>)
 800312a:	e001      	b.n	8003130 <HAL_I2S_Init+0x1d8>
 800312c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003130:	2202      	movs	r2, #2
 8003132:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a25      	ldr	r2, [pc, #148]	@ (80031d0 <HAL_I2S_Init+0x278>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_I2S_Init+0x1ea>
 800313e:	4b25      	ldr	r3, [pc, #148]	@ (80031d4 <HAL_I2S_Init+0x27c>)
 8003140:	e001      	b.n	8003146 <HAL_I2S_Init+0x1ee>
 8003142:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003152:	d003      	beq.n	800315c <HAL_I2S_Init+0x204>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d103      	bne.n	8003164 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800315c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e001      	b.n	8003168 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003172:	4313      	orrs	r3, r2
 8003174:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800317c:	4313      	orrs	r3, r2
 800317e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003186:	4313      	orrs	r3, r2
 8003188:	b29a      	uxth	r2, r3
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	4313      	orrs	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003194:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a0d      	ldr	r2, [pc, #52]	@ (80031d0 <HAL_I2S_Init+0x278>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d101      	bne.n	80031a4 <HAL_I2S_Init+0x24c>
 80031a0:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <HAL_I2S_Init+0x27c>)
 80031a2:	e001      	b.n	80031a8 <HAL_I2S_Init+0x250>
 80031a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031a8:	897a      	ldrh	r2, [r7, #10]
 80031aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	080032cf 	.word	0x080032cf
 80031c8:	cccccccd 	.word	0xcccccccd
 80031cc:	080033e5 	.word	0x080033e5
 80031d0:	40003800 	.word	0x40003800
 80031d4:	40003400 	.word	0x40003400

080031d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	881a      	ldrh	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	1c9a      	adds	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10e      	bne.n	8003268 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003258:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffb8 	bl	80031d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	b292      	uxth	r2, r2
 8003284:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328a:	1c9a      	adds	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10e      	bne.n	80032c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff93 	bl	80031ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d13a      	bne.n	8003360 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d109      	bne.n	8003308 <I2S_IRQHandler+0x3a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fe:	2b40      	cmp	r3, #64	@ 0x40
 8003300:	d102      	bne.n	8003308 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ffb4 	bl	8003270 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	d126      	bne.n	8003360 <I2S_IRQHandler+0x92>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b20      	cmp	r3, #32
 800331e:	d11f      	bne.n	8003360 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800332e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	f043 0202 	orr.w	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff50 	bl	8003200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b03      	cmp	r3, #3
 800336a:	d136      	bne.n	80033da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d109      	bne.n	800338a <I2S_IRQHandler+0xbc>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003380:	2b80      	cmp	r3, #128	@ 0x80
 8003382:	d102      	bne.n	800338a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff45 	bl	8003214 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b08      	cmp	r3, #8
 8003392:	d122      	bne.n	80033da <I2S_IRQHandler+0x10c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d11b      	bne.n	80033da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033cc:	f043 0204 	orr.w	r2, r3, #4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff13 	bl	8003200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a92      	ldr	r2, [pc, #584]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033fe:	4b92      	ldr	r3, [pc, #584]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003400:	e001      	b.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003402:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a8b      	ldr	r2, [pc, #556]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800341c:	4b8a      	ldr	r3, [pc, #552]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800341e:	e001      	b.n	8003424 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003420:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003430:	d004      	beq.n	800343c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 8099 	bne.w	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d107      	bne.n	8003456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f925 	bl	80036a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f9c8 	bl	8003800 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b40      	cmp	r3, #64	@ 0x40
 8003478:	d13a      	bne.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d035      	beq.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a6e      	ldr	r2, [pc, #440]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800348e:	4b6e      	ldr	r3, [pc, #440]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003490:	e001      	b.n	8003496 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003492:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4969      	ldr	r1, [pc, #420]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800349e:	428b      	cmp	r3, r1
 80034a0:	d101      	bne.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034a2:	4b69      	ldr	r3, [pc, #420]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034a4:	e001      	b.n	80034aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff fe88 	bl	8003200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	f040 80c3 	bne.w	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80bd 	beq.w	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003516:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a49      	ldr	r2, [pc, #292]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003522:	4b49      	ldr	r3, [pc, #292]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003524:	e001      	b.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003526:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4944      	ldr	r1, [pc, #272]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003532:	428b      	cmp	r3, r1
 8003534:	d101      	bne.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003536:	4b44      	ldr	r3, [pc, #272]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003538:	e001      	b.n	800353e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800353a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800353e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003542:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fe4a 	bl	8003200 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800356c:	e089      	b.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b02      	cmp	r3, #2
 8003576:	d107      	bne.n	8003588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8be 	bl	8003704 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f8fd 	bl	800379c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a8:	2b40      	cmp	r3, #64	@ 0x40
 80035aa:	d12f      	bne.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02a      	beq.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d2:	e001      	b.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4919      	ldr	r1, [pc, #100]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e0:	428b      	cmp	r3, r1
 80035e2:	d101      	bne.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035e4:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e6:	e001      	b.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80035f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	f043 0202 	orr.w	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fdfa 	bl	8003200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b08      	cmp	r3, #8
 8003614:	d136      	bne.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d031      	beq.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a07      	ldr	r2, [pc, #28]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800362a:	4b07      	ldr	r3, [pc, #28]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800362c:	e001      	b.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800362e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4902      	ldr	r1, [pc, #8]	@ (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800363a:	428b      	cmp	r3, r1
 800363c:	d106      	bne.n	800364c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800363e:	4b02      	ldr	r3, [pc, #8]	@ (8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003640:	e006      	b.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003642:	bf00      	nop
 8003644:	40003800 	.word	0x40003800
 8003648:	40003400 	.word	0x40003400
 800364c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003650:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003654:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003664:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	f043 0204 	orr.w	r2, r3, #4
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fdc0 	bl	8003200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003680:	e000      	b.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003682:	bf00      	nop
}
 8003684:	bf00      	nop
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	1c99      	adds	r1, r3, #2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6251      	str	r1, [r2, #36]	@ 0x24
 80036b2:	881a      	ldrh	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d113      	bne.n	80036fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ffc9 	bl	800368c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	1c99      	adds	r1, r3, #2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6251      	str	r1, [r2, #36]	@ 0x24
 8003716:	8819      	ldrh	r1, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1d      	ldr	r2, [pc, #116]	@ (8003794 <I2SEx_TxISR_I2SExt+0x90>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <I2SEx_TxISR_I2SExt+0x22>
 8003722:	4b1d      	ldr	r3, [pc, #116]	@ (8003798 <I2SEx_TxISR_I2SExt+0x94>)
 8003724:	e001      	b.n	800372a <I2SEx_TxISR_I2SExt+0x26>
 8003726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800372a:	460a      	mov	r2, r1
 800372c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d121      	bne.n	800378a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a12      	ldr	r2, [pc, #72]	@ (8003794 <I2SEx_TxISR_I2SExt+0x90>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <I2SEx_TxISR_I2SExt+0x50>
 8003750:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <I2SEx_TxISR_I2SExt+0x94>)
 8003752:	e001      	b.n	8003758 <I2SEx_TxISR_I2SExt+0x54>
 8003754:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	490d      	ldr	r1, [pc, #52]	@ (8003794 <I2SEx_TxISR_I2SExt+0x90>)
 8003760:	428b      	cmp	r3, r1
 8003762:	d101      	bne.n	8003768 <I2SEx_TxISR_I2SExt+0x64>
 8003764:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <I2SEx_TxISR_I2SExt+0x94>)
 8003766:	e001      	b.n	800376c <I2SEx_TxISR_I2SExt+0x68>
 8003768:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800376c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003770:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d106      	bne.n	800378a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff81 	bl	800368c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40003800 	.word	0x40003800
 8003798:	40003400 	.word	0x40003400

0800379c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68d8      	ldr	r0, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	1c99      	adds	r1, r3, #2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80037b4:	b282      	uxth	r2, r0
 80037b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d113      	bne.n	80037f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ff4a 	bl	800368c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a20      	ldr	r2, [pc, #128]	@ (8003890 <I2SEx_RxISR_I2SExt+0x90>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <I2SEx_RxISR_I2SExt+0x16>
 8003812:	4b20      	ldr	r3, [pc, #128]	@ (8003894 <I2SEx_RxISR_I2SExt+0x94>)
 8003814:	e001      	b.n	800381a <I2SEx_RxISR_I2SExt+0x1a>
 8003816:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800381a:	68d8      	ldr	r0, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	1c99      	adds	r1, r3, #2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003826:	b282      	uxth	r2, r0
 8003828:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d121      	bne.n	8003886 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <I2SEx_RxISR_I2SExt+0x90>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <I2SEx_RxISR_I2SExt+0x50>
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <I2SEx_RxISR_I2SExt+0x94>)
 800384e:	e001      	b.n	8003854 <I2SEx_RxISR_I2SExt+0x54>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	490d      	ldr	r1, [pc, #52]	@ (8003890 <I2SEx_RxISR_I2SExt+0x90>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d101      	bne.n	8003864 <I2SEx_RxISR_I2SExt+0x64>
 8003860:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <I2SEx_RxISR_I2SExt+0x94>)
 8003862:	e001      	b.n	8003868 <I2SEx_RxISR_I2SExt+0x68>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003868:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800386c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff03 	bl	800368c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40003800 	.word	0x40003800
 8003894:	40003400 	.word	0x40003400

08003898 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e101      	b.n	8003aae <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f00a fb81 	bl	800dfcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2203      	movs	r2, #3
 80038ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038d8:	d102      	bne.n	80038e0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 ff2c 	bl	8007742 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	7c1a      	ldrb	r2, [r3, #16]
 80038f2:	f88d 2000 	strb.w	r2, [sp]
 80038f6:	3304      	adds	r3, #4
 80038f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038fa:	f003 fe0b 	bl	8007514 <USB_CoreInit>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0ce      	b.n	8003aae <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f003 ff24 	bl	8007764 <USB_SetCurrentMode>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0bf      	b.n	8003aae <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	e04a      	b.n	80039ca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	3315      	adds	r3, #21
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3314      	adds	r3, #20
 8003958:	7bfa      	ldrb	r2, [r7, #15]
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	b298      	uxth	r0, r3
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	332e      	adds	r3, #46	@ 0x2e
 8003970:	4602      	mov	r2, r0
 8003972:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3318      	adds	r3, #24
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	331c      	adds	r3, #28
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3320      	adds	r3, #32
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039b0:	7bfa      	ldrb	r2, [r7, #15]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3324      	adds	r3, #36	@ 0x24
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	3301      	adds	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	791b      	ldrb	r3, [r3, #4]
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d3af      	bcc.n	8003934 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e044      	b.n	8003a64 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a02:	7bfa      	ldrb	r2, [r7, #15]
 8003a04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	3301      	adds	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	791b      	ldrb	r3, [r3, #4]
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3b5      	bcc.n	80039da <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7c1a      	ldrb	r2, [r3, #16]
 8003a76:	f88d 2000 	strb.w	r2, [sp]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a7e:	f003 febd 	bl	80077fc <USB_DevInit>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e00c      	b.n	8003aae <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f004 ff07 	bl	80088ba <USB_DevDisconnect>

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_PCD_Start+0x1c>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e022      	b.n	8003b18 <HAL_PCD_Start+0x62>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f003 fe0e 	bl	8007720 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 feb5 	bl	8008878 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b08d      	sub	sp, #52	@ 0x34
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 ff73 	bl	8008a22 <USB_GetMode>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 848c 	bne.w	800445c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f004 fed7 	bl	80088fc <USB_ReadInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8482 	beq.w	800445a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f004 fec4 	bl	80088fc <USB_ReadInterrupts>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d107      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f002 0202 	and.w	r2, r2, #2
 8003b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 feb2 	bl	80088fc <USB_ReadInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d161      	bne.n	8003c66 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0210 	bic.w	r2, r2, #16
 8003bb0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	0c5b      	lsrs	r3, r3, #17
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d124      	bne.n	8003c28 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d035      	beq.n	8003c56 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6a38      	ldr	r0, [r7, #32]
 8003bfe:	f004 fce9 	bl	80085d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c0e:	441a      	add	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c20:	441a      	add	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	615a      	str	r2, [r3, #20]
 8003c26:	e016      	b.n	8003c56 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	0c5b      	lsrs	r3, r3, #17
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	2b06      	cmp	r3, #6
 8003c32:	d110      	bne.n	8003c56 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6a38      	ldr	r0, [r7, #32]
 8003c40:	f004 fcc8 	bl	80085d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c50:	441a      	add	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0210 	orr.w	r2, r2, #16
 8003c64:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f004 fe46 	bl	80088fc <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c7a:	f040 80a7 	bne.w	8003dcc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 fe4b 	bl	8008922 <USB_ReadDevAllOutEpInterrupt>
 8003c8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003c8e:	e099      	b.n	8003dc4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 808e 	beq.w	8003db8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f004 fe6f 	bl	800898a <USB_ReadDevOutEPInterrupt>
 8003cac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fea3 	bl	8004a18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2308      	movs	r3, #8
 8003cec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003cee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 ff79 	bl	8004be8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2310      	movs	r3, #16
 8003d10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d030      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d24:	2b80      	cmp	r3, #128	@ 0x80
 8003d26:	d109      	bne.n	8003d3c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d3a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	78db      	ldrb	r3, [r3, #3]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d108      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f00a fa3a 	bl	800e1e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	2320      	movs	r3, #32
 8003d98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003db6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	3301      	adds	r3, #1
 8003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f47f af62 	bne.w	8003c90 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 fd93 	bl	80088fc <USB_ReadInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ddc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003de0:	f040 80db 	bne.w	8003f9a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f004 fdb4 	bl	8008956 <USB_ReadDevAllInEpInterrupt>
 8003dee:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003df4:	e0cd      	b.n	8003f92 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80c2 	beq.w	8003f86 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fdda 	bl	80089c6 <USB_ReadDevInEPInterrupt>
 8003e12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d057      	beq.n	8003ece <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2201      	movs	r2, #1
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69f9      	ldr	r1, [r7, #28]
 8003e3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e3e:	4013      	ands	r3, r2
 8003e40:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2301      	movs	r3, #1
 8003e52:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	799b      	ldrb	r3, [r3, #6]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d132      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3320      	adds	r3, #32
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4403      	add	r3, r0
 8003e7c:	331c      	adds	r3, #28
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4419      	add	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4403      	add	r3, r0
 8003e90:	3320      	adds	r3, #32
 8003e92:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d113      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x3a2>
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3324      	adds	r3, #36	@ 0x24
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d108      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	f004 fde1 	bl	8008a84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f00a f90e 	bl	800e0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f00:	461a      	mov	r2, r3
 8003f02:	2310      	movs	r3, #16
 8003f04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2340      	movs	r3, #64	@ 0x40
 8003f20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d023      	beq.n	8003f74 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f2e:	6a38      	ldr	r0, [r7, #32]
 8003f30:	f003 fdc8 	bl	8007ac4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	3310      	adds	r3, #16
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	78db      	ldrb	r3, [r3, #3]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d108      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2200      	movs	r2, #0
 8003f54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f00a f951 	bl	800e204 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2302      	movs	r3, #2
 8003f72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fcbd 	bl	8004900 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	3301      	adds	r3, #1
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f47f af2e 	bne.w	8003df6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 fcac 	bl	80088fc <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fae:	d122      	bne.n	8003ff6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d108      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fea3 	bl	8004d24 <HAL_PCDEx_LPM_Callback>
 8003fde:	e002      	b.n	8003fe6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f00a f8ef 	bl	800e1c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fc7e 	bl	80088fc <USB_ReadInterrupts>
 8004000:	4603      	mov	r3, r0
 8004002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800400a:	d112      	bne.n	8004032 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d102      	bne.n	8004022 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f00a f8ab 	bl	800e178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004030:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f004 fc60 	bl	80088fc <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004046:	f040 80b7 	bne.w	80041b8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2110      	movs	r1, #16
 8004064:	4618      	mov	r0, r3
 8004066:	f003 fd2d 	bl	8007ac4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800406a:	2300      	movs	r3, #0
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406e:	e046      	b.n	80040fe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800407c:	461a      	mov	r2, r3
 800407e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004082:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800409e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80040a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b0:	461a      	mov	r2, r3
 80040b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80040f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fa:	3301      	adds	r3, #1
 80040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	791b      	ldrb	r3, [r3, #4]
 8004102:	461a      	mov	r2, r3
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	4293      	cmp	r3, r2
 8004108:	d3b2      	bcc.n	8004070 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004118:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800411c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7bdb      	ldrb	r3, [r3, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004136:	f043 030b 	orr.w	r3, r3, #11
 800413a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800414c:	f043 030b 	orr.w	r3, r3, #11
 8004150:	6453      	str	r3, [r2, #68]	@ 0x44
 8004152:	e015      	b.n	8004180 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004162:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004166:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800416a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800417a:	f043 030b 	orr.w	r3, r3, #11
 800417e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800418e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004192:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041a2:	461a      	mov	r2, r3
 80041a4:	f004 fc6e 	bl	8008a84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80041b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 fb9d 	bl	80088fc <USB_ReadInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041cc:	d123      	bne.n	8004216 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f004 fc33 	bl	8008a3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 fcea 	bl	8007bb6 <USB_GetDevSpeed>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681c      	ldr	r4, [r3, #0]
 80041ee:	f001 fa09 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 80041f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041f8:	461a      	mov	r2, r3
 80041fa:	4620      	mov	r0, r4
 80041fc:	f003 f9ee 	bl	80075dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f009 ff9a 	bl	800e13a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004214:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f004 fb6e 	bl	80088fc <USB_ReadInterrupts>
 8004220:	4603      	mov	r3, r0
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b08      	cmp	r3, #8
 8004228:	d10a      	bne.n	8004240 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f009 ff77 	bl	800e11e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f002 0208 	and.w	r2, r2, #8
 800423e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f004 fb59 	bl	80088fc <USB_ReadInterrupts>
 800424a:	4603      	mov	r3, r0
 800424c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004250:	2b80      	cmp	r3, #128	@ 0x80
 8004252:	d123      	bne.n	800429c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004260:	2301      	movs	r3, #1
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
 8004264:	e014      	b.n	8004290 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	b2db      	uxtb	r3, r3
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fb0a 	bl	800489e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	3301      	adds	r3, #1
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	791b      	ldrb	r3, [r3, #4]
 8004294:	461a      	mov	r2, r3
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	4293      	cmp	r3, r2
 800429a:	d3e4      	bcc.n	8004266 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f004 fb2b 	bl	80088fc <USB_ReadInterrupts>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042b0:	d13c      	bne.n	800432c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042b2:	2301      	movs	r3, #1
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b6:	e02b      	b.n	8004310 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3318      	adds	r3, #24
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d115      	bne.n	800430a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80042de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da12      	bge.n	800430a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	3317      	adds	r3, #23
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004300:	b2db      	uxtb	r3, r3
 8004302:	4619      	mov	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 faca 	bl	800489e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	3301      	adds	r3, #1
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	791b      	ldrb	r3, [r3, #4]
 8004314:	461a      	mov	r2, r3
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	4293      	cmp	r3, r2
 800431a:	d3cd      	bcc.n	80042b8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800432a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f004 fae3 	bl	80088fc <USB_ReadInterrupts>
 8004336:	4603      	mov	r3, r0
 8004338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800433c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004340:	d156      	bne.n	80043f0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004342:	2301      	movs	r3, #1
 8004344:	627b      	str	r3, [r7, #36]	@ 0x24
 8004346:	e045      	b.n	80043d4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d12e      	bne.n	80043ce <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004370:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	da2b      	bge.n	80043ce <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004382:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004386:	429a      	cmp	r2, r3
 8004388:	d121      	bne.n	80043ce <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ca:	6053      	str	r3, [r2, #4]
            break;
 80043cc:	e008      	b.n	80043e0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	3301      	adds	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	791b      	ldrb	r3, [r3, #4]
 80043d8:	461a      	mov	r2, r3
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	4293      	cmp	r3, r2
 80043de:	d3b3      	bcc.n	8004348 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80043ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f004 fa81 	bl	80088fc <USB_ReadInterrupts>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d10a      	bne.n	800441c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f009 ff0e 	bl	800e228 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800441a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f004 fa6b 	bl	80088fc <USB_ReadInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d115      	bne.n	800445c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f009 fefe 	bl	800e244 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6859      	ldr	r1, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	e000      	b.n	800445c <HAL_PCD_IRQHandler+0x93c>
      return;
 800445a:	bf00      	nop
    }
  }
}
 800445c:	3734      	adds	r7, #52	@ 0x34
 800445e:	46bd      	mov	sp, r7
 8004460:	bd90      	pop	{r4, r7, pc}

08004462 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_PCD_SetAddress+0x1a>
 8004478:	2302      	movs	r3, #2
 800447a:	e012      	b.n	80044a2 <HAL_PCD_SetAddress+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f004 f9ca 	bl	800882c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	461a      	mov	r2, r3
 80044b8:	4603      	mov	r3, r0
 80044ba:	70fb      	strb	r3, [r7, #3]
 80044bc:	460b      	mov	r3, r1
 80044be:	803b      	strh	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	da0f      	bge.n	80044f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	f003 020f 	and.w	r2, r3, #15
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	3310      	adds	r3, #16
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	4413      	add	r3, r2
 80044e4:	3304      	adds	r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	705a      	strb	r2, [r3, #1]
 80044ee:	e00f      	b.n	8004510 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 020f 	and.w	r2, r3, #15
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	3304      	adds	r3, #4
 8004508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	b2da      	uxtb	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800451c:	883b      	ldrh	r3, [r7, #0]
 800451e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	78ba      	ldrb	r2, [r7, #2]
 800452a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800453e:	78bb      	ldrb	r3, [r7, #2]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d102      	bne.n	800454a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_PCD_EP_Open+0xae>
 8004554:	2302      	movs	r3, #2
 8004556:	e00e      	b.n	8004576 <HAL_PCD_EP_Open+0xcc>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	4618      	mov	r0, r3
 8004568:	f003 fb4a 	bl	8007c00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004574:	7afb      	ldrb	r3, [r7, #11]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800458a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800458e:	2b00      	cmp	r3, #0
 8004590:	da0f      	bge.n	80045b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	f003 020f 	and.w	r2, r3, #15
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	3310      	adds	r3, #16
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	3304      	adds	r3, #4
 80045a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	705a      	strb	r2, [r3, #1]
 80045b0:	e00f      	b.n	80045d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_PCD_EP_Close+0x6e>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e00e      	b.n	800460a <HAL_PCD_EP_Close+0x8c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f003 fb88 	bl	8007d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b086      	sub	sp, #24
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	460b      	mov	r3, r1
 8004620:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004622:	7afb      	ldrb	r3, [r7, #11]
 8004624:	f003 020f 	and.w	r2, r3, #15
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	3304      	adds	r3, #4
 800463a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2200      	movs	r2, #0
 800464c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2200      	movs	r2, #0
 8004652:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004654:	7afb      	ldrb	r3, [r7, #11]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	b2da      	uxtb	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	799b      	ldrb	r3, [r3, #6]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d102      	bne.n	800466e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	799b      	ldrb	r3, [r3, #6]
 8004676:	461a      	mov	r2, r3
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	f003 fc25 	bl	8007ec8 <USB_EPStartXfer>

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80046aa:	681b      	ldr	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	460b      	mov	r3, r1
 80046c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c8:	7afb      	ldrb	r3, [r7, #11]
 80046ca:	f003 020f 	and.w	r2, r3, #15
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	3310      	adds	r3, #16
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	3304      	adds	r3, #4
 80046de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2201      	movs	r2, #1
 80046f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046f8:	7afb      	ldrb	r3, [r7, #11]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	799b      	ldrb	r3, [r3, #6]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	799b      	ldrb	r3, [r3, #6]
 800471a:	461a      	mov	r2, r3
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	f003 fbd3 	bl	8007ec8 <USB_EPStartXfer>

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	7912      	ldrb	r2, [r2, #4]
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e04f      	b.n	80047ea <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800474a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800474e:	2b00      	cmp	r3, #0
 8004750:	da0f      	bge.n	8004772 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	f003 020f 	and.w	r2, r3, #15
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	3310      	adds	r3, #16
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	3304      	adds	r3, #4
 8004768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	705a      	strb	r2, [r3, #1]
 8004770:	e00d      	b.n	800478e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_PCD_EP_SetStall+0x82>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e01d      	b.n	80047ea <HAL_PCD_EP_SetStall+0xbe>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	4618      	mov	r0, r3
 80047be:	f003 ff61 	bl	8008684 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7999      	ldrb	r1, [r3, #6]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047da:	461a      	mov	r2, r3
 80047dc:	f004 f952 	bl	8008a84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	7912      	ldrb	r2, [r2, #4]
 8004808:	4293      	cmp	r3, r2
 800480a:	d901      	bls.n	8004810 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e042      	b.n	8004896 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da0f      	bge.n	8004838 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	f003 020f 	and.w	r2, r3, #15
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	3310      	adds	r3, #16
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	3304      	adds	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	705a      	strb	r2, [r3, #1]
 8004836:	e00f      	b.n	8004858 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	3304      	adds	r3, #4
 8004850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_PCD_EP_ClrStall+0x86>
 8004874:	2302      	movs	r3, #2
 8004876:	e00e      	b.n	8004896 <HAL_PCD_EP_ClrStall+0xa4>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68f9      	ldr	r1, [r7, #12]
 8004886:	4618      	mov	r0, r3
 8004888:	f003 ff6a 	bl	8008760 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	da0c      	bge.n	80048cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	3310      	adds	r3, #16
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	e00c      	b.n	80048e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	3304      	adds	r3, #4
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f003 fd89 	bl	8008404 <USB_EPStopXfer>
 80048f2:	4603      	mov	r3, r0
 80048f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80048f6:	7afb      	ldrb	r3, [r7, #11]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	3310      	adds	r3, #16
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4413      	add	r3, r2
 8004924:	3304      	adds	r3, #4
 8004926:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	429a      	cmp	r2, r3
 8004932:	d901      	bls.n	8004938 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e06b      	b.n	8004a10 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	429a      	cmp	r2, r3
 800494c:	d902      	bls.n	8004954 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3303      	adds	r3, #3
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800495c:	e02a      	b.n	80049b4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	429a      	cmp	r2, r3
 8004972:	d902      	bls.n	800497a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3303      	adds	r3, #3
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	68d9      	ldr	r1, [r3, #12]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	4603      	mov	r3, r0
 8004996:	6978      	ldr	r0, [r7, #20]
 8004998:	f003 fdde 	bl	8008558 <USB_WritePacket>

    ep->xfer_buff  += len;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	441a      	add	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	441a      	add	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d809      	bhi.n	80049de <PCD_WriteEmptyTxFifo+0xde>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d203      	bcs.n	80049de <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1bf      	bne.n	800495e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d811      	bhi.n	8004a0e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	2201      	movs	r2, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	6939      	ldr	r1, [r7, #16]
 8004a06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	333c      	adds	r3, #60	@ 0x3c
 8004a30:	3304      	adds	r3, #4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	799b      	ldrb	r3, [r3, #6]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d17b      	bne.n	8004b46 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4a61      	ldr	r2, [pc, #388]	@ (8004be0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	f240 80b9 	bls.w	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80b3 	beq.w	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a80:	6093      	str	r3, [r2, #8]
 8004a82:	e0a7      	b.n	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	6093      	str	r3, [r2, #8]
 8004aa0:	e098      	b.n	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f040 8093 	bne.w	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8004be0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d90f      	bls.n	8004ad6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004acc:	461a      	mov	r2, r3
 8004ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad2:	6093      	str	r3, [r2, #8]
 8004ad4:	e07e      	b.n	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3304      	adds	r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1a      	ldr	r2, [r3, #32]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	0159      	lsls	r1, r3, #5
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	440b      	add	r3, r1
 8004af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d114      	bne.n	8004b38 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b20:	461a      	mov	r2, r3
 8004b22:	2101      	movs	r1, #1
 8004b24:	f003 ffae 	bl	8008a84 <USB_EP0_OutStart>
 8004b28:	e006      	b.n	8004b38 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	441a      	add	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f009 fab8 	bl	800e0b4 <HAL_PCD_DataOutStageCallback>
 8004b44:	e046      	b.n	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4a26      	ldr	r2, [pc, #152]	@ (8004be4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d124      	bne.n	8004b98 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b64:	461a      	mov	r2, r3
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	6093      	str	r3, [r2, #8]
 8004b6c:	e032      	b.n	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	2320      	movs	r3, #32
 8004b88:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f009 fa8f 	bl	800e0b4 <HAL_PCD_DataOutStageCallback>
 8004b96:	e01d      	b.n	8004bd4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d114      	bne.n	8004bc8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d108      	bne.n	8004bc8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	f003 ff5e 	bl	8008a84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f009 fa70 	bl	800e0b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	4f54300a 	.word	0x4f54300a
 8004be4:	4f54310a 	.word	0x4f54310a

08004be8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	333c      	adds	r3, #60	@ 0x3c
 8004c00:	3304      	adds	r3, #4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a15      	ldr	r2, [pc, #84]	@ (8004c70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d90e      	bls.n	8004c3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c34:	461a      	mov	r2, r3
 8004c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f009 fa27 	bl	800e090 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d90c      	bls.n	8004c64 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	799b      	ldrb	r3, [r3, #6]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d108      	bne.n	8004c64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	2101      	movs	r1, #1
 8004c60:	f003 ff10 	bl	8008a84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	4f54300a 	.word	0x4f54300a

08004c74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
 8004c80:	4613      	mov	r3, r2
 8004c82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d107      	bne.n	8004ca2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c92:	883b      	ldrh	r3, [r7, #0]
 8004c94:	0419      	lsls	r1, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ca0:	e028      	b.n	8004cf4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e00d      	b.n	8004cd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	3340      	adds	r3, #64	@ 0x40
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4413      	add	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d3ec      	bcc.n	8004cb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cdc:	883b      	ldrh	r3, [r7, #0]
 8004cde:	0418      	lsls	r0, r3, #16
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	4302      	orrs	r2, r0
 8004cec:	3340      	adds	r3, #64	@ 0x40
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e267      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d075      	beq.n	8004e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d5a:	4b88      	ldr	r3, [pc, #544]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d00c      	beq.n	8004d80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d66:	4b85      	ldr	r3, [pc, #532]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d112      	bne.n	8004d98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d72:	4b82      	ldr	r3, [pc, #520]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d7e:	d10b      	bne.n	8004d98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d80:	4b7e      	ldr	r3, [pc, #504]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d05b      	beq.n	8004e44 <HAL_RCC_OscConfig+0x108>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d157      	bne.n	8004e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e242      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da0:	d106      	bne.n	8004db0 <HAL_RCC_OscConfig+0x74>
 8004da2:	4b76      	ldr	r3, [pc, #472]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a75      	ldr	r2, [pc, #468]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e01d      	b.n	8004dec <HAL_RCC_OscConfig+0xb0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x98>
 8004dba:	4b70      	ldr	r3, [pc, #448]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a6c      	ldr	r2, [pc, #432]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e00b      	b.n	8004dec <HAL_RCC_OscConfig+0xb0>
 8004dd4:	4b69      	ldr	r3, [pc, #420]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a68      	ldr	r2, [pc, #416]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	4b66      	ldr	r3, [pc, #408]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a65      	ldr	r2, [pc, #404]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d013      	beq.n	8004e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7fc fdc4 	bl	8001980 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fc fdc0 	bl	8001980 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	@ 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e207      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0xc0>
 8004e1a:	e014      	b.n	8004e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fc fdb0 	bl	8001980 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e24:	f7fc fdac 	bl	8001980 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	@ 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e1f3      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e36:	4b51      	ldr	r3, [pc, #324]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0xe8>
 8004e42:	e000      	b.n	8004e46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d063      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e52:	4b4a      	ldr	r3, [pc, #296]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5e:	4b47      	ldr	r3, [pc, #284]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d11c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6a:	4b44      	ldr	r3, [pc, #272]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d116      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	4b41      	ldr	r3, [pc, #260]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_RCC_OscConfig+0x152>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d001      	beq.n	8004e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e1c7      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	4937      	ldr	r1, [pc, #220]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	e03a      	b.n	8004f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eac:	4b34      	ldr	r3, [pc, #208]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fc fd65 	bl	8001980 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eba:	f7fc fd61 	bl	8001980 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e1a8      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed8:	4b28      	ldr	r3, [pc, #160]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4925      	ldr	r1, [pc, #148]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]
 8004eec:	e015      	b.n	8004f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eee:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fc fd44 	bl	8001980 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efc:	f7fc fd40 	bl	8001980 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e187      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d036      	beq.n	8004f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2e:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <HAL_RCC_OscConfig+0x248>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fc fd24 	bl	8001980 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fc fd20 	bl	8001980 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e167      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x200>
 8004f5a:	e01b      	b.n	8004f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <HAL_RCC_OscConfig+0x248>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f62:	f7fc fd0d 	bl	8001980 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f68:	e00e      	b.n	8004f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6a:	f7fc fd09 	bl	8001980 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d907      	bls.n	8004f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e150      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	42470000 	.word	0x42470000
 8004f84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	4b88      	ldr	r3, [pc, #544]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ea      	bne.n	8004f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8097 	beq.w	80050d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa6:	4b81      	ldr	r3, [pc, #516]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	4a7c      	ldr	r2, [pc, #496]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd2:	4b77      	ldr	r3, [pc, #476]	@ (80051b0 <HAL_RCC_OscConfig+0x474>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d118      	bne.n	8005010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fde:	4b74      	ldr	r3, [pc, #464]	@ (80051b0 <HAL_RCC_OscConfig+0x474>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a73      	ldr	r2, [pc, #460]	@ (80051b0 <HAL_RCC_OscConfig+0x474>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fea:	f7fc fcc9 	bl	8001980 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff2:	f7fc fcc5 	bl	8001980 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e10c      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005004:	4b6a      	ldr	r3, [pc, #424]	@ (80051b0 <HAL_RCC_OscConfig+0x474>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d106      	bne.n	8005026 <HAL_RCC_OscConfig+0x2ea>
 8005018:	4b64      	ldr	r3, [pc, #400]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501c:	4a63      	ldr	r2, [pc, #396]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6713      	str	r3, [r2, #112]	@ 0x70
 8005024:	e01c      	b.n	8005060 <HAL_RCC_OscConfig+0x324>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b05      	cmp	r3, #5
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0x30c>
 800502e:	4b5f      	ldr	r3, [pc, #380]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	4a5e      	ldr	r2, [pc, #376]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005034:	f043 0304 	orr.w	r3, r3, #4
 8005038:	6713      	str	r3, [r2, #112]	@ 0x70
 800503a:	4b5c      	ldr	r3, [pc, #368]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	4a5b      	ldr	r2, [pc, #364]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6713      	str	r3, [r2, #112]	@ 0x70
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0x324>
 8005048:	4b58      	ldr	r3, [pc, #352]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504c:	4a57      	ldr	r2, [pc, #348]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	6713      	str	r3, [r2, #112]	@ 0x70
 8005054:	4b55      	ldr	r3, [pc, #340]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005058:	4a54      	ldr	r2, [pc, #336]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800505a:	f023 0304 	bic.w	r3, r3, #4
 800505e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fc fc8a 	bl	8001980 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fc fc86 	bl	8001980 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0cb      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005086:	4b49      	ldr	r3, [pc, #292]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0ee      	beq.n	8005070 <HAL_RCC_OscConfig+0x334>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005094:	f7fc fc74 	bl	8001980 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fc fc70 	bl	8001980 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0b5      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b2:	4b3e      	ldr	r3, [pc, #248]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ee      	bne.n	800509c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c4:	4b39      	ldr	r3, [pc, #228]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 80050c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c8:	4a38      	ldr	r2, [pc, #224]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80a1 	beq.w	800521c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050da:	4b34      	ldr	r3, [pc, #208]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d05c      	beq.n	80051a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d141      	bne.n	8005172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ee:	4b31      	ldr	r3, [pc, #196]	@ (80051b4 <HAL_RCC_OscConfig+0x478>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fc fc44 	bl	8001980 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fc fc40 	bl	8001980 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e087      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510e:	4b27      	ldr	r3, [pc, #156]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	019b      	lsls	r3, r3, #6
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	3b01      	subs	r3, #1
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	491b      	ldr	r1, [pc, #108]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005140:	4313      	orrs	r3, r2
 8005142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005144:	4b1b      	ldr	r3, [pc, #108]	@ (80051b4 <HAL_RCC_OscConfig+0x478>)
 8005146:	2201      	movs	r2, #1
 8005148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7fc fc19 	bl	8001980 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005152:	f7fc fc15 	bl	8001980 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e05c      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005164:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x416>
 8005170:	e054      	b.n	800521c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <HAL_RCC_OscConfig+0x478>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7fc fc02 	bl	8001980 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005180:	f7fc fbfe 	bl	8001980 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e045      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005192:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x444>
 800519e:	e03d      	b.n	800521c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e038      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
 80051ac:	40023800 	.word	0x40023800
 80051b0:	40007000 	.word	0x40007000
 80051b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005228 <HAL_RCC_OscConfig+0x4ec>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d028      	beq.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d121      	bne.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d11a      	bne.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051e8:	4013      	ands	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d111      	bne.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	3b01      	subs	r3, #1
 8005202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005204:	429a      	cmp	r2, r3
 8005206:	d107      	bne.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800

0800522c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0cc      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005240:	4b68      	ldr	r3, [pc, #416]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d90c      	bls.n	8005268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b65      	ldr	r3, [pc, #404]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b63      	ldr	r3, [pc, #396]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0b8      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005280:	4b59      	ldr	r3, [pc, #356]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4a58      	ldr	r2, [pc, #352]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800528a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005298:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	4a52      	ldr	r2, [pc, #328]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a4:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	494d      	ldr	r1, [pc, #308]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d044      	beq.n	800534c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b47      	ldr	r3, [pc, #284]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d119      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e07f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d003      	beq.n	80052ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ea:	4b3f      	ldr	r3, [pc, #252]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e06f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	4b3b      	ldr	r3, [pc, #236]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e067      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b37      	ldr	r3, [pc, #220]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4934      	ldr	r1, [pc, #208]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800531c:	f7fc fb30 	bl	8001980 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7fc fb2c 	bl	8001980 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e04f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b2b      	ldr	r3, [pc, #172]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800534c:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d20c      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b22      	ldr	r3, [pc, #136]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b20      	ldr	r3, [pc, #128]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e032      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005380:	4b19      	ldr	r3, [pc, #100]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4916      	ldr	r1, [pc, #88]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539e:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	490e      	ldr	r1, [pc, #56]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053b2:	f000 f821 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 80053b6:	4602      	mov	r2, r0
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	490a      	ldr	r1, [pc, #40]	@ (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 80053c4:	5ccb      	ldrb	r3, [r1, r3]
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053ce:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fc f9b6 	bl	8001744 <HAL_InitTick>

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023c00 	.word	0x40023c00
 80053e8:	40023800 	.word	0x40023800
 80053ec:	0800e750 	.word	0x0800e750
 80053f0:	20000000 	.word	0x20000000
 80053f4:	20000004 	.word	0x20000004

080053f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053fc:	b094      	sub	sp, #80	@ 0x50
 80053fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005410:	4b79      	ldr	r3, [pc, #484]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 030c 	and.w	r3, r3, #12
 8005418:	2b08      	cmp	r3, #8
 800541a:	d00d      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x40>
 800541c:	2b08      	cmp	r3, #8
 800541e:	f200 80e1 	bhi.w	80055e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0x34>
 8005426:	2b04      	cmp	r3, #4
 8005428:	d003      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x3a>
 800542a:	e0db      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800542c:	4b73      	ldr	r3, [pc, #460]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x204>)
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005430:	e0db      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005432:	4b73      	ldr	r3, [pc, #460]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x208>)
 8005434:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005436:	e0d8      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005438:	4b6f      	ldr	r3, [pc, #444]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005440:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005442:	4b6d      	ldr	r3, [pc, #436]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d063      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544e:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	099b      	lsrs	r3, r3, #6
 8005454:	2200      	movs	r2, #0
 8005456:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005458:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800545a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005460:	633b      	str	r3, [r7, #48]	@ 0x30
 8005462:	2300      	movs	r3, #0
 8005464:	637b      	str	r3, [r7, #52]	@ 0x34
 8005466:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800546a:	4622      	mov	r2, r4
 800546c:	462b      	mov	r3, r5
 800546e:	f04f 0000 	mov.w	r0, #0
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	0159      	lsls	r1, r3, #5
 8005478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800547c:	0150      	lsls	r0, r2, #5
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4621      	mov	r1, r4
 8005484:	1a51      	subs	r1, r2, r1
 8005486:	6139      	str	r1, [r7, #16]
 8005488:	4629      	mov	r1, r5
 800548a:	eb63 0301 	sbc.w	r3, r3, r1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800549c:	4659      	mov	r1, fp
 800549e:	018b      	lsls	r3, r1, #6
 80054a0:	4651      	mov	r1, sl
 80054a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054a6:	4651      	mov	r1, sl
 80054a8:	018a      	lsls	r2, r1, #6
 80054aa:	4651      	mov	r1, sl
 80054ac:	ebb2 0801 	subs.w	r8, r2, r1
 80054b0:	4659      	mov	r1, fp
 80054b2:	eb63 0901 	sbc.w	r9, r3, r1
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ca:	4690      	mov	r8, r2
 80054cc:	4699      	mov	r9, r3
 80054ce:	4623      	mov	r3, r4
 80054d0:	eb18 0303 	adds.w	r3, r8, r3
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	462b      	mov	r3, r5
 80054d8:	eb49 0303 	adc.w	r3, r9, r3
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ea:	4629      	mov	r1, r5
 80054ec:	024b      	lsls	r3, r1, #9
 80054ee:	4621      	mov	r1, r4
 80054f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054f4:	4621      	mov	r1, r4
 80054f6:	024a      	lsls	r2, r1, #9
 80054f8:	4610      	mov	r0, r2
 80054fa:	4619      	mov	r1, r3
 80054fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fe:	2200      	movs	r2, #0
 8005500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005504:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005508:	f7fa fe72 	bl	80001f0 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4613      	mov	r3, r2
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005514:	e058      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005516:	4b38      	ldr	r3, [pc, #224]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	099b      	lsrs	r3, r3, #6
 800551c:	2200      	movs	r2, #0
 800551e:	4618      	mov	r0, r3
 8005520:	4611      	mov	r1, r2
 8005522:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	2300      	movs	r3, #0
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
 800552c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005530:	4642      	mov	r2, r8
 8005532:	464b      	mov	r3, r9
 8005534:	f04f 0000 	mov.w	r0, #0
 8005538:	f04f 0100 	mov.w	r1, #0
 800553c:	0159      	lsls	r1, r3, #5
 800553e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005542:	0150      	lsls	r0, r2, #5
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4641      	mov	r1, r8
 800554a:	ebb2 0a01 	subs.w	sl, r2, r1
 800554e:	4649      	mov	r1, r9
 8005550:	eb63 0b01 	sbc.w	fp, r3, r1
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005560:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005564:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005568:	ebb2 040a 	subs.w	r4, r2, sl
 800556c:	eb63 050b 	sbc.w	r5, r3, fp
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	00eb      	lsls	r3, r5, #3
 800557a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800557e:	00e2      	lsls	r2, r4, #3
 8005580:	4614      	mov	r4, r2
 8005582:	461d      	mov	r5, r3
 8005584:	4643      	mov	r3, r8
 8005586:	18e3      	adds	r3, r4, r3
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	464b      	mov	r3, r9
 800558c:	eb45 0303 	adc.w	r3, r5, r3
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800559e:	4629      	mov	r1, r5
 80055a0:	028b      	lsls	r3, r1, #10
 80055a2:	4621      	mov	r1, r4
 80055a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055a8:	4621      	mov	r1, r4
 80055aa:	028a      	lsls	r2, r1, #10
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b2:	2200      	movs	r2, #0
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	61fa      	str	r2, [r7, #28]
 80055b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055bc:	f7fa fe18 	bl	80001f0 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4613      	mov	r3, r2
 80055c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055c8:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	3301      	adds	r3, #1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055e2:	e002      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055e4:	4b05      	ldr	r3, [pc, #20]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x204>)
 80055e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3750      	adds	r7, #80	@ 0x50
 80055f0:	46bd      	mov	sp, r7
 80055f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f6:	bf00      	nop
 80055f8:	40023800 	.word	0x40023800
 80055fc:	00f42400 	.word	0x00f42400
 8005600:	007a1200 	.word	0x007a1200

08005604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005608:	4b03      	ldr	r3, [pc, #12]	@ (8005618 <HAL_RCC_GetHCLKFreq+0x14>)
 800560a:	681b      	ldr	r3, [r3, #0]
}
 800560c:	4618      	mov	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000000 	.word	0x20000000

0800561c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005620:	f7ff fff0 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8005624:	4602      	mov	r2, r0
 8005626:	4b05      	ldr	r3, [pc, #20]	@ (800563c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	0a9b      	lsrs	r3, r3, #10
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	4903      	ldr	r1, [pc, #12]	@ (8005640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005632:	5ccb      	ldrb	r3, [r1, r3]
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005638:	4618      	mov	r0, r3
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40023800 	.word	0x40023800
 8005640:	0800e760 	.word	0x0800e760

08005644 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	220f      	movs	r2, #15
 8005652:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005654:	4b12      	ldr	r3, [pc, #72]	@ (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0203 	and.w	r2, r3, #3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005660:	4b0f      	ldr	r3, [pc, #60]	@ (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800566c:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005678:	4b09      	ldr	r3, [pc, #36]	@ (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	08db      	lsrs	r3, r3, #3
 800567e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005686:	4b07      	ldr	r3, [pc, #28]	@ (80056a4 <HAL_RCC_GetClockConfig+0x60>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0207 	and.w	r2, r3, #7
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40023c00 	.word	0x40023c00

080056a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d038      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056d0:	4b68      	ldr	r3, [pc, #416]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056d6:	f7fc f953 	bl	8001980 <HAL_GetTick>
 80056da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056de:	f7fc f94f 	bl	8001980 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0bd      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056f0:	4b61      	ldr	r3, [pc, #388]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f0      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	019b      	lsls	r3, r3, #6
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	071b      	lsls	r3, r3, #28
 800570e:	495a      	ldr	r1, [pc, #360]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005716:	4b57      	ldr	r3, [pc, #348]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571c:	f7fc f930 	bl	8001980 <HAL_GetTick>
 8005720:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005724:	f7fc f92c 	bl	8001980 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e09a      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005736:	4b50      	ldr	r3, [pc, #320]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8083 	beq.w	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	4b48      	ldr	r3, [pc, #288]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	4a47      	ldr	r2, [pc, #284]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800575e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005760:	4b45      	ldr	r3, [pc, #276]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800576c:	4b43      	ldr	r3, [pc, #268]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a42      	ldr	r2, [pc, #264]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005776:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005778:	f7fc f902 	bl	8001980 <HAL_GetTick>
 800577c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005780:	f7fc f8fe 	bl	8001980 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e06c      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005792:	4b3a      	ldr	r3, [pc, #232]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800579e:	4b36      	ldr	r3, [pc, #216]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057a6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d02f      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d028      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057d2:	4a29      	ldr	r2, [pc, #164]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057d8:	4b27      	ldr	r3, [pc, #156]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d114      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fc f8cc 	bl	8001980 <HAL_GetTick>
 80057e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fc f8c8 	bl	8001980 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e034      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005802:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ee      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800581a:	d10d      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800581c:	4b16      	ldr	r3, [pc, #88]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800582c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005830:	4911      	ldr	r1, [pc, #68]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
 8005836:	e005      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005838:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4a0e      	ldr	r2, [pc, #56]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005842:	6093      	str	r3, [r2, #8]
 8005844:	4b0c      	ldr	r3, [pc, #48]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005846:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005850:	4909      	ldr	r1, [pc, #36]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	7d1a      	ldrb	r2, [r3, #20]
 8005866:	4b07      	ldr	r3, [pc, #28]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005868:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	42470068 	.word	0x42470068
 8005878:	40023800 	.word	0x40023800
 800587c:	40007000 	.word	0x40007000
 8005880:	42470e40 	.word	0x42470e40
 8005884:	424711e0 	.word	0x424711e0

08005888 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d141      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058a6:	4b25      	ldr	r3, [pc, #148]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d006      	beq.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058bc:	d131      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058be:	4b20      	ldr	r3, [pc, #128]	@ (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80058c0:	617b      	str	r3, [r7, #20]
          break;
 80058c2:	e031      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058c4:	4b1d      	ldr	r3, [pc, #116]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058d0:	d109      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80058d2:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058dc:	4a19      	ldr	r2, [pc, #100]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	e008      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80058e6:	4b15      	ldr	r3, [pc, #84]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058f0:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80058f8:	4b10      	ldr	r3, [pc, #64]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058fe:	099b      	lsrs	r3, r3, #6
 8005900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	fb02 f303 	mul.w	r3, r2, r3
 800590a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800590c:	4b0b      	ldr	r3, [pc, #44]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800590e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005912:	0f1b      	lsrs	r3, r3, #28
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	617b      	str	r3, [r7, #20]
          break;
 8005920:	e002      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
          break;
 8005926:	bf00      	nop
        }
      }
      break;
 8005928:	e000      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800592a:	bf00      	nop
    }
  }
  return frequency;
 800592c:	697b      	ldr	r3, [r7, #20]
}
 800592e:	4618      	mov	r0, r3
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800
 8005940:	00bb8000 	.word	0x00bb8000
 8005944:	007a1200 	.word	0x007a1200
 8005948:	00f42400 	.word	0x00f42400

0800594c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e07b      	b.n	8005a56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d108      	bne.n	8005978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800596e:	d009      	beq.n	8005984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	61da      	str	r2, [r3, #28]
 8005976:	e005      	b.n	8005984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fb fe2c 	bl	80015fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a08:	ea42 0103 	orr.w	r1, r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	f003 0104 	and.w	r1, r3, #4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	f003 0210 	and.w	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b088      	sub	sp, #32
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6e:	f7fb ff87 	bl	8001980 <HAL_GetTick>
 8005a72:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d001      	beq.n	8005a88 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a84:	2302      	movs	r3, #2
 8005a86:	e12a      	b.n	8005cde <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_SPI_Transmit+0x36>
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e122      	b.n	8005cde <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_SPI_Transmit+0x48>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e11b      	b.n	8005cde <HAL_SPI_Transmit+0x280>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	88fa      	ldrh	r2, [r7, #6]
 8005ac6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af4:	d10f      	bne.n	8005b16 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	2b40      	cmp	r3, #64	@ 0x40
 8005b22:	d007      	beq.n	8005b34 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b3c:	d152      	bne.n	8005be4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_SPI_Transmit+0xee>
 8005b46:	8b7b      	ldrh	r3, [r7, #26]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d145      	bne.n	8005bd8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b70:	e032      	b.n	8005bd8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d112      	bne.n	8005ba6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	881a      	ldrh	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ba4:	e018      	b.n	8005bd8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba6:	f7fb feeb 	bl	8001980 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d803      	bhi.n	8005bbe <HAL_SPI_Transmit+0x160>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d102      	bne.n	8005bc4 <HAL_SPI_Transmit+0x166>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e082      	b.n	8005cde <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1c7      	bne.n	8005b72 <HAL_SPI_Transmit+0x114>
 8005be2:	e053      	b.n	8005c8c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_Transmit+0x194>
 8005bec:	8b7b      	ldrh	r3, [r7, #26]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d147      	bne.n	8005c82 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	7812      	ldrb	r2, [r2, #0]
 8005bfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c18:	e033      	b.n	8005c82 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d113      	bne.n	8005c50 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	7812      	ldrb	r2, [r2, #0]
 8005c34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c4e:	e018      	b.n	8005c82 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c50:	f7fb fe96 	bl	8001980 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d803      	bhi.n	8005c68 <HAL_SPI_Transmit+0x20a>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	d102      	bne.n	8005c6e <HAL_SPI_Transmit+0x210>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e02d      	b.n	8005cde <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1c6      	bne.n	8005c1a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fbd9 	bl	8006448 <SPI_EndRxTxTransaction>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
  }
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b088      	sub	sp, #32
 8005cea:	af02      	add	r7, sp, #8
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d001      	beq.n	8005d06 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005d02:	2302      	movs	r3, #2
 8005d04:	e104      	b.n	8005f10 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d0e:	d112      	bne.n	8005d36 <HAL_SPI_Receive+0x50>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10e      	bne.n	8005d36 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d20:	88fa      	ldrh	r2, [r7, #6]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	4613      	mov	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f8f3 	bl	8005f18 <HAL_SPI_TransmitReceive>
 8005d32:	4603      	mov	r3, r0
 8005d34:	e0ec      	b.n	8005f10 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d36:	f7fb fe23 	bl	8001980 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_SPI_Receive+0x62>
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0e1      	b.n	8005f10 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_SPI_Receive+0x74>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e0da      	b.n	8005f10 <HAL_SPI_Receive+0x22a>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2204      	movs	r2, #4
 8005d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	88fa      	ldrh	r2, [r7, #6]
 8005d7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005da8:	d10f      	bne.n	8005dca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd4:	2b40      	cmp	r3, #64	@ 0x40
 8005dd6:	d007      	beq.n	8005de8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005de6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d170      	bne.n	8005ed2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005df0:	e035      	b.n	8005e5e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d115      	bne.n	8005e2c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f103 020c 	add.w	r2, r3, #12
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0c:	7812      	ldrb	r2, [r2, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e2a:	e018      	b.n	8005e5e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e2c:	f7fb fda8 	bl	8001980 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d803      	bhi.n	8005e44 <HAL_SPI_Receive+0x15e>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e42:	d102      	bne.n	8005e4a <HAL_SPI_Receive+0x164>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e058      	b.n	8005f10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1c4      	bne.n	8005df2 <HAL_SPI_Receive+0x10c>
 8005e68:	e038      	b.n	8005edc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d113      	bne.n	8005ea0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	b292      	uxth	r2, r2
 8005e84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8a:	1c9a      	adds	r2, r3, #2
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e9e:	e018      	b.n	8005ed2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea0:	f7fb fd6e 	bl	8001980 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d803      	bhi.n	8005eb8 <HAL_SPI_Receive+0x1d2>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d102      	bne.n	8005ebe <HAL_SPI_Receive+0x1d8>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e01e      	b.n	8005f10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1c6      	bne.n	8005e6a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fa4b 	bl	800637c <SPI_EndRxTransaction>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
  }
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	@ 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f26:	2301      	movs	r3, #1
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f2a:	f7fb fd29 	bl	8001980 <HAL_GetTick>
 8005f2e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f36:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f3e:	887b      	ldrh	r3, [r7, #2]
 8005f40:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f42:	7ffb      	ldrb	r3, [r7, #31]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d00c      	beq.n	8005f62 <HAL_SPI_TransmitReceive+0x4a>
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f4e:	d106      	bne.n	8005f5e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <HAL_SPI_TransmitReceive+0x46>
 8005f58:	7ffb      	ldrb	r3, [r7, #31]
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d001      	beq.n	8005f62 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e17f      	b.n	8006262 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_SPI_TransmitReceive+0x5c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_TransmitReceive+0x5c>
 8005f6e:	887b      	ldrh	r3, [r7, #2]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e174      	b.n	8006262 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x6e>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e16d      	b.n	8006262 <HAL_SPI_TransmitReceive+0x34a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d003      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2205      	movs	r2, #5
 8005f9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	887a      	ldrh	r2, [r7, #2]
 8005fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	887a      	ldrh	r2, [r7, #2]
 8005fb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	887a      	ldrh	r2, [r7, #2]
 8005fc4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe2:	2b40      	cmp	r3, #64	@ 0x40
 8005fe4:	d007      	beq.n	8005ff6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ffe:	d17e      	bne.n	80060fe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_SPI_TransmitReceive+0xf6>
 8006008:	8afb      	ldrh	r3, [r7, #22]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d16c      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	881a      	ldrh	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	1c9a      	adds	r2, r3, #2
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006032:	e059      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b02      	cmp	r3, #2
 8006040:	d11b      	bne.n	800607a <HAL_SPI_TransmitReceive+0x162>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d016      	beq.n	800607a <HAL_SPI_TransmitReceive+0x162>
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	2b01      	cmp	r3, #1
 8006050:	d113      	bne.n	800607a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006056:	881a      	ldrh	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006062:	1c9a      	adds	r2, r3, #2
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b01      	cmp	r3, #1
 8006086:	d119      	bne.n	80060bc <HAL_SPI_TransmitReceive+0x1a4>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d014      	beq.n	80060bc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	b292      	uxth	r2, r2
 800609e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a4:	1c9a      	adds	r2, r3, #2
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060b8:	2301      	movs	r3, #1
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060bc:	f7fb fc60 	bl	8001980 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d80d      	bhi.n	80060e8 <HAL_SPI_TransmitReceive+0x1d0>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d009      	beq.n	80060e8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e0bc      	b.n	8006262 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1a0      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x11c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d19b      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x11c>
 80060fc:	e082      	b.n	8006204 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <HAL_SPI_TransmitReceive+0x1f4>
 8006106:	8afb      	ldrh	r3, [r7, #22]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d171      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006132:	e05d      	b.n	80061f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d11c      	bne.n	800617c <HAL_SPI_TransmitReceive+0x264>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d017      	beq.n	800617c <HAL_SPI_TransmitReceive+0x264>
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	2b01      	cmp	r3, #1
 8006150:	d114      	bne.n	800617c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	7812      	ldrb	r2, [r2, #0]
 800615e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b01      	cmp	r3, #1
 8006188:	d119      	bne.n	80061be <HAL_SPI_TransmitReceive+0x2a6>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d014      	beq.n	80061be <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ba:	2301      	movs	r3, #1
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061be:	f7fb fbdf 	bl	8001980 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d803      	bhi.n	80061d6 <HAL_SPI_TransmitReceive+0x2be>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d102      	bne.n	80061dc <HAL_SPI_TransmitReceive+0x2c4>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e038      	b.n	8006262 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d19c      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x21c>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d197      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006204:	6a3a      	ldr	r2, [r7, #32]
 8006206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f91d 	bl	8006448 <SPI_EndRxTxTransaction>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e01d      	b.n	8006262 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006260:	2300      	movs	r3, #0
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3728      	adds	r7, #40	@ 0x28
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	4613      	mov	r3, r2
 800627a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800627c:	f7fb fb80 	bl	8001980 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	4413      	add	r3, r2
 800628a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800628c:	f7fb fb78 	bl	8001980 <HAL_GetTick>
 8006290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006292:	4b39      	ldr	r3, [pc, #228]	@ (8006378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	015b      	lsls	r3, r3, #5
 8006298:	0d1b      	lsrs	r3, r3, #20
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	fb02 f303 	mul.w	r3, r2, r3
 80062a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a2:	e054      	b.n	800634e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062aa:	d050      	beq.n	800634e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062ac:	f7fb fb68 	bl	8001980 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d902      	bls.n	80062c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d13d      	bne.n	800633e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062da:	d111      	bne.n	8006300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e4:	d004      	beq.n	80062f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ee:	d107      	bne.n	8006300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006308:	d10f      	bne.n	800632a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e017      	b.n	800636e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	3b01      	subs	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4013      	ands	r3, r2
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	bf0c      	ite	eq
 800635e:	2301      	moveq	r3, #1
 8006360:	2300      	movne	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	429a      	cmp	r2, r3
 800636a:	d19b      	bne.n	80062a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000000 	.word	0x20000000

0800637c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006390:	d111      	bne.n	80063b6 <SPI_EndRxTransaction+0x3a>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800639a:	d004      	beq.n	80063a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a4:	d107      	bne.n	80063b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063be:	d12a      	bne.n	8006416 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c8:	d012      	beq.n	80063f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2200      	movs	r2, #0
 80063d2:	2180      	movs	r1, #128	@ 0x80
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff ff49 	bl	800626c <SPI_WaitFlagStateUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d02d      	beq.n	800643c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e4:	f043 0220 	orr.w	r2, r3, #32
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e026      	b.n	800643e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	2101      	movs	r1, #1
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff ff36 	bl	800626c <SPI_WaitFlagStateUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01a      	beq.n	800643c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e013      	b.n	800643e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2200      	movs	r2, #0
 800641e:	2101      	movs	r1, #1
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7ff ff23 	bl	800626c <SPI_WaitFlagStateUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006430:	f043 0220 	orr.w	r2, r3, #32
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e000      	b.n	800643e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2201      	movs	r2, #1
 800645c:	2102      	movs	r1, #2
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff ff04 	bl	800626c <SPI_WaitFlagStateUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646e:	f043 0220 	orr.w	r2, r3, #32
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e032      	b.n	80064e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800647a:	4b1b      	ldr	r3, [pc, #108]	@ (80064e8 <SPI_EndRxTxTransaction+0xa0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1b      	ldr	r2, [pc, #108]	@ (80064ec <SPI_EndRxTxTransaction+0xa4>)
 8006480:	fba2 2303 	umull	r2, r3, r2, r3
 8006484:	0d5b      	lsrs	r3, r3, #21
 8006486:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006498:	d112      	bne.n	80064c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2200      	movs	r2, #0
 80064a2:	2180      	movs	r1, #128	@ 0x80
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fee1 	bl	800626c <SPI_WaitFlagStateUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d016      	beq.n	80064de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b4:	f043 0220 	orr.w	r2, r3, #32
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e00f      	b.n	80064e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d6:	2b80      	cmp	r3, #128	@ 0x80
 80064d8:	d0f2      	beq.n	80064c0 <SPI_EndRxTxTransaction+0x78>
 80064da:	e000      	b.n	80064de <SPI_EndRxTxTransaction+0x96>
        break;
 80064dc:	bf00      	nop
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20000000 	.word	0x20000000
 80064ec:	165e9f81 	.word	0x165e9f81

080064f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e041      	b.n	8006586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fb f8b8 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f000 fc96 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d001      	beq.n	80065a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e03c      	b.n	8006622 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006630 <HAL_TIM_Base_Start+0xa0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_TIM_Base_Start+0x5c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c2:	d013      	beq.n	80065ec <HAL_TIM_Base_Start+0x5c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006634 <HAL_TIM_Base_Start+0xa4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_TIM_Base_Start+0x5c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a19      	ldr	r2, [pc, #100]	@ (8006638 <HAL_TIM_Base_Start+0xa8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_TIM_Base_Start+0x5c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a17      	ldr	r2, [pc, #92]	@ (800663c <HAL_TIM_Base_Start+0xac>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_TIM_Base_Start+0x5c>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a16      	ldr	r2, [pc, #88]	@ (8006640 <HAL_TIM_Base_Start+0xb0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d111      	bne.n	8006610 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d010      	beq.n	8006620 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660e:	e007      	b.n	8006620 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40010000 	.word	0x40010000
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40014000 	.word	0x40014000

08006644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d001      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e044      	b.n	80066e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1e      	ldr	r2, [pc, #120]	@ (80066f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d018      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006686:	d013      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1a      	ldr	r2, [pc, #104]	@ (80066f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00e      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a19      	ldr	r2, [pc, #100]	@ (80066fc <HAL_TIM_Base_Start_IT+0xb8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <HAL_TIM_Base_Start_IT+0xbc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a16      	ldr	r2, [pc, #88]	@ (8006704 <HAL_TIM_Base_Start_IT+0xc0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d111      	bne.n	80066d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b06      	cmp	r3, #6
 80066c0:	d010      	beq.n	80066e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f042 0201 	orr.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d2:	e007      	b.n	80066e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0201 	orr.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40014000 	.word	0x40014000

08006708 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e041      	b.n	800679e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f839 	bl	80067a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f000 fb8a 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <HAL_TIM_PWM_Start+0x24>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	e022      	b.n	8006826 <HAL_TIM_PWM_Start+0x6a>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d109      	bne.n	80067fa <HAL_TIM_PWM_Start+0x3e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	bf14      	ite	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	2300      	moveq	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	e015      	b.n	8006826 <HAL_TIM_PWM_Start+0x6a>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d109      	bne.n	8006814 <HAL_TIM_PWM_Start+0x58>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b01      	cmp	r3, #1
 800680a:	bf14      	ite	ne
 800680c:	2301      	movne	r3, #1
 800680e:	2300      	moveq	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	e008      	b.n	8006826 <HAL_TIM_PWM_Start+0x6a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e068      	b.n	8006900 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <HAL_TIM_PWM_Start+0x82>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800683c:	e013      	b.n	8006866 <HAL_TIM_PWM_Start+0xaa>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d104      	bne.n	800684e <HAL_TIM_PWM_Start+0x92>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800684c:	e00b      	b.n	8006866 <HAL_TIM_PWM_Start+0xaa>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b08      	cmp	r3, #8
 8006852:	d104      	bne.n	800685e <HAL_TIM_PWM_Start+0xa2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800685c:	e003      	b.n	8006866 <HAL_TIM_PWM_Start+0xaa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2201      	movs	r2, #1
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fda8 	bl	80073c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a23      	ldr	r2, [pc, #140]	@ (8006908 <HAL_TIM_PWM_Start+0x14c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d107      	bne.n	800688e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800688c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1d      	ldr	r2, [pc, #116]	@ (8006908 <HAL_TIM_PWM_Start+0x14c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d018      	beq.n	80068ca <HAL_TIM_PWM_Start+0x10e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a0:	d013      	beq.n	80068ca <HAL_TIM_PWM_Start+0x10e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a19      	ldr	r2, [pc, #100]	@ (800690c <HAL_TIM_PWM_Start+0x150>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <HAL_TIM_PWM_Start+0x10e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a17      	ldr	r2, [pc, #92]	@ (8006910 <HAL_TIM_PWM_Start+0x154>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_TIM_PWM_Start+0x10e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a16      	ldr	r2, [pc, #88]	@ (8006914 <HAL_TIM_PWM_Start+0x158>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_TIM_PWM_Start+0x10e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a14      	ldr	r2, [pc, #80]	@ (8006918 <HAL_TIM_PWM_Start+0x15c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d111      	bne.n	80068ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d010      	beq.n	80068fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ec:	e007      	b.n	80068fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40010000 	.word	0x40010000
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40000c00 	.word	0x40000c00
 8006918:	40014000 	.word	0x40014000

0800691c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d020      	beq.n	8006980 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0202 	mvn.w	r2, #2
 8006950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa5b 	bl	8006e22 <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa4d 	bl	8006e0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa5e 	bl	8006e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d020      	beq.n	80069cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0204 	mvn.w	r2, #4
 800699c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa35 	bl	8006e22 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa27 	bl	8006e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa38 	bl	8006e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d020      	beq.n	8006a18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01b      	beq.n	8006a18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0208 	mvn.w	r2, #8
 80069e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2204      	movs	r2, #4
 80069ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa0f 	bl	8006e22 <HAL_TIM_IC_CaptureCallback>
 8006a04:	e005      	b.n	8006a12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa01 	bl	8006e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa12 	bl	8006e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d020      	beq.n	8006a64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01b      	beq.n	8006a64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0210 	mvn.w	r2, #16
 8006a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2208      	movs	r2, #8
 8006a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9e9 	bl	8006e22 <HAL_TIM_IC_CaptureCallback>
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9db 	bl	8006e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9ec 	bl	8006e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d007      	beq.n	8006a88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0201 	mvn.w	r2, #1
 8006a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fa fc64 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00c      	beq.n	8006aac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fd2a 	bl	8007500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00c      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f9bd 	bl	8006e4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00c      	beq.n	8006af4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0220 	mvn.w	r2, #32
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fcfc 	bl	80074ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e0ae      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b0c      	cmp	r3, #12
 8006b26:	f200 809f 	bhi.w	8006c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006c69 	.word	0x08006c69
 8006b38:	08006c69 	.word	0x08006c69
 8006b3c:	08006c69 	.word	0x08006c69
 8006b40:	08006ba5 	.word	0x08006ba5
 8006b44:	08006c69 	.word	0x08006c69
 8006b48:	08006c69 	.word	0x08006c69
 8006b4c:	08006c69 	.word	0x08006c69
 8006b50:	08006be7 	.word	0x08006be7
 8006b54:	08006c69 	.word	0x08006c69
 8006b58:	08006c69 	.word	0x08006c69
 8006b5c:	08006c69 	.word	0x08006c69
 8006b60:	08006c27 	.word	0x08006c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fa04 	bl	8006f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0208 	orr.w	r2, r2, #8
 8006b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0204 	bic.w	r2, r2, #4
 8006b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6999      	ldr	r1, [r3, #24]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	619a      	str	r2, [r3, #24]
      break;
 8006ba2:	e064      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fa4a 	bl	8007044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6999      	ldr	r1, [r3, #24]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	021a      	lsls	r2, r3, #8
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	619a      	str	r2, [r3, #24]
      break;
 8006be4:	e043      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fa95 	bl	800711c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0208 	orr.w	r2, r2, #8
 8006c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0204 	bic.w	r2, r2, #4
 8006c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69d9      	ldr	r1, [r3, #28]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	61da      	str	r2, [r3, #28]
      break;
 8006c24:	e023      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fadf 	bl	80071f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69d9      	ldr	r1, [r3, #28]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	021a      	lsls	r2, r3, #8
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	61da      	str	r2, [r3, #28]
      break;
 8006c66:	e002      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_ConfigClockSource+0x1c>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e0b4      	b.n	8006e06 <HAL_TIM_ConfigClockSource+0x186>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd4:	d03e      	beq.n	8006d54 <HAL_TIM_ConfigClockSource+0xd4>
 8006cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cda:	f200 8087 	bhi.w	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce2:	f000 8086 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x172>
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cea:	d87f      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006cec:	2b70      	cmp	r3, #112	@ 0x70
 8006cee:	d01a      	beq.n	8006d26 <HAL_TIM_ConfigClockSource+0xa6>
 8006cf0:	2b70      	cmp	r3, #112	@ 0x70
 8006cf2:	d87b      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006cf4:	2b60      	cmp	r3, #96	@ 0x60
 8006cf6:	d050      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x11a>
 8006cf8:	2b60      	cmp	r3, #96	@ 0x60
 8006cfa:	d877      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006cfc:	2b50      	cmp	r3, #80	@ 0x50
 8006cfe:	d03c      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0xfa>
 8006d00:	2b50      	cmp	r3, #80	@ 0x50
 8006d02:	d873      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006d04:	2b40      	cmp	r3, #64	@ 0x40
 8006d06:	d058      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x13a>
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	d86f      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006d0c:	2b30      	cmp	r3, #48	@ 0x30
 8006d0e:	d064      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x15a>
 8006d10:	2b30      	cmp	r3, #48	@ 0x30
 8006d12:	d86b      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d060      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x15a>
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d867      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d05c      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x15a>
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d05a      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x15a>
 8006d24:	e062      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d36:	f000 fb25 	bl	8007384 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	609a      	str	r2, [r3, #8]
      break;
 8006d52:	e04f      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d64:	f000 fb0e 	bl	8007384 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d76:	609a      	str	r2, [r3, #8]
      break;
 8006d78:	e03c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d86:	461a      	mov	r2, r3
 8006d88:	f000 fa82 	bl	8007290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2150      	movs	r1, #80	@ 0x50
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fadb 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 8006d98:	e02c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da6:	461a      	mov	r2, r3
 8006da8:	f000 faa1 	bl	80072ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2160      	movs	r1, #96	@ 0x60
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 facb 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 8006db8:	e01c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f000 fa62 	bl	8007290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2140      	movs	r1, #64	@ 0x40
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fabb 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 8006dd8:	e00c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f000 fab2 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 8006dea:	e003      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
      break;
 8006df0:	e000      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
	...

08006e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a3a      	ldr	r2, [pc, #232]	@ (8006f5c <TIM_Base_SetConfig+0xfc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00f      	beq.n	8006e98 <TIM_Base_SetConfig+0x38>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7e:	d00b      	beq.n	8006e98 <TIM_Base_SetConfig+0x38>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a37      	ldr	r2, [pc, #220]	@ (8006f60 <TIM_Base_SetConfig+0x100>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_Base_SetConfig+0x38>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a36      	ldr	r2, [pc, #216]	@ (8006f64 <TIM_Base_SetConfig+0x104>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_Base_SetConfig+0x38>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a35      	ldr	r2, [pc, #212]	@ (8006f68 <TIM_Base_SetConfig+0x108>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d108      	bne.n	8006eaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2b      	ldr	r2, [pc, #172]	@ (8006f5c <TIM_Base_SetConfig+0xfc>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01b      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb8:	d017      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a28      	ldr	r2, [pc, #160]	@ (8006f60 <TIM_Base_SetConfig+0x100>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a27      	ldr	r2, [pc, #156]	@ (8006f64 <TIM_Base_SetConfig+0x104>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a26      	ldr	r2, [pc, #152]	@ (8006f68 <TIM_Base_SetConfig+0x108>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a25      	ldr	r2, [pc, #148]	@ (8006f6c <TIM_Base_SetConfig+0x10c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a24      	ldr	r2, [pc, #144]	@ (8006f70 <TIM_Base_SetConfig+0x110>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_Base_SetConfig+0x8a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a23      	ldr	r2, [pc, #140]	@ (8006f74 <TIM_Base_SetConfig+0x114>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d108      	bne.n	8006efc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a0e      	ldr	r2, [pc, #56]	@ (8006f5c <TIM_Base_SetConfig+0xfc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d103      	bne.n	8006f30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d105      	bne.n	8006f4e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f023 0201 	bic.w	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	611a      	str	r2, [r3, #16]
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800

08006f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f023 0201 	bic.w	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0303 	bic.w	r3, r3, #3
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f023 0302 	bic.w	r3, r3, #2
 8006fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a1c      	ldr	r2, [pc, #112]	@ (8007040 <TIM_OC1_SetConfig+0xc8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10c      	bne.n	8006fee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0308 	bic.w	r3, r3, #8
 8006fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a13      	ldr	r2, [pc, #76]	@ (8007040 <TIM_OC1_SetConfig+0xc8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d111      	bne.n	800701a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	621a      	str	r2, [r3, #32]
}
 8007034:	bf00      	nop
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	40010000 	.word	0x40010000

08007044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	f023 0210 	bic.w	r2, r3, #16
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800707a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f023 0320 	bic.w	r3, r3, #32
 800708e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a1e      	ldr	r2, [pc, #120]	@ (8007118 <TIM_OC2_SetConfig+0xd4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d10d      	bne.n	80070c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a15      	ldr	r2, [pc, #84]	@ (8007118 <TIM_OC2_SetConfig+0xd4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d113      	bne.n	80070f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	bf00      	nop
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40010000 	.word	0x40010000

0800711c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a1d      	ldr	r2, [pc, #116]	@ (80071ec <TIM_OC3_SetConfig+0xd0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d10d      	bne.n	8007196 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a14      	ldr	r2, [pc, #80]	@ (80071ec <TIM_OC3_SetConfig+0xd0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d113      	bne.n	80071c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	621a      	str	r2, [r3, #32]
}
 80071e0:	bf00      	nop
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	40010000 	.word	0x40010000

080071f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800721e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800723a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	031b      	lsls	r3, r3, #12
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a10      	ldr	r2, [pc, #64]	@ (800728c <TIM_OC4_SetConfig+0x9c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d109      	bne.n	8007264 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	019b      	lsls	r3, r3, #6
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	4313      	orrs	r3, r2
 8007262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40010000 	.word	0x40010000

08007290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f023 0201 	bic.w	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f023 030a 	bic.w	r3, r3, #10
 80072cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b087      	sub	sp, #28
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	f023 0210 	bic.w	r2, r3, #16
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	031b      	lsls	r3, r3, #12
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800732a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	f043 0307 	orr.w	r3, r3, #7
 8007370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	609a      	str	r2, [r3, #8]
}
 8007378:	bf00      	nop
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800739e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	021a      	lsls	r2, r3, #8
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	431a      	orrs	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	609a      	str	r2, [r3, #8]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	2201      	movs	r2, #1
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1a      	ldr	r2, [r3, #32]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	43db      	mvns	r3, r3
 80073e6:	401a      	ands	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a1a      	ldr	r2, [r3, #32]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f003 031f 	and.w	r3, r3, #31
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	fa01 f303 	lsl.w	r3, r1, r3
 80073fc:	431a      	orrs	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
	...

08007410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007420:	2b01      	cmp	r3, #1
 8007422:	d101      	bne.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007424:	2302      	movs	r3, #2
 8007426:	e050      	b.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1c      	ldr	r2, [pc, #112]	@ (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d018      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007474:	d013      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a18      	ldr	r2, [pc, #96]	@ (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a16      	ldr	r2, [pc, #88]	@ (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a15      	ldr	r2, [pc, #84]	@ (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a13      	ldr	r2, [pc, #76]	@ (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10c      	bne.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800
 80074e4:	40000c00 	.word	0x40000c00
 80074e8:	40014000 	.word	0x40014000

080074ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007514:	b084      	sub	sp, #16
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	f107 001c 	add.w	r0, r7, #28
 8007522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007526:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800752a:	2b01      	cmp	r3, #1
 800752c:	d123      	bne.n	8007576 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007532:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007556:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800755a:	2b01      	cmp	r3, #1
 800755c:	d105      	bne.n	800756a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fae8 	bl	8008b40 <USB_CoreReset>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
 8007574:	e01b      	b.n	80075ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fadc 	bl	8008b40 <USB_CoreReset>
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800758c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007598:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	639a      	str	r2, [r3, #56]	@ 0x38
 80075a0:	e005      	b.n	80075ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075ae:	7fbb      	ldrb	r3, [r7, #30]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d10b      	bne.n	80075cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f043 0206 	orr.w	r2, r3, #6
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f043 0220 	orr.w	r2, r3, #32
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075d8:	b004      	add	sp, #16
 80075da:	4770      	bx	lr

080075dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d165      	bne.n	80076bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	4a41      	ldr	r2, [pc, #260]	@ (80076f8 <USB_SetTurnaroundTime+0x11c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d906      	bls.n	8007606 <USB_SetTurnaroundTime+0x2a>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4a40      	ldr	r2, [pc, #256]	@ (80076fc <USB_SetTurnaroundTime+0x120>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d202      	bcs.n	8007606 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007600:	230f      	movs	r3, #15
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e062      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4a3c      	ldr	r2, [pc, #240]	@ (80076fc <USB_SetTurnaroundTime+0x120>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d306      	bcc.n	800761c <USB_SetTurnaroundTime+0x40>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4a3b      	ldr	r2, [pc, #236]	@ (8007700 <USB_SetTurnaroundTime+0x124>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d202      	bcs.n	800761c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007616:	230e      	movs	r3, #14
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	e057      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4a38      	ldr	r2, [pc, #224]	@ (8007700 <USB_SetTurnaroundTime+0x124>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d306      	bcc.n	8007632 <USB_SetTurnaroundTime+0x56>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a37      	ldr	r2, [pc, #220]	@ (8007704 <USB_SetTurnaroundTime+0x128>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d202      	bcs.n	8007632 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800762c:	230d      	movs	r3, #13
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e04c      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4a33      	ldr	r2, [pc, #204]	@ (8007704 <USB_SetTurnaroundTime+0x128>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d306      	bcc.n	8007648 <USB_SetTurnaroundTime+0x6c>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4a32      	ldr	r2, [pc, #200]	@ (8007708 <USB_SetTurnaroundTime+0x12c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d802      	bhi.n	8007648 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007642:	230c      	movs	r3, #12
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	e041      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4a2f      	ldr	r2, [pc, #188]	@ (8007708 <USB_SetTurnaroundTime+0x12c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d906      	bls.n	800765e <USB_SetTurnaroundTime+0x82>
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4a2e      	ldr	r2, [pc, #184]	@ (800770c <USB_SetTurnaroundTime+0x130>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d802      	bhi.n	800765e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007658:	230b      	movs	r3, #11
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	e036      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	4a2a      	ldr	r2, [pc, #168]	@ (800770c <USB_SetTurnaroundTime+0x130>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d906      	bls.n	8007674 <USB_SetTurnaroundTime+0x98>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4a29      	ldr	r2, [pc, #164]	@ (8007710 <USB_SetTurnaroundTime+0x134>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d802      	bhi.n	8007674 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800766e:	230a      	movs	r3, #10
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	e02b      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4a26      	ldr	r2, [pc, #152]	@ (8007710 <USB_SetTurnaroundTime+0x134>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d906      	bls.n	800768a <USB_SetTurnaroundTime+0xae>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4a25      	ldr	r2, [pc, #148]	@ (8007714 <USB_SetTurnaroundTime+0x138>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d202      	bcs.n	800768a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007684:	2309      	movs	r3, #9
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e020      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4a21      	ldr	r2, [pc, #132]	@ (8007714 <USB_SetTurnaroundTime+0x138>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d306      	bcc.n	80076a0 <USB_SetTurnaroundTime+0xc4>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4a20      	ldr	r2, [pc, #128]	@ (8007718 <USB_SetTurnaroundTime+0x13c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d802      	bhi.n	80076a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800769a:	2308      	movs	r3, #8
 800769c:	617b      	str	r3, [r7, #20]
 800769e:	e015      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007718 <USB_SetTurnaroundTime+0x13c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d906      	bls.n	80076b6 <USB_SetTurnaroundTime+0xda>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4a1c      	ldr	r2, [pc, #112]	@ (800771c <USB_SetTurnaroundTime+0x140>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d202      	bcs.n	80076b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80076b0:	2307      	movs	r3, #7
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	e00a      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80076b6:	2306      	movs	r3, #6
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	e007      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80076c2:	2309      	movs	r3, #9
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	e001      	b.n	80076cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80076c8:	2309      	movs	r3, #9
 80076ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	029b      	lsls	r3, r3, #10
 80076e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80076e4:	431a      	orrs	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	371c      	adds	r7, #28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	00d8acbf 	.word	0x00d8acbf
 80076fc:	00e4e1c0 	.word	0x00e4e1c0
 8007700:	00f42400 	.word	0x00f42400
 8007704:	01067380 	.word	0x01067380
 8007708:	011a499f 	.word	0x011a499f
 800770c:	01312cff 	.word	0x01312cff
 8007710:	014ca43f 	.word	0x014ca43f
 8007714:	016e3600 	.word	0x016e3600
 8007718:	01a6ab1f 	.word	0x01a6ab1f
 800771c:	01e84800 	.word	0x01e84800

08007720 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f043 0201 	orr.w	r2, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f023 0201 	bic.w	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d115      	bne.n	80077b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007792:	200a      	movs	r0, #10
 8007794:	f7fa f900 	bl	8001998 <HAL_Delay>
      ms += 10U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	330a      	adds	r3, #10
 800779c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 f93f 	bl	8008a22 <USB_GetMode>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d01e      	beq.n	80077e8 <USB_SetCurrentMode+0x84>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80077ae:	d9f0      	bls.n	8007792 <USB_SetCurrentMode+0x2e>
 80077b0:	e01a      	b.n	80077e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d115      	bne.n	80077e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077c4:	200a      	movs	r0, #10
 80077c6:	f7fa f8e7 	bl	8001998 <HAL_Delay>
      ms += 10U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	330a      	adds	r3, #10
 80077ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f926 	bl	8008a22 <USB_GetMode>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <USB_SetCurrentMode+0x84>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2bc7      	cmp	r3, #199	@ 0xc7
 80077e0:	d9f0      	bls.n	80077c4 <USB_SetCurrentMode+0x60>
 80077e2:	e001      	b.n	80077e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e005      	b.n	80077f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80077ec:	d101      	bne.n	80077f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077fc:	b084      	sub	sp, #16
 80077fe:	b580      	push	{r7, lr}
 8007800:	b086      	sub	sp, #24
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800780a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007816:	2300      	movs	r3, #0
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	e009      	b.n	8007830 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3340      	adds	r3, #64	@ 0x40
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	2200      	movs	r2, #0
 8007828:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	3301      	adds	r3, #1
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2b0e      	cmp	r3, #14
 8007834:	d9f2      	bls.n	800781c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007836:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11c      	bne.n	8007878 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800784c:	f043 0302 	orr.w	r3, r3, #2
 8007850:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007856:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007862:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	639a      	str	r2, [r3, #56]	@ 0x38
 8007876:	e00b      	b.n	8007890 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007896:	461a      	mov	r2, r3
 8007898:	2300      	movs	r3, #0
 800789a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800789c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d10d      	bne.n	80078c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078ac:	2100      	movs	r1, #0
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f968 	bl	8007b84 <USB_SetDevSpeed>
 80078b4:	e008      	b.n	80078c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078b6:	2101      	movs	r1, #1
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f963 	bl	8007b84 <USB_SetDevSpeed>
 80078be:	e003      	b.n	80078c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078c0:	2103      	movs	r1, #3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f95e 	bl	8007b84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078c8:	2110      	movs	r1, #16
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8fa 	bl	8007ac4 <USB_FlushTxFifo>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f924 	bl	8007b28 <USB_FlushRxFifo>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f0:	461a      	mov	r2, r3
 80078f2:	2300      	movs	r3, #0
 80078f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078fc:	461a      	mov	r2, r3
 80078fe:	2300      	movs	r3, #0
 8007900:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007908:	461a      	mov	r2, r3
 800790a:	2300      	movs	r3, #0
 800790c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	e043      	b.n	800799c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007926:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800792a:	d118      	bne.n	800795e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793e:	461a      	mov	r2, r3
 8007940:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	e013      	b.n	8007970 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007954:	461a      	mov	r2, r3
 8007956:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	e008      	b.n	8007970 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796a:	461a      	mov	r2, r3
 800796c:	2300      	movs	r3, #0
 800796e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800797c:	461a      	mov	r2, r3
 800797e:	2300      	movs	r3, #0
 8007980:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800798e:	461a      	mov	r2, r3
 8007990:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007994:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	3301      	adds	r3, #1
 800799a:	613b      	str	r3, [r7, #16]
 800799c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079a0:	461a      	mov	r2, r3
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d3b5      	bcc.n	8007914 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	e043      	b.n	8007a36 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079c4:	d118      	bne.n	80079f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d8:	461a      	mov	r2, r3
 80079da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	e013      	b.n	8007a0a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ee:	461a      	mov	r2, r3
 80079f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	e008      	b.n	8007a0a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a04:	461a      	mov	r2, r3
 8007a06:	2300      	movs	r3, #0
 8007a08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a16:	461a      	mov	r2, r3
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	3301      	adds	r3, #1
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d3b5      	bcc.n	80079ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d105      	bne.n	8007a78 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	f043 0210 	orr.w	r2, r3, #16
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699a      	ldr	r2, [r3, #24]
 8007a7c:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <USB_DevInit+0x2c4>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	f043 0208 	orr.w	r2, r3, #8
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d107      	bne.n	8007ab0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aa8:	f043 0304 	orr.w	r3, r3, #4
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007abc:	b004      	add	sp, #16
 8007abe:	4770      	bx	lr
 8007ac0:	803c3800 	.word	0x803c3800

08007ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ade:	d901      	bls.n	8007ae4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e01b      	b.n	8007b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	daf2      	bge.n	8007ad2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	019b      	lsls	r3, r3, #6
 8007af4:	f043 0220 	orr.w	r2, r3, #32
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b08:	d901      	bls.n	8007b0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e006      	b.n	8007b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d0f0      	beq.n	8007afc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3301      	adds	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b40:	d901      	bls.n	8007b46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e018      	b.n	8007b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	daf2      	bge.n	8007b34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2210      	movs	r2, #16
 8007b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b64:	d901      	bls.n	8007b6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e006      	b.n	8007b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	f003 0310 	and.w	r3, r3, #16
 8007b72:	2b10      	cmp	r3, #16
 8007b74:	d0f0      	beq.n	8007b58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b087      	sub	sp, #28
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f003 0306 	and.w	r3, r3, #6
 8007bce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d102      	bne.n	8007bdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]
 8007bda:	e00a      	b.n	8007bf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d002      	beq.n	8007be8 <USB_GetDevSpeed+0x32>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b06      	cmp	r3, #6
 8007be6:	d102      	bne.n	8007bee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007be8:	2302      	movs	r3, #2
 8007bea:	75fb      	strb	r3, [r7, #23]
 8007bec:	e001      	b.n	8007bf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007bee:	230f      	movs	r3, #15
 8007bf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d13a      	bne.n	8007c92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	68f9      	ldr	r1, [r7, #12]
 8007c36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d155      	bne.n	8007d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	791b      	ldrb	r3, [r3, #4]
 8007c6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	059b      	lsls	r3, r3, #22
 8007c76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	e036      	b.n	8007d00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c98:	69da      	ldr	r2, [r3, #28]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	68f9      	ldr	r1, [r7, #12]
 8007cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d11a      	bne.n	8007d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	791b      	ldrb	r3, [r3, #4]
 8007ce4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ce6:	430b      	orrs	r3, r1
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d161      	bne.n	8007df0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d42:	d11f      	bne.n	8007d84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	0151      	lsls	r1, r2, #5
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	440a      	add	r2, r1
 8007d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	2101      	movs	r1, #1
 8007d96:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007da4:	4013      	ands	r3, r2
 8007da6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 030f 	and.w	r3, r3, #15
 8007db8:	2101      	movs	r1, #1
 8007dba:	fa01 f303 	lsl.w	r3, r1, r3
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dc8:	4013      	ands	r3, r2
 8007dca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	0159      	lsls	r1, r3, #5
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	440b      	add	r3, r1
 8007de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007de6:	4619      	mov	r1, r3
 8007de8:	4b35      	ldr	r3, [pc, #212]	@ (8007ec0 <USB_DeactivateEndpoint+0x1b0>)
 8007dea:	4013      	ands	r3, r2
 8007dec:	600b      	str	r3, [r1, #0]
 8007dee:	e060      	b.n	8007eb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e06:	d11f      	bne.n	8007e48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	0151      	lsls	r1, r2, #5
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	440a      	add	r2, r1
 8007e1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	0151      	lsls	r1, r2, #5
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	2101      	movs	r1, #1
 8007e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e5e:	041b      	lsls	r3, r3, #16
 8007e60:	43db      	mvns	r3, r3
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e68:	4013      	ands	r3, r2
 8007e6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e82:	041b      	lsls	r3, r3, #16
 8007e84:	43db      	mvns	r3, r3
 8007e86:	68f9      	ldr	r1, [r7, #12]
 8007e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	0159      	lsls	r1, r3, #5
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	440b      	add	r3, r1
 8007ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4b05      	ldr	r3, [pc, #20]	@ (8007ec4 <USB_DeactivateEndpoint+0x1b4>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	ec337800 	.word	0xec337800
 8007ec4:	eff37800 	.word	0xeff37800

08007ec8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	@ 0x28
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	f040 817f 	bne.w	80081e8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d132      	bne.n	8007f58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	0151      	lsls	r1, r2, #5
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	440a      	add	r2, r1
 8007f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f50:	0cdb      	lsrs	r3, r3, #19
 8007f52:	04db      	lsls	r3, r3, #19
 8007f54:	6113      	str	r3, [r2, #16]
 8007f56:	e097      	b.n	8008088 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	0151      	lsls	r1, r2, #5
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f72:	0cdb      	lsrs	r3, r3, #19
 8007f74:	04db      	lsls	r3, r3, #19
 8007f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d11a      	bne.n	8007fd8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691a      	ldr	r2, [r3, #16]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d903      	bls.n	8007fb6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fd4:	6113      	str	r3, [r2, #16]
 8007fd6:	e044      	b.n	8008062 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	1e5a      	subs	r2, r3, #1
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	8afb      	ldrh	r3, [r7, #22]
 8007ffe:	04d9      	lsls	r1, r3, #19
 8008000:	4ba4      	ldr	r3, [pc, #656]	@ (8008294 <USB_EPStartXfer+0x3cc>)
 8008002:	400b      	ands	r3, r1
 8008004:	69b9      	ldr	r1, [r7, #24]
 8008006:	0148      	lsls	r0, r1, #5
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	4401      	add	r1, r0
 800800c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008010:	4313      	orrs	r3, r2
 8008012:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	791b      	ldrb	r3, [r3, #4]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d122      	bne.n	8008062 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	0151      	lsls	r1, r2, #5
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	440a      	add	r2, r1
 8008032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008036:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800803a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008048:	691a      	ldr	r2, [r3, #16]
 800804a:	8afb      	ldrh	r3, [r7, #22]
 800804c:	075b      	lsls	r3, r3, #29
 800804e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008052:	69b9      	ldr	r1, [r7, #24]
 8008054:	0148      	lsls	r0, r1, #5
 8008056:	69f9      	ldr	r1, [r7, #28]
 8008058:	4401      	add	r1, r0
 800805a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800805e:	4313      	orrs	r3, r2
 8008060:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800806e:	691a      	ldr	r2, [r3, #16]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008078:	69b9      	ldr	r1, [r7, #24]
 800807a:	0148      	lsls	r0, r1, #5
 800807c:	69f9      	ldr	r1, [r7, #28]
 800807e:	4401      	add	r1, r0
 8008080:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008084:	4313      	orrs	r3, r2
 8008086:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d14b      	bne.n	8008126 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a2:	461a      	mov	r2, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	791b      	ldrb	r3, [r3, #4]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d128      	bne.n	8008104 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d110      	bne.n	80080e4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	e00f      	b.n	8008104 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	0151      	lsls	r1, r2, #5
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	440a      	add	r2, r1
 80080fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008102:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	69fa      	ldr	r2, [r7, #28]
 8008118:	440a      	add	r2, r1
 800811a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800811e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	e166      	b.n	80083f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	69fa      	ldr	r2, [r7, #28]
 800813a:	440a      	add	r2, r1
 800813c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008140:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008144:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	791b      	ldrb	r3, [r3, #4]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d015      	beq.n	800817a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 814e 	beq.w	80083f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800815e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	f003 030f 	and.w	r3, r3, #15
 8008168:	2101      	movs	r1, #1
 800816a:	fa01 f303 	lsl.w	r3, r1, r3
 800816e:	69f9      	ldr	r1, [r7, #28]
 8008170:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008174:	4313      	orrs	r3, r2
 8008176:	634b      	str	r3, [r1, #52]	@ 0x34
 8008178:	e13c      	b.n	80083f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008186:	2b00      	cmp	r3, #0
 8008188:	d110      	bne.n	80081ac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	e00f      	b.n	80081cc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081ca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	68d9      	ldr	r1, [r3, #12]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	781a      	ldrb	r2, [r3, #0]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	b298      	uxth	r0, r3
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	4603      	mov	r3, r0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f9b9 	bl	8008558 <USB_WritePacket>
 80081e6:	e105      	b.n	80083f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008202:	0cdb      	lsrs	r3, r3, #19
 8008204:	04db      	lsls	r3, r3, #19
 8008206:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008222:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008226:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800822a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d132      	bne.n	8008298 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	0148      	lsls	r0, r1, #5
 8008264:	69f9      	ldr	r1, [r7, #28]
 8008266:	4401      	add	r1, r0
 8008268:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800826c:	4313      	orrs	r3, r2
 800826e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	440a      	add	r2, r1
 8008286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800828a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800828e:	6113      	str	r3, [r2, #16]
 8008290:	e062      	b.n	8008358 <USB_EPStartXfer+0x490>
 8008292:	bf00      	nop
 8008294:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d123      	bne.n	80082e8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b6:	69b9      	ldr	r1, [r7, #24]
 80082b8:	0148      	lsls	r0, r1, #5
 80082ba:	69f9      	ldr	r1, [r7, #28]
 80082bc:	4401      	add	r1, r0
 80082be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082c2:	4313      	orrs	r3, r2
 80082c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	0151      	lsls	r1, r2, #5
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	440a      	add	r2, r1
 80082dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082e4:	6113      	str	r3, [r2, #16]
 80082e6:	e037      	b.n	8008358 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	1e5a      	subs	r2, r3, #1
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	8afa      	ldrh	r2, [r7, #22]
 8008304:	fb03 f202 	mul.w	r2, r3, r2
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	8afb      	ldrh	r3, [r7, #22]
 800831c:	04d9      	lsls	r1, r3, #19
 800831e:	4b38      	ldr	r3, [pc, #224]	@ (8008400 <USB_EPStartXfer+0x538>)
 8008320:	400b      	ands	r3, r1
 8008322:	69b9      	ldr	r1, [r7, #24]
 8008324:	0148      	lsls	r0, r1, #5
 8008326:	69f9      	ldr	r1, [r7, #28]
 8008328:	4401      	add	r1, r0
 800832a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800832e:	4313      	orrs	r3, r2
 8008330:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833e:	691a      	ldr	r2, [r3, #16]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008348:	69b9      	ldr	r1, [r7, #24]
 800834a:	0148      	lsls	r0, r1, #5
 800834c:	69f9      	ldr	r1, [r7, #28]
 800834e:	4401      	add	r1, r0
 8008350:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008354:	4313      	orrs	r3, r2
 8008356:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10d      	bne.n	800837a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	68d9      	ldr	r1, [r3, #12]
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008376:	460a      	mov	r2, r1
 8008378:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d128      	bne.n	80083d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800838e:	2b00      	cmp	r3, #0
 8008390:	d110      	bne.n	80083b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	0151      	lsls	r1, r2, #5
 80083a4:	69fa      	ldr	r2, [r7, #28]
 80083a6:	440a      	add	r2, r1
 80083a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	e00f      	b.n	80083d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	0151      	lsls	r1, r2, #5
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	440a      	add	r2, r1
 80083ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	0151      	lsls	r1, r2, #5
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	440a      	add	r2, r1
 80083ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	1ff80000 	.word	0x1ff80000

08008404 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d14a      	bne.n	80084b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800843a:	f040 8086 	bne.w	800854a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	440a      	add	r2, r1
 8008458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800845c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008460:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	7812      	ldrb	r2, [r2, #0]
 8008476:	0151      	lsls	r1, r2, #5
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	440a      	add	r2, r1
 800847c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008480:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008484:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3301      	adds	r3, #1
 800848a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008492:	4293      	cmp	r3, r2
 8008494:	d902      	bls.n	800849c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	75fb      	strb	r3, [r7, #23]
          break;
 800849a:	e056      	b.n	800854a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084b4:	d0e7      	beq.n	8008486 <USB_EPStopXfer+0x82>
 80084b6:	e048      	b.n	800854a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084d0:	d13b      	bne.n	800854a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	7812      	ldrb	r2, [r2, #0]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	7812      	ldrb	r2, [r2, #0]
 800850a:	0151      	lsls	r1, r2, #5
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	440a      	add	r2, r1
 8008510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008514:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008518:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008526:	4293      	cmp	r3, r2
 8008528:	d902      	bls.n	8008530 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	75fb      	strb	r3, [r7, #23]
          break;
 800852e:	e00c      	b.n	800854a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008548:	d0e7      	beq.n	800851a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
}
 800854c:	4618      	mov	r0, r3
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008558:	b480      	push	{r7}
 800855a:	b089      	sub	sp, #36	@ 0x24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4611      	mov	r1, r2
 8008564:	461a      	mov	r2, r3
 8008566:	460b      	mov	r3, r1
 8008568:	71fb      	strb	r3, [r7, #7]
 800856a:	4613      	mov	r3, r2
 800856c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008576:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800857a:	2b00      	cmp	r3, #0
 800857c:	d123      	bne.n	80085c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800857e:	88bb      	ldrh	r3, [r7, #4]
 8008580:	3303      	adds	r3, #3
 8008582:	089b      	lsrs	r3, r3, #2
 8008584:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008586:	2300      	movs	r3, #0
 8008588:	61bb      	str	r3, [r7, #24]
 800858a:	e018      	b.n	80085be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	031a      	lsls	r2, r3, #12
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	4413      	add	r3, r2
 8008594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008598:	461a      	mov	r2, r3
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	3301      	adds	r3, #1
 80085a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3301      	adds	r3, #1
 80085aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	3301      	adds	r3, #1
 80085b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	3301      	adds	r3, #1
 80085bc:	61bb      	str	r3, [r7, #24]
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d3e2      	bcc.n	800858c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3724      	adds	r7, #36	@ 0x24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b08b      	sub	sp, #44	@ 0x2c
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80085ea:	88fb      	ldrh	r3, [r7, #6]
 80085ec:	089b      	lsrs	r3, r3, #2
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085fa:	2300      	movs	r3, #0
 80085fc:	623b      	str	r3, [r7, #32]
 80085fe:	e014      	b.n	800862a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	601a      	str	r2, [r3, #0]
    pDest++;
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	3301      	adds	r3, #1
 8008610:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	3301      	adds	r3, #1
 8008616:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861a:	3301      	adds	r3, #1
 800861c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	3301      	adds	r3, #1
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	3301      	adds	r3, #1
 8008628:	623b      	str	r3, [r7, #32]
 800862a:	6a3a      	ldr	r2, [r7, #32]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	429a      	cmp	r2, r3
 8008630:	d3e6      	bcc.n	8008600 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008632:	8bfb      	ldrh	r3, [r7, #30]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01e      	beq.n	8008676 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008642:	461a      	mov	r2, r3
 8008644:	f107 0310 	add.w	r3, r7, #16
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
 8008658:	b2da      	uxtb	r2, r3
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	701a      	strb	r2, [r3, #0]
      i++;
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	3301      	adds	r3, #1
 8008662:	623b      	str	r3, [r7, #32]
      pDest++;
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008666:	3301      	adds	r3, #1
 8008668:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800866a:	8bfb      	ldrh	r3, [r7, #30]
 800866c:	3b01      	subs	r3, #1
 800866e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008670:	8bfb      	ldrh	r3, [r7, #30]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1ea      	bne.n	800864c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008678:	4618      	mov	r0, r3
 800867a:	372c      	adds	r7, #44	@ 0x2c
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d12c      	bne.n	80086fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	db12      	blt.n	80086d8 <USB_EPSetStall+0x54>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00f      	beq.n	80086d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	0151      	lsls	r1, r2, #5
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	440a      	add	r2, r1
 80086ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086f6:	6013      	str	r3, [r2, #0]
 80086f8:	e02b      	b.n	8008752 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	db12      	blt.n	8008732 <USB_EPSetStall+0xae>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00f      	beq.n	8008732 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800872c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008730:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	0151      	lsls	r1, r2, #5
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	440a      	add	r2, r1
 8008748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800874c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008750:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d128      	bne.n	80087ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008796:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800879a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	791b      	ldrb	r3, [r3, #4]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d003      	beq.n	80087ac <USB_EPClearStall+0x4c>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	791b      	ldrb	r3, [r3, #4]
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d138      	bne.n	800881e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	0151      	lsls	r1, r2, #5
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	440a      	add	r2, r1
 80087c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	e027      	b.n	800881e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	0151      	lsls	r1, r2, #5
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	440a      	add	r2, r1
 80087e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	791b      	ldrb	r3, [r3, #4]
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d003      	beq.n	80087fe <USB_EPClearStall+0x9e>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	791b      	ldrb	r3, [r3, #4]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d10f      	bne.n	800881e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	440a      	add	r2, r1
 8008814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800881c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800884a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800884e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	78fb      	ldrb	r3, [r7, #3]
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008860:	68f9      	ldr	r1, [r7, #12]
 8008862:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008866:	4313      	orrs	r3, r2
 8008868:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008892:	f023 0303 	bic.w	r3, r3, #3
 8008896:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088a6:	f023 0302 	bic.w	r3, r3, #2
 80088aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b085      	sub	sp, #20
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80088d4:	f023 0303 	bic.w	r3, r3, #3
 80088d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088e8:	f043 0302 	orr.w	r3, r3, #2
 80088ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4013      	ands	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008914:	68fb      	ldr	r3, [r7, #12]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	4013      	ands	r3, r2
 8008944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	0c1b      	lsrs	r3, r3, #16
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008956:	b480      	push	{r7}
 8008958:	b085      	sub	sp, #20
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	4013      	ands	r3, r2
 8008978:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	b29b      	uxth	r3, r3
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800898a:	b480      	push	{r7}
 800898c:	b085      	sub	sp, #20
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	460b      	mov	r3, r1
 8008994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4013      	ands	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089b8:	68bb      	ldr	r3, [r7, #8]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b087      	sub	sp, #28
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	f003 030f 	and.w	r3, r3, #15
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	fa22 f303 	lsr.w	r3, r2, r3
 80089f6:	01db      	lsls	r3, r3, #7
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4013      	ands	r3, r2
 8008a12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a14:	68bb      	ldr	r3, [r7, #8]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008a5c:	f023 0307 	bic.w	r3, r3, #7
 8008a60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	333c      	adds	r3, #60	@ 0x3c
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4a26      	ldr	r2, [pc, #152]	@ (8008b3c <USB_EP0_OutStart+0xb8>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d90a      	bls.n	8008abe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ab8:	d101      	bne.n	8008abe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e037      	b.n	8008b2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ad8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aec:	f043 0318 	orr.w	r3, r3, #24
 8008af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b00:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008b04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b06:	7afb      	ldrb	r3, [r7, #11]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d10f      	bne.n	8008b2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b12:	461a      	mov	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b26:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008b2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	4f54300a 	.word	0x4f54300a

08008b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b58:	d901      	bls.n	8008b5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e01b      	b.n	8008b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	daf2      	bge.n	8008b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f043 0201 	orr.w	r2, r3, #1
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b82:	d901      	bls.n	8008b88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e006      	b.n	8008b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d0f0      	beq.n	8008b76 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f103 0208 	add.w	r2, r3, #8
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bba:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f103 0208 	add.w	r2, r3, #8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f103 0208 	add.w	r2, r3, #8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d103      	bne.n	8008c1c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	e00c      	b.n	8008c36 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3308      	adds	r3, #8
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e002      	b.n	8008c2a <vListInsert+0x2e>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d2f6      	bcs.n	8008c24 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	601a      	str	r2, [r3, #0]
}
 8008c62:	bf00      	nop
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	6892      	ldr	r2, [r2, #8]
 8008c84:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6852      	ldr	r2, [r2, #4]
 8008c8e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d103      	bne.n	8008ca2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	1e5a      	subs	r2, r3, #1
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10b      	bne.n	8008cf4 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	e7fd      	b.n	8008cf0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d05d      	beq.n	8008db6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d059      	beq.n	8008db6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d000      	beq.n	8008d16 <xQueueGenericReset+0x52>
 8008d14:	2101      	movs	r1, #1
 8008d16:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d14c      	bne.n	8008db6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8008d1c:	f002 fc2e 	bl	800b57c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d28:	6939      	ldr	r1, [r7, #16]
 8008d2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	441a      	add	r2, r3
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	6939      	ldr	r1, [r7, #16]
 8008d50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d52:	fb01 f303 	mul.w	r3, r1, r3
 8008d56:	441a      	add	r2, r3
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	22ff      	movs	r2, #255	@ 0xff
 8008d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	22ff      	movs	r2, #255	@ 0xff
 8008d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d114      	bne.n	8008d9c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01a      	beq.n	8008db0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 fa54 	bl	800a22c <xTaskRemoveFromEventList>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d012      	beq.n	8008db0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008d8a:	4b16      	ldr	r3, [pc, #88]	@ (8008de4 <xQueueGenericReset+0x120>)
 8008d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	e009      	b.n	8008db0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3310      	adds	r3, #16
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7ff fefe 	bl	8008ba2 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	3324      	adds	r3, #36	@ 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff fef9 	bl	8008ba2 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008db0:	f002 fc16 	bl	800b5e0 <vPortExitCritical>
 8008db4:	e001      	b.n	8008dba <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10b      	bne.n	8008dd8 <xQueueGenericReset+0x114>
        __asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	60bb      	str	r3, [r7, #8]
    }
 8008dd2:	bf00      	nop
 8008dd4:	bf00      	nop
 8008dd6:	e7fd      	b.n	8008dd4 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8008dd8:	697b      	ldr	r3, [r7, #20]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	e000ed04 	.word	0xe000ed04

08008de8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08a      	sub	sp, #40	@ 0x28
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4613      	mov	r3, r2
 8008df4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d02e      	beq.n	8008e5e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008e00:	2100      	movs	r1, #0
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	fba3 2302 	umull	r2, r3, r3, r2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d000      	beq.n	8008e10 <xQueueGenericCreate+0x28>
 8008e0e:	2101      	movs	r1, #1
 8008e10:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d123      	bne.n	8008e5e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008e1e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008e22:	d81c      	bhi.n	8008e5e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	fb02 f303 	mul.w	r3, r2, r3
 8008e2c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	3350      	adds	r3, #80	@ 0x50
 8008e32:	4618      	mov	r0, r3
 8008e34:	f002 fc8a 	bl	800b74c <pvPortMalloc>
 8008e38:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01d      	beq.n	8008e7c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	3350      	adds	r3, #80	@ 0x50
 8008e48:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e4a:	79fa      	ldrb	r2, [r7, #7]
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4613      	mov	r3, r2
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 f815 	bl	8008e86 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008e5c:	e00e      	b.n	8008e7c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10b      	bne.n	8008e7c <xQueueGenericCreate+0x94>
        __asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	613b      	str	r3, [r7, #16]
    }
 8008e76:	bf00      	nop
 8008e78:	bf00      	nop
 8008e7a:	e7fd      	b.n	8008e78 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
    }
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	607a      	str	r2, [r7, #4]
 8008e92:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d103      	bne.n	8008ea2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	e002      	b.n	8008ea8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	69b8      	ldr	r0, [r7, #24]
 8008eb8:	f7ff ff04 	bl	8008cc4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	78fa      	ldrb	r2, [r7, #3]
 8008ec0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00e      	beq.n	8008ef8 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008eec:	2300      	movs	r3, #0
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f81c 	bl	8008f30 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	461a      	mov	r2, r3
 8008f16:	6939      	ldr	r1, [r7, #16]
 8008f18:	6978      	ldr	r0, [r7, #20]
 8008f1a:	f7ff ff65 	bl	8008de8 <xQueueGenericCreate>
 8008f1e:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff ffd3 	bl	8008ecc <prvInitialiseMutex>

        return xNewQueue;
 8008f26:	68fb      	ldr	r3, [r7, #12]
    }
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08e      	sub	sp, #56	@ 0x38
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10b      	bne.n	8008f64 <xQueueGenericSend+0x34>
        __asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008f5e:	bf00      	nop
 8008f60:	bf00      	nop
 8008f62:	e7fd      	b.n	8008f60 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <xQueueGenericSend+0x42>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <xQueueGenericSend+0x46>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <xQueueGenericSend+0x48>
 8008f76:	2300      	movs	r3, #0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10b      	bne.n	8008f94 <xQueueGenericSend+0x64>
        __asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	e7fd      	b.n	8008f90 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d103      	bne.n	8008fa2 <xQueueGenericSend+0x72>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <xQueueGenericSend+0x76>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <xQueueGenericSend+0x78>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10b      	bne.n	8008fc4 <xQueueGenericSend+0x94>
        __asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	623b      	str	r3, [r7, #32]
    }
 8008fbe:	bf00      	nop
 8008fc0:	bf00      	nop
 8008fc2:	e7fd      	b.n	8008fc0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fc4:	f001 fb46 	bl	800a654 <xTaskGetSchedulerState>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d102      	bne.n	8008fd4 <xQueueGenericSend+0xa4>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <xQueueGenericSend+0xa8>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e000      	b.n	8008fda <xQueueGenericSend+0xaa>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10b      	bne.n	8008ff6 <xQueueGenericSend+0xc6>
        __asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	61fb      	str	r3, [r7, #28]
    }
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008ff6:	f002 fac1 	bl	800b57c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009002:	429a      	cmp	r2, r3
 8009004:	d302      	bcc.n	800900c <xQueueGenericSend+0xdc>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d129      	bne.n	8009060 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009012:	f000 fa89 	bl	8009528 <prvCopyDataToQueue>
 8009016:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	3324      	adds	r3, #36	@ 0x24
 8009024:	4618      	mov	r0, r3
 8009026:	f001 f901 	bl	800a22c <xTaskRemoveFromEventList>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d013      	beq.n	8009058 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8009030:	4b3f      	ldr	r3, [pc, #252]	@ (8009130 <xQueueGenericSend+0x200>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	e00a      	b.n	8009058 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8009042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8009048:	4b39      	ldr	r3, [pc, #228]	@ (8009130 <xQueueGenericSend+0x200>)
 800904a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8009058:	f002 fac2 	bl	800b5e0 <vPortExitCritical>
                return pdPASS;
 800905c:	2301      	movs	r3, #1
 800905e:	e063      	b.n	8009128 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d103      	bne.n	800906e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009066:	f002 fabb 	bl	800b5e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800906a:	2300      	movs	r3, #0
 800906c:	e05c      	b.n	8009128 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800906e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009074:	f107 0314 	add.w	r3, r7, #20
 8009078:	4618      	mov	r0, r3
 800907a:	f001 f9af 	bl	800a3dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800907e:	2301      	movs	r3, #1
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009082:	f002 faad 	bl	800b5e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009086:	f000 fdd7 	bl	8009c38 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800908a:	f002 fa77 	bl	800b57c <vPortEnterCritical>
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009094:	b25b      	sxtb	r3, r3
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909a:	d103      	bne.n	80090a4 <xQueueGenericSend+0x174>
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090aa:	b25b      	sxtb	r3, r3
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d103      	bne.n	80090ba <xQueueGenericSend+0x18a>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090ba:	f002 fa91 	bl	800b5e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090be:	1d3a      	adds	r2, r7, #4
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 f99e 	bl	800a408 <xTaskCheckForTimeOut>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d124      	bne.n	800911c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090d4:	f000 fb20 	bl	8009718 <prvIsQueueFull>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d018      	beq.n	8009110 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e0:	3310      	adds	r3, #16
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f001 f834 	bl	800a154 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80090ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ee:	f000 faab 	bl	8009648 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80090f2:	f000 fdaf 	bl	8009c54 <xTaskResumeAll>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f47f af7c 	bne.w	8008ff6 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80090fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <xQueueGenericSend+0x200>)
 8009100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	e772      	b.n	8008ff6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009112:	f000 fa99 	bl	8009648 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009116:	f000 fd9d 	bl	8009c54 <xTaskResumeAll>
 800911a:	e76c      	b.n	8008ff6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800911c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800911e:	f000 fa93 	bl	8009648 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009122:	f000 fd97 	bl	8009c54 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8009126:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009128:	4618      	mov	r0, r3
 800912a:	3738      	adds	r7, #56	@ 0x38
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	e000ed04 	.word	0xe000ed04

08009134 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08c      	sub	sp, #48	@ 0x30
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009140:	2300      	movs	r3, #0
 8009142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10b      	bne.n	8009166 <xQueueReceive+0x32>
        __asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	623b      	str	r3, [r7, #32]
    }
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <xQueueReceive+0x40>
 800916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <xQueueReceive+0x44>
 8009174:	2301      	movs	r3, #1
 8009176:	e000      	b.n	800917a <xQueueReceive+0x46>
 8009178:	2300      	movs	r3, #0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <xQueueReceive+0x62>
        __asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	61fb      	str	r3, [r7, #28]
    }
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009196:	f001 fa5d 	bl	800a654 <xTaskGetSchedulerState>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d102      	bne.n	80091a6 <xQueueReceive+0x72>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <xQueueReceive+0x76>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <xQueueReceive+0x78>
 80091aa:	2300      	movs	r3, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10b      	bne.n	80091c8 <xQueueReceive+0x94>
        __asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	61bb      	str	r3, [r7, #24]
    }
 80091c2:	bf00      	nop
 80091c4:	bf00      	nop
 80091c6:	e7fd      	b.n	80091c4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80091c8:	f002 f9d8 	bl	800b57c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01f      	beq.n	8009218 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091dc:	f000 fa0e 	bl	80095fc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e2:	1e5a      	subs	r2, r3, #1
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00f      	beq.n	8009210 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f2:	3310      	adds	r3, #16
 80091f4:	4618      	mov	r0, r3
 80091f6:	f001 f819 	bl	800a22c <xTaskRemoveFromEventList>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d007      	beq.n	8009210 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009200:	4b3c      	ldr	r3, [pc, #240]	@ (80092f4 <xQueueReceive+0x1c0>)
 8009202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009210:	f002 f9e6 	bl	800b5e0 <vPortExitCritical>
                return pdPASS;
 8009214:	2301      	movs	r3, #1
 8009216:	e069      	b.n	80092ec <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d103      	bne.n	8009226 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800921e:	f002 f9df 	bl	800b5e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8009222:	2300      	movs	r3, #0
 8009224:	e062      	b.n	80092ec <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d106      	bne.n	800923a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800922c:	f107 0310 	add.w	r3, r7, #16
 8009230:	4618      	mov	r0, r3
 8009232:	f001 f8d3 	bl	800a3dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009236:	2301      	movs	r3, #1
 8009238:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800923a:	f002 f9d1 	bl	800b5e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800923e:	f000 fcfb 	bl	8009c38 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009242:	f002 f99b 	bl	800b57c <vPortEnterCritical>
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800924c:	b25b      	sxtb	r3, r3
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009252:	d103      	bne.n	800925c <xQueueReceive+0x128>
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800925c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009262:	b25b      	sxtb	r3, r3
 8009264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009268:	d103      	bne.n	8009272 <xQueueReceive+0x13e>
 800926a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009272:	f002 f9b5 	bl	800b5e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009276:	1d3a      	adds	r2, r7, #4
 8009278:	f107 0310 	add.w	r3, r7, #16
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f001 f8c2 	bl	800a408 <xTaskCheckForTimeOut>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d123      	bne.n	80092d2 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800928a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800928c:	f000 fa2e 	bl	80096ec <prvIsQueueEmpty>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d017      	beq.n	80092c6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	3324      	adds	r3, #36	@ 0x24
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	4611      	mov	r1, r2
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 ff58 	bl	800a154 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80092a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a6:	f000 f9cf 	bl	8009648 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80092aa:	f000 fcd3 	bl	8009c54 <xTaskResumeAll>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d189      	bne.n	80091c8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80092b4:	4b0f      	ldr	r3, [pc, #60]	@ (80092f4 <xQueueReceive+0x1c0>)
 80092b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	e780      	b.n	80091c8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80092c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092c8:	f000 f9be 	bl	8009648 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80092cc:	f000 fcc2 	bl	8009c54 <xTaskResumeAll>
 80092d0:	e77a      	b.n	80091c8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80092d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092d4:	f000 f9b8 	bl	8009648 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80092d8:	f000 fcbc 	bl	8009c54 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092de:	f000 fa05 	bl	80096ec <prvIsQueueEmpty>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f43f af6f 	beq.w	80091c8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80092ea:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3730      	adds	r7, #48	@ 0x30
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	e000ed04 	.word	0xe000ed04

080092f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08c      	sub	sp, #48	@ 0x30
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009302:	2300      	movs	r3, #0
 8009304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800930a:	2300      	movs	r3, #0
 800930c:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10b      	bne.n	800932c <xQueueSemaphoreTake+0x34>
        __asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	61bb      	str	r3, [r7, #24]
    }
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <xQueueSemaphoreTake+0x54>
        __asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	617b      	str	r3, [r7, #20]
    }
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800934c:	f001 f982 	bl	800a654 <xTaskGetSchedulerState>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <xQueueSemaphoreTake+0x64>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <xQueueSemaphoreTake+0x68>
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <xQueueSemaphoreTake+0x6a>
 8009360:	2300      	movs	r3, #0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10b      	bne.n	800937e <xQueueSemaphoreTake+0x86>
        __asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	613b      	str	r3, [r7, #16]
    }
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	e7fd      	b.n	800937a <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800937e:	f002 f8fd 	bl	800b57c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009386:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d024      	beq.n	80093d8 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	1e5a      	subs	r2, r3, #1
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d104      	bne.n	80093a8 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800939e:	f001 fb75 	bl	800aa8c <pvTaskIncrementMutexHeldCount>
 80093a2:	4602      	mov	r2, r0
 80093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a6:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00f      	beq.n	80093d0 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	3310      	adds	r3, #16
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 ff39 	bl	800a22c <xTaskRemoveFromEventList>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d007      	beq.n	80093d0 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80093c0:	4b4c      	ldr	r3, [pc, #304]	@ (80094f4 <xQueueSemaphoreTake+0x1fc>)
 80093c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80093d0:	f002 f906 	bl	800b5e0 <vPortExitCritical>
                return pdPASS;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e089      	b.n	80094ec <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d103      	bne.n	80093e6 <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80093de:	f002 f8ff 	bl	800b5e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80093e2:	2300      	movs	r3, #0
 80093e4:	e082      	b.n	80094ec <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80093e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d106      	bne.n	80093fa <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80093ec:	f107 0308 	add.w	r3, r7, #8
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fff3 	bl	800a3dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80093f6:	2301      	movs	r3, #1
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80093fa:	f002 f8f1 	bl	800b5e0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80093fe:	f000 fc1b 	bl	8009c38 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009402:	f002 f8bb 	bl	800b57c <vPortEnterCritical>
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800940c:	b25b      	sxtb	r3, r3
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009412:	d103      	bne.n	800941c <xQueueSemaphoreTake+0x124>
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009422:	b25b      	sxtb	r3, r3
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d103      	bne.n	8009432 <xQueueSemaphoreTake+0x13a>
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009432:	f002 f8d5 	bl	800b5e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009436:	463a      	mov	r2, r7
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f000 ffe2 	bl	800a408 <xTaskCheckForTimeOut>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d132      	bne.n	80094b0 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800944a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800944c:	f000 f94e 	bl	80096ec <prvIsQueueEmpty>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d026      	beq.n	80094a4 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 800945e:	f002 f88d 	bl	800b57c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	4618      	mov	r0, r3
 8009468:	f001 f912 	bl	800a690 <xTaskPriorityInherit>
 800946c:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800946e:	f002 f8b7 	bl	800b5e0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009474:	3324      	adds	r3, #36	@ 0x24
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	4611      	mov	r1, r2
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fe6a 	bl	800a154 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009482:	f000 f8e1 	bl	8009648 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009486:	f000 fbe5 	bl	8009c54 <xTaskResumeAll>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	f47f af76 	bne.w	800937e <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8009492:	4b18      	ldr	r3, [pc, #96]	@ (80094f4 <xQueueSemaphoreTake+0x1fc>)
 8009494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	e76c      	b.n	800937e <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80094a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094a6:	f000 f8cf 	bl	8009648 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80094aa:	f000 fbd3 	bl	8009c54 <xTaskResumeAll>
 80094ae:	e766      	b.n	800937e <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80094b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094b2:	f000 f8c9 	bl	8009648 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80094b6:	f000 fbcd 	bl	8009c54 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094bc:	f000 f916 	bl	80096ec <prvIsQueueEmpty>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f43f af5b 	beq.w	800937e <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80094c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00d      	beq.n	80094ea <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 80094ce:	f002 f855 	bl	800b57c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80094d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094d4:	f000 f810 	bl	80094f8 <prvGetDisinheritPriorityAfterTimeout>
 80094d8:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	69f9      	ldr	r1, [r7, #28]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 fa19 	bl	800a918 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80094e6:	f002 f87b 	bl	800b5e0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80094ea:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3730      	adds	r7, #48	@ 0x30
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	e000ed04 	.word	0xe000ed04

080094f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009504:	2b00      	cmp	r3, #0
 8009506:	d006      	beq.n	8009516 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f1c3 0305 	rsb	r3, r3, #5
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e001      	b.n	800951a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800951a:	68fb      	ldr	r3, [r7, #12]
    }
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009534:	2300      	movs	r3, #0
 8009536:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10d      	bne.n	8009562 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d14d      	bne.n	80095ea <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	4618      	mov	r0, r3
 8009554:	f001 f93a 	bl	800a7cc <xTaskPriorityDisinherit>
 8009558:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	609a      	str	r2, [r3, #8]
 8009560:	e043      	b.n	80095ea <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d119      	bne.n	800959c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6858      	ldr	r0, [r3, #4]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009570:	461a      	mov	r2, r3
 8009572:	68b9      	ldr	r1, [r7, #8]
 8009574:	f005 f86e 	bl	800e654 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009580:	441a      	add	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	429a      	cmp	r2, r3
 8009590:	d32b      	bcc.n	80095ea <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	605a      	str	r2, [r3, #4]
 800959a:	e026      	b.n	80095ea <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68d8      	ldr	r0, [r3, #12]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a4:	461a      	mov	r2, r3
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	f005 f854 	bl	800e654 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b4:	425b      	negs	r3, r3
 80095b6:	441a      	add	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d207      	bcs.n	80095d8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d0:	425b      	negs	r3, r3
 80095d2:	441a      	add	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d105      	bne.n	80095ea <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80095f2:	697b      	ldr	r3, [r7, #20]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d018      	beq.n	8009640 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009616:	441a      	add	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	429a      	cmp	r2, r3
 8009626:	d303      	bcc.n	8009630 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68d9      	ldr	r1, [r3, #12]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009638:	461a      	mov	r2, r3
 800963a:	6838      	ldr	r0, [r7, #0]
 800963c:	f005 f80a 	bl	800e654 <memcpy>
    }
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009650:	f001 ff94 	bl	800b57c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800965a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800965c:	e011      	b.n	8009682 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	d012      	beq.n	800968c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3324      	adds	r3, #36	@ 0x24
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fdde 	bl	800a22c <xTaskRemoveFromEventList>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8009676:	f000 ff2f 	bl	800a4d8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	3b01      	subs	r3, #1
 800967e:	b2db      	uxtb	r3, r3
 8009680:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009686:	2b00      	cmp	r3, #0
 8009688:	dce9      	bgt.n	800965e <prvUnlockQueue+0x16>
 800968a:	e000      	b.n	800968e <prvUnlockQueue+0x46>
                    break;
 800968c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	22ff      	movs	r2, #255	@ 0xff
 8009692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009696:	f001 ffa3 	bl	800b5e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800969a:	f001 ff6f 	bl	800b57c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096a4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80096a6:	e011      	b.n	80096cc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d012      	beq.n	80096d6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3310      	adds	r3, #16
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fdb9 	bl	800a22c <xTaskRemoveFromEventList>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80096c0:	f000 ff0a 	bl	800a4d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80096cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dce9      	bgt.n	80096a8 <prvUnlockQueue+0x60>
 80096d4:	e000      	b.n	80096d8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80096d6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	22ff      	movs	r2, #255	@ 0xff
 80096dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80096e0:	f001 ff7e 	bl	800b5e0 <vPortExitCritical>
}
 80096e4:	bf00      	nop
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80096f4:	f001 ff42 	bl	800b57c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d102      	bne.n	8009706 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009700:	2301      	movs	r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	e001      	b.n	800970a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800970a:	f001 ff69 	bl	800b5e0 <vPortExitCritical>

    return xReturn;
 800970e:	68fb      	ldr	r3, [r7, #12]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009720:	f001 ff2c 	bl	800b57c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972c:	429a      	cmp	r2, r3
 800972e:	d102      	bne.n	8009736 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009730:	2301      	movs	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	e001      	b.n	800973a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800973a:	f001 ff51 	bl	800b5e0 <vPortExitCritical>

    return xReturn;
 800973e:	68fb      	ldr	r3, [r7, #12]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8009752:	2300      	movs	r3, #0
 8009754:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10b      	bne.n	8009774 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	60fb      	str	r3, [r7, #12]
    }
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	e7fd      	b.n	8009770 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d024      	beq.n	80097c4 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800977a:	2300      	movs	r3, #0
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	e01e      	b.n	80097be <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8009780:	4a18      	ldr	r2, [pc, #96]	@ (80097e4 <vQueueAddToRegistry+0x9c>)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	4413      	add	r3, r2
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	d105      	bne.n	800979c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	4a13      	ldr	r2, [pc, #76]	@ (80097e4 <vQueueAddToRegistry+0x9c>)
 8009796:	4413      	add	r3, r2
 8009798:	613b      	str	r3, [r7, #16]
                    break;
 800979a:	e013      	b.n	80097c4 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <vQueueAddToRegistry+0x70>
 80097a2:	4a10      	ldr	r2, [pc, #64]	@ (80097e4 <vQueueAddToRegistry+0x9c>)
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d104      	bne.n	80097b8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	4a0c      	ldr	r2, [pc, #48]	@ (80097e4 <vQueueAddToRegistry+0x9c>)
 80097b4:	4413      	add	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	3301      	adds	r3, #1
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b07      	cmp	r3, #7
 80097c2:	d9dd      	bls.n	8009780 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d005      	beq.n	80097d6 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80097d6:	bf00      	nop
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	2000030c 	.word	0x2000030c

080097e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80097f8:	f001 fec0 	bl	800b57c <vPortEnterCritical>
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009802:	b25b      	sxtb	r3, r3
 8009804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009808:	d103      	bne.n	8009812 <vQueueWaitForMessageRestricted+0x2a>
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009818:	b25b      	sxtb	r3, r3
 800981a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981e:	d103      	bne.n	8009828 <vQueueWaitForMessageRestricted+0x40>
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009828:	f001 feda 	bl	800b5e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009830:	2b00      	cmp	r3, #0
 8009832:	d106      	bne.n	8009842 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	3324      	adds	r3, #36	@ 0x24
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fcaf 	bl	800a1a0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009842:	6978      	ldr	r0, [r7, #20]
 8009844:	f7ff ff00 	bl	8009648 <prvUnlockQueue>
    }
 8009848:	bf00      	nop
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009850:	b580      	push	{r7, lr}
 8009852:	b08c      	sub	sp, #48	@ 0x30
 8009854:	af04      	add	r7, sp, #16
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	4613      	mov	r3, r2
 800985e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009860:	88fb      	ldrh	r3, [r7, #6]
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4618      	mov	r0, r3
 8009866:	f001 ff71 	bl	800b74c <pvPortMalloc>
 800986a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d013      	beq.n	800989a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009872:	2058      	movs	r0, #88	@ 0x58
 8009874:	f001 ff6a 	bl	800b74c <pvPortMalloc>
 8009878:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d008      	beq.n	8009892 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8009880:	2258      	movs	r2, #88	@ 0x58
 8009882:	2100      	movs	r1, #0
 8009884:	69f8      	ldr	r0, [r7, #28]
 8009886:	f004 feb9 	bl	800e5fc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009890:	e005      	b.n	800989e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8009892:	6978      	ldr	r0, [r7, #20]
 8009894:	f002 f816 	bl	800b8c4 <vPortFree>
 8009898:	e001      	b.n	800989e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d013      	beq.n	80098cc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098a4:	88fa      	ldrh	r2, [r7, #6]
 80098a6:	2300      	movs	r3, #0
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	9302      	str	r3, [sp, #8]
 80098ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f80e 	bl	80098dc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80098c0:	69f8      	ldr	r0, [r7, #28]
 80098c2:	f000 f89b 	bl	80099fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80098c6:	2301      	movs	r3, #1
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	e002      	b.n	80098d2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098cc:	f04f 33ff 	mov.w	r3, #4294967295
 80098d0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80098d2:	69bb      	ldr	r3, [r7, #24]
    }
 80098d4:	4618      	mov	r0, r3
 80098d6:	3720      	adds	r7, #32
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	461a      	mov	r2, r3
 80098f4:	21a5      	movs	r1, #165	@ 0xa5
 80098f6:	f004 fe81 	bl	800e5fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009904:	3b01      	subs	r3, #1
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	f023 0307 	bic.w	r3, r3, #7
 8009912:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00b      	beq.n	8009936 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	617b      	str	r3, [r7, #20]
    }
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	e7fd      	b.n	8009932 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01e      	beq.n	800997a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]
 8009940:	e012      	b.n	8009968 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	4413      	add	r3, r2
 8009948:	7819      	ldrb	r1, [r3, #0]
 800994a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	4413      	add	r3, r2
 8009950:	3334      	adds	r3, #52	@ 0x34
 8009952:	460a      	mov	r2, r1
 8009954:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	4413      	add	r3, r2
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d006      	beq.n	8009970 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	3301      	adds	r3, #1
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	2b09      	cmp	r3, #9
 800996c:	d9e9      	bls.n	8009942 <prvInitialiseNewTask+0x66>
 800996e:	e000      	b.n	8009972 <prvInitialiseNewTask+0x96>
            {
                break;
 8009970:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800997a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997c:	2b04      	cmp	r3, #4
 800997e:	d90b      	bls.n	8009998 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	613b      	str	r3, [r7, #16]
    }
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	e7fd      	b.n	8009994 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999a:	2b04      	cmp	r3, #4
 800999c:	d901      	bls.n	80099a2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800999e:	2304      	movs	r3, #4
 80099a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099ac:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b0:	3304      	adds	r3, #4
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff f915 	bl	8008be2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	3318      	adds	r3, #24
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff f910 	bl	8008be2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ca:	f1c3 0205 	rsb	r2, r3, #5
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099d6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	68f9      	ldr	r1, [r7, #12]
 80099dc:	69b8      	ldr	r0, [r7, #24]
 80099de:	f001 fc9b 	bl	800b318 <pxPortInitialiseStack>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80099e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80099f4:	bf00      	nop
 80099f6:	3720      	adds	r7, #32
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009a04:	f001 fdba 	bl	800b57c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009a08:	4b40      	ldr	r3, [pc, #256]	@ (8009b0c <prvAddNewTaskToReadyList+0x110>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8009b0c <prvAddNewTaskToReadyList+0x110>)
 8009a10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009a12:	4b3f      	ldr	r3, [pc, #252]	@ (8009b10 <prvAddNewTaskToReadyList+0x114>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d109      	bne.n	8009a2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009a1a:	4a3d      	ldr	r2, [pc, #244]	@ (8009b10 <prvAddNewTaskToReadyList+0x114>)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a20:	4b3a      	ldr	r3, [pc, #232]	@ (8009b0c <prvAddNewTaskToReadyList+0x110>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d110      	bne.n	8009a4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009a28:	f000 fd7a 	bl	800a520 <prvInitialiseTaskLists>
 8009a2c:	e00d      	b.n	8009a4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009a2e:	4b39      	ldr	r3, [pc, #228]	@ (8009b14 <prvAddNewTaskToReadyList+0x118>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a36:	4b36      	ldr	r3, [pc, #216]	@ (8009b10 <prvAddNewTaskToReadyList+0x114>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d802      	bhi.n	8009a4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009a44:	4a32      	ldr	r2, [pc, #200]	@ (8009b10 <prvAddNewTaskToReadyList+0x114>)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009a4a:	4b33      	ldr	r3, [pc, #204]	@ (8009b18 <prvAddNewTaskToReadyList+0x11c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	4a31      	ldr	r2, [pc, #196]	@ (8009b18 <prvAddNewTaskToReadyList+0x11c>)
 8009a52:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a54:	4b30      	ldr	r3, [pc, #192]	@ (8009b18 <prvAddNewTaskToReadyList+0x11c>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	2201      	movs	r2, #1
 8009a62:	409a      	lsls	r2, r3
 8009a64:	4b2d      	ldr	r3, [pc, #180]	@ (8009b1c <prvAddNewTaskToReadyList+0x120>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8009b1c <prvAddNewTaskToReadyList+0x120>)
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a72:	492b      	ldr	r1, [pc, #172]	@ (8009b20 <prvAddNewTaskToReadyList+0x124>)
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	440b      	add	r3, r1
 8009a7e:	3304      	adds	r3, #4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	609a      	str	r2, [r3, #8]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60da      	str	r2, [r3, #12]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	3204      	adds	r2, #4
 8009a9a:	605a      	str	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	1d1a      	adds	r2, r3, #4
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	609a      	str	r2, [r3, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8009b20 <prvAddNewTaskToReadyList+0x124>)
 8009ab2:	441a      	add	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	615a      	str	r2, [r3, #20]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abc:	4918      	ldr	r1, [pc, #96]	@ (8009b20 <prvAddNewTaskToReadyList+0x124>)
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	1c59      	adds	r1, r3, #1
 8009acc:	4814      	ldr	r0, [pc, #80]	@ (8009b20 <prvAddNewTaskToReadyList+0x124>)
 8009ace:	4613      	mov	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4403      	add	r3, r0
 8009ad8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009ada:	f001 fd81 	bl	800b5e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009ade:	4b0d      	ldr	r3, [pc, #52]	@ (8009b14 <prvAddNewTaskToReadyList+0x118>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00e      	beq.n	8009b04 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8009b10 <prvAddNewTaskToReadyList+0x114>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d207      	bcs.n	8009b04 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009af4:	4b0b      	ldr	r3, [pc, #44]	@ (8009b24 <prvAddNewTaskToReadyList+0x128>)
 8009af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20000424 	.word	0x20000424
 8009b10:	2000034c 	.word	0x2000034c
 8009b14:	20000430 	.word	0x20000430
 8009b18:	20000440 	.word	0x20000440
 8009b1c:	2000042c 	.word	0x2000042c
 8009b20:	20000350 	.word	0x20000350
 8009b24:	e000ed04 	.word	0xe000ed04

08009b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d018      	beq.n	8009b6c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009b3a:	4b14      	ldr	r3, [pc, #80]	@ (8009b8c <vTaskDelay+0x64>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <vTaskDelay+0x32>
        __asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	60bb      	str	r3, [r7, #8]
    }
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009b5a:	f000 f86d 	bl	8009c38 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b5e:	2100      	movs	r1, #0
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 f8cd 	bl	800ad00 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009b66:	f000 f875 	bl	8009c54 <xTaskResumeAll>
 8009b6a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d107      	bne.n	8009b82 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8009b72:	4b07      	ldr	r3, [pc, #28]	@ (8009b90 <vTaskDelay+0x68>)
 8009b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009b82:	bf00      	nop
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	2000044c 	.word	0x2000044c
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8009b9a:	4b20      	ldr	r3, [pc, #128]	@ (8009c1c <vTaskStartScheduler+0x88>)
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	2282      	movs	r2, #130	@ 0x82
 8009ba6:	491e      	ldr	r1, [pc, #120]	@ (8009c20 <vTaskStartScheduler+0x8c>)
 8009ba8:	481e      	ldr	r0, [pc, #120]	@ (8009c24 <vTaskStartScheduler+0x90>)
 8009baa:	f7ff fe51 	bl	8009850 <xTaskCreate>
 8009bae:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d102      	bne.n	8009bbc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8009bb6:	f001 f923 	bl	800ae00 <xTimerCreateTimerTask>
 8009bba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d116      	bne.n	8009bf0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	60bb      	str	r3, [r7, #8]
    }
 8009bd4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009bd6:	4b14      	ldr	r3, [pc, #80]	@ (8009c28 <vTaskStartScheduler+0x94>)
 8009bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bdc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009bde:	4b13      	ldr	r3, [pc, #76]	@ (8009c2c <vTaskStartScheduler+0x98>)
 8009be0:	2201      	movs	r2, #1
 8009be2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009be4:	4b12      	ldr	r3, [pc, #72]	@ (8009c30 <vTaskStartScheduler+0x9c>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009bea:	f001 fc23 	bl	800b434 <xPortStartScheduler>
 8009bee:	e00f      	b.n	8009c10 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf6:	d10b      	bne.n	8009c10 <vTaskStartScheduler+0x7c>
        __asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	607b      	str	r3, [r7, #4]
    }
 8009c0a:	bf00      	nop
 8009c0c:	bf00      	nop
 8009c0e:	e7fd      	b.n	8009c0c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009c10:	4b08      	ldr	r3, [pc, #32]	@ (8009c34 <vTaskStartScheduler+0xa0>)
 8009c12:	681b      	ldr	r3, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20000448 	.word	0x20000448
 8009c20:	0800e6e0 	.word	0x0800e6e0
 8009c24:	0800a4f1 	.word	0x0800a4f1
 8009c28:	20000444 	.word	0x20000444
 8009c2c:	20000430 	.word	0x20000430
 8009c30:	20000428 	.word	0x20000428
 8009c34:	2000000c 	.word	0x2000000c

08009c38 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009c3c:	4b04      	ldr	r3, [pc, #16]	@ (8009c50 <vTaskSuspendAll+0x18>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	4a03      	ldr	r2, [pc, #12]	@ (8009c50 <vTaskSuspendAll+0x18>)
 8009c44:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009c46:	bf00      	nop
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	2000044c 	.word	0x2000044c

08009c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009c62:	4b71      	ldr	r3, [pc, #452]	@ (8009e28 <xTaskResumeAll+0x1d4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10b      	bne.n	8009c82 <xTaskResumeAll+0x2e>
        __asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	607b      	str	r3, [r7, #4]
    }
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	e7fd      	b.n	8009c7e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009c82:	f001 fc7b 	bl	800b57c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009c86:	4b68      	ldr	r3, [pc, #416]	@ (8009e28 <xTaskResumeAll+0x1d4>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	4a66      	ldr	r2, [pc, #408]	@ (8009e28 <xTaskResumeAll+0x1d4>)
 8009c8e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c90:	4b65      	ldr	r3, [pc, #404]	@ (8009e28 <xTaskResumeAll+0x1d4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f040 80c0 	bne.w	8009e1a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c9a:	4b64      	ldr	r3, [pc, #400]	@ (8009e2c <xTaskResumeAll+0x1d8>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 80bb 	beq.w	8009e1a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ca4:	e08a      	b.n	8009dbc <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca6:	4b62      	ldr	r3, [pc, #392]	@ (8009e30 <xTaskResumeAll+0x1dc>)
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	6a12      	ldr	r2, [r2, #32]
 8009cbc:	609a      	str	r2, [r3, #8]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	69d2      	ldr	r2, [r2, #28]
 8009cc6:	605a      	str	r2, [r3, #4]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	3318      	adds	r3, #24
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d103      	bne.n	8009cdc <xTaskResumeAll+0x88>
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	6a1a      	ldr	r2, [r3, #32]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	629a      	str	r2, [r3, #40]	@ 0x28
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	1e5a      	subs	r2, r3, #1
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	68d2      	ldr	r2, [r2, #12]
 8009cfa:	609a      	str	r2, [r3, #8]
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	6892      	ldr	r2, [r2, #8]
 8009d04:	605a      	str	r2, [r3, #4]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d103      	bne.n	8009d1a <xTaskResumeAll+0xc6>
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	605a      	str	r2, [r3, #4]
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	615a      	str	r2, [r3, #20]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	1e5a      	subs	r2, r3, #1
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2e:	2201      	movs	r2, #1
 8009d30:	409a      	lsls	r2, r3
 8009d32:	4b40      	ldr	r3, [pc, #256]	@ (8009e34 <xTaskResumeAll+0x1e0>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	4a3e      	ldr	r2, [pc, #248]	@ (8009e34 <xTaskResumeAll+0x1e0>)
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d40:	493d      	ldr	r1, [pc, #244]	@ (8009e38 <xTaskResumeAll+0x1e4>)
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60bb      	str	r3, [r7, #8]
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	609a      	str	r2, [r3, #8]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	60da      	str	r2, [r3, #12]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	69fa      	ldr	r2, [r7, #28]
 8009d66:	3204      	adds	r2, #4
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	1d1a      	adds	r2, r3, #4
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	609a      	str	r2, [r3, #8]
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8009e38 <xTaskResumeAll+0x1e4>)
 8009d80:	441a      	add	r2, r3
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	615a      	str	r2, [r3, #20]
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8a:	492b      	ldr	r1, [pc, #172]	@ (8009e38 <xTaskResumeAll+0x1e4>)
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	440b      	add	r3, r1
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	1c59      	adds	r1, r3, #1
 8009d9a:	4827      	ldr	r0, [pc, #156]	@ (8009e38 <xTaskResumeAll+0x1e4>)
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4403      	add	r3, r0
 8009da6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dac:	4b23      	ldr	r3, [pc, #140]	@ (8009e3c <xTaskResumeAll+0x1e8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d302      	bcc.n	8009dbc <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8009db6:	4b22      	ldr	r3, [pc, #136]	@ (8009e40 <xTaskResumeAll+0x1ec>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8009e30 <xTaskResumeAll+0x1dc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f47f af70 	bne.w	8009ca6 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009dcc:	f000 fc26 	bl	800a61c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8009e44 <xTaskResumeAll+0x1f0>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d010      	beq.n	8009dfe <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009ddc:	f000 f846 	bl	8009e6c <xTaskIncrementTick>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8009de6:	4b16      	ldr	r3, [pc, #88]	@ (8009e40 <xTaskResumeAll+0x1ec>)
 8009de8:	2201      	movs	r2, #1
 8009dea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1f1      	bne.n	8009ddc <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8009df8:	4b12      	ldr	r3, [pc, #72]	@ (8009e44 <xTaskResumeAll+0x1f0>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009dfe:	4b10      	ldr	r3, [pc, #64]	@ (8009e40 <xTaskResumeAll+0x1ec>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d009      	beq.n	8009e1a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009e06:	2301      	movs	r3, #1
 8009e08:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e48 <xTaskResumeAll+0x1f4>)
 8009e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009e1a:	f001 fbe1 	bl	800b5e0 <vPortExitCritical>

    return xAlreadyYielded;
 8009e1e:	69bb      	ldr	r3, [r7, #24]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3720      	adds	r7, #32
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	2000044c 	.word	0x2000044c
 8009e2c:	20000424 	.word	0x20000424
 8009e30:	200003e4 	.word	0x200003e4
 8009e34:	2000042c 	.word	0x2000042c
 8009e38:	20000350 	.word	0x20000350
 8009e3c:	2000034c 	.word	0x2000034c
 8009e40:	20000438 	.word	0x20000438
 8009e44:	20000434 	.word	0x20000434
 8009e48:	e000ed04 	.word	0xe000ed04

08009e4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009e52:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <xTaskGetTickCount+0x1c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009e58:	687b      	ldr	r3, [r7, #4]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	20000428 	.word	0x20000428

08009e6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08a      	sub	sp, #40	@ 0x28
 8009e70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e76:	4b7e      	ldr	r3, [pc, #504]	@ (800a070 <xTaskIncrementTick+0x204>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f040 80ed 	bne.w	800a05a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e80:	4b7c      	ldr	r3, [pc, #496]	@ (800a074 <xTaskIncrementTick+0x208>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3301      	adds	r3, #1
 8009e86:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009e88:	4a7a      	ldr	r2, [pc, #488]	@ (800a074 <xTaskIncrementTick+0x208>)
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d121      	bne.n	8009ed8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009e94:	4b78      	ldr	r3, [pc, #480]	@ (800a078 <xTaskIncrementTick+0x20c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <xTaskIncrementTick+0x4a>
        __asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
    }
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	e7fd      	b.n	8009eb2 <xTaskIncrementTick+0x46>
 8009eb6:	4b70      	ldr	r3, [pc, #448]	@ (800a078 <xTaskIncrementTick+0x20c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	61fb      	str	r3, [r7, #28]
 8009ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800a07c <xTaskIncrementTick+0x210>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a6d      	ldr	r2, [pc, #436]	@ (800a078 <xTaskIncrementTick+0x20c>)
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	4a6d      	ldr	r2, [pc, #436]	@ (800a07c <xTaskIncrementTick+0x210>)
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	4b6d      	ldr	r3, [pc, #436]	@ (800a080 <xTaskIncrementTick+0x214>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	4a6b      	ldr	r2, [pc, #428]	@ (800a080 <xTaskIncrementTick+0x214>)
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	f000 fba2 	bl	800a61c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009ed8:	4b6a      	ldr	r3, [pc, #424]	@ (800a084 <xTaskIncrementTick+0x218>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6a3a      	ldr	r2, [r7, #32]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	f0c0 80a6 	bcc.w	800a030 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ee4:	4b64      	ldr	r3, [pc, #400]	@ (800a078 <xTaskIncrementTick+0x20c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d104      	bne.n	8009ef8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eee:	4b65      	ldr	r3, [pc, #404]	@ (800a084 <xTaskIncrementTick+0x218>)
 8009ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef4:	601a      	str	r2, [r3, #0]
                    break;
 8009ef6:	e09b      	b.n	800a030 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef8:	4b5f      	ldr	r3, [pc, #380]	@ (800a078 <xTaskIncrementTick+0x20c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009f08:	6a3a      	ldr	r2, [r7, #32]
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d203      	bcs.n	8009f18 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009f10:	4a5c      	ldr	r2, [pc, #368]	@ (800a084 <xTaskIncrementTick+0x218>)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009f16:	e08b      	b.n	800a030 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	613b      	str	r3, [r7, #16]
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	69ba      	ldr	r2, [r7, #24]
 8009f24:	68d2      	ldr	r2, [r2, #12]
 8009f26:	609a      	str	r2, [r3, #8]
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	6892      	ldr	r2, [r2, #8]
 8009f30:	605a      	str	r2, [r3, #4]
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d103      	bne.n	8009f46 <xTaskIncrementTick+0xda>
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	605a      	str	r2, [r3, #4]
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	615a      	str	r2, [r3, #20]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	1e5a      	subs	r2, r3, #1
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d01e      	beq.n	8009f9c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	6a12      	ldr	r2, [r2, #32]
 8009f6c:	609a      	str	r2, [r3, #8]
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	69ba      	ldr	r2, [r7, #24]
 8009f74:	69d2      	ldr	r2, [r2, #28]
 8009f76:	605a      	str	r2, [r3, #4]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	3318      	adds	r3, #24
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d103      	bne.n	8009f8c <xTaskIncrementTick+0x120>
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	6a1a      	ldr	r2, [r3, #32]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	605a      	str	r2, [r3, #4]
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	1e5a      	subs	r2, r3, #1
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	409a      	lsls	r2, r3
 8009fa4:	4b38      	ldr	r3, [pc, #224]	@ (800a088 <xTaskIncrementTick+0x21c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	4a37      	ldr	r2, [pc, #220]	@ (800a088 <xTaskIncrementTick+0x21c>)
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fb2:	4936      	ldr	r1, [pc, #216]	@ (800a08c <xTaskIncrementTick+0x220>)
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	60bb      	str	r3, [r7, #8]
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	609a      	str	r2, [r3, #8]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	3204      	adds	r2, #4
 8009fda:	605a      	str	r2, [r3, #4]
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	1d1a      	adds	r2, r3, #4
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	609a      	str	r2, [r3, #8]
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4a26      	ldr	r2, [pc, #152]	@ (800a08c <xTaskIncrementTick+0x220>)
 8009ff2:	441a      	add	r2, r3
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	615a      	str	r2, [r3, #20]
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffc:	4923      	ldr	r1, [pc, #140]	@ (800a08c <xTaskIncrementTick+0x220>)
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	1c59      	adds	r1, r3, #1
 800a00c:	481f      	ldr	r0, [pc, #124]	@ (800a08c <xTaskIncrementTick+0x220>)
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4403      	add	r3, r0
 800a018:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01e:	4b1c      	ldr	r3, [pc, #112]	@ (800a090 <xTaskIncrementTick+0x224>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a024:	429a      	cmp	r2, r3
 800a026:	f67f af5d 	bls.w	8009ee4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800a02a:	2301      	movs	r3, #1
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a02e:	e759      	b.n	8009ee4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a030:	4b17      	ldr	r3, [pc, #92]	@ (800a090 <xTaskIncrementTick+0x224>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a036:	4915      	ldr	r1, [pc, #84]	@ (800a08c <xTaskIncrementTick+0x220>)
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d901      	bls.n	800a04c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800a048:	2301      	movs	r3, #1
 800a04a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800a04c:	4b11      	ldr	r3, [pc, #68]	@ (800a094 <xTaskIncrementTick+0x228>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d007      	beq.n	800a064 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	627b      	str	r3, [r7, #36]	@ 0x24
 800a058:	e004      	b.n	800a064 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a05a:	4b0f      	ldr	r3, [pc, #60]	@ (800a098 <xTaskIncrementTick+0x22c>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3301      	adds	r3, #1
 800a060:	4a0d      	ldr	r2, [pc, #52]	@ (800a098 <xTaskIncrementTick+0x22c>)
 800a062:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800a064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a066:	4618      	mov	r0, r3
 800a068:	3728      	adds	r7, #40	@ 0x28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	2000044c 	.word	0x2000044c
 800a074:	20000428 	.word	0x20000428
 800a078:	200003dc 	.word	0x200003dc
 800a07c:	200003e0 	.word	0x200003e0
 800a080:	2000043c 	.word	0x2000043c
 800a084:	20000444 	.word	0x20000444
 800a088:	2000042c 	.word	0x2000042c
 800a08c:	20000350 	.word	0x20000350
 800a090:	2000034c 	.word	0x2000034c
 800a094:	20000438 	.word	0x20000438
 800a098:	20000434 	.word	0x20000434

0800a09c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0a2:	4b27      	ldr	r3, [pc, #156]	@ (800a140 <vTaskSwitchContext+0xa4>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a0aa:	4b26      	ldr	r3, [pc, #152]	@ (800a144 <vTaskSwitchContext+0xa8>)
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800a0b0:	e040      	b.n	800a134 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800a0b2:	4b24      	ldr	r3, [pc, #144]	@ (800a144 <vTaskSwitchContext+0xa8>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b8:	4b23      	ldr	r3, [pc, #140]	@ (800a148 <vTaskSwitchContext+0xac>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	fab3 f383 	clz	r3, r3
 800a0c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	f1c3 031f 	rsb	r3, r3, #31
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	491f      	ldr	r1, [pc, #124]	@ (800a14c <vTaskSwitchContext+0xb0>)
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10b      	bne.n	800a0fa <vTaskSwitchContext+0x5e>
        __asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	607b      	str	r3, [r7, #4]
    }
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop
 800a0f8:	e7fd      	b.n	800a0f6 <vTaskSwitchContext+0x5a>
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4a11      	ldr	r2, [pc, #68]	@ (800a14c <vTaskSwitchContext+0xb0>)
 800a106:	4413      	add	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	605a      	str	r2, [r3, #4]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	3308      	adds	r3, #8
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d104      	bne.n	800a12a <vTaskSwitchContext+0x8e>
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	605a      	str	r2, [r3, #4]
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	4a07      	ldr	r2, [pc, #28]	@ (800a150 <vTaskSwitchContext+0xb4>)
 800a132:	6013      	str	r3, [r2, #0]
}
 800a134:	bf00      	nop
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	2000044c 	.word	0x2000044c
 800a144:	20000438 	.word	0x20000438
 800a148:	2000042c 	.word	0x2000042c
 800a14c:	20000350 	.word	0x20000350
 800a150:	2000034c 	.word	0x2000034c

0800a154 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10b      	bne.n	800a17c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	60fb      	str	r3, [r7, #12]
    }
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a17c:	4b07      	ldr	r3, [pc, #28]	@ (800a19c <vTaskPlaceOnEventList+0x48>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3318      	adds	r3, #24
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7fe fd39 	bl	8008bfc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a18a:	2101      	movs	r1, #1
 800a18c:	6838      	ldr	r0, [r7, #0]
 800a18e:	f000 fdb7 	bl	800ad00 <prvAddCurrentTaskToDelayedList>
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	2000034c 	.word	0x2000034c

0800a1a0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10b      	bne.n	800a1ca <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	613b      	str	r3, [r7, #16]
    }
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	e7fd      	b.n	800a1c6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	4b15      	ldr	r3, [pc, #84]	@ (800a228 <vTaskPlaceOnEventListRestricted+0x88>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	61da      	str	r2, [r3, #28]
 800a1d8:	4b13      	ldr	r3, [pc, #76]	@ (800a228 <vTaskPlaceOnEventListRestricted+0x88>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	6892      	ldr	r2, [r2, #8]
 800a1e0:	621a      	str	r2, [r3, #32]
 800a1e2:	4b11      	ldr	r3, [pc, #68]	@ (800a228 <vTaskPlaceOnEventListRestricted+0x88>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	3218      	adds	r2, #24
 800a1ec:	605a      	str	r2, [r3, #4]
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a228 <vTaskPlaceOnEventListRestricted+0x88>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f103 0218 	add.w	r2, r3, #24
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	609a      	str	r2, [r3, #8]
 800a1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a228 <vTaskPlaceOnEventListRestricted+0x88>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	629a      	str	r2, [r3, #40]	@ 0x28
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800a212:	f04f 33ff 	mov.w	r3, #4294967295
 800a216:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a218:	6879      	ldr	r1, [r7, #4]
 800a21a:	68b8      	ldr	r0, [r7, #8]
 800a21c:	f000 fd70 	bl	800ad00 <prvAddCurrentTaskToDelayedList>
    }
 800a220:	bf00      	nop
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	2000034c 	.word	0x2000034c

0800a22c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b08b      	sub	sp, #44	@ 0x2c
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10b      	bne.n	800a25a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60fb      	str	r3, [r7, #12]
    }
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	e7fd      	b.n	800a256 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a25e:	61fb      	str	r3, [r7, #28]
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	6a3a      	ldr	r2, [r7, #32]
 800a266:	6a12      	ldr	r2, [r2, #32]
 800a268:	609a      	str	r2, [r3, #8]
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	6a3a      	ldr	r2, [r7, #32]
 800a270:	69d2      	ldr	r2, [r2, #28]
 800a272:	605a      	str	r2, [r3, #4]
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	3318      	adds	r3, #24
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d103      	bne.n	800a288 <xTaskRemoveFromEventList+0x5c>
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	6a1a      	ldr	r2, [r3, #32]
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	605a      	str	r2, [r3, #4]
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	2200      	movs	r2, #0
 800a28c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	1e5a      	subs	r2, r3, #1
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a298:	4b4a      	ldr	r3, [pc, #296]	@ (800a3c4 <xTaskRemoveFromEventList+0x198>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d15e      	bne.n	800a35e <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	617b      	str	r3, [r7, #20]
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	6a3a      	ldr	r2, [r7, #32]
 800a2ac:	68d2      	ldr	r2, [r2, #12]
 800a2ae:	609a      	str	r2, [r3, #8]
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	6a3a      	ldr	r2, [r7, #32]
 800a2b6:	6892      	ldr	r2, [r2, #8]
 800a2b8:	605a      	str	r2, [r3, #4]
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d103      	bne.n	800a2ce <xTaskRemoveFromEventList+0xa2>
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	68da      	ldr	r2, [r3, #12]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	605a      	str	r2, [r3, #4]
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	615a      	str	r2, [r3, #20]
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	1e5a      	subs	r2, r3, #1
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	409a      	lsls	r2, r3
 800a2e6:	4b38      	ldr	r3, [pc, #224]	@ (800a3c8 <xTaskRemoveFromEventList+0x19c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	4a36      	ldr	r2, [pc, #216]	@ (800a3c8 <xTaskRemoveFromEventList+0x19c>)
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f4:	4935      	ldr	r1, [pc, #212]	@ (800a3cc <xTaskRemoveFromEventList+0x1a0>)
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	440b      	add	r3, r1
 800a300:	3304      	adds	r3, #4
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	609a      	str	r2, [r3, #8]
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	60da      	str	r2, [r3, #12]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	6a3a      	ldr	r2, [r7, #32]
 800a31a:	3204      	adds	r2, #4
 800a31c:	605a      	str	r2, [r3, #4]
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	1d1a      	adds	r2, r3, #4
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	609a      	str	r2, [r3, #8]
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4a26      	ldr	r2, [pc, #152]	@ (800a3cc <xTaskRemoveFromEventList+0x1a0>)
 800a334:	441a      	add	r2, r3
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	615a      	str	r2, [r3, #20]
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a33e:	4923      	ldr	r1, [pc, #140]	@ (800a3cc <xTaskRemoveFromEventList+0x1a0>)
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	440b      	add	r3, r1
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	1c59      	adds	r1, r3, #1
 800a34e:	481f      	ldr	r0, [pc, #124]	@ (800a3cc <xTaskRemoveFromEventList+0x1a0>)
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4403      	add	r3, r0
 800a35a:	6019      	str	r1, [r3, #0]
 800a35c:	e01b      	b.n	800a396 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a35e:	4b1c      	ldr	r3, [pc, #112]	@ (800a3d0 <xTaskRemoveFromEventList+0x1a4>)
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	61bb      	str	r3, [r7, #24]
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	61da      	str	r2, [r3, #28]
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	6a3b      	ldr	r3, [r7, #32]
 800a370:	621a      	str	r2, [r3, #32]
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	6a3a      	ldr	r2, [r7, #32]
 800a378:	3218      	adds	r2, #24
 800a37a:	605a      	str	r2, [r3, #4]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	f103 0218 	add.w	r2, r3, #24
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	609a      	str	r2, [r3, #8]
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	4a11      	ldr	r2, [pc, #68]	@ (800a3d0 <xTaskRemoveFromEventList+0x1a4>)
 800a38a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a38c:	4b10      	ldr	r3, [pc, #64]	@ (800a3d0 <xTaskRemoveFromEventList+0x1a4>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3301      	adds	r3, #1
 800a392:	4a0f      	ldr	r2, [pc, #60]	@ (800a3d0 <xTaskRemoveFromEventList+0x1a4>)
 800a394:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a39a:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d4 <xTaskRemoveFromEventList+0x1a8>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d905      	bls.n	800a3b0 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a3a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d8 <xTaskRemoveFromEventList+0x1ac>)
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	e001      	b.n	800a3b4 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	372c      	adds	r7, #44	@ 0x2c
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	2000044c 	.word	0x2000044c
 800a3c8:	2000042c 	.word	0x2000042c
 800a3cc:	20000350 	.word	0x20000350
 800a3d0:	200003e4 	.word	0x200003e4
 800a3d4:	2000034c 	.word	0x2000034c
 800a3d8:	20000438 	.word	0x20000438

0800a3dc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3e4:	4b06      	ldr	r3, [pc, #24]	@ (800a400 <vTaskInternalSetTimeOutState+0x24>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a3ec:	4b05      	ldr	r3, [pc, #20]	@ (800a404 <vTaskInternalSetTimeOutState+0x28>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	2000043c 	.word	0x2000043c
 800a404:	20000428 	.word	0x20000428

0800a408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10b      	bne.n	800a430 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	613b      	str	r3, [r7, #16]
    }
 800a42a:	bf00      	nop
 800a42c:	bf00      	nop
 800a42e:	e7fd      	b.n	800a42c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10b      	bne.n	800a44e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	60fb      	str	r3, [r7, #12]
    }
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	e7fd      	b.n	800a44a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800a44e:	f001 f895 	bl	800b57c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a452:	4b1f      	ldr	r3, [pc, #124]	@ (800a4d0 <xTaskCheckForTimeOut+0xc8>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46a:	d102      	bne.n	800a472 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
 800a470:	e026      	b.n	800a4c0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	4b17      	ldr	r3, [pc, #92]	@ (800a4d4 <xTaskCheckForTimeOut+0xcc>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d00a      	beq.n	800a494 <xTaskCheckForTimeOut+0x8c>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	429a      	cmp	r2, r3
 800a486:	d305      	bcc.n	800a494 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a488:	2301      	movs	r3, #1
 800a48a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2200      	movs	r2, #0
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	e015      	b.n	800a4c0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d20b      	bcs.n	800a4b6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	1ad2      	subs	r2, r2, r3
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff ff96 	bl	800a3dc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61fb      	str	r3, [r7, #28]
 800a4b4:	e004      	b.n	800a4c0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a4c0:	f001 f88e 	bl	800b5e0 <vPortExitCritical>

    return xReturn;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3720      	adds	r7, #32
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20000428 	.word	0x20000428
 800a4d4:	2000043c 	.word	0x2000043c

0800a4d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a4dc:	4b03      	ldr	r3, [pc, #12]	@ (800a4ec <vTaskMissedYield+0x14>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]
}
 800a4e2:	bf00      	nop
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	20000438 	.word	0x20000438

0800a4f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a4f8:	f000 f852 	bl	800a5a0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4fc:	4b06      	ldr	r3, [pc, #24]	@ (800a518 <prvIdleTask+0x28>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d9f9      	bls.n	800a4f8 <prvIdleTask+0x8>
            {
                taskYIELD();
 800a504:	4b05      	ldr	r3, [pc, #20]	@ (800a51c <prvIdleTask+0x2c>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a514:	e7f0      	b.n	800a4f8 <prvIdleTask+0x8>
 800a516:	bf00      	nop
 800a518:	20000350 	.word	0x20000350
 800a51c:	e000ed04 	.word	0xe000ed04

0800a520 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a526:	2300      	movs	r3, #0
 800a528:	607b      	str	r3, [r7, #4]
 800a52a:	e00c      	b.n	800a546 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	4613      	mov	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4a12      	ldr	r2, [pc, #72]	@ (800a580 <prvInitialiseTaskLists+0x60>)
 800a538:	4413      	add	r3, r2
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe fb31 	bl	8008ba2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3301      	adds	r3, #1
 800a544:	607b      	str	r3, [r7, #4]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d9ef      	bls.n	800a52c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a54c:	480d      	ldr	r0, [pc, #52]	@ (800a584 <prvInitialiseTaskLists+0x64>)
 800a54e:	f7fe fb28 	bl	8008ba2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a552:	480d      	ldr	r0, [pc, #52]	@ (800a588 <prvInitialiseTaskLists+0x68>)
 800a554:	f7fe fb25 	bl	8008ba2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a558:	480c      	ldr	r0, [pc, #48]	@ (800a58c <prvInitialiseTaskLists+0x6c>)
 800a55a:	f7fe fb22 	bl	8008ba2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a55e:	480c      	ldr	r0, [pc, #48]	@ (800a590 <prvInitialiseTaskLists+0x70>)
 800a560:	f7fe fb1f 	bl	8008ba2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a564:	480b      	ldr	r0, [pc, #44]	@ (800a594 <prvInitialiseTaskLists+0x74>)
 800a566:	f7fe fb1c 	bl	8008ba2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a56a:	4b0b      	ldr	r3, [pc, #44]	@ (800a598 <prvInitialiseTaskLists+0x78>)
 800a56c:	4a05      	ldr	r2, [pc, #20]	@ (800a584 <prvInitialiseTaskLists+0x64>)
 800a56e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a570:	4b0a      	ldr	r3, [pc, #40]	@ (800a59c <prvInitialiseTaskLists+0x7c>)
 800a572:	4a05      	ldr	r2, [pc, #20]	@ (800a588 <prvInitialiseTaskLists+0x68>)
 800a574:	601a      	str	r2, [r3, #0]
}
 800a576:	bf00      	nop
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	20000350 	.word	0x20000350
 800a584:	200003b4 	.word	0x200003b4
 800a588:	200003c8 	.word	0x200003c8
 800a58c:	200003e4 	.word	0x200003e4
 800a590:	200003f8 	.word	0x200003f8
 800a594:	20000410 	.word	0x20000410
 800a598:	200003dc 	.word	0x200003dc
 800a59c:	200003e0 	.word	0x200003e0

0800a5a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5a6:	e019      	b.n	800a5dc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a5a8:	f000 ffe8 	bl	800b57c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ac:	4b10      	ldr	r3, [pc, #64]	@ (800a5f0 <prvCheckTasksWaitingTermination+0x50>)
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fe fb58 	bl	8008c6e <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a5be:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <prvCheckTasksWaitingTermination+0x54>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a5f4 <prvCheckTasksWaitingTermination+0x54>)
 800a5c6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a5c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f8 <prvCheckTasksWaitingTermination+0x58>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a5f8 <prvCheckTasksWaitingTermination+0x58>)
 800a5d0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a5d2:	f001 f805 	bl	800b5e0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f810 	bl	800a5fc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5dc:	4b06      	ldr	r3, [pc, #24]	@ (800a5f8 <prvCheckTasksWaitingTermination+0x58>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1e1      	bne.n	800a5a8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	200003f8 	.word	0x200003f8
 800a5f4:	20000424 	.word	0x20000424
 800a5f8:	2000040c 	.word	0x2000040c

0800a5fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a608:	4618      	mov	r0, r3
 800a60a:	f001 f95b 	bl	800b8c4 <vPortFree>
            vPortFree( pxTCB );
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 f958 	bl	800b8c4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a620:	4b0a      	ldr	r3, [pc, #40]	@ (800a64c <prvResetNextTaskUnblockTime+0x30>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d104      	bne.n	800a634 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a62a:	4b09      	ldr	r3, [pc, #36]	@ (800a650 <prvResetNextTaskUnblockTime+0x34>)
 800a62c:	f04f 32ff 	mov.w	r2, #4294967295
 800a630:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a632:	e005      	b.n	800a640 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a634:	4b05      	ldr	r3, [pc, #20]	@ (800a64c <prvResetNextTaskUnblockTime+0x30>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a04      	ldr	r2, [pc, #16]	@ (800a650 <prvResetNextTaskUnblockTime+0x34>)
 800a63e:	6013      	str	r3, [r2, #0]
}
 800a640:	bf00      	nop
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	200003dc 	.word	0x200003dc
 800a650:	20000444 	.word	0x20000444

0800a654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a65a:	4b0b      	ldr	r3, [pc, #44]	@ (800a688 <xTaskGetSchedulerState+0x34>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d102      	bne.n	800a668 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a662:	2301      	movs	r3, #1
 800a664:	607b      	str	r3, [r7, #4]
 800a666:	e008      	b.n	800a67a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a668:	4b08      	ldr	r3, [pc, #32]	@ (800a68c <xTaskGetSchedulerState+0x38>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a670:	2302      	movs	r3, #2
 800a672:	607b      	str	r3, [r7, #4]
 800a674:	e001      	b.n	800a67a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a676:	2300      	movs	r3, #0
 800a678:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a67a:	687b      	ldr	r3, [r7, #4]
    }
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	20000430 	.word	0x20000430
 800a68c:	2000044c 	.word	0x2000044c

0800a690 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 8087 	beq.w	800a7b6 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ac:	4b44      	ldr	r3, [pc, #272]	@ (800a7c0 <xTaskPriorityInherit+0x130>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d276      	bcs.n	800a7a4 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	db06      	blt.n	800a6cc <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6be:	4b40      	ldr	r3, [pc, #256]	@ (800a7c0 <xTaskPriorityInherit+0x130>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c4:	f1c3 0205 	rsb	r2, r3, #5
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	6959      	ldr	r1, [r3, #20]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4a39      	ldr	r2, [pc, #228]	@ (800a7c4 <xTaskPriorityInherit+0x134>)
 800a6de:	4413      	add	r3, r2
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d157      	bne.n	800a794 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe fac0 	bl	8008c6e <uxListRemove>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fe:	43da      	mvns	r2, r3
 800a700:	4b31      	ldr	r3, [pc, #196]	@ (800a7c8 <xTaskPriorityInherit+0x138>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4013      	ands	r3, r2
 800a706:	4a30      	ldr	r2, [pc, #192]	@ (800a7c8 <xTaskPriorityInherit+0x138>)
 800a708:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a70a:	4b2d      	ldr	r3, [pc, #180]	@ (800a7c0 <xTaskPriorityInherit+0x130>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a718:	2201      	movs	r2, #1
 800a71a:	409a      	lsls	r2, r3
 800a71c:	4b2a      	ldr	r3, [pc, #168]	@ (800a7c8 <xTaskPriorityInherit+0x138>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4313      	orrs	r3, r2
 800a722:	4a29      	ldr	r2, [pc, #164]	@ (800a7c8 <xTaskPriorityInherit+0x138>)
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a72a:	4926      	ldr	r1, [pc, #152]	@ (800a7c4 <xTaskPriorityInherit+0x134>)
 800a72c:	4613      	mov	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	3304      	adds	r3, #4
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	609a      	str	r2, [r3, #8]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	689a      	ldr	r2, [r3, #8]
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	60da      	str	r2, [r3, #12]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	3204      	adds	r2, #4
 800a752:	605a      	str	r2, [r3, #4]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	1d1a      	adds	r2, r3, #4
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	609a      	str	r2, [r3, #8]
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4a16      	ldr	r2, [pc, #88]	@ (800a7c4 <xTaskPriorityInherit+0x134>)
 800a76a:	441a      	add	r2, r3
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	615a      	str	r2, [r3, #20]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a774:	4913      	ldr	r1, [pc, #76]	@ (800a7c4 <xTaskPriorityInherit+0x134>)
 800a776:	4613      	mov	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	1c59      	adds	r1, r3, #1
 800a784:	480f      	ldr	r0, [pc, #60]	@ (800a7c4 <xTaskPriorityInherit+0x134>)
 800a786:	4613      	mov	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4403      	add	r3, r0
 800a790:	6019      	str	r1, [r3, #0]
 800a792:	e004      	b.n	800a79e <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a794:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c0 <xTaskPriorityInherit+0x130>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	617b      	str	r3, [r7, #20]
 800a7a2:	e008      	b.n	800a7b6 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7a8:	4b05      	ldr	r3, [pc, #20]	@ (800a7c0 <xTaskPriorityInherit+0x130>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d201      	bcs.n	800a7b6 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a7b6:	697b      	ldr	r3, [r7, #20]
    }
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	2000034c 	.word	0x2000034c
 800a7c4:	20000350 	.word	0x20000350
 800a7c8:	2000042c 	.word	0x2000042c

0800a7cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 808e 	beq.w	800a900 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a7e4:	4b49      	ldr	r3, [pc, #292]	@ (800a90c <xTaskPriorityDisinherit+0x140>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d00b      	beq.n	800a806 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	613b      	str	r3, [r7, #16]
    }
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10b      	bne.n	800a826 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60fb      	str	r3, [r7, #12]
    }
 800a820:	bf00      	nop
 800a822:	bf00      	nop
 800a824:	e7fd      	b.n	800a822 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a82a:	1e5a      	subs	r2, r3, #1
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a838:	429a      	cmp	r2, r3
 800a83a:	d061      	beq.n	800a900 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d15d      	bne.n	800a900 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	3304      	adds	r3, #4
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fe fa10 	bl	8008c6e <uxListRemove>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10a      	bne.n	800a86a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a858:	2201      	movs	r2, #1
 800a85a:	fa02 f303 	lsl.w	r3, r2, r3
 800a85e:	43da      	mvns	r2, r3
 800a860:	4b2b      	ldr	r3, [pc, #172]	@ (800a910 <xTaskPriorityDisinherit+0x144>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4013      	ands	r3, r2
 800a866:	4a2a      	ldr	r2, [pc, #168]	@ (800a910 <xTaskPriorityDisinherit+0x144>)
 800a868:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a876:	f1c3 0205 	rsb	r2, r3, #5
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a882:	2201      	movs	r2, #1
 800a884:	409a      	lsls	r2, r3
 800a886:	4b22      	ldr	r3, [pc, #136]	@ (800a910 <xTaskPriorityDisinherit+0x144>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	4a20      	ldr	r2, [pc, #128]	@ (800a910 <xTaskPriorityDisinherit+0x144>)
 800a88e:	6013      	str	r3, [r2, #0]
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a894:	491f      	ldr	r1, [pc, #124]	@ (800a914 <xTaskPriorityDisinherit+0x148>)
 800a896:	4613      	mov	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	440b      	add	r3, r1
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	609a      	str	r2, [r3, #8]
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	689a      	ldr	r2, [r3, #8]
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	60da      	str	r2, [r3, #12]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	3204      	adds	r2, #4
 800a8bc:	605a      	str	r2, [r3, #4]
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	1d1a      	adds	r2, r3, #4
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	609a      	str	r2, [r3, #8]
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4a10      	ldr	r2, [pc, #64]	@ (800a914 <xTaskPriorityDisinherit+0x148>)
 800a8d4:	441a      	add	r2, r3
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	615a      	str	r2, [r3, #20]
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8de:	490d      	ldr	r1, [pc, #52]	@ (800a914 <xTaskPriorityDisinherit+0x148>)
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	440b      	add	r3, r1
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	1c59      	adds	r1, r3, #1
 800a8ee:	4809      	ldr	r0, [pc, #36]	@ (800a914 <xTaskPriorityDisinherit+0x148>)
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4403      	add	r3, r0
 800a8fa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a900:	69fb      	ldr	r3, [r7, #28]
    }
 800a902:	4618      	mov	r0, r3
 800a904:	3720      	adds	r7, #32
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	2000034c 	.word	0x2000034c
 800a910:	2000042c 	.word	0x2000042c
 800a914:	20000350 	.word	0x20000350

0800a918 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	@ 0x28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a926:	2301      	movs	r3, #1
 800a928:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 80a3 	beq.w	800aa78 <vTaskPriorityDisinheritAfterTimeout+0x160>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10b      	bne.n	800a952 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	613b      	str	r3, [r7, #16]
    }
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	e7fd      	b.n	800a94e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a952:	6a3b      	ldr	r3, [r7, #32]
 800a954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d902      	bls.n	800a962 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a960:	e002      	b.n	800a968 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a966:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a96c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a96e:	429a      	cmp	r2, r3
 800a970:	f000 8082 	beq.w	800aa78 <vTaskPriorityDisinheritAfterTimeout+0x160>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a978:	69fa      	ldr	r2, [r7, #28]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d17c      	bne.n	800aa78 <vTaskPriorityDisinheritAfterTimeout+0x160>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800a97e:	4b40      	ldr	r3, [pc, #256]	@ (800aa80 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6a3a      	ldr	r2, [r7, #32]
 800a984:	429a      	cmp	r2, r3
 800a986:	d10b      	bne.n	800a9a0 <vTaskPriorityDisinheritAfterTimeout+0x88>
        __asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	60fb      	str	r3, [r7, #12]
    }
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	e7fd      	b.n	800a99c <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a4:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9aa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	db04      	blt.n	800a9be <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	f1c3 0205 	rsb	r2, r3, #5
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	6959      	ldr	r1, [r3, #20]
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4a2d      	ldr	r2, [pc, #180]	@ (800aa84 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800a9ce:	4413      	add	r3, r2
 800a9d0:	4299      	cmp	r1, r3
 800a9d2:	d151      	bne.n	800aa78 <vTaskPriorityDisinheritAfterTimeout+0x160>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe f948 	bl	8008c6e <uxListRemove>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10a      	bne.n	800a9fa <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ee:	43da      	mvns	r2, r3
 800a9f0:	4b25      	ldr	r3, [pc, #148]	@ (800aa88 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	4a24      	ldr	r2, [pc, #144]	@ (800aa88 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800a9f8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fe:	2201      	movs	r2, #1
 800aa00:	409a      	lsls	r2, r3
 800aa02:	4b21      	ldr	r3, [pc, #132]	@ (800aa88 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	4a1f      	ldr	r2, [pc, #124]	@ (800aa88 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa10:	491c      	ldr	r1, [pc, #112]	@ (800aa84 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	440b      	add	r3, r1
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	617b      	str	r3, [r7, #20]
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	609a      	str	r2, [r3, #8]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	689a      	ldr	r2, [r3, #8]
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	60da      	str	r2, [r3, #12]
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	6a3a      	ldr	r2, [r7, #32]
 800aa36:	3204      	adds	r2, #4
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	1d1a      	adds	r2, r3, #4
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	609a      	str	r2, [r3, #8]
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4a0d      	ldr	r2, [pc, #52]	@ (800aa84 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa50:	441a      	add	r2, r3
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	615a      	str	r2, [r3, #20]
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa5a:	490a      	ldr	r1, [pc, #40]	@ (800aa84 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	440b      	add	r3, r1
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	1c59      	adds	r1, r3, #1
 800aa6a:	4806      	ldr	r0, [pc, #24]	@ (800aa84 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4403      	add	r3, r0
 800aa76:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800aa78:	bf00      	nop
 800aa7a:	3728      	adds	r7, #40	@ 0x28
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	2000034c 	.word	0x2000034c
 800aa84:	20000350 	.word	0x20000350
 800aa88:	2000042c 	.word	0x2000042c

0800aa8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800aa90:	4b07      	ldr	r3, [pc, #28]	@ (800aab0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d004      	beq.n	800aaa2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800aa98:	4b05      	ldr	r3, [pc, #20]	@ (800aab0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa9e:	3201      	adds	r2, #1
 800aaa0:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800aaa2:	4b03      	ldr	r3, [pc, #12]	@ (800aab0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
    }
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	2000034c 	.word	0x2000034c

0800aab4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08e      	sub	sp, #56	@ 0x38
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800aac2:	2301      	movs	r3, #1
 800aac4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00b      	beq.n	800aae4 <xTaskGenericNotify+0x30>
        __asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	623b      	str	r3, [r7, #32]
    }
 800aade:	bf00      	nop
 800aae0:	bf00      	nop
 800aae2:	e7fd      	b.n	800aae0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10b      	bne.n	800ab02 <xTaskGenericNotify+0x4e>
        __asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	61fb      	str	r3, [r7, #28]
    }
 800aafc:	bf00      	nop
 800aafe:	bf00      	nop
 800ab00:	e7fd      	b.n	800aafe <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800ab06:	f000 fd39 	bl	800b57c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800ab0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d006      	beq.n	800ab1e <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	3214      	adds	r2, #20
 800ab16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab1c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800ab1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	4413      	add	r3, r2
 800ab24:	3354      	adds	r3, #84	@ 0x54
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800ab2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	4413      	add	r3, r2
 800ab32:	3354      	adds	r3, #84	@ 0x54
 800ab34:	2202      	movs	r2, #2
 800ab36:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	d83b      	bhi.n	800abb6 <xTaskGenericNotify+0x102>
 800ab3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <xTaskGenericNotify+0x90>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800abd7 	.word	0x0800abd7
 800ab48:	0800ab59 	.word	0x0800ab59
 800ab4c:	0800ab75 	.word	0x0800ab75
 800ab50:	0800ab8d 	.word	0x0800ab8d
 800ab54:	0800ab9b 	.word	0x0800ab9b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800ab58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	3214      	adds	r2, #20
 800ab5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	ea42 0103 	orr.w	r1, r2, r3
 800ab68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	3214      	adds	r2, #20
 800ab6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ab72:	e033      	b.n	800abdc <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800ab74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	3214      	adds	r2, #20
 800ab7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7e:	1c59      	adds	r1, r3, #1
 800ab80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	3214      	adds	r2, #20
 800ab86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ab8a:	e027      	b.n	800abdc <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	3214      	adds	r2, #20
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ab98:	e020      	b.n	800abdc <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ab9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d006      	beq.n	800abb0 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	3214      	adds	r2, #20
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800abae:	e015      	b.n	800abdc <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800abb4:	e012      	b.n	800abdc <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800abb6:	4b4d      	ldr	r3, [pc, #308]	@ (800acec <xTaskGenericNotify+0x238>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00d      	beq.n	800abda <xTaskGenericNotify+0x126>
        __asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	61bb      	str	r3, [r7, #24]
    }
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	e7fd      	b.n	800abd2 <xTaskGenericNotify+0x11e>
                    break;
 800abd6:	bf00      	nop
 800abd8:	e000      	b.n	800abdc <xTaskGenericNotify+0x128>

                    break;
 800abda:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800abdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d17c      	bne.n	800acde <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800abe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf0:	68d2      	ldr	r2, [r2, #12]
 800abf2:	609a      	str	r2, [r3, #8]
 800abf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abfa:	6892      	ldr	r2, [r2, #8]
 800abfc:	605a      	str	r2, [r3, #4]
 800abfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac04:	3304      	adds	r3, #4
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d103      	bne.n	800ac12 <xTaskGenericNotify+0x15e>
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac10:	605a      	str	r2, [r3, #4]
 800ac12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac14:	2200      	movs	r2, #0
 800ac16:	615a      	str	r2, [r3, #20]
 800ac18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	1e5a      	subs	r2, r3, #1
 800ac1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac20:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac26:	2201      	movs	r2, #1
 800ac28:	409a      	lsls	r2, r3
 800ac2a:	4b31      	ldr	r3, [pc, #196]	@ (800acf0 <xTaskGenericNotify+0x23c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	4a2f      	ldr	r2, [pc, #188]	@ (800acf0 <xTaskGenericNotify+0x23c>)
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac38:	492e      	ldr	r1, [pc, #184]	@ (800acf4 <xTaskGenericNotify+0x240>)
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	3304      	adds	r3, #4
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac4e:	609a      	str	r2, [r3, #8]
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac56:	60da      	str	r2, [r3, #12]
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac5e:	3204      	adds	r2, #4
 800ac60:	605a      	str	r2, [r3, #4]
 800ac62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac64:	1d1a      	adds	r2, r3, #4
 800ac66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac68:	609a      	str	r2, [r3, #8]
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac6e:	4613      	mov	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4a1f      	ldr	r2, [pc, #124]	@ (800acf4 <xTaskGenericNotify+0x240>)
 800ac78:	441a      	add	r2, r3
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	615a      	str	r2, [r3, #20]
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac82:	491c      	ldr	r1, [pc, #112]	@ (800acf4 <xTaskGenericNotify+0x240>)
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	440b      	add	r3, r1
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	1c59      	adds	r1, r3, #1
 800ac92:	4818      	ldr	r0, [pc, #96]	@ (800acf4 <xTaskGenericNotify+0x240>)
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4403      	add	r3, r0
 800ac9e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <xTaskGenericNotify+0x20c>
        __asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	617b      	str	r3, [r7, #20]
    }
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acc4:	4b0c      	ldr	r3, [pc, #48]	@ (800acf8 <xTaskGenericNotify+0x244>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acca:	429a      	cmp	r2, r3
 800accc:	d907      	bls.n	800acde <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800acce:	4b0b      	ldr	r3, [pc, #44]	@ (800acfc <xTaskGenericNotify+0x248>)
 800acd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800acde:	f000 fc7f 	bl	800b5e0 <vPortExitCritical>

        return xReturn;
 800ace2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800ace4:	4618      	mov	r0, r3
 800ace6:	3738      	adds	r7, #56	@ 0x38
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20000428 	.word	0x20000428
 800acf0:	2000042c 	.word	0x2000042c
 800acf4:	20000350 	.word	0x20000350
 800acf8:	2000034c 	.word	0x2000034c
 800acfc:	e000ed04 	.word	0xe000ed04

0800ad00 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800ad0a:	4b36      	ldr	r3, [pc, #216]	@ (800ade4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad10:	4b35      	ldr	r3, [pc, #212]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3304      	adds	r3, #4
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fd ffa9 	bl	8008c6e <uxListRemove>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10b      	bne.n	800ad3a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ad22:	4b31      	ldr	r3, [pc, #196]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad28:	2201      	movs	r2, #1
 800ad2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2e:	43da      	mvns	r2, r3
 800ad30:	4b2e      	ldr	r3, [pc, #184]	@ (800adec <prvAddCurrentTaskToDelayedList+0xec>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4013      	ands	r3, r2
 800ad36:	4a2d      	ldr	r2, [pc, #180]	@ (800adec <prvAddCurrentTaskToDelayedList+0xec>)
 800ad38:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad40:	d124      	bne.n	800ad8c <prvAddCurrentTaskToDelayedList+0x8c>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d021      	beq.n	800ad8c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad48:	4b29      	ldr	r3, [pc, #164]	@ (800adf0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	613b      	str	r3, [r7, #16]
 800ad4e:	4b26      	ldr	r3, [pc, #152]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	609a      	str	r2, [r3, #8]
 800ad56:	4b24      	ldr	r3, [pc, #144]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	6892      	ldr	r2, [r2, #8]
 800ad5e:	60da      	str	r2, [r3, #12]
 800ad60:	4b21      	ldr	r3, [pc, #132]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	3204      	adds	r2, #4
 800ad6a:	605a      	str	r2, [r3, #4]
 800ad6c:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	1d1a      	adds	r2, r3, #4
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	609a      	str	r2, [r3, #8]
 800ad76:	4b1c      	ldr	r3, [pc, #112]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a1d      	ldr	r2, [pc, #116]	@ (800adf0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ad7c:	615a      	str	r2, [r3, #20]
 800ad7e:	4b1c      	ldr	r3, [pc, #112]	@ (800adf0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3301      	adds	r3, #1
 800ad84:	4a1a      	ldr	r2, [pc, #104]	@ (800adf0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ad8a:	e026      	b.n	800adda <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4413      	add	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad94:	4b14      	ldr	r3, [pc, #80]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d209      	bcs.n	800adb8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ada4:	4b13      	ldr	r3, [pc, #76]	@ (800adf4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	4b0f      	ldr	r3, [pc, #60]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3304      	adds	r3, #4
 800adae:	4619      	mov	r1, r3
 800adb0:	4610      	mov	r0, r2
 800adb2:	f7fd ff23 	bl	8008bfc <vListInsert>
}
 800adb6:	e010      	b.n	800adda <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb8:	4b0f      	ldr	r3, [pc, #60]	@ (800adf8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7fd ff19 	bl	8008bfc <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800adca:	4b0c      	ldr	r3, [pc, #48]	@ (800adfc <prvAddCurrentTaskToDelayedList+0xfc>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	429a      	cmp	r2, r3
 800add2:	d202      	bcs.n	800adda <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800add4:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <prvAddCurrentTaskToDelayedList+0xfc>)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6013      	str	r3, [r2, #0]
}
 800adda:	bf00      	nop
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20000428 	.word	0x20000428
 800ade8:	2000034c 	.word	0x2000034c
 800adec:	2000042c 	.word	0x2000042c
 800adf0:	20000410 	.word	0x20000410
 800adf4:	200003e0 	.word	0x200003e0
 800adf8:	200003dc 	.word	0x200003dc
 800adfc:	20000444 	.word	0x20000444

0800ae00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800ae0a:	f000 fa4f 	bl	800b2ac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800ae0e:	4b12      	ldr	r3, [pc, #72]	@ (800ae58 <xTimerCreateTimerTask+0x58>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00b      	beq.n	800ae2e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800ae16:	4b11      	ldr	r3, [pc, #68]	@ (800ae5c <xTimerCreateTimerTask+0x5c>)
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ae24:	490e      	ldr	r1, [pc, #56]	@ (800ae60 <xTimerCreateTimerTask+0x60>)
 800ae26:	480f      	ldr	r0, [pc, #60]	@ (800ae64 <xTimerCreateTimerTask+0x64>)
 800ae28:	f7fe fd12 	bl	8009850 <xTaskCreate>
 800ae2c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10b      	bne.n	800ae4c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	603b      	str	r3, [r7, #0]
    }
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	e7fd      	b.n	800ae48 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800ae4c:	687b      	ldr	r3, [r7, #4]
    }
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20000480 	.word	0x20000480
 800ae5c:	20000484 	.word	0x20000484
 800ae60:	0800e6e8 	.word	0x0800e6e8
 800ae64:	0800af0d 	.word	0x0800af0d

0800ae68 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ae74:	e008      	b.n	800ae88 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a1b      	ldr	r3, [r3, #32]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	699a      	ldr	r2, [r3, #24]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	18d1      	adds	r1, r2, r3
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f8df 	bl	800b058 <prvInsertTimerInActiveList>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1ea      	bne.n	800ae76 <prvReloadTimer+0xe>
        }
    }
 800aea0:	bf00      	nop
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb6:	4b14      	ldr	r3, [pc, #80]	@ (800af08 <prvProcessExpiredTimer+0x5c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	3304      	adds	r3, #4
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fd fed2 	bl	8008c6e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d005      	beq.n	800aee4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7ff ffc3 	bl	800ae68 <prvReloadTimer>
 800aee2:	e008      	b.n	800aef6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeea:	f023 0301 	bic.w	r3, r3, #1
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	4798      	blx	r3
    }
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20000478 	.word	0x20000478

0800af0c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af14:	f107 0308 	add.w	r3, r7, #8
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f859 	bl	800afd0 <prvGetNextExpireTime>
 800af1e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	4619      	mov	r1, r3
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 f805 	bl	800af34 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800af2a:	f000 f8d7 	bl	800b0dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af2e:	bf00      	nop
 800af30:	e7f0      	b.n	800af14 <prvTimerTask+0x8>
	...

0800af34 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800af3e:	f7fe fe7b 	bl	8009c38 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	4618      	mov	r0, r3
 800af48:	f000 f866 	bl	800b018 <prvSampleTimeNow>
 800af4c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d130      	bne.n	800afb6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10a      	bne.n	800af70 <prvProcessTimerOrBlockTask+0x3c>
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d806      	bhi.n	800af70 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800af62:	f7fe fe77 	bl	8009c54 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff ff9f 	bl	800aeac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800af6e:	e024      	b.n	800afba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d008      	beq.n	800af88 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af76:	4b13      	ldr	r3, [pc, #76]	@ (800afc4 <prvProcessTimerOrBlockTask+0x90>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <prvProcessTimerOrBlockTask+0x50>
 800af80:	2301      	movs	r3, #1
 800af82:	e000      	b.n	800af86 <prvProcessTimerOrBlockTask+0x52>
 800af84:	2300      	movs	r3, #0
 800af86:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af88:	4b0f      	ldr	r3, [pc, #60]	@ (800afc8 <prvProcessTimerOrBlockTask+0x94>)
 800af8a:	6818      	ldr	r0, [r3, #0]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	4619      	mov	r1, r3
 800af96:	f7fe fc27 	bl	80097e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800af9a:	f7fe fe5b 	bl	8009c54 <xTaskResumeAll>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800afa4:	4b09      	ldr	r3, [pc, #36]	@ (800afcc <prvProcessTimerOrBlockTask+0x98>)
 800afa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
    }
 800afb4:	e001      	b.n	800afba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800afb6:	f7fe fe4d 	bl	8009c54 <xTaskResumeAll>
    }
 800afba:	bf00      	nop
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	2000047c 	.word	0x2000047c
 800afc8:	20000480 	.word	0x20000480
 800afcc:	e000ed04 	.word	0xe000ed04

0800afd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afd8:	4b0e      	ldr	r3, [pc, #56]	@ (800b014 <prvGetNextExpireTime+0x44>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <prvGetNextExpireTime+0x16>
 800afe2:	2201      	movs	r2, #1
 800afe4:	e000      	b.n	800afe8 <prvGetNextExpireTime+0x18>
 800afe6:	2200      	movs	r2, #0
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d105      	bne.n	800b000 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aff4:	4b07      	ldr	r3, [pc, #28]	@ (800b014 <prvGetNextExpireTime+0x44>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	e001      	b.n	800b004 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b004:	68fb      	ldr	r3, [r7, #12]
    }
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	20000478 	.word	0x20000478

0800b018 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b020:	f7fe ff14 	bl	8009e4c <xTaskGetTickCount>
 800b024:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b026:	4b0b      	ldr	r3, [pc, #44]	@ (800b054 <prvSampleTimeNow+0x3c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d205      	bcs.n	800b03c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b030:	f000 f916 	bl	800b260 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	e002      	b.n	800b042 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b042:	4a04      	ldr	r2, [pc, #16]	@ (800b054 <prvSampleTimeNow+0x3c>)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b048:	68fb      	ldr	r3, [r7, #12]
    }
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20000488 	.word	0x20000488

0800b058 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b066:	2300      	movs	r3, #0
 800b068:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d812      	bhi.n	800b0a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	1ad2      	subs	r2, r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d302      	bcc.n	800b092 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b08c:	2301      	movs	r3, #1
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	e01b      	b.n	800b0ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b092:	4b10      	ldr	r3, [pc, #64]	@ (800b0d4 <prvInsertTimerInActiveList+0x7c>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3304      	adds	r3, #4
 800b09a:	4619      	mov	r1, r3
 800b09c:	4610      	mov	r0, r2
 800b09e:	f7fd fdad 	bl	8008bfc <vListInsert>
 800b0a2:	e012      	b.n	800b0ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d206      	bcs.n	800b0ba <prvInsertTimerInActiveList+0x62>
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d302      	bcc.n	800b0ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	e007      	b.n	800b0ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ba:	4b07      	ldr	r3, [pc, #28]	@ (800b0d8 <prvInsertTimerInActiveList+0x80>)
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	f7fd fd99 	bl	8008bfc <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b0ca:	697b      	ldr	r3, [r7, #20]
    }
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	2000047c 	.word	0x2000047c
 800b0d8:	20000478 	.word	0x20000478

0800b0dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0e2:	e0a9      	b.n	800b238 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f2c0 80a6 	blt.w	800b238 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d004      	beq.n	800b102 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fd fdb6 	bl	8008c6e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b102:	1d3b      	adds	r3, r7, #4
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff ff87 	bl	800b018 <prvSampleTimeNow>
 800b10a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	3b01      	subs	r3, #1
 800b110:	2b08      	cmp	r3, #8
 800b112:	f200 808e 	bhi.w	800b232 <prvProcessReceivedCommands+0x156>
 800b116:	a201      	add	r2, pc, #4	@ (adr r2, 800b11c <prvProcessReceivedCommands+0x40>)
 800b118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11c:	0800b141 	.word	0x0800b141
 800b120:	0800b141 	.word	0x0800b141
 800b124:	0800b1a9 	.word	0x0800b1a9
 800b128:	0800b1bd 	.word	0x0800b1bd
 800b12c:	0800b209 	.word	0x0800b209
 800b130:	0800b141 	.word	0x0800b141
 800b134:	0800b141 	.word	0x0800b141
 800b138:	0800b1a9 	.word	0x0800b1a9
 800b13c:	0800b1bd 	.word	0x0800b1bd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b146:	f043 0301 	orr.w	r3, r3, #1
 800b14a:	b2da      	uxtb	r2, r3
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	18d1      	adds	r1, r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	69ba      	ldr	r2, [r7, #24]
 800b15e:	69f8      	ldr	r0, [r7, #28]
 800b160:	f7ff ff7a 	bl	800b058 <prvInsertTimerInActiveList>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d065      	beq.n	800b236 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b00      	cmp	r3, #0
 800b176:	d009      	beq.n	800b18c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	4413      	add	r3, r2
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	4619      	mov	r1, r3
 800b184:	69f8      	ldr	r0, [r7, #28]
 800b186:	f7ff fe6f 	bl	800ae68 <prvReloadTimer>
 800b18a:	e008      	b.n	800b19e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b192:	f023 0301 	bic.w	r3, r3, #1
 800b196:	b2da      	uxtb	r2, r3
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	69f8      	ldr	r0, [r7, #28]
 800b1a4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800b1a6:	e046      	b.n	800b236 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1ae:	f023 0301 	bic.w	r3, r3, #1
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b1ba:	e03d      	b.n	800b238 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1c2:	f043 0301 	orr.w	r3, r3, #1
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10b      	bne.n	800b1f4 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	617b      	str	r3, [r7, #20]
    }
 800b1ee:	bf00      	nop
 800b1f0:	bf00      	nop
 800b1f2:	e7fd      	b.n	800b1f0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	699a      	ldr	r2, [r3, #24]
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	18d1      	adds	r1, r2, r3
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	69f8      	ldr	r0, [r7, #28]
 800b202:	f7ff ff29 	bl	800b058 <prvInsertTimerInActiveList>
                        break;
 800b206:	e017      	b.n	800b238 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	2b00      	cmp	r3, #0
 800b214:	d103      	bne.n	800b21e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800b216:	69f8      	ldr	r0, [r7, #28]
 800b218:	f000 fb54 	bl	800b8c4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b21c:	e00c      	b.n	800b238 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b224:	f023 0301 	bic.w	r3, r3, #1
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b230:	e002      	b.n	800b238 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b232:	bf00      	nop
 800b234:	e000      	b.n	800b238 <prvProcessReceivedCommands+0x15c>
                        break;
 800b236:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b238:	4b08      	ldr	r3, [pc, #32]	@ (800b25c <prvProcessReceivedCommands+0x180>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f107 0108 	add.w	r1, r7, #8
 800b240:	2200      	movs	r2, #0
 800b242:	4618      	mov	r0, r3
 800b244:	f7fd ff76 	bl	8009134 <xQueueReceive>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f47f af4a 	bne.w	800b0e4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	3720      	adds	r7, #32
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	20000480 	.word	0x20000480

0800b260 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b266:	e009      	b.n	800b27c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b268:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a4 <prvSwitchTimerLists+0x44>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800b272:	f04f 31ff 	mov.w	r1, #4294967295
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f7ff fe18 	bl	800aeac <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b27c:	4b09      	ldr	r3, [pc, #36]	@ (800b2a4 <prvSwitchTimerLists+0x44>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1f0      	bne.n	800b268 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800b286:	4b07      	ldr	r3, [pc, #28]	@ (800b2a4 <prvSwitchTimerLists+0x44>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800b28c:	4b06      	ldr	r3, [pc, #24]	@ (800b2a8 <prvSwitchTimerLists+0x48>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a04      	ldr	r2, [pc, #16]	@ (800b2a4 <prvSwitchTimerLists+0x44>)
 800b292:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b294:	4a04      	ldr	r2, [pc, #16]	@ (800b2a8 <prvSwitchTimerLists+0x48>)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6013      	str	r3, [r2, #0]
    }
 800b29a:	bf00      	nop
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000478 	.word	0x20000478
 800b2a8:	2000047c 	.word	0x2000047c

0800b2ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b2b0:	f000 f964 	bl	800b57c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b2b4:	4b12      	ldr	r3, [pc, #72]	@ (800b300 <prvCheckForValidListAndQueue+0x54>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d11d      	bne.n	800b2f8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b2bc:	4811      	ldr	r0, [pc, #68]	@ (800b304 <prvCheckForValidListAndQueue+0x58>)
 800b2be:	f7fd fc70 	bl	8008ba2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b2c2:	4811      	ldr	r0, [pc, #68]	@ (800b308 <prvCheckForValidListAndQueue+0x5c>)
 800b2c4:	f7fd fc6d 	bl	8008ba2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b2c8:	4b10      	ldr	r3, [pc, #64]	@ (800b30c <prvCheckForValidListAndQueue+0x60>)
 800b2ca:	4a0e      	ldr	r2, [pc, #56]	@ (800b304 <prvCheckForValidListAndQueue+0x58>)
 800b2cc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b2ce:	4b10      	ldr	r3, [pc, #64]	@ (800b310 <prvCheckForValidListAndQueue+0x64>)
 800b2d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b308 <prvCheckForValidListAndQueue+0x5c>)
 800b2d2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	210c      	movs	r1, #12
 800b2d8:	200a      	movs	r0, #10
 800b2da:	f7fd fd85 	bl	8008de8 <xQueueGenericCreate>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	4a07      	ldr	r2, [pc, #28]	@ (800b300 <prvCheckForValidListAndQueue+0x54>)
 800b2e2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800b2e4:	4b06      	ldr	r3, [pc, #24]	@ (800b300 <prvCheckForValidListAndQueue+0x54>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d005      	beq.n	800b2f8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2ec:	4b04      	ldr	r3, [pc, #16]	@ (800b300 <prvCheckForValidListAndQueue+0x54>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4908      	ldr	r1, [pc, #32]	@ (800b314 <prvCheckForValidListAndQueue+0x68>)
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fa28 	bl	8009748 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b2f8:	f000 f972 	bl	800b5e0 <vPortExitCritical>
    }
 800b2fc:	bf00      	nop
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20000480 	.word	0x20000480
 800b304:	20000450 	.word	0x20000450
 800b308:	20000464 	.word	0x20000464
 800b30c:	20000478 	.word	0x20000478
 800b310:	2000047c 	.word	0x2000047c
 800b314:	0800e6f0 	.word	0x0800e6f0

0800b318 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3b04      	subs	r3, #4
 800b328:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b330:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	3b04      	subs	r3, #4
 800b336:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f023 0201 	bic.w	r2, r3, #1
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3b04      	subs	r3, #4
 800b346:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b348:	4a0c      	ldr	r2, [pc, #48]	@ (800b37c <pxPortInitialiseStack+0x64>)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3b14      	subs	r3, #20
 800b352:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3b04      	subs	r3, #4
 800b35e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f06f 0202 	mvn.w	r2, #2
 800b366:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3b20      	subs	r3, #32
 800b36c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b36e:	68fb      	ldr	r3, [r7, #12]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	0800b381 	.word	0x0800b381

0800b380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b38a:	4b13      	ldr	r3, [pc, #76]	@ (800b3d8 <prvTaskExitError+0x58>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d00b      	beq.n	800b3ac <prvTaskExitError+0x2c>
        __asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	60fb      	str	r3, [r7, #12]
    }
 800b3a6:	bf00      	nop
 800b3a8:	bf00      	nop
 800b3aa:	e7fd      	b.n	800b3a8 <prvTaskExitError+0x28>
        __asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	60bb      	str	r3, [r7, #8]
    }
 800b3be:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b3c0:	bf00      	nop
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d0fc      	beq.n	800b3c2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b3c8:	bf00      	nop
 800b3ca:	bf00      	nop
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	20000010 	.word	0x20000010
 800b3dc:	00000000 	.word	0x00000000

0800b3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b3e0:	4b07      	ldr	r3, [pc, #28]	@ (800b400 <pxCurrentTCBConst2>)
 800b3e2:	6819      	ldr	r1, [r3, #0]
 800b3e4:	6808      	ldr	r0, [r1, #0]
 800b3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	f380 8809 	msr	PSP, r0
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f04f 0000 	mov.w	r0, #0
 800b3f6:	f380 8811 	msr	BASEPRI, r0
 800b3fa:	4770      	bx	lr
 800b3fc:	f3af 8000 	nop.w

0800b400 <pxCurrentTCBConst2>:
 800b400:	2000034c 	.word	0x2000034c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop

0800b408 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b408:	4808      	ldr	r0, [pc, #32]	@ (800b42c <prvPortStartFirstTask+0x24>)
 800b40a:	6800      	ldr	r0, [r0, #0]
 800b40c:	6800      	ldr	r0, [r0, #0]
 800b40e:	f380 8808 	msr	MSP, r0
 800b412:	f04f 0000 	mov.w	r0, #0
 800b416:	f380 8814 	msr	CONTROL, r0
 800b41a:	b662      	cpsie	i
 800b41c:	b661      	cpsie	f
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	df00      	svc	0
 800b428:	bf00      	nop
 800b42a:	0000      	.short	0x0000
 800b42c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b430:	bf00      	nop
 800b432:	bf00      	nop

0800b434 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b43a:	4b47      	ldr	r3, [pc, #284]	@ (800b558 <xPortStartScheduler+0x124>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a47      	ldr	r2, [pc, #284]	@ (800b55c <xPortStartScheduler+0x128>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d10b      	bne.n	800b45c <xPortStartScheduler+0x28>
        __asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	613b      	str	r3, [r7, #16]
    }
 800b456:	bf00      	nop
 800b458:	bf00      	nop
 800b45a:	e7fd      	b.n	800b458 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b45c:	4b3e      	ldr	r3, [pc, #248]	@ (800b558 <xPortStartScheduler+0x124>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a3f      	ldr	r2, [pc, #252]	@ (800b560 <xPortStartScheduler+0x12c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d10b      	bne.n	800b47e <xPortStartScheduler+0x4a>
        __asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	60fb      	str	r3, [r7, #12]
    }
 800b478:	bf00      	nop
 800b47a:	bf00      	nop
 800b47c:	e7fd      	b.n	800b47a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b47e:	4b39      	ldr	r3, [pc, #228]	@ (800b564 <xPortStartScheduler+0x130>)
 800b480:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	22ff      	movs	r2, #255	@ 0xff
 800b48e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	b2db      	uxtb	r3, r3
 800b496:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	4b31      	ldr	r3, [pc, #196]	@ (800b568 <xPortStartScheduler+0x134>)
 800b4a4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4a6:	4b31      	ldr	r3, [pc, #196]	@ (800b56c <xPortStartScheduler+0x138>)
 800b4a8:	2207      	movs	r2, #7
 800b4aa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4ac:	e009      	b.n	800b4c2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800b4ae:	4b2f      	ldr	r3, [pc, #188]	@ (800b56c <xPortStartScheduler+0x138>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	4a2d      	ldr	r2, [pc, #180]	@ (800b56c <xPortStartScheduler+0x138>)
 800b4b6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4b8:	78fb      	ldrb	r3, [r7, #3]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4c2:	78fb      	ldrb	r3, [r7, #3]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ca:	2b80      	cmp	r3, #128	@ 0x80
 800b4cc:	d0ef      	beq.n	800b4ae <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4ce:	4b27      	ldr	r3, [pc, #156]	@ (800b56c <xPortStartScheduler+0x138>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f1c3 0307 	rsb	r3, r3, #7
 800b4d6:	2b04      	cmp	r3, #4
 800b4d8:	d00b      	beq.n	800b4f2 <xPortStartScheduler+0xbe>
        __asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	60bb      	str	r3, [r7, #8]
    }
 800b4ec:	bf00      	nop
 800b4ee:	bf00      	nop
 800b4f0:	e7fd      	b.n	800b4ee <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4f2:	4b1e      	ldr	r3, [pc, #120]	@ (800b56c <xPortStartScheduler+0x138>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	021b      	lsls	r3, r3, #8
 800b4f8:	4a1c      	ldr	r2, [pc, #112]	@ (800b56c <xPortStartScheduler+0x138>)
 800b4fa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b56c <xPortStartScheduler+0x138>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b504:	4a19      	ldr	r2, [pc, #100]	@ (800b56c <xPortStartScheduler+0x138>)
 800b506:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	b2da      	uxtb	r2, r3
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b510:	4b17      	ldr	r3, [pc, #92]	@ (800b570 <xPortStartScheduler+0x13c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a16      	ldr	r2, [pc, #88]	@ (800b570 <xPortStartScheduler+0x13c>)
 800b516:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b51a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b51c:	4b14      	ldr	r3, [pc, #80]	@ (800b570 <xPortStartScheduler+0x13c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a13      	ldr	r2, [pc, #76]	@ (800b570 <xPortStartScheduler+0x13c>)
 800b522:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b526:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b528:	f000 f8e0 	bl	800b6ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b52c:	4b11      	ldr	r3, [pc, #68]	@ (800b574 <xPortStartScheduler+0x140>)
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b532:	f000 f8ff 	bl	800b734 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b536:	4b10      	ldr	r3, [pc, #64]	@ (800b578 <xPortStartScheduler+0x144>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a0f      	ldr	r2, [pc, #60]	@ (800b578 <xPortStartScheduler+0x144>)
 800b53c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b540:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b542:	f7ff ff61 	bl	800b408 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b546:	f7fe fda9 	bl	800a09c <vTaskSwitchContext>
    prvTaskExitError();
 800b54a:	f7ff ff19 	bl	800b380 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	e000ed00 	.word	0xe000ed00
 800b55c:	410fc271 	.word	0x410fc271
 800b560:	410fc270 	.word	0x410fc270
 800b564:	e000e400 	.word	0xe000e400
 800b568:	2000048c 	.word	0x2000048c
 800b56c:	20000490 	.word	0x20000490
 800b570:	e000ed20 	.word	0xe000ed20
 800b574:	20000010 	.word	0x20000010
 800b578:	e000ef34 	.word	0xe000ef34

0800b57c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
        __asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	607b      	str	r3, [r7, #4]
    }
 800b594:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b596:	4b10      	ldr	r3, [pc, #64]	@ (800b5d8 <vPortEnterCritical+0x5c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	4a0e      	ldr	r2, [pc, #56]	@ (800b5d8 <vPortEnterCritical+0x5c>)
 800b59e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b5a0:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d8 <vPortEnterCritical+0x5c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d110      	bne.n	800b5ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b5dc <vPortEnterCritical+0x60>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00b      	beq.n	800b5ca <vPortEnterCritical+0x4e>
        __asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	603b      	str	r3, [r7, #0]
    }
 800b5c4:	bf00      	nop
 800b5c6:	bf00      	nop
 800b5c8:	e7fd      	b.n	800b5c6 <vPortEnterCritical+0x4a>
    }
}
 800b5ca:	bf00      	nop
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	20000010 	.word	0x20000010
 800b5dc:	e000ed04 	.word	0xe000ed04

0800b5e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b5e6:	4b12      	ldr	r3, [pc, #72]	@ (800b630 <vPortExitCritical+0x50>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10b      	bne.n	800b606 <vPortExitCritical+0x26>
        __asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	607b      	str	r3, [r7, #4]
    }
 800b600:	bf00      	nop
 800b602:	bf00      	nop
 800b604:	e7fd      	b.n	800b602 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b606:	4b0a      	ldr	r3, [pc, #40]	@ (800b630 <vPortExitCritical+0x50>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	4a08      	ldr	r2, [pc, #32]	@ (800b630 <vPortExitCritical+0x50>)
 800b60e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b610:	4b07      	ldr	r3, [pc, #28]	@ (800b630 <vPortExitCritical+0x50>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d105      	bne.n	800b624 <vPortExitCritical+0x44>
 800b618:	2300      	movs	r3, #0
 800b61a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800b622:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	20000010 	.word	0x20000010
	...

0800b640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b640:	f3ef 8009 	mrs	r0, PSP
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	4b15      	ldr	r3, [pc, #84]	@ (800b6a0 <pxCurrentTCBConst>)
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	f01e 0f10 	tst.w	lr, #16
 800b650:	bf08      	it	eq
 800b652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65a:	6010      	str	r0, [r2, #0]
 800b65c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b664:	f380 8811 	msr	BASEPRI, r0
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f7fe fd14 	bl	800a09c <vTaskSwitchContext>
 800b674:	f04f 0000 	mov.w	r0, #0
 800b678:	f380 8811 	msr	BASEPRI, r0
 800b67c:	bc09      	pop	{r0, r3}
 800b67e:	6819      	ldr	r1, [r3, #0]
 800b680:	6808      	ldr	r0, [r1, #0]
 800b682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b686:	f01e 0f10 	tst.w	lr, #16
 800b68a:	bf08      	it	eq
 800b68c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b690:	f380 8809 	msr	PSP, r0
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	f3af 8000 	nop.w

0800b6a0 <pxCurrentTCBConst>:
 800b6a0:	2000034c 	.word	0x2000034c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop

0800b6a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
        __asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	607b      	str	r3, [r7, #4]
    }
 800b6c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b6c2:	f7fe fbd3 	bl	8009e6c <xTaskIncrementTick>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d003      	beq.n	800b6d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	@ (800b6e8 <SysTick_Handler+0x40>)
 800b6ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	f383 8811 	msr	BASEPRI, r3
    }
 800b6de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	e000ed04 	.word	0xe000ed04

0800b6ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b720 <vPortSetupTimerInterrupt+0x34>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b724 <vPortSetupTimerInterrupt+0x38>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b728 <vPortSetupTimerInterrupt+0x3c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a0a      	ldr	r2, [pc, #40]	@ (800b72c <vPortSetupTimerInterrupt+0x40>)
 800b702:	fba2 2303 	umull	r2, r3, r2, r3
 800b706:	099b      	lsrs	r3, r3, #6
 800b708:	4a09      	ldr	r2, [pc, #36]	@ (800b730 <vPortSetupTimerInterrupt+0x44>)
 800b70a:	3b01      	subs	r3, #1
 800b70c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b70e:	4b04      	ldr	r3, [pc, #16]	@ (800b720 <vPortSetupTimerInterrupt+0x34>)
 800b710:	2207      	movs	r2, #7
 800b712:	601a      	str	r2, [r3, #0]
}
 800b714:	bf00      	nop
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	e000e010 	.word	0xe000e010
 800b724:	e000e018 	.word	0xe000e018
 800b728:	20000000 	.word	0x20000000
 800b72c:	10624dd3 	.word	0x10624dd3
 800b730:	e000e014 	.word	0xe000e014

0800b734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b744 <vPortEnableVFP+0x10>
 800b738:	6801      	ldr	r1, [r0, #0]
 800b73a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b73e:	6001      	str	r1, [r0, #0]
 800b740:	4770      	bx	lr
 800b742:	0000      	.short	0x0000
 800b744:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b748:	bf00      	nop
 800b74a:	bf00      	nop

0800b74c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b08a      	sub	sp, #40	@ 0x28
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800b754:	2300      	movs	r3, #0
 800b756:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800b758:	f7fe fa6e 	bl	8009c38 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b75c:	4b54      	ldr	r3, [pc, #336]	@ (800b8b0 <pvPortMalloc+0x164>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b764:	f000 f90c 	bl	800b980 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d012      	beq.n	800b794 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800b76e:	2208      	movs	r2, #8
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	3308      	adds	r3, #8
 800b77a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	43db      	mvns	r3, r3
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	429a      	cmp	r2, r3
 800b784:	d804      	bhi.n	800b790 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	4413      	add	r3, r2
 800b78c:	607b      	str	r3, [r7, #4]
 800b78e:	e001      	b.n	800b794 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	db71      	blt.n	800b87e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d06e      	beq.n	800b87e <pvPortMalloc+0x132>
 800b7a0:	4b44      	ldr	r3, [pc, #272]	@ (800b8b4 <pvPortMalloc+0x168>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d869      	bhi.n	800b87e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b7aa:	4b43      	ldr	r3, [pc, #268]	@ (800b8b8 <pvPortMalloc+0x16c>)
 800b7ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b7ae:	4b42      	ldr	r3, [pc, #264]	@ (800b8b8 <pvPortMalloc+0x16c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7b4:	e004      	b.n	800b7c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d903      	bls.n	800b7d2 <pvPortMalloc+0x86>
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1f1      	bne.n	800b7b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b7d2:	4b37      	ldr	r3, [pc, #220]	@ (800b8b0 <pvPortMalloc+0x164>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d050      	beq.n	800b87e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2208      	movs	r2, #8
 800b7e2:	4413      	add	r3, r2
 800b7e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f0:	685a      	ldr	r2, [r3, #4]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	1ad2      	subs	r2, r2, r3
 800b7f6:	2308      	movs	r3, #8
 800b7f8:	005b      	lsls	r3, r3, #1
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d920      	bls.n	800b840 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4413      	add	r3, r2
 800b804:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f003 0307 	and.w	r3, r3, #7
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00b      	beq.n	800b828 <pvPortMalloc+0xdc>
        __asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	613b      	str	r3, [r7, #16]
    }
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b83a:	6978      	ldr	r0, [r7, #20]
 800b83c:	f000 f8fc 	bl	800ba38 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b840:	4b1c      	ldr	r3, [pc, #112]	@ (800b8b4 <pvPortMalloc+0x168>)
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	4a1a      	ldr	r2, [pc, #104]	@ (800b8b4 <pvPortMalloc+0x168>)
 800b84c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b84e:	4b19      	ldr	r3, [pc, #100]	@ (800b8b4 <pvPortMalloc+0x168>)
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	4b1a      	ldr	r3, [pc, #104]	@ (800b8bc <pvPortMalloc+0x170>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d203      	bcs.n	800b862 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b85a:	4b16      	ldr	r3, [pc, #88]	@ (800b8b4 <pvPortMalloc+0x168>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a17      	ldr	r2, [pc, #92]	@ (800b8bc <pvPortMalloc+0x170>)
 800b860:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800b862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b870:	2200      	movs	r2, #0
 800b872:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b874:	4b12      	ldr	r3, [pc, #72]	@ (800b8c0 <pvPortMalloc+0x174>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3301      	adds	r3, #1
 800b87a:	4a11      	ldr	r2, [pc, #68]	@ (800b8c0 <pvPortMalloc+0x174>)
 800b87c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b87e:	f7fe f9e9 	bl	8009c54 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	f003 0307 	and.w	r3, r3, #7
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00b      	beq.n	800b8a4 <pvPortMalloc+0x158>
        __asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	60fb      	str	r3, [r7, #12]
    }
 800b89e:	bf00      	nop
 800b8a0:	bf00      	nop
 800b8a2:	e7fd      	b.n	800b8a0 <pvPortMalloc+0x154>
    return pvReturn;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3728      	adds	r7, #40	@ 0x28
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	2001309c 	.word	0x2001309c
 800b8b4:	200130a0 	.word	0x200130a0
 800b8b8:	20013094 	.word	0x20013094
 800b8bc:	200130a4 	.word	0x200130a4
 800b8c0:	200130a8 	.word	0x200130a8

0800b8c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d04b      	beq.n	800b96e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800b8d6:	2308      	movs	r3, #8
 800b8d8:	425b      	negs	r3, r3
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	4413      	add	r3, r2
 800b8de:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db0b      	blt.n	800b904 <vPortFree+0x40>
        __asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	60fb      	str	r3, [r7, #12]
    }
 800b8fe:	bf00      	nop
 800b900:	bf00      	nop
 800b902:	e7fd      	b.n	800b900 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00b      	beq.n	800b924 <vPortFree+0x60>
        __asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	60bb      	str	r3, [r7, #8]
    }
 800b91e:	bf00      	nop
 800b920:	bf00      	nop
 800b922:	e7fd      	b.n	800b920 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	0fdb      	lsrs	r3, r3, #31
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	d01c      	beq.n	800b96e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d118      	bne.n	800b96e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800b948:	f7fe f976 	bl	8009c38 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	4b09      	ldr	r3, [pc, #36]	@ (800b978 <vPortFree+0xb4>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4413      	add	r3, r2
 800b956:	4a08      	ldr	r2, [pc, #32]	@ (800b978 <vPortFree+0xb4>)
 800b958:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b95a:	6938      	ldr	r0, [r7, #16]
 800b95c:	f000 f86c 	bl	800ba38 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800b960:	4b06      	ldr	r3, [pc, #24]	@ (800b97c <vPortFree+0xb8>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3301      	adds	r3, #1
 800b966:	4a05      	ldr	r2, [pc, #20]	@ (800b97c <vPortFree+0xb8>)
 800b968:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800b96a:	f7fe f973 	bl	8009c54 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800b96e:	bf00      	nop
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	200130a0 	.word	0x200130a0
 800b97c:	200130ac 	.word	0x200130ac

0800b980 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b986:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800b98a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b98c:	4b25      	ldr	r3, [pc, #148]	@ (800ba24 <prvHeapInit+0xa4>)
 800b98e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f003 0307 	and.w	r3, r3, #7
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00c      	beq.n	800b9b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3307      	adds	r3, #7
 800b99e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f023 0307 	bic.w	r3, r3, #7
 800b9a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	4a1d      	ldr	r2, [pc, #116]	@ (800ba24 <prvHeapInit+0xa4>)
 800b9b0:	4413      	add	r3, r2
 800b9b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9b8:	4a1b      	ldr	r2, [pc, #108]	@ (800ba28 <prvHeapInit+0xa8>)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800b9be:	4b1a      	ldr	r3, [pc, #104]	@ (800ba28 <prvHeapInit+0xa8>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800b9cc:	2208      	movs	r2, #8
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1a9b      	subs	r3, r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f023 0307 	bic.w	r3, r3, #7
 800b9da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4a13      	ldr	r2, [pc, #76]	@ (800ba2c <prvHeapInit+0xac>)
 800b9e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800b9e2:	4b12      	ldr	r3, [pc, #72]	@ (800ba2c <prvHeapInit+0xac>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800b9ea:	4b10      	ldr	r3, [pc, #64]	@ (800ba2c <prvHeapInit+0xac>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	1ad2      	subs	r2, r2, r3
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba00:	4b0a      	ldr	r3, [pc, #40]	@ (800ba2c <prvHeapInit+0xac>)
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	4a08      	ldr	r2, [pc, #32]	@ (800ba30 <prvHeapInit+0xb0>)
 800ba0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	4a07      	ldr	r2, [pc, #28]	@ (800ba34 <prvHeapInit+0xb4>)
 800ba16:	6013      	str	r3, [r2, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	20000494 	.word	0x20000494
 800ba28:	20013094 	.word	0x20013094
 800ba2c:	2001309c 	.word	0x2001309c
 800ba30:	200130a4 	.word	0x200130a4
 800ba34:	200130a0 	.word	0x200130a0

0800ba38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba40:	4b28      	ldr	r3, [pc, #160]	@ (800bae4 <prvInsertBlockIntoFreeList+0xac>)
 800ba42:	60fb      	str	r3, [r7, #12]
 800ba44:	e002      	b.n	800ba4c <prvInsertBlockIntoFreeList+0x14>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d8f7      	bhi.n	800ba46 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	4413      	add	r3, r2
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d108      	bne.n	800ba7a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	441a      	add	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	441a      	add	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d118      	bne.n	800bac0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4b15      	ldr	r3, [pc, #84]	@ (800bae8 <prvInsertBlockIntoFreeList+0xb0>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d00d      	beq.n	800bab6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	441a      	add	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	e008      	b.n	800bac8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bab6:	4b0c      	ldr	r3, [pc, #48]	@ (800bae8 <prvInsertBlockIntoFreeList+0xb0>)
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	e003      	b.n	800bac8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d002      	beq.n	800bad6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800bad6:	bf00      	nop
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	20013094 	.word	0x20013094
 800bae8:	2001309c 	.word	0x2001309c

0800baec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800baf8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bafc:	f002 fd3a 	bl	800e574 <USBD_static_malloc>
 800bb00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d109      	bne.n	800bb1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	32b0      	adds	r2, #176	@ 0xb0
 800bb12:	2100      	movs	r1, #0
 800bb14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e0d4      	b.n	800bcc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bb1c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bb20:	2100      	movs	r1, #0
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f002 fd6a 	bl	800e5fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	32b0      	adds	r2, #176	@ 0xb0
 800bb32:	68f9      	ldr	r1, [r7, #12]
 800bb34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	32b0      	adds	r2, #176	@ 0xb0
 800bb42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	7c1b      	ldrb	r3, [r3, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d138      	bne.n	800bbc6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bb54:	4b5e      	ldr	r3, [pc, #376]	@ (800bcd0 <USBD_CDC_Init+0x1e4>)
 800bb56:	7819      	ldrb	r1, [r3, #0]
 800bb58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f002 fbe5 	bl	800e32e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bb64:	4b5a      	ldr	r3, [pc, #360]	@ (800bcd0 <USBD_CDC_Init+0x1e4>)
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	f003 020f 	and.w	r2, r3, #15
 800bb6c:	6879      	ldr	r1, [r7, #4]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	440b      	add	r3, r1
 800bb78:	3324      	adds	r3, #36	@ 0x24
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bb7e:	4b55      	ldr	r3, [pc, #340]	@ (800bcd4 <USBD_CDC_Init+0x1e8>)
 800bb80:	7819      	ldrb	r1, [r3, #0]
 800bb82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb86:	2202      	movs	r2, #2
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f002 fbd0 	bl	800e32e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bb8e:	4b51      	ldr	r3, [pc, #324]	@ (800bcd4 <USBD_CDC_Init+0x1e8>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	f003 020f 	and.w	r2, r3, #15
 800bb96:	6879      	ldr	r1, [r7, #4]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	440b      	add	r3, r1
 800bba2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bba6:	2201      	movs	r2, #1
 800bba8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbaa:	4b4b      	ldr	r3, [pc, #300]	@ (800bcd8 <USBD_CDC_Init+0x1ec>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 020f 	and.w	r2, r3, #15
 800bbb2:	6879      	ldr	r1, [r7, #4]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	440b      	add	r3, r1
 800bbbe:	3326      	adds	r3, #38	@ 0x26
 800bbc0:	2210      	movs	r2, #16
 800bbc2:	801a      	strh	r2, [r3, #0]
 800bbc4:	e035      	b.n	800bc32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bbc6:	4b42      	ldr	r3, [pc, #264]	@ (800bcd0 <USBD_CDC_Init+0x1e4>)
 800bbc8:	7819      	ldrb	r1, [r3, #0]
 800bbca:	2340      	movs	r3, #64	@ 0x40
 800bbcc:	2202      	movs	r2, #2
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f002 fbad 	bl	800e32e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bbd4:	4b3e      	ldr	r3, [pc, #248]	@ (800bcd0 <USBD_CDC_Init+0x1e4>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	f003 020f 	and.w	r2, r3, #15
 800bbdc:	6879      	ldr	r1, [r7, #4]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	440b      	add	r3, r1
 800bbe8:	3324      	adds	r3, #36	@ 0x24
 800bbea:	2201      	movs	r2, #1
 800bbec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bbee:	4b39      	ldr	r3, [pc, #228]	@ (800bcd4 <USBD_CDC_Init+0x1e8>)
 800bbf0:	7819      	ldrb	r1, [r3, #0]
 800bbf2:	2340      	movs	r3, #64	@ 0x40
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f002 fb99 	bl	800e32e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bbfc:	4b35      	ldr	r3, [pc, #212]	@ (800bcd4 <USBD_CDC_Init+0x1e8>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f003 020f 	and.w	r2, r3, #15
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	4613      	mov	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	440b      	add	r3, r1
 800bc10:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc14:	2201      	movs	r2, #1
 800bc16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc18:	4b2f      	ldr	r3, [pc, #188]	@ (800bcd8 <USBD_CDC_Init+0x1ec>)
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	f003 020f 	and.w	r2, r3, #15
 800bc20:	6879      	ldr	r1, [r7, #4]
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	440b      	add	r3, r1
 800bc2c:	3326      	adds	r3, #38	@ 0x26
 800bc2e:	2210      	movs	r2, #16
 800bc30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc32:	4b29      	ldr	r3, [pc, #164]	@ (800bcd8 <USBD_CDC_Init+0x1ec>)
 800bc34:	7819      	ldrb	r1, [r3, #0]
 800bc36:	2308      	movs	r3, #8
 800bc38:	2203      	movs	r2, #3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f002 fb77 	bl	800e32e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bc40:	4b25      	ldr	r3, [pc, #148]	@ (800bcd8 <USBD_CDC_Init+0x1ec>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	f003 020f 	and.w	r2, r3, #15
 800bc48:	6879      	ldr	r1, [r7, #4]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	4413      	add	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	440b      	add	r3, r1
 800bc54:	3324      	adds	r3, #36	@ 0x24
 800bc56:	2201      	movs	r2, #1
 800bc58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	33b0      	adds	r3, #176	@ 0xb0
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4413      	add	r3, r2
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bc90:	2302      	movs	r3, #2
 800bc92:	e018      	b.n	800bcc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	7c1b      	ldrb	r3, [r3, #16]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d10a      	bne.n	800bcb2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd4 <USBD_CDC_Init+0x1e8>)
 800bc9e:	7819      	ldrb	r1, [r3, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f002 fc2e 	bl	800e50c <USBD_LL_PrepareReceive>
 800bcb0:	e008      	b.n	800bcc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcb2:	4b08      	ldr	r3, [pc, #32]	@ (800bcd4 <USBD_CDC_Init+0x1e8>)
 800bcb4:	7819      	ldrb	r1, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bcbc:	2340      	movs	r3, #64	@ 0x40
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f002 fc24 	bl	800e50c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	2000009b 	.word	0x2000009b
 800bcd4:	2000009c 	.word	0x2000009c
 800bcd8:	2000009d 	.word	0x2000009d

0800bcdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bce8:	4b3a      	ldr	r3, [pc, #232]	@ (800bdd4 <USBD_CDC_DeInit+0xf8>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f002 fb43 	bl	800e37a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bcf4:	4b37      	ldr	r3, [pc, #220]	@ (800bdd4 <USBD_CDC_DeInit+0xf8>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	f003 020f 	and.w	r2, r3, #15
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	3324      	adds	r3, #36	@ 0x24
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bd0e:	4b32      	ldr	r3, [pc, #200]	@ (800bdd8 <USBD_CDC_DeInit+0xfc>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	4619      	mov	r1, r3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f002 fb30 	bl	800e37a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bd1a:	4b2f      	ldr	r3, [pc, #188]	@ (800bdd8 <USBD_CDC_DeInit+0xfc>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	f003 020f 	and.w	r2, r3, #15
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	4613      	mov	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd32:	2200      	movs	r2, #0
 800bd34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bd36:	4b29      	ldr	r3, [pc, #164]	@ (800bddc <USBD_CDC_DeInit+0x100>)
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f002 fb1c 	bl	800e37a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bd42:	4b26      	ldr	r3, [pc, #152]	@ (800bddc <USBD_CDC_DeInit+0x100>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	f003 020f 	and.w	r2, r3, #15
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	3324      	adds	r3, #36	@ 0x24
 800bd58:	2200      	movs	r2, #0
 800bd5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bd5c:	4b1f      	ldr	r3, [pc, #124]	@ (800bddc <USBD_CDC_DeInit+0x100>)
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	f003 020f 	and.w	r2, r3, #15
 800bd64:	6879      	ldr	r1, [r7, #4]
 800bd66:	4613      	mov	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	440b      	add	r3, r1
 800bd70:	3326      	adds	r3, #38	@ 0x26
 800bd72:	2200      	movs	r2, #0
 800bd74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	32b0      	adds	r2, #176	@ 0xb0
 800bd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01f      	beq.n	800bdc8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	33b0      	adds	r3, #176	@ 0xb0
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4413      	add	r3, r2
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	32b0      	adds	r2, #176	@ 0xb0
 800bda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f002 fbf0 	bl	800e590 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	32b0      	adds	r2, #176	@ 0xb0
 800bdba:	2100      	movs	r1, #0
 800bdbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	2000009b 	.word	0x2000009b
 800bdd8:	2000009c 	.word	0x2000009c
 800bddc:	2000009d 	.word	0x2000009d

0800bde0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	32b0      	adds	r2, #176	@ 0xb0
 800bdf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bdfe:	2300      	movs	r3, #0
 800be00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e0bf      	b.n	800bf90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d050      	beq.n	800bebe <USBD_CDC_Setup+0xde>
 800be1c:	2b20      	cmp	r3, #32
 800be1e:	f040 80af 	bne.w	800bf80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	88db      	ldrh	r3, [r3, #6]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d03a      	beq.n	800bea0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b25b      	sxtb	r3, r3
 800be30:	2b00      	cmp	r3, #0
 800be32:	da1b      	bge.n	800be6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	33b0      	adds	r3, #176	@ 0xb0
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4413      	add	r3, r2
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800be4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	88d2      	ldrh	r2, [r2, #6]
 800be50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	88db      	ldrh	r3, [r3, #6]
 800be56:	2b07      	cmp	r3, #7
 800be58:	bf28      	it	cs
 800be5a:	2307      	movcs	r3, #7
 800be5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	89fa      	ldrh	r2, [r7, #14]
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f001 fd93 	bl	800d990 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800be6a:	e090      	b.n	800bf8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	785a      	ldrb	r2, [r3, #1]
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	88db      	ldrh	r3, [r3, #6]
 800be7a:	2b3f      	cmp	r3, #63	@ 0x3f
 800be7c:	d803      	bhi.n	800be86 <USBD_CDC_Setup+0xa6>
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	88db      	ldrh	r3, [r3, #6]
 800be82:	b2da      	uxtb	r2, r3
 800be84:	e000      	b.n	800be88 <USBD_CDC_Setup+0xa8>
 800be86:	2240      	movs	r2, #64	@ 0x40
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800be8e:	6939      	ldr	r1, [r7, #16]
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800be96:	461a      	mov	r2, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f001 fda5 	bl	800d9e8 <USBD_CtlPrepareRx>
      break;
 800be9e:	e076      	b.n	800bf8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	33b0      	adds	r3, #176	@ 0xb0
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	7850      	ldrb	r0, [r2, #1]
 800beb6:	2200      	movs	r2, #0
 800beb8:	6839      	ldr	r1, [r7, #0]
 800beba:	4798      	blx	r3
      break;
 800bebc:	e067      	b.n	800bf8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	785b      	ldrb	r3, [r3, #1]
 800bec2:	2b0b      	cmp	r3, #11
 800bec4:	d851      	bhi.n	800bf6a <USBD_CDC_Setup+0x18a>
 800bec6:	a201      	add	r2, pc, #4	@ (adr r2, 800becc <USBD_CDC_Setup+0xec>)
 800bec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800becc:	0800befd 	.word	0x0800befd
 800bed0:	0800bf79 	.word	0x0800bf79
 800bed4:	0800bf6b 	.word	0x0800bf6b
 800bed8:	0800bf6b 	.word	0x0800bf6b
 800bedc:	0800bf6b 	.word	0x0800bf6b
 800bee0:	0800bf6b 	.word	0x0800bf6b
 800bee4:	0800bf6b 	.word	0x0800bf6b
 800bee8:	0800bf6b 	.word	0x0800bf6b
 800beec:	0800bf6b 	.word	0x0800bf6b
 800bef0:	0800bf6b 	.word	0x0800bf6b
 800bef4:	0800bf27 	.word	0x0800bf27
 800bef8:	0800bf51 	.word	0x0800bf51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	d107      	bne.n	800bf18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf08:	f107 030a 	add.w	r3, r7, #10
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 fd3d 	bl	800d990 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf16:	e032      	b.n	800bf7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 fcbb 	bl	800d896 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf20:	2303      	movs	r3, #3
 800bf22:	75fb      	strb	r3, [r7, #23]
          break;
 800bf24:	e02b      	b.n	800bf7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	d107      	bne.n	800bf42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf32:	f107 030d 	add.w	r3, r7, #13
 800bf36:	2201      	movs	r2, #1
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 fd28 	bl	800d990 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf40:	e01d      	b.n	800bf7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f001 fca6 	bl	800d896 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	75fb      	strb	r3, [r7, #23]
          break;
 800bf4e:	e016      	b.n	800bf7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d00f      	beq.n	800bf7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fc99 	bl	800d896 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bf68:	e008      	b.n	800bf7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f001 fc92 	bl	800d896 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf72:	2303      	movs	r3, #3
 800bf74:	75fb      	strb	r3, [r7, #23]
          break;
 800bf76:	e002      	b.n	800bf7e <USBD_CDC_Setup+0x19e>
          break;
 800bf78:	bf00      	nop
 800bf7a:	e008      	b.n	800bf8e <USBD_CDC_Setup+0x1ae>
          break;
 800bf7c:	bf00      	nop
      }
      break;
 800bf7e:	e006      	b.n	800bf8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f001 fc87 	bl	800d896 <USBD_CtlError>
      ret = USBD_FAIL;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf8c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	32b0      	adds	r2, #176	@ 0xb0
 800bfb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e065      	b.n	800c08e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	32b0      	adds	r2, #176	@ 0xb0
 800bfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bfd2:	78fb      	ldrb	r3, [r7, #3]
 800bfd4:	f003 020f 	and.w	r2, r3, #15
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	4413      	add	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	440b      	add	r3, r1
 800bfe4:	3318      	adds	r3, #24
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d02f      	beq.n	800c04c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bfec:	78fb      	ldrb	r3, [r7, #3]
 800bfee:	f003 020f 	and.w	r2, r3, #15
 800bff2:	6879      	ldr	r1, [r7, #4]
 800bff4:	4613      	mov	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	440b      	add	r3, r1
 800bffe:	3318      	adds	r3, #24
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	78fb      	ldrb	r3, [r7, #3]
 800c004:	f003 010f 	and.w	r1, r3, #15
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	460b      	mov	r3, r1
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	440b      	add	r3, r1
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4403      	add	r3, r0
 800c014:	331c      	adds	r3, #28
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	fbb2 f1f3 	udiv	r1, r2, r3
 800c01c:	fb01 f303 	mul.w	r3, r1, r3
 800c020:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c022:	2b00      	cmp	r3, #0
 800c024:	d112      	bne.n	800c04c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c026:	78fb      	ldrb	r3, [r7, #3]
 800c028:	f003 020f 	and.w	r2, r3, #15
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	3318      	adds	r3, #24
 800c03a:	2200      	movs	r2, #0
 800c03c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c03e:	78f9      	ldrb	r1, [r7, #3]
 800c040:	2300      	movs	r3, #0
 800c042:	2200      	movs	r2, #0
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f002 fa40 	bl	800e4ca <USBD_LL_Transmit>
 800c04a:	e01f      	b.n	800c08c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2200      	movs	r2, #0
 800c050:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	33b0      	adds	r3, #176	@ 0xb0
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d010      	beq.n	800c08c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	33b0      	adds	r3, #176	@ 0xb0
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c088:	78fa      	ldrb	r2, [r7, #3]
 800c08a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	460b      	mov	r3, r1
 800c0a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	32b0      	adds	r2, #176	@ 0xb0
 800c0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	32b0      	adds	r2, #176	@ 0xb0
 800c0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d101      	bne.n	800c0c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	e01a      	b.n	800c0fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c0c8:	78fb      	ldrb	r3, [r7, #3]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f002 fa3e 	bl	800e54e <USBD_LL_GetRxDataSize>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	33b0      	adds	r3, #176	@ 0xb0
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b084      	sub	sp, #16
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	32b0      	adds	r2, #176	@ 0xb0
 800c118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c124:	2303      	movs	r3, #3
 800c126:	e024      	b.n	800c172 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	33b0      	adds	r3, #176	@ 0xb0
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d019      	beq.n	800c170 <USBD_CDC_EP0_RxReady+0x6a>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c142:	2bff      	cmp	r3, #255	@ 0xff
 800c144:	d014      	beq.n	800c170 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	33b0      	adds	r3, #176	@ 0xb0
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c15e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c166:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	22ff      	movs	r2, #255	@ 0xff
 800c16c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
	...

0800c17c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c184:	2182      	movs	r1, #130	@ 0x82
 800c186:	4818      	ldr	r0, [pc, #96]	@ (800c1e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c188:	f000 fd4f 	bl	800cc2a <USBD_GetEpDesc>
 800c18c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c18e:	2101      	movs	r1, #1
 800c190:	4815      	ldr	r0, [pc, #84]	@ (800c1e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c192:	f000 fd4a 	bl	800cc2a <USBD_GetEpDesc>
 800c196:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c198:	2181      	movs	r1, #129	@ 0x81
 800c19a:	4813      	ldr	r0, [pc, #76]	@ (800c1e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c19c:	f000 fd45 	bl	800cc2a <USBD_GetEpDesc>
 800c1a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	2210      	movs	r2, #16
 800c1ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d006      	beq.n	800c1c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c1bc:	711a      	strb	r2, [r3, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c1d0:	711a      	strb	r2, [r3, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2243      	movs	r2, #67	@ 0x43
 800c1da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c1dc:	4b02      	ldr	r3, [pc, #8]	@ (800c1e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000058 	.word	0x20000058

0800c1ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c1f4:	2182      	movs	r1, #130	@ 0x82
 800c1f6:	4818      	ldr	r0, [pc, #96]	@ (800c258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c1f8:	f000 fd17 	bl	800cc2a <USBD_GetEpDesc>
 800c1fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c1fe:	2101      	movs	r1, #1
 800c200:	4815      	ldr	r0, [pc, #84]	@ (800c258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c202:	f000 fd12 	bl	800cc2a <USBD_GetEpDesc>
 800c206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c208:	2181      	movs	r1, #129	@ 0x81
 800c20a:	4813      	ldr	r0, [pc, #76]	@ (800c258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c20c:	f000 fd0d 	bl	800cc2a <USBD_GetEpDesc>
 800c210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	2210      	movs	r2, #16
 800c21c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d006      	beq.n	800c232 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	2200      	movs	r2, #0
 800c228:	711a      	strb	r2, [r3, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f042 0202 	orr.w	r2, r2, #2
 800c230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d006      	beq.n	800c246 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	711a      	strb	r2, [r3, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	f042 0202 	orr.w	r2, r2, #2
 800c244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2243      	movs	r2, #67	@ 0x43
 800c24a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c24c:	4b02      	ldr	r3, [pc, #8]	@ (800c258 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3718      	adds	r7, #24
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20000058 	.word	0x20000058

0800c25c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c264:	2182      	movs	r1, #130	@ 0x82
 800c266:	4818      	ldr	r0, [pc, #96]	@ (800c2c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c268:	f000 fcdf 	bl	800cc2a <USBD_GetEpDesc>
 800c26c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c26e:	2101      	movs	r1, #1
 800c270:	4815      	ldr	r0, [pc, #84]	@ (800c2c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c272:	f000 fcda 	bl	800cc2a <USBD_GetEpDesc>
 800c276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c278:	2181      	movs	r1, #129	@ 0x81
 800c27a:	4813      	ldr	r0, [pc, #76]	@ (800c2c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c27c:	f000 fcd5 	bl	800cc2a <USBD_GetEpDesc>
 800c280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	2210      	movs	r2, #16
 800c28c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d006      	beq.n	800c2a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	2200      	movs	r2, #0
 800c298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c29c:	711a      	strb	r2, [r3, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d006      	beq.n	800c2b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2b0:	711a      	strb	r2, [r3, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2243      	movs	r2, #67	@ 0x43
 800c2ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c2bc:	4b02      	ldr	r3, [pc, #8]	@ (800c2c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3718      	adds	r7, #24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20000058 	.word	0x20000058

0800c2cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	220a      	movs	r2, #10
 800c2d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c2da:	4b03      	ldr	r3, [pc, #12]	@ (800c2e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	20000014 	.word	0x20000014

0800c2ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e009      	b.n	800c314 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	33b0      	adds	r3, #176	@ 0xb0
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	32b0      	adds	r2, #176	@ 0xb0
 800c336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c33a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c342:	2303      	movs	r3, #3
 800c344:	e008      	b.n	800c358 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	371c      	adds	r7, #28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	32b0      	adds	r2, #176	@ 0xb0
 800c378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	e004      	b.n	800c392 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
	...

0800c3a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	32b0      	adds	r2, #176	@ 0xb0
 800c3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e025      	b.n	800c412 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d11f      	bne.n	800c410 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c3d8:	4b10      	ldr	r3, [pc, #64]	@ (800c41c <USBD_CDC_TransmitPacket+0x7c>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	f003 020f 	and.w	r2, r3, #15
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4413      	add	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	4403      	add	r3, r0
 800c3f2:	3318      	adds	r3, #24
 800c3f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c3f6:	4b09      	ldr	r3, [pc, #36]	@ (800c41c <USBD_CDC_TransmitPacket+0x7c>)
 800c3f8:	7819      	ldrb	r1, [r3, #0]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f002 f85f 	bl	800e4ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c410:	7bfb      	ldrb	r3, [r7, #15]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	2000009b 	.word	0x2000009b

0800c420 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	32b0      	adds	r2, #176	@ 0xb0
 800c432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c436:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	32b0      	adds	r2, #176	@ 0xb0
 800c442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c44a:	2303      	movs	r3, #3
 800c44c:	e018      	b.n	800c480 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	7c1b      	ldrb	r3, [r3, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c456:	4b0c      	ldr	r3, [pc, #48]	@ (800c488 <USBD_CDC_ReceivePacket+0x68>)
 800c458:	7819      	ldrb	r1, [r3, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f002 f851 	bl	800e50c <USBD_LL_PrepareReceive>
 800c46a:	e008      	b.n	800c47e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c46c:	4b06      	ldr	r3, [pc, #24]	@ (800c488 <USBD_CDC_ReceivePacket+0x68>)
 800c46e:	7819      	ldrb	r1, [r3, #0]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c476:	2340      	movs	r3, #64	@ 0x40
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f002 f847 	bl	800e50c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	2000009c 	.word	0x2000009c

0800c48c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	4613      	mov	r3, r2
 800c498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d101      	bne.n	800c4a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e01f      	b.n	800c4e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	79fa      	ldrb	r2, [r7, #7]
 800c4d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f001 fec1 	bl	800e260 <USBD_LL_Init>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3718      	adds	r7, #24
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c500:	2303      	movs	r3, #3
 800c502:	e025      	b.n	800c550 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	32ae      	adds	r2, #174	@ 0xae
 800c516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00f      	beq.n	800c540 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	32ae      	adds	r2, #174	@ 0xae
 800c52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c530:	f107 020e 	add.w	r2, r7, #14
 800c534:	4610      	mov	r0, r2
 800c536:	4798      	blx	r3
 800c538:	4602      	mov	r2, r0
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f001 fec9 	bl	800e2f8 <USBD_LL_Start>
 800c566:	4603      	mov	r3, r0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c578:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	460b      	mov	r3, r1
 800c590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d009      	beq.n	800c5b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	78fa      	ldrb	r2, [r7, #3]
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	78fa      	ldrb	r2, [r7, #3]
 800c5d8:	4611      	mov	r1, r2
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	4798      	blx	r3
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c602:	6839      	ldr	r1, [r7, #0]
 800c604:	4618      	mov	r0, r3
 800c606:	f001 f90c 	bl	800d822 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c618:	461a      	mov	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c626:	f003 031f 	and.w	r3, r3, #31
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d01a      	beq.n	800c664 <USBD_LL_SetupStage+0x72>
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d822      	bhi.n	800c678 <USBD_LL_SetupStage+0x86>
 800c632:	2b00      	cmp	r3, #0
 800c634:	d002      	beq.n	800c63c <USBD_LL_SetupStage+0x4a>
 800c636:	2b01      	cmp	r3, #1
 800c638:	d00a      	beq.n	800c650 <USBD_LL_SetupStage+0x5e>
 800c63a:	e01d      	b.n	800c678 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fb63 	bl	800cd10 <USBD_StdDevReq>
 800c64a:	4603      	mov	r3, r0
 800c64c:	73fb      	strb	r3, [r7, #15]
      break;
 800c64e:	e020      	b.n	800c692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fbcb 	bl	800cdf4 <USBD_StdItfReq>
 800c65e:	4603      	mov	r3, r0
 800c660:	73fb      	strb	r3, [r7, #15]
      break;
 800c662:	e016      	b.n	800c692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fc2d 	bl	800cecc <USBD_StdEPReq>
 800c672:	4603      	mov	r3, r0
 800c674:	73fb      	strb	r3, [r7, #15]
      break;
 800c676:	e00c      	b.n	800c692 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c67e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c682:	b2db      	uxtb	r3, r3
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f001 fe96 	bl	800e3b8 <USBD_LL_StallEP>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]
      break;
 800c690:	bf00      	nop
  }

  return ret;
 800c692:	7bfb      	ldrb	r3, [r7, #15]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	607a      	str	r2, [r7, #4]
 800c6a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c6ae:	7afb      	ldrb	r3, [r7, #11]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d16e      	bne.n	800c792 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c6ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	f040 8098 	bne.w	800c7f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d913      	bls.n	800c6fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	689a      	ldr	r2, [r3, #8]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	1ad2      	subs	r2, r2, r3
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	bf28      	it	cs
 800c6ee:	4613      	movcs	r3, r2
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f001 f994 	bl	800da22 <USBD_CtlContinueRx>
 800c6fa:	e07d      	b.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c702:	f003 031f 	and.w	r3, r3, #31
 800c706:	2b02      	cmp	r3, #2
 800c708:	d014      	beq.n	800c734 <USBD_LL_DataOutStage+0x98>
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d81d      	bhi.n	800c74a <USBD_LL_DataOutStage+0xae>
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <USBD_LL_DataOutStage+0x7c>
 800c712:	2b01      	cmp	r3, #1
 800c714:	d003      	beq.n	800c71e <USBD_LL_DataOutStage+0x82>
 800c716:	e018      	b.n	800c74a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c718:	2300      	movs	r3, #0
 800c71a:	75bb      	strb	r3, [r7, #22]
            break;
 800c71c:	e018      	b.n	800c750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c724:	b2db      	uxtb	r3, r3
 800c726:	4619      	mov	r1, r3
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 fa64 	bl	800cbf6 <USBD_CoreFindIF>
 800c72e:	4603      	mov	r3, r0
 800c730:	75bb      	strb	r3, [r7, #22]
            break;
 800c732:	e00d      	b.n	800c750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	4619      	mov	r1, r3
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f000 fa66 	bl	800cc10 <USBD_CoreFindEP>
 800c744:	4603      	mov	r3, r0
 800c746:	75bb      	strb	r3, [r7, #22]
            break;
 800c748:	e002      	b.n	800c750 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c74a:	2300      	movs	r3, #0
 800c74c:	75bb      	strb	r3, [r7, #22]
            break;
 800c74e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c750:	7dbb      	ldrb	r3, [r7, #22]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d119      	bne.n	800c78a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d113      	bne.n	800c78a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c762:	7dba      	ldrb	r2, [r7, #22]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	32ae      	adds	r2, #174	@ 0xae
 800c768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00b      	beq.n	800c78a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c772:	7dba      	ldrb	r2, [r7, #22]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c77a:	7dba      	ldrb	r2, [r7, #22]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	32ae      	adds	r2, #174	@ 0xae
 800c780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f001 f95a 	bl	800da44 <USBD_CtlSendStatus>
 800c790:	e032      	b.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c792:	7afb      	ldrb	r3, [r7, #11]
 800c794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	4619      	mov	r1, r3
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f000 fa37 	bl	800cc10 <USBD_CoreFindEP>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7a6:	7dbb      	ldrb	r3, [r7, #22]
 800c7a8:	2bff      	cmp	r3, #255	@ 0xff
 800c7aa:	d025      	beq.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
 800c7ac:	7dbb      	ldrb	r3, [r7, #22]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d122      	bne.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	2b03      	cmp	r3, #3
 800c7bc:	d117      	bne.n	800c7ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c7be:	7dba      	ldrb	r2, [r7, #22]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	32ae      	adds	r2, #174	@ 0xae
 800c7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00f      	beq.n	800c7ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c7ce:	7dba      	ldrb	r2, [r7, #22]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c7d6:	7dba      	ldrb	r2, [r7, #22]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	32ae      	adds	r2, #174	@ 0xae
 800c7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	7afa      	ldrb	r2, [r7, #11]
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	4798      	blx	r3
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
 800c7f6:	e000      	b.n	800c7fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3718      	adds	r7, #24
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b086      	sub	sp, #24
 800c806:	af00      	add	r7, sp, #0
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	460b      	mov	r3, r1
 800c80c:	607a      	str	r2, [r7, #4]
 800c80e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c810:	7afb      	ldrb	r3, [r7, #11]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d16f      	bne.n	800c8f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3314      	adds	r3, #20
 800c81a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c822:	2b02      	cmp	r3, #2
 800c824:	d15a      	bne.n	800c8dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	689a      	ldr	r2, [r3, #8]
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d914      	bls.n	800c85c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	689a      	ldr	r2, [r3, #8]
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	1ad2      	subs	r2, r2, r3
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	461a      	mov	r2, r3
 800c846:	6879      	ldr	r1, [r7, #4]
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f001 f8bc 	bl	800d9c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c84e:	2300      	movs	r3, #0
 800c850:	2200      	movs	r2, #0
 800c852:	2100      	movs	r1, #0
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f001 fe59 	bl	800e50c <USBD_LL_PrepareReceive>
 800c85a:	e03f      	b.n	800c8dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	68da      	ldr	r2, [r3, #12]
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	429a      	cmp	r2, r3
 800c866:	d11c      	bne.n	800c8a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c870:	429a      	cmp	r2, r3
 800c872:	d316      	bcc.n	800c8a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c87e:	429a      	cmp	r2, r3
 800c880:	d20f      	bcs.n	800c8a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c882:	2200      	movs	r2, #0
 800c884:	2100      	movs	r1, #0
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f001 f89d 	bl	800d9c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c894:	2300      	movs	r3, #0
 800c896:	2200      	movs	r2, #0
 800c898:	2100      	movs	r1, #0
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f001 fe36 	bl	800e50c <USBD_LL_PrepareReceive>
 800c8a0:	e01c      	b.n	800c8dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d10f      	bne.n	800c8ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d009      	beq.n	800c8ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8ce:	2180      	movs	r1, #128	@ 0x80
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f001 fd71 	bl	800e3b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f001 f8c7 	bl	800da6a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d03a      	beq.n	800c95c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f7ff fe42 	bl	800c570 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c8f4:	e032      	b.n	800c95c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c8f6:	7afb      	ldrb	r3, [r7, #11]
 800c8f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	4619      	mov	r1, r3
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 f985 	bl	800cc10 <USBD_CoreFindEP>
 800c906:	4603      	mov	r3, r0
 800c908:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	2bff      	cmp	r3, #255	@ 0xff
 800c90e:	d025      	beq.n	800c95c <USBD_LL_DataInStage+0x15a>
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d122      	bne.n	800c95c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d11c      	bne.n	800c95c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c922:	7dfa      	ldrb	r2, [r7, #23]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	32ae      	adds	r2, #174	@ 0xae
 800c928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d014      	beq.n	800c95c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c932:	7dfa      	ldrb	r2, [r7, #23]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c93a:	7dfa      	ldrb	r2, [r7, #23]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	32ae      	adds	r2, #174	@ 0xae
 800c940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	7afa      	ldrb	r2, [r7, #11]
 800c948:	4611      	mov	r1, r2
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	4798      	blx	r3
 800c94e:	4603      	mov	r3, r0
 800c950:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c952:	7dbb      	ldrb	r3, [r7, #22]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c958:	7dbb      	ldrb	r3, [r7, #22]
 800c95a:	e000      	b.n	800c95e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d014      	beq.n	800c9cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00e      	beq.n	800c9cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	6852      	ldr	r2, [r2, #4]
 800c9ba:	b2d2      	uxtb	r2, r2
 800c9bc:	4611      	mov	r1, r2
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	4798      	blx	r3
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9cc:	2340      	movs	r3, #64	@ 0x40
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f001 fcab 	bl	800e32e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2240      	movs	r2, #64	@ 0x40
 800c9e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9e8:	2340      	movs	r3, #64	@ 0x40
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2180      	movs	r1, #128	@ 0x80
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f001 fc9d 	bl	800e32e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2240      	movs	r2, #64	@ 0x40
 800c9fe:	621a      	str	r2, [r3, #32]

  return ret;
 800ca00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	460b      	mov	r3, r1
 800ca14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	78fa      	ldrb	r2, [r7, #3]
 800ca1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	370c      	adds	r7, #12
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b083      	sub	sp, #12
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	d006      	beq.n	800ca4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2204      	movs	r2, #4
 800ca50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	370c      	adds	r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b04      	cmp	r3, #4
 800ca74:	d106      	bne.n	800ca84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b03      	cmp	r3, #3
 800caa4:	d110      	bne.n	800cac8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00b      	beq.n	800cac8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d005      	beq.n	800cac8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cac2:	69db      	ldr	r3, [r3, #28]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b082      	sub	sp, #8
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	460b      	mov	r3, r1
 800cadc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	32ae      	adds	r2, #174	@ 0xae
 800cae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d101      	bne.n	800caf4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800caf0:	2303      	movs	r3, #3
 800caf2:	e01c      	b.n	800cb2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b03      	cmp	r3, #3
 800cafe:	d115      	bne.n	800cb2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	32ae      	adds	r2, #174	@ 0xae
 800cb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0e:	6a1b      	ldr	r3, [r3, #32]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00b      	beq.n	800cb2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	32ae      	adds	r2, #174	@ 0xae
 800cb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb22:	6a1b      	ldr	r3, [r3, #32]
 800cb24:	78fa      	ldrb	r2, [r7, #3]
 800cb26:	4611      	mov	r1, r2
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b082      	sub	sp, #8
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	460b      	mov	r3, r1
 800cb40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	32ae      	adds	r2, #174	@ 0xae
 800cb4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e01c      	b.n	800cb92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d115      	bne.n	800cb90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	32ae      	adds	r2, #174	@ 0xae
 800cb6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00b      	beq.n	800cb90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	32ae      	adds	r2, #174	@ 0xae
 800cb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb88:	78fa      	ldrb	r2, [r7, #3]
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00e      	beq.n	800cbec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	6852      	ldr	r2, [r2, #4]
 800cbda:	b2d2      	uxtb	r2, r2
 800cbdc:	4611      	mov	r1, r2
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	4798      	blx	r3
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b083      	sub	sp, #12
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
 800cbfe:	460b      	mov	r3, r1
 800cc00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	370c      	adds	r7, #12
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b086      	sub	sp, #24
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	460b      	mov	r3, r1
 800cc34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	885b      	ldrh	r3, [r3, #2]
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	7812      	ldrb	r2, [r2, #0]
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d91f      	bls.n	800cc90 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cc56:	e013      	b.n	800cc80 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cc58:	f107 030a 	add.w	r3, r7, #10
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	6978      	ldr	r0, [r7, #20]
 800cc60:	f000 f81b 	bl	800cc9a <USBD_GetNextDesc>
 800cc64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	785b      	ldrb	r3, [r3, #1]
 800cc6a:	2b05      	cmp	r3, #5
 800cc6c:	d108      	bne.n	800cc80 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	789b      	ldrb	r3, [r3, #2]
 800cc76:	78fa      	ldrb	r2, [r7, #3]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d008      	beq.n	800cc8e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	885b      	ldrh	r3, [r3, #2]
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	897b      	ldrh	r3, [r7, #10]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d8e5      	bhi.n	800cc58 <USBD_GetEpDesc+0x2e>
 800cc8c:	e000      	b.n	800cc90 <USBD_GetEpDesc+0x66>
          break;
 800cc8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cc90:	693b      	ldr	r3, [r7, #16]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3718      	adds	r7, #24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b085      	sub	sp, #20
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	881b      	ldrh	r3, [r3, #0]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	7812      	ldrb	r2, [r2, #0]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3714      	adds	r7, #20
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b087      	sub	sp, #28
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	3301      	adds	r3, #1
 800cce8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ccf0:	8a3b      	ldrh	r3, [r7, #16]
 800ccf2:	021b      	lsls	r3, r3, #8
 800ccf4:	b21a      	sxth	r2, r3
 800ccf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	b21b      	sxth	r3, r3
 800ccfe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cd00:	89fb      	ldrh	r3, [r7, #14]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	371c      	adds	r7, #28
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
	...

0800cd10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd26:	2b40      	cmp	r3, #64	@ 0x40
 800cd28:	d005      	beq.n	800cd36 <USBD_StdDevReq+0x26>
 800cd2a:	2b40      	cmp	r3, #64	@ 0x40
 800cd2c:	d857      	bhi.n	800cdde <USBD_StdDevReq+0xce>
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00f      	beq.n	800cd52 <USBD_StdDevReq+0x42>
 800cd32:	2b20      	cmp	r3, #32
 800cd34:	d153      	bne.n	800cdde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	32ae      	adds	r2, #174	@ 0xae
 800cd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	4798      	blx	r3
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	73fb      	strb	r3, [r7, #15]
      break;
 800cd50:	e04a      	b.n	800cde8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	785b      	ldrb	r3, [r3, #1]
 800cd56:	2b09      	cmp	r3, #9
 800cd58:	d83b      	bhi.n	800cdd2 <USBD_StdDevReq+0xc2>
 800cd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd60 <USBD_StdDevReq+0x50>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cdb5 	.word	0x0800cdb5
 800cd64:	0800cdc9 	.word	0x0800cdc9
 800cd68:	0800cdd3 	.word	0x0800cdd3
 800cd6c:	0800cdbf 	.word	0x0800cdbf
 800cd70:	0800cdd3 	.word	0x0800cdd3
 800cd74:	0800cd93 	.word	0x0800cd93
 800cd78:	0800cd89 	.word	0x0800cd89
 800cd7c:	0800cdd3 	.word	0x0800cdd3
 800cd80:	0800cdab 	.word	0x0800cdab
 800cd84:	0800cd9d 	.word	0x0800cd9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cd88:	6839      	ldr	r1, [r7, #0]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fa3c 	bl	800d208 <USBD_GetDescriptor>
          break;
 800cd90:	e024      	b.n	800cddc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fba1 	bl	800d4dc <USBD_SetAddress>
          break;
 800cd9a:	e01f      	b.n	800cddc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 fbe0 	bl	800d564 <USBD_SetConfig>
 800cda4:	4603      	mov	r3, r0
 800cda6:	73fb      	strb	r3, [r7, #15]
          break;
 800cda8:	e018      	b.n	800cddc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fc83 	bl	800d6b8 <USBD_GetConfig>
          break;
 800cdb2:	e013      	b.n	800cddc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fcb4 	bl	800d724 <USBD_GetStatus>
          break;
 800cdbc:	e00e      	b.n	800cddc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cdbe:	6839      	ldr	r1, [r7, #0]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fce3 	bl	800d78c <USBD_SetFeature>
          break;
 800cdc6:	e009      	b.n	800cddc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fd07 	bl	800d7de <USBD_ClrFeature>
          break;
 800cdd0:	e004      	b.n	800cddc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fd5e 	bl	800d896 <USBD_CtlError>
          break;
 800cdda:	bf00      	nop
      }
      break;
 800cddc:	e004      	b.n	800cde8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 fd58 	bl	800d896 <USBD_CtlError>
      break;
 800cde6:	bf00      	nop
  }

  return ret;
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop

0800cdf4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce0a:	2b40      	cmp	r3, #64	@ 0x40
 800ce0c:	d005      	beq.n	800ce1a <USBD_StdItfReq+0x26>
 800ce0e:	2b40      	cmp	r3, #64	@ 0x40
 800ce10:	d852      	bhi.n	800ceb8 <USBD_StdItfReq+0xc4>
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d001      	beq.n	800ce1a <USBD_StdItfReq+0x26>
 800ce16:	2b20      	cmp	r3, #32
 800ce18:	d14e      	bne.n	800ceb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	3b01      	subs	r3, #1
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d840      	bhi.n	800ceaa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	889b      	ldrh	r3, [r3, #4]
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d836      	bhi.n	800cea0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	889b      	ldrh	r3, [r3, #4]
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	4619      	mov	r1, r3
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff fedb 	bl	800cbf6 <USBD_CoreFindIF>
 800ce40:	4603      	mov	r3, r0
 800ce42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce44:	7bbb      	ldrb	r3, [r7, #14]
 800ce46:	2bff      	cmp	r3, #255	@ 0xff
 800ce48:	d01d      	beq.n	800ce86 <USBD_StdItfReq+0x92>
 800ce4a:	7bbb      	ldrb	r3, [r7, #14]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d11a      	bne.n	800ce86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ce50:	7bba      	ldrb	r2, [r7, #14]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	32ae      	adds	r2, #174	@ 0xae
 800ce56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00f      	beq.n	800ce80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ce60:	7bba      	ldrb	r2, [r7, #14]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce68:	7bba      	ldrb	r2, [r7, #14]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	32ae      	adds	r2, #174	@ 0xae
 800ce6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	4798      	blx	r3
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce7e:	e004      	b.n	800ce8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ce80:	2303      	movs	r3, #3
 800ce82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce84:	e001      	b.n	800ce8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ce86:	2303      	movs	r3, #3
 800ce88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	88db      	ldrh	r3, [r3, #6]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d110      	bne.n	800ceb4 <USBD_StdItfReq+0xc0>
 800ce92:	7bfb      	ldrb	r3, [r7, #15]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10d      	bne.n	800ceb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fdd3 	bl	800da44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ce9e:	e009      	b.n	800ceb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fcf7 	bl	800d896 <USBD_CtlError>
          break;
 800cea8:	e004      	b.n	800ceb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fcf2 	bl	800d896 <USBD_CtlError>
          break;
 800ceb2:	e000      	b.n	800ceb6 <USBD_StdItfReq+0xc2>
          break;
 800ceb4:	bf00      	nop
      }
      break;
 800ceb6:	e004      	b.n	800cec2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 fceb 	bl	800d896 <USBD_CtlError>
      break;
 800cec0:	bf00      	nop
  }

  return ret;
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	889b      	ldrh	r3, [r3, #4]
 800cede:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cee8:	2b40      	cmp	r3, #64	@ 0x40
 800ceea:	d007      	beq.n	800cefc <USBD_StdEPReq+0x30>
 800ceec:	2b40      	cmp	r3, #64	@ 0x40
 800ceee:	f200 817f 	bhi.w	800d1f0 <USBD_StdEPReq+0x324>
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d02a      	beq.n	800cf4c <USBD_StdEPReq+0x80>
 800cef6:	2b20      	cmp	r3, #32
 800cef8:	f040 817a 	bne.w	800d1f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cefc:	7bbb      	ldrb	r3, [r7, #14]
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7ff fe85 	bl	800cc10 <USBD_CoreFindEP>
 800cf06:	4603      	mov	r3, r0
 800cf08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf0a:	7b7b      	ldrb	r3, [r7, #13]
 800cf0c:	2bff      	cmp	r3, #255	@ 0xff
 800cf0e:	f000 8174 	beq.w	800d1fa <USBD_StdEPReq+0x32e>
 800cf12:	7b7b      	ldrb	r3, [r7, #13]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f040 8170 	bne.w	800d1fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cf1a:	7b7a      	ldrb	r2, [r7, #13]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cf22:	7b7a      	ldrb	r2, [r7, #13]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	32ae      	adds	r2, #174	@ 0xae
 800cf28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 8163 	beq.w	800d1fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cf34:	7b7a      	ldrb	r2, [r7, #13]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	32ae      	adds	r2, #174	@ 0xae
 800cf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	4798      	blx	r3
 800cf46:	4603      	mov	r3, r0
 800cf48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf4a:	e156      	b.n	800d1fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	785b      	ldrb	r3, [r3, #1]
 800cf50:	2b03      	cmp	r3, #3
 800cf52:	d008      	beq.n	800cf66 <USBD_StdEPReq+0x9a>
 800cf54:	2b03      	cmp	r3, #3
 800cf56:	f300 8145 	bgt.w	800d1e4 <USBD_StdEPReq+0x318>
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 809b 	beq.w	800d096 <USBD_StdEPReq+0x1ca>
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d03c      	beq.n	800cfde <USBD_StdEPReq+0x112>
 800cf64:	e13e      	b.n	800d1e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d002      	beq.n	800cf78 <USBD_StdEPReq+0xac>
 800cf72:	2b03      	cmp	r3, #3
 800cf74:	d016      	beq.n	800cfa4 <USBD_StdEPReq+0xd8>
 800cf76:	e02c      	b.n	800cfd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00d      	beq.n	800cf9a <USBD_StdEPReq+0xce>
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
 800cf80:	2b80      	cmp	r3, #128	@ 0x80
 800cf82:	d00a      	beq.n	800cf9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf84:	7bbb      	ldrb	r3, [r7, #14]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f001 fa15 	bl	800e3b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf8e:	2180      	movs	r1, #128	@ 0x80
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f001 fa11 	bl	800e3b8 <USBD_LL_StallEP>
 800cf96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf98:	e020      	b.n	800cfdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fc7a 	bl	800d896 <USBD_CtlError>
              break;
 800cfa2:	e01b      	b.n	800cfdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	885b      	ldrh	r3, [r3, #2]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10e      	bne.n	800cfca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cfac:	7bbb      	ldrb	r3, [r7, #14]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00b      	beq.n	800cfca <USBD_StdEPReq+0xfe>
 800cfb2:	7bbb      	ldrb	r3, [r7, #14]
 800cfb4:	2b80      	cmp	r3, #128	@ 0x80
 800cfb6:	d008      	beq.n	800cfca <USBD_StdEPReq+0xfe>
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	88db      	ldrh	r3, [r3, #6]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d104      	bne.n	800cfca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f001 f9f7 	bl	800e3b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fd3a 	bl	800da44 <USBD_CtlSendStatus>

              break;
 800cfd0:	e004      	b.n	800cfdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fc5e 	bl	800d896 <USBD_CtlError>
              break;
 800cfda:	bf00      	nop
          }
          break;
 800cfdc:	e107      	b.n	800d1ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d002      	beq.n	800cff0 <USBD_StdEPReq+0x124>
 800cfea:	2b03      	cmp	r3, #3
 800cfec:	d016      	beq.n	800d01c <USBD_StdEPReq+0x150>
 800cfee:	e04b      	b.n	800d088 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00d      	beq.n	800d012 <USBD_StdEPReq+0x146>
 800cff6:	7bbb      	ldrb	r3, [r7, #14]
 800cff8:	2b80      	cmp	r3, #128	@ 0x80
 800cffa:	d00a      	beq.n	800d012 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
 800cffe:	4619      	mov	r1, r3
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f001 f9d9 	bl	800e3b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d006:	2180      	movs	r1, #128	@ 0x80
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f001 f9d5 	bl	800e3b8 <USBD_LL_StallEP>
 800d00e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d010:	e040      	b.n	800d094 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fc3e 	bl	800d896 <USBD_CtlError>
              break;
 800d01a:	e03b      	b.n	800d094 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	885b      	ldrh	r3, [r3, #2]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d136      	bne.n	800d092 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d024:	7bbb      	ldrb	r3, [r7, #14]
 800d026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d004      	beq.n	800d038 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d02e:	7bbb      	ldrb	r3, [r7, #14]
 800d030:	4619      	mov	r1, r3
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f001 f9df 	bl	800e3f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 fd03 	bl	800da44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d03e:	7bbb      	ldrb	r3, [r7, #14]
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7ff fde4 	bl	800cc10 <USBD_CoreFindEP>
 800d048:	4603      	mov	r3, r0
 800d04a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d04c:	7b7b      	ldrb	r3, [r7, #13]
 800d04e:	2bff      	cmp	r3, #255	@ 0xff
 800d050:	d01f      	beq.n	800d092 <USBD_StdEPReq+0x1c6>
 800d052:	7b7b      	ldrb	r3, [r7, #13]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d11c      	bne.n	800d092 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d058:	7b7a      	ldrb	r2, [r7, #13]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d060:	7b7a      	ldrb	r2, [r7, #13]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	32ae      	adds	r2, #174	@ 0xae
 800d066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d010      	beq.n	800d092 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d070:	7b7a      	ldrb	r2, [r7, #13]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	32ae      	adds	r2, #174	@ 0xae
 800d076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	6839      	ldr	r1, [r7, #0]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	4798      	blx	r3
 800d082:	4603      	mov	r3, r0
 800d084:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d086:	e004      	b.n	800d092 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 fc03 	bl	800d896 <USBD_CtlError>
              break;
 800d090:	e000      	b.n	800d094 <USBD_StdEPReq+0x1c8>
              break;
 800d092:	bf00      	nop
          }
          break;
 800d094:	e0ab      	b.n	800d1ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d002      	beq.n	800d0a8 <USBD_StdEPReq+0x1dc>
 800d0a2:	2b03      	cmp	r3, #3
 800d0a4:	d032      	beq.n	800d10c <USBD_StdEPReq+0x240>
 800d0a6:	e097      	b.n	800d1d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0a8:	7bbb      	ldrb	r3, [r7, #14]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d007      	beq.n	800d0be <USBD_StdEPReq+0x1f2>
 800d0ae:	7bbb      	ldrb	r3, [r7, #14]
 800d0b0:	2b80      	cmp	r3, #128	@ 0x80
 800d0b2:	d004      	beq.n	800d0be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d0b4:	6839      	ldr	r1, [r7, #0]
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 fbed 	bl	800d896 <USBD_CtlError>
                break;
 800d0bc:	e091      	b.n	800d1e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da0b      	bge.n	800d0de <USBD_StdEPReq+0x212>
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	3310      	adds	r3, #16
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	4413      	add	r3, r2
 800d0da:	3304      	adds	r3, #4
 800d0dc:	e00b      	b.n	800d0f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0de:	7bbb      	ldrb	r3, [r7, #14]
 800d0e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2202      	movs	r2, #2
 800d102:	4619      	mov	r1, r3
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fc43 	bl	800d990 <USBD_CtlSendData>
              break;
 800d10a:	e06a      	b.n	800d1e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d10c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d110:	2b00      	cmp	r3, #0
 800d112:	da11      	bge.n	800d138 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d114:	7bbb      	ldrb	r3, [r7, #14]
 800d116:	f003 020f 	and.w	r2, r3, #15
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	4613      	mov	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4413      	add	r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	440b      	add	r3, r1
 800d126:	3324      	adds	r3, #36	@ 0x24
 800d128:	881b      	ldrh	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d117      	bne.n	800d15e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fbb0 	bl	800d896 <USBD_CtlError>
                  break;
 800d136:	e054      	b.n	800d1e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d138:	7bbb      	ldrb	r3, [r7, #14]
 800d13a:	f003 020f 	and.w	r2, r3, #15
 800d13e:	6879      	ldr	r1, [r7, #4]
 800d140:	4613      	mov	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	440b      	add	r3, r1
 800d14a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d104      	bne.n	800d15e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fb9d 	bl	800d896 <USBD_CtlError>
                  break;
 800d15c:	e041      	b.n	800d1e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d15e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d162:	2b00      	cmp	r3, #0
 800d164:	da0b      	bge.n	800d17e <USBD_StdEPReq+0x2b2>
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d16c:	4613      	mov	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	3310      	adds	r3, #16
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	4413      	add	r3, r2
 800d17a:	3304      	adds	r3, #4
 800d17c:	e00b      	b.n	800d196 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d17e:	7bbb      	ldrb	r3, [r7, #14]
 800d180:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d184:	4613      	mov	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	4413      	add	r3, r2
 800d194:	3304      	adds	r3, #4
 800d196:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d198:	7bbb      	ldrb	r3, [r7, #14]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d002      	beq.n	800d1a4 <USBD_StdEPReq+0x2d8>
 800d19e:	7bbb      	ldrb	r3, [r7, #14]
 800d1a0:	2b80      	cmp	r3, #128	@ 0x80
 800d1a2:	d103      	bne.n	800d1ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	601a      	str	r2, [r3, #0]
 800d1aa:	e00e      	b.n	800d1ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f001 f93f 	bl	800e434 <USBD_LL_IsStallEP>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d003      	beq.n	800d1c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	e002      	b.n	800d1ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	2202      	movs	r2, #2
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fbdd 	bl	800d990 <USBD_CtlSendData>
              break;
 800d1d6:	e004      	b.n	800d1e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d1d8:	6839      	ldr	r1, [r7, #0]
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fb5b 	bl	800d896 <USBD_CtlError>
              break;
 800d1e0:	bf00      	nop
          }
          break;
 800d1e2:	e004      	b.n	800d1ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fb55 	bl	800d896 <USBD_CtlError>
          break;
 800d1ec:	bf00      	nop
      }
      break;
 800d1ee:	e005      	b.n	800d1fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d1f0:	6839      	ldr	r1, [r7, #0]
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 fb4f 	bl	800d896 <USBD_CtlError>
      break;
 800d1f8:	e000      	b.n	800d1fc <USBD_StdEPReq+0x330>
      break;
 800d1fa:	bf00      	nop
  }

  return ret;
 800d1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
	...

0800d208 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d212:	2300      	movs	r3, #0
 800d214:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d216:	2300      	movs	r3, #0
 800d218:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d21a:	2300      	movs	r3, #0
 800d21c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	885b      	ldrh	r3, [r3, #2]
 800d222:	0a1b      	lsrs	r3, r3, #8
 800d224:	b29b      	uxth	r3, r3
 800d226:	3b01      	subs	r3, #1
 800d228:	2b06      	cmp	r3, #6
 800d22a:	f200 8128 	bhi.w	800d47e <USBD_GetDescriptor+0x276>
 800d22e:	a201      	add	r2, pc, #4	@ (adr r2, 800d234 <USBD_GetDescriptor+0x2c>)
 800d230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d234:	0800d251 	.word	0x0800d251
 800d238:	0800d269 	.word	0x0800d269
 800d23c:	0800d2a9 	.word	0x0800d2a9
 800d240:	0800d47f 	.word	0x0800d47f
 800d244:	0800d47f 	.word	0x0800d47f
 800d248:	0800d41f 	.word	0x0800d41f
 800d24c:	0800d44b 	.word	0x0800d44b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	7c12      	ldrb	r2, [r2, #16]
 800d25c:	f107 0108 	add.w	r1, r7, #8
 800d260:	4610      	mov	r0, r2
 800d262:	4798      	blx	r3
 800d264:	60f8      	str	r0, [r7, #12]
      break;
 800d266:	e112      	b.n	800d48e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	7c1b      	ldrb	r3, [r3, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10d      	bne.n	800d28c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d278:	f107 0208 	add.w	r2, r7, #8
 800d27c:	4610      	mov	r0, r2
 800d27e:	4798      	blx	r3
 800d280:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	3301      	adds	r3, #1
 800d286:	2202      	movs	r2, #2
 800d288:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d28a:	e100      	b.n	800d48e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d294:	f107 0208 	add.w	r2, r7, #8
 800d298:	4610      	mov	r0, r2
 800d29a:	4798      	blx	r3
 800d29c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	701a      	strb	r2, [r3, #0]
      break;
 800d2a6:	e0f2      	b.n	800d48e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	885b      	ldrh	r3, [r3, #2]
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b05      	cmp	r3, #5
 800d2b0:	f200 80ac 	bhi.w	800d40c <USBD_GetDescriptor+0x204>
 800d2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d2bc <USBD_GetDescriptor+0xb4>)
 800d2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ba:	bf00      	nop
 800d2bc:	0800d2d5 	.word	0x0800d2d5
 800d2c0:	0800d309 	.word	0x0800d309
 800d2c4:	0800d33d 	.word	0x0800d33d
 800d2c8:	0800d371 	.word	0x0800d371
 800d2cc:	0800d3a5 	.word	0x0800d3a5
 800d2d0:	0800d3d9 	.word	0x0800d3d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00b      	beq.n	800d2f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	7c12      	ldrb	r2, [r2, #16]
 800d2ec:	f107 0108 	add.w	r1, r7, #8
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	4798      	blx	r3
 800d2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2f6:	e091      	b.n	800d41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2f8:	6839      	ldr	r1, [r7, #0]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 facb 	bl	800d896 <USBD_CtlError>
            err++;
 800d300:	7afb      	ldrb	r3, [r7, #11]
 800d302:	3301      	adds	r3, #1
 800d304:	72fb      	strb	r3, [r7, #11]
          break;
 800d306:	e089      	b.n	800d41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00b      	beq.n	800d32c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	7c12      	ldrb	r2, [r2, #16]
 800d320:	f107 0108 	add.w	r1, r7, #8
 800d324:	4610      	mov	r0, r2
 800d326:	4798      	blx	r3
 800d328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d32a:	e077      	b.n	800d41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fab1 	bl	800d896 <USBD_CtlError>
            err++;
 800d334:	7afb      	ldrb	r3, [r7, #11]
 800d336:	3301      	adds	r3, #1
 800d338:	72fb      	strb	r3, [r7, #11]
          break;
 800d33a:	e06f      	b.n	800d41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00b      	beq.n	800d360 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	7c12      	ldrb	r2, [r2, #16]
 800d354:	f107 0108 	add.w	r1, r7, #8
 800d358:	4610      	mov	r0, r2
 800d35a:	4798      	blx	r3
 800d35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d35e:	e05d      	b.n	800d41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 fa97 	bl	800d896 <USBD_CtlError>
            err++;
 800d368:	7afb      	ldrb	r3, [r7, #11]
 800d36a:	3301      	adds	r3, #1
 800d36c:	72fb      	strb	r3, [r7, #11]
          break;
 800d36e:	e055      	b.n	800d41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00b      	beq.n	800d394 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	7c12      	ldrb	r2, [r2, #16]
 800d388:	f107 0108 	add.w	r1, r7, #8
 800d38c:	4610      	mov	r0, r2
 800d38e:	4798      	blx	r3
 800d390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d392:	e043      	b.n	800d41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fa7d 	bl	800d896 <USBD_CtlError>
            err++;
 800d39c:	7afb      	ldrb	r3, [r7, #11]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d3a2:	e03b      	b.n	800d41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	7c12      	ldrb	r2, [r2, #16]
 800d3bc:	f107 0108 	add.w	r1, r7, #8
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	4798      	blx	r3
 800d3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3c6:	e029      	b.n	800d41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fa63 	bl	800d896 <USBD_CtlError>
            err++;
 800d3d0:	7afb      	ldrb	r3, [r7, #11]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d3d6:	e021      	b.n	800d41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00b      	beq.n	800d3fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	7c12      	ldrb	r2, [r2, #16]
 800d3f0:	f107 0108 	add.w	r1, r7, #8
 800d3f4:	4610      	mov	r0, r2
 800d3f6:	4798      	blx	r3
 800d3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3fa:	e00f      	b.n	800d41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3fc:	6839      	ldr	r1, [r7, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fa49 	bl	800d896 <USBD_CtlError>
            err++;
 800d404:	7afb      	ldrb	r3, [r7, #11]
 800d406:	3301      	adds	r3, #1
 800d408:	72fb      	strb	r3, [r7, #11]
          break;
 800d40a:	e007      	b.n	800d41c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fa41 	bl	800d896 <USBD_CtlError>
          err++;
 800d414:	7afb      	ldrb	r3, [r7, #11]
 800d416:	3301      	adds	r3, #1
 800d418:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d41a:	bf00      	nop
      }
      break;
 800d41c:	e037      	b.n	800d48e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7c1b      	ldrb	r3, [r3, #16]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d109      	bne.n	800d43a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42e:	f107 0208 	add.w	r2, r7, #8
 800d432:	4610      	mov	r0, r2
 800d434:	4798      	blx	r3
 800d436:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d438:	e029      	b.n	800d48e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fa2a 	bl	800d896 <USBD_CtlError>
        err++;
 800d442:	7afb      	ldrb	r3, [r7, #11]
 800d444:	3301      	adds	r3, #1
 800d446:	72fb      	strb	r3, [r7, #11]
      break;
 800d448:	e021      	b.n	800d48e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7c1b      	ldrb	r3, [r3, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10d      	bne.n	800d46e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d45a:	f107 0208 	add.w	r2, r7, #8
 800d45e:	4610      	mov	r0, r2
 800d460:	4798      	blx	r3
 800d462:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3301      	adds	r3, #1
 800d468:	2207      	movs	r2, #7
 800d46a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d46c:	e00f      	b.n	800d48e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fa10 	bl	800d896 <USBD_CtlError>
        err++;
 800d476:	7afb      	ldrb	r3, [r7, #11]
 800d478:	3301      	adds	r3, #1
 800d47a:	72fb      	strb	r3, [r7, #11]
      break;
 800d47c:	e007      	b.n	800d48e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fa08 	bl	800d896 <USBD_CtlError>
      err++;
 800d486:	7afb      	ldrb	r3, [r7, #11]
 800d488:	3301      	adds	r3, #1
 800d48a:	72fb      	strb	r3, [r7, #11]
      break;
 800d48c:	bf00      	nop
  }

  if (err != 0U)
 800d48e:	7afb      	ldrb	r3, [r7, #11]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d11e      	bne.n	800d4d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	88db      	ldrh	r3, [r3, #6]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d016      	beq.n	800d4ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d49c:	893b      	ldrh	r3, [r7, #8]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00e      	beq.n	800d4c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	88da      	ldrh	r2, [r3, #6]
 800d4a6:	893b      	ldrh	r3, [r7, #8]
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	bf28      	it	cs
 800d4ac:	4613      	movcs	r3, r2
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4b2:	893b      	ldrh	r3, [r7, #8]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fa69 	bl	800d990 <USBD_CtlSendData>
 800d4be:	e009      	b.n	800d4d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f9e7 	bl	800d896 <USBD_CtlError>
 800d4c8:	e004      	b.n	800d4d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 faba 	bl	800da44 <USBD_CtlSendStatus>
 800d4d0:	e000      	b.n	800d4d4 <USBD_GetDescriptor+0x2cc>
    return;
 800d4d2:	bf00      	nop
  }
}
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop

0800d4dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	889b      	ldrh	r3, [r3, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d131      	bne.n	800d552 <USBD_SetAddress+0x76>
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	88db      	ldrh	r3, [r3, #6]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d12d      	bne.n	800d552 <USBD_SetAddress+0x76>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	885b      	ldrh	r3, [r3, #2]
 800d4fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4fc:	d829      	bhi.n	800d552 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	885b      	ldrh	r3, [r3, #2]
 800d502:	b2db      	uxtb	r3, r3
 800d504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d508:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b03      	cmp	r3, #3
 800d514:	d104      	bne.n	800d520 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d516:	6839      	ldr	r1, [r7, #0]
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f9bc 	bl	800d896 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d51e:	e01d      	b.n	800d55c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	7bfa      	ldrb	r2, [r7, #15]
 800d524:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d528:	7bfb      	ldrb	r3, [r7, #15]
 800d52a:	4619      	mov	r1, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 ffad 	bl	800e48c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fa86 	bl	800da44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d538:	7bfb      	ldrb	r3, [r7, #15]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d004      	beq.n	800d548 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2202      	movs	r2, #2
 800d542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d546:	e009      	b.n	800d55c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d550:	e004      	b.n	800d55c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d552:	6839      	ldr	r1, [r7, #0]
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 f99e 	bl	800d896 <USBD_CtlError>
  }
}
 800d55a:	bf00      	nop
 800d55c:	bf00      	nop
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d56e:	2300      	movs	r3, #0
 800d570:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	885b      	ldrh	r3, [r3, #2]
 800d576:	b2da      	uxtb	r2, r3
 800d578:	4b4e      	ldr	r3, [pc, #312]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d57a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d57c:	4b4d      	ldr	r3, [pc, #308]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d905      	bls.n	800d590 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d584:	6839      	ldr	r1, [r7, #0]
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f985 	bl	800d896 <USBD_CtlError>
    return USBD_FAIL;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e08c      	b.n	800d6aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d596:	b2db      	uxtb	r3, r3
 800d598:	2b02      	cmp	r3, #2
 800d59a:	d002      	beq.n	800d5a2 <USBD_SetConfig+0x3e>
 800d59c:	2b03      	cmp	r3, #3
 800d59e:	d029      	beq.n	800d5f4 <USBD_SetConfig+0x90>
 800d5a0:	e075      	b.n	800d68e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d5a2:	4b44      	ldr	r3, [pc, #272]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d020      	beq.n	800d5ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d5aa:	4b42      	ldr	r3, [pc, #264]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d5b4:	4b3f      	ldr	r3, [pc, #252]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7fe ffe3 	bl	800c586 <USBD_SetClassConfig>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d008      	beq.n	800d5dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d5ca:	6839      	ldr	r1, [r7, #0]
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f962 	bl	800d896 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d5da:	e065      	b.n	800d6a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 fa31 	bl	800da44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2203      	movs	r2, #3
 800d5e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d5ea:	e05d      	b.n	800d6a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fa29 	bl	800da44 <USBD_CtlSendStatus>
      break;
 800d5f2:	e059      	b.n	800d6a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d5f4:	4b2f      	ldr	r3, [pc, #188]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d112      	bne.n	800d622 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2202      	movs	r2, #2
 800d600:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d604:	4b2b      	ldr	r3, [pc, #172]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	461a      	mov	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d60e:	4b29      	ldr	r3, [pc, #164]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	4619      	mov	r1, r3
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7fe ffd2 	bl	800c5be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fa12 	bl	800da44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d620:	e042      	b.n	800d6a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d622:	4b24      	ldr	r3, [pc, #144]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d02a      	beq.n	800d686 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	b2db      	uxtb	r3, r3
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7fe ffc0 	bl	800c5be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d63e:	4b1d      	ldr	r3, [pc, #116]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d648:	4b1a      	ldr	r3, [pc, #104]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7fe ff99 	bl	800c586 <USBD_SetClassConfig>
 800d654:	4603      	mov	r3, r0
 800d656:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d658:	7bfb      	ldrb	r3, [r7, #15]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00f      	beq.n	800d67e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 f918 	bl	800d896 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	4619      	mov	r1, r3
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7fe ffa5 	bl	800c5be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2202      	movs	r2, #2
 800d678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d67c:	e014      	b.n	800d6a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f9e0 	bl	800da44 <USBD_CtlSendStatus>
      break;
 800d684:	e010      	b.n	800d6a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f9dc 	bl	800da44 <USBD_CtlSendStatus>
      break;
 800d68c:	e00c      	b.n	800d6a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 f900 	bl	800d896 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d696:	4b07      	ldr	r3, [pc, #28]	@ (800d6b4 <USBD_SetConfig+0x150>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	4619      	mov	r1, r3
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7fe ff8e 	bl	800c5be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d6a6:	bf00      	nop
  }

  return ret;
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	200130b0 	.word	0x200130b0

0800d6b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	88db      	ldrh	r3, [r3, #6]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d004      	beq.n	800d6d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d6ca:	6839      	ldr	r1, [r7, #0]
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 f8e2 	bl	800d896 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d6d2:	e023      	b.n	800d71c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	dc02      	bgt.n	800d6e6 <USBD_GetConfig+0x2e>
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	dc03      	bgt.n	800d6ec <USBD_GetConfig+0x34>
 800d6e4:	e015      	b.n	800d712 <USBD_GetConfig+0x5a>
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d00b      	beq.n	800d702 <USBD_GetConfig+0x4a>
 800d6ea:	e012      	b.n	800d712 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f948 	bl	800d990 <USBD_CtlSendData>
        break;
 800d700:	e00c      	b.n	800d71c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	3304      	adds	r3, #4
 800d706:	2201      	movs	r2, #1
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f940 	bl	800d990 <USBD_CtlSendData>
        break;
 800d710:	e004      	b.n	800d71c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f8be 	bl	800d896 <USBD_CtlError>
        break;
 800d71a:	bf00      	nop
}
 800d71c:	bf00      	nop
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d734:	b2db      	uxtb	r3, r3
 800d736:	3b01      	subs	r3, #1
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d81e      	bhi.n	800d77a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	88db      	ldrh	r3, [r3, #6]
 800d740:	2b02      	cmp	r3, #2
 800d742:	d004      	beq.n	800d74e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 f8a5 	bl	800d896 <USBD_CtlError>
        break;
 800d74c:	e01a      	b.n	800d784 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2201      	movs	r2, #1
 800d752:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d005      	beq.n	800d76a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	f043 0202 	orr.w	r2, r3, #2
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	330c      	adds	r3, #12
 800d76e:	2202      	movs	r2, #2
 800d770:	4619      	mov	r1, r3
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f90c 	bl	800d990 <USBD_CtlSendData>
      break;
 800d778:	e004      	b.n	800d784 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f88a 	bl	800d896 <USBD_CtlError>
      break;
 800d782:	bf00      	nop
  }
}
 800d784:	bf00      	nop
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	885b      	ldrh	r3, [r3, #2]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d107      	bne.n	800d7ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f94c 	bl	800da44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d7ac:	e013      	b.n	800d7d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	885b      	ldrh	r3, [r3, #2]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d10b      	bne.n	800d7ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	889b      	ldrh	r3, [r3, #4]
 800d7ba:	0a1b      	lsrs	r3, r3, #8
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f93c 	bl	800da44 <USBD_CtlSendStatus>
}
 800d7cc:	e003      	b.n	800d7d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 f860 	bl	800d896 <USBD_CtlError>
}
 800d7d6:	bf00      	nop
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b082      	sub	sp, #8
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
 800d7e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	2b02      	cmp	r3, #2
 800d7f4:	d80b      	bhi.n	800d80e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	885b      	ldrh	r3, [r3, #2]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d10c      	bne.n	800d818 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2200      	movs	r2, #0
 800d802:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f91c 	bl	800da44 <USBD_CtlSendStatus>
      }
      break;
 800d80c:	e004      	b.n	800d818 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f840 	bl	800d896 <USBD_CtlError>
      break;
 800d816:	e000      	b.n	800d81a <USBD_ClrFeature+0x3c>
      break;
 800d818:	bf00      	nop
  }
}
 800d81a:	bf00      	nop
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	781a      	ldrb	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	3301      	adds	r3, #1
 800d83c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	781a      	ldrb	r2, [r3, #0]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f7ff fa40 	bl	800ccd2 <SWAPBYTE>
 800d852:	4603      	mov	r3, r0
 800d854:	461a      	mov	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3301      	adds	r3, #1
 800d85e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	3301      	adds	r3, #1
 800d864:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f7ff fa33 	bl	800ccd2 <SWAPBYTE>
 800d86c:	4603      	mov	r3, r0
 800d86e:	461a      	mov	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3301      	adds	r3, #1
 800d878:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	3301      	adds	r3, #1
 800d87e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f7ff fa26 	bl	800ccd2 <SWAPBYTE>
 800d886:	4603      	mov	r3, r0
 800d888:	461a      	mov	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	80da      	strh	r2, [r3, #6]
}
 800d88e:	bf00      	nop
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b082      	sub	sp, #8
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8a0:	2180      	movs	r1, #128	@ 0x80
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 fd88 	bl	800e3b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fd84 	bl	800e3b8 <USBD_LL_StallEP>
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b086      	sub	sp, #24
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d042      	beq.n	800d954 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d8d2:	6938      	ldr	r0, [r7, #16]
 800d8d4:	f000 f842 	bl	800d95c <USBD_GetLen>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	3301      	adds	r3, #1
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8e2:	d808      	bhi.n	800d8f6 <USBD_GetString+0x3e>
 800d8e4:	6938      	ldr	r0, [r7, #16]
 800d8e6:	f000 f839 	bl	800d95c <USBD_GetLen>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	e001      	b.n	800d8fa <USBD_GetString+0x42>
 800d8f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	4413      	add	r3, r2
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	7812      	ldrb	r2, [r2, #0]
 800d908:	701a      	strb	r2, [r3, #0]
  idx++;
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	3301      	adds	r3, #1
 800d90e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	4413      	add	r3, r2
 800d916:	2203      	movs	r2, #3
 800d918:	701a      	strb	r2, [r3, #0]
  idx++;
 800d91a:	7dfb      	ldrb	r3, [r7, #23]
 800d91c:	3301      	adds	r3, #1
 800d91e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d920:	e013      	b.n	800d94a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d922:	7dfb      	ldrb	r3, [r7, #23]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	4413      	add	r3, r2
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	7812      	ldrb	r2, [r2, #0]
 800d92c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	3301      	adds	r3, #1
 800d932:	613b      	str	r3, [r7, #16]
    idx++;
 800d934:	7dfb      	ldrb	r3, [r7, #23]
 800d936:	3301      	adds	r3, #1
 800d938:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d93a:	7dfb      	ldrb	r3, [r7, #23]
 800d93c:	68ba      	ldr	r2, [r7, #8]
 800d93e:	4413      	add	r3, r2
 800d940:	2200      	movs	r2, #0
 800d942:	701a      	strb	r2, [r3, #0]
    idx++;
 800d944:	7dfb      	ldrb	r3, [r7, #23]
 800d946:	3301      	adds	r3, #1
 800d948:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1e7      	bne.n	800d922 <USBD_GetString+0x6a>
 800d952:	e000      	b.n	800d956 <USBD_GetString+0x9e>
    return;
 800d954:	bf00      	nop
  }
}
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d96c:	e005      	b.n	800d97a <USBD_GetLen+0x1e>
  {
    len++;
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	3301      	adds	r3, #1
 800d972:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	3301      	adds	r3, #1
 800d978:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1f5      	bne.n	800d96e <USBD_GetLen+0x12>
  }

  return len;
 800d982:	7bfb      	ldrb	r3, [r7, #15]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2202      	movs	r2, #2
 800d9a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f000 fd87 	bl	800e4ca <USBD_LL_Transmit>

  return USBD_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	60f8      	str	r0, [r7, #12]
 800d9ce:	60b9      	str	r1, [r7, #8]
 800d9d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 fd76 	bl	800e4ca <USBD_LL_Transmit>

  return USBD_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2203      	movs	r2, #3
 800d9f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	2100      	movs	r1, #0
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f000 fd7a 	bl	800e50c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b084      	sub	sp, #16
 800da26:	af00      	add	r7, sp, #0
 800da28:	60f8      	str	r0, [r7, #12]
 800da2a:	60b9      	str	r1, [r7, #8]
 800da2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	2100      	movs	r1, #0
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f000 fd69 	bl	800e50c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2204      	movs	r2, #4
 800da50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da54:	2300      	movs	r3, #0
 800da56:	2200      	movs	r2, #0
 800da58:	2100      	movs	r1, #0
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fd35 	bl	800e4ca <USBD_LL_Transmit>

  return USBD_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2205      	movs	r2, #5
 800da76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da7a:	2300      	movs	r3, #0
 800da7c:	2200      	movs	r2, #0
 800da7e:	2100      	movs	r1, #0
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fd43 	bl	800e50c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800da94:	2200      	movs	r2, #0
 800da96:	4912      	ldr	r1, [pc, #72]	@ (800dae0 <MX_USB_DEVICE_Init+0x50>)
 800da98:	4812      	ldr	r0, [pc, #72]	@ (800dae4 <MX_USB_DEVICE_Init+0x54>)
 800da9a:	f7fe fcf7 	bl	800c48c <USBD_Init>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d001      	beq.n	800daa8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800daa4:	f7f3 fc66 	bl	8001374 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800daa8:	490f      	ldr	r1, [pc, #60]	@ (800dae8 <MX_USB_DEVICE_Init+0x58>)
 800daaa:	480e      	ldr	r0, [pc, #56]	@ (800dae4 <MX_USB_DEVICE_Init+0x54>)
 800daac:	f7fe fd1e 	bl	800c4ec <USBD_RegisterClass>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dab6:	f7f3 fc5d 	bl	8001374 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800daba:	490c      	ldr	r1, [pc, #48]	@ (800daec <MX_USB_DEVICE_Init+0x5c>)
 800dabc:	4809      	ldr	r0, [pc, #36]	@ (800dae4 <MX_USB_DEVICE_Init+0x54>)
 800dabe:	f7fe fc15 	bl	800c2ec <USBD_CDC_RegisterInterface>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dac8:	f7f3 fc54 	bl	8001374 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dacc:	4805      	ldr	r0, [pc, #20]	@ (800dae4 <MX_USB_DEVICE_Init+0x54>)
 800dace:	f7fe fd43 	bl	800c558 <USBD_Start>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d001      	beq.n	800dadc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dad8:	f7f3 fc4c 	bl	8001374 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dadc:	bf00      	nop
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	200000b4 	.word	0x200000b4
 800dae4:	200130b4 	.word	0x200130b4
 800dae8:	20000020 	.word	0x20000020
 800daec:	200000a0 	.word	0x200000a0

0800daf0 <parse_packet>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
int8_t parse_packet(uint8_t *buffer, uint16_t packet_length, SensorData *data) {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	460b      	mov	r3, r1
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	817b      	strh	r3, [r7, #10]
    // Ensure the packet is large enough
    if (packet_length < 8) { // Minimum size: danger(1) + proximity(4) + roadTypeLength(1) + quality(4)
 800dafe:	897b      	ldrh	r3, [r7, #10]
 800db00:	2b07      	cmp	r3, #7
 800db02:	d801      	bhi.n	800db08 <parse_packet+0x18>
        return 0;
 800db04:	2300      	movs	r3, #0
 800db06:	e050      	b.n	800dbaa <parse_packet+0xba>
    }

    // Step 1: Extract fields
    uint8_t *ptr = buffer + 3;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3303      	adds	r3, #3
 800db0c:	617b      	str	r3, [r7, #20]
    data->danger = *ptr; // 1 byte
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	b25a      	sxtb	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	701a      	strb	r2, [r3, #0]
    ptr += 1;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	3301      	adds	r3, #1
 800db1c:	617b      	str	r3, [r7, #20]

    data->dangerProximity = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	061a      	lsls	r2, r3, #24
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	3301      	adds	r3, #1
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	041b      	lsls	r3, r3, #16
 800db2c:	431a      	orrs	r2, r3
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	3302      	adds	r3, #2
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	021b      	lsls	r3, r3, #8
 800db36:	4313      	orrs	r3, r2
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	3203      	adds	r2, #3
 800db3c:	7812      	ldrb	r2, [r2, #0]
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	605a      	str	r2, [r3, #4]
    ptr += 4;
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	3304      	adds	r3, #4
 800db48:	617b      	str	r3, [r7, #20]

    uint8_t roadTypeLength = *ptr; // 1 byte
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	74fb      	strb	r3, [r7, #19]
    ptr += 1;
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	3301      	adds	r3, #1
 800db54:	617b      	str	r3, [r7, #20]

    // Ensure the roadType string fits within the buffer
    if (roadTypeLength >= sizeof(data->roadType)) {
 800db56:	7cfb      	ldrb	r3, [r7, #19]
 800db58:	2b04      	cmp	r3, #4
 800db5a:	d901      	bls.n	800db60 <parse_packet+0x70>
        return 0; // String too long
 800db5c:	2300      	movs	r3, #0
 800db5e:	e024      	b.n	800dbaa <parse_packet+0xba>
    }

    // Copy roadType string
    memcpy(data->roadType, ptr, roadTypeLength);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	3308      	adds	r3, #8
 800db64:	7cfa      	ldrb	r2, [r7, #19]
 800db66:	6979      	ldr	r1, [r7, #20]
 800db68:	4618      	mov	r0, r3
 800db6a:	f000 fd73 	bl	800e654 <memcpy>
    data->roadType[roadTypeLength] = '\0'; // Null-terminate
 800db6e:	7cfb      	ldrb	r3, [r7, #19]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	4413      	add	r3, r2
 800db74:	2200      	movs	r2, #0
 800db76:	721a      	strb	r2, [r3, #8]
    ptr += roadTypeLength;
 800db78:	7cfb      	ldrb	r3, [r7, #19]
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	4413      	add	r3, r2
 800db7e:	617b      	str	r3, [r7, #20]

    // Extract roadQuality
    data->roadQuality = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3]; // 4 bytes
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	061a      	lsls	r2, r3, #24
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	3301      	adds	r3, #1
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	041b      	lsls	r3, r3, #16
 800db8e:	431a      	orrs	r2, r3
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	3302      	adds	r3, #2
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	021b      	lsls	r3, r3, #8
 800db98:	4313      	orrs	r3, r2
 800db9a:	697a      	ldr	r2, [r7, #20]
 800db9c:	3203      	adds	r2, #3
 800db9e:	7812      	ldrb	r2, [r2, #0]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	461a      	mov	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	611a      	str	r2, [r3, #16]

    return 1;
 800dba8:	2301      	movs	r3, #1
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dbb8:	2200      	movs	r2, #0
 800dbba:	4905      	ldr	r1, [pc, #20]	@ (800dbd0 <CDC_Init_FS+0x1c>)
 800dbbc:	4805      	ldr	r0, [pc, #20]	@ (800dbd4 <CDC_Init_FS+0x20>)
 800dbbe:	f7fe fbaf 	bl	800c320 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dbc2:	4905      	ldr	r1, [pc, #20]	@ (800dbd8 <CDC_Init_FS+0x24>)
 800dbc4:	4803      	ldr	r0, [pc, #12]	@ (800dbd4 <CDC_Init_FS+0x20>)
 800dbc6:	f7fe fbcd 	bl	800c364 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dbca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20013b90 	.word	0x20013b90
 800dbd4:	200130b4 	.word	0x200130b4
 800dbd8:	20013390 	.word	0x20013390

0800dbdc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbe0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	6039      	str	r1, [r7, #0]
 800dbf6:	71fb      	strb	r3, [r7, #7]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbfc:	79fb      	ldrb	r3, [r7, #7]
 800dbfe:	2b23      	cmp	r3, #35	@ 0x23
 800dc00:	d84a      	bhi.n	800dc98 <CDC_Control_FS+0xac>
 800dc02:	a201      	add	r2, pc, #4	@ (adr r2, 800dc08 <CDC_Control_FS+0x1c>)
 800dc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc08:	0800dc99 	.word	0x0800dc99
 800dc0c:	0800dc99 	.word	0x0800dc99
 800dc10:	0800dc99 	.word	0x0800dc99
 800dc14:	0800dc99 	.word	0x0800dc99
 800dc18:	0800dc99 	.word	0x0800dc99
 800dc1c:	0800dc99 	.word	0x0800dc99
 800dc20:	0800dc99 	.word	0x0800dc99
 800dc24:	0800dc99 	.word	0x0800dc99
 800dc28:	0800dc99 	.word	0x0800dc99
 800dc2c:	0800dc99 	.word	0x0800dc99
 800dc30:	0800dc99 	.word	0x0800dc99
 800dc34:	0800dc99 	.word	0x0800dc99
 800dc38:	0800dc99 	.word	0x0800dc99
 800dc3c:	0800dc99 	.word	0x0800dc99
 800dc40:	0800dc99 	.word	0x0800dc99
 800dc44:	0800dc99 	.word	0x0800dc99
 800dc48:	0800dc99 	.word	0x0800dc99
 800dc4c:	0800dc99 	.word	0x0800dc99
 800dc50:	0800dc99 	.word	0x0800dc99
 800dc54:	0800dc99 	.word	0x0800dc99
 800dc58:	0800dc99 	.word	0x0800dc99
 800dc5c:	0800dc99 	.word	0x0800dc99
 800dc60:	0800dc99 	.word	0x0800dc99
 800dc64:	0800dc99 	.word	0x0800dc99
 800dc68:	0800dc99 	.word	0x0800dc99
 800dc6c:	0800dc99 	.word	0x0800dc99
 800dc70:	0800dc99 	.word	0x0800dc99
 800dc74:	0800dc99 	.word	0x0800dc99
 800dc78:	0800dc99 	.word	0x0800dc99
 800dc7c:	0800dc99 	.word	0x0800dc99
 800dc80:	0800dc99 	.word	0x0800dc99
 800dc84:	0800dc99 	.word	0x0800dc99
 800dc88:	0800dc99 	.word	0x0800dc99
 800dc8c:	0800dc99 	.word	0x0800dc99
 800dc90:	0800dc99 	.word	0x0800dc99
 800dc94:	0800dc99 	.word	0x0800dc99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc98:	bf00      	nop
  }

  return (USBD_OK);
 800dc9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dca8:	b5b0      	push	{r4, r5, r7, lr}
 800dcaa:	b08e      	sub	sp, #56	@ 0x38
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SensorData data;
	if(!parse_packet(Buf, *Len, &data)){
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff ff16 	bl	800daf0 <parse_packet>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d119      	bne.n	800dcfe <CDC_Receive_FS+0x56>
		uint8_t error_response[] = "Invalid packet format";
 800dcca:	4b18      	ldr	r3, [pc, #96]	@ (800dd2c <CDC_Receive_FS+0x84>)
 800dccc:	f107 040c 	add.w	r4, r7, #12
 800dcd0:	461d      	mov	r5, r3
 800dcd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dcda:	6020      	str	r0, [r4, #0]
 800dcdc:	3404      	adds	r4, #4
 800dcde:	8021      	strh	r1, [r4, #0]
		CDC_Transmit_FS(error_response, strlen((char*)error_response));
 800dce0:	f107 030c 	add.w	r3, r7, #12
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7f2 fa7b 	bl	80001e0 <strlen>
 800dcea:	4603      	mov	r3, r0
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	f107 030c 	add.w	r3, r7, #12
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f821 	bl	800dd3c <CDC_Transmit_FS>
		return USBD_FAIL;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	e012      	b.n	800dd24 <CDC_Receive_FS+0x7c>
	}

	recivedData = data;
 800dcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800dd30 <CDC_Receive_FS+0x88>)
 800dd00:	461d      	mov	r5, r3
 800dd02:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800dd06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	602b      	str	r3, [r5, #0]
	isDefined = 1;
 800dd0e:	4b09      	ldr	r3, [pc, #36]	@ (800dd34 <CDC_Receive_FS+0x8c>)
 800dd10:	2201      	movs	r2, #1
 800dd12:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	4808      	ldr	r0, [pc, #32]	@ (800dd38 <CDC_Receive_FS+0x90>)
 800dd18:	f7fe fb24 	bl	800c364 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dd1c:	4806      	ldr	r0, [pc, #24]	@ (800dd38 <CDC_Receive_FS+0x90>)
 800dd1e:	f7fe fb7f 	bl	800c420 <USBD_CDC_ReceivePacket>

//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	return (USBD_OK);
 800dd22:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3738      	adds	r7, #56	@ 0x38
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bdb0      	pop	{r4, r5, r7, pc}
 800dd2c:	0800e6f8 	.word	0x0800e6f8
 800dd30:	20014394 	.word	0x20014394
 800dd34:	20014390 	.word	0x20014390
 800dd38:	200130b4 	.word	0x200130b4

0800dd3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	460b      	mov	r3, r1
 800dd46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd4c:	4b0d      	ldr	r3, [pc, #52]	@ (800dd84 <CDC_Transmit_FS+0x48>)
 800dd4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e00b      	b.n	800dd7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd62:	887b      	ldrh	r3, [r7, #2]
 800dd64:	461a      	mov	r2, r3
 800dd66:	6879      	ldr	r1, [r7, #4]
 800dd68:	4806      	ldr	r0, [pc, #24]	@ (800dd84 <CDC_Transmit_FS+0x48>)
 800dd6a:	f7fe fad9 	bl	800c320 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd6e:	4805      	ldr	r0, [pc, #20]	@ (800dd84 <CDC_Transmit_FS+0x48>)
 800dd70:	f7fe fb16 	bl	800c3a0 <USBD_CDC_TransmitPacket>
 800dd74:	4603      	mov	r3, r0
 800dd76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	200130b4 	.word	0x200130b4

0800dd88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	4613      	mov	r3, r2
 800dd94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	371c      	adds	r7, #28
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
	...

0800ddac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	6039      	str	r1, [r7, #0]
 800ddb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2212      	movs	r2, #18
 800ddbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ddbe:	4b03      	ldr	r3, [pc, #12]	@ (800ddcc <USBD_FS_DeviceDescriptor+0x20>)
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	200000d0 	.word	0x200000d0

0800ddd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	6039      	str	r1, [r7, #0]
 800ddda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	2204      	movs	r2, #4
 800dde0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dde2:	4b03      	ldr	r3, [pc, #12]	@ (800ddf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	200000e4 	.word	0x200000e4

0800ddf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	6039      	str	r1, [r7, #0]
 800ddfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de00:	79fb      	ldrb	r3, [r7, #7]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d105      	bne.n	800de12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	4907      	ldr	r1, [pc, #28]	@ (800de28 <USBD_FS_ProductStrDescriptor+0x34>)
 800de0a:	4808      	ldr	r0, [pc, #32]	@ (800de2c <USBD_FS_ProductStrDescriptor+0x38>)
 800de0c:	f7ff fd54 	bl	800d8b8 <USBD_GetString>
 800de10:	e004      	b.n	800de1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de12:	683a      	ldr	r2, [r7, #0]
 800de14:	4904      	ldr	r1, [pc, #16]	@ (800de28 <USBD_FS_ProductStrDescriptor+0x34>)
 800de16:	4805      	ldr	r0, [pc, #20]	@ (800de2c <USBD_FS_ProductStrDescriptor+0x38>)
 800de18:	f7ff fd4e 	bl	800d8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de1c:	4b02      	ldr	r3, [pc, #8]	@ (800de28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	200143a8 	.word	0x200143a8
 800de2c:	0800e710 	.word	0x0800e710

0800de30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	6039      	str	r1, [r7, #0]
 800de3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	4904      	ldr	r1, [pc, #16]	@ (800de50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de40:	4804      	ldr	r0, [pc, #16]	@ (800de54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de42:	f7ff fd39 	bl	800d8b8 <USBD_GetString>
  return USBD_StrDesc;
 800de46:	4b02      	ldr	r3, [pc, #8]	@ (800de50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	200143a8 	.word	0x200143a8
 800de54:	0800e720 	.word	0x0800e720

0800de58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4603      	mov	r3, r0
 800de60:	6039      	str	r1, [r7, #0]
 800de62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	221a      	movs	r2, #26
 800de68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de6a:	f000 f843 	bl	800def4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800de6e:	4b02      	ldr	r3, [pc, #8]	@ (800de78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	200000e8 	.word	0x200000e8

0800de7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	4603      	mov	r3, r0
 800de84:	6039      	str	r1, [r7, #0]
 800de86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de88:	79fb      	ldrb	r3, [r7, #7]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d105      	bne.n	800de9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de8e:	683a      	ldr	r2, [r7, #0]
 800de90:	4907      	ldr	r1, [pc, #28]	@ (800deb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de92:	4808      	ldr	r0, [pc, #32]	@ (800deb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de94:	f7ff fd10 	bl	800d8b8 <USBD_GetString>
 800de98:	e004      	b.n	800dea4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	4904      	ldr	r1, [pc, #16]	@ (800deb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de9e:	4805      	ldr	r0, [pc, #20]	@ (800deb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dea0:	f7ff fd0a 	bl	800d8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dea4:	4b02      	ldr	r3, [pc, #8]	@ (800deb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	200143a8 	.word	0x200143a8
 800deb4:	0800e734 	.word	0x0800e734

0800deb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	6039      	str	r1, [r7, #0]
 800dec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dec4:	79fb      	ldrb	r3, [r7, #7]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d105      	bne.n	800ded6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	4907      	ldr	r1, [pc, #28]	@ (800deec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dece:	4808      	ldr	r0, [pc, #32]	@ (800def0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ded0:	f7ff fcf2 	bl	800d8b8 <USBD_GetString>
 800ded4:	e004      	b.n	800dee0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	4904      	ldr	r1, [pc, #16]	@ (800deec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800deda:	4805      	ldr	r0, [pc, #20]	@ (800def0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dedc:	f7ff fcec 	bl	800d8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dee0:	4b02      	ldr	r3, [pc, #8]	@ (800deec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	200143a8 	.word	0x200143a8
 800def0:	0800e740 	.word	0x0800e740

0800def4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800defa:	4b0f      	ldr	r3, [pc, #60]	@ (800df38 <Get_SerialNum+0x44>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df00:	4b0e      	ldr	r3, [pc, #56]	@ (800df3c <Get_SerialNum+0x48>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df06:	4b0e      	ldr	r3, [pc, #56]	@ (800df40 <Get_SerialNum+0x4c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4413      	add	r3, r2
 800df12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d009      	beq.n	800df2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df1a:	2208      	movs	r2, #8
 800df1c:	4909      	ldr	r1, [pc, #36]	@ (800df44 <Get_SerialNum+0x50>)
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f000 f814 	bl	800df4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df24:	2204      	movs	r2, #4
 800df26:	4908      	ldr	r1, [pc, #32]	@ (800df48 <Get_SerialNum+0x54>)
 800df28:	68b8      	ldr	r0, [r7, #8]
 800df2a:	f000 f80f 	bl	800df4c <IntToUnicode>
  }
}
 800df2e:	bf00      	nop
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	1fff7a10 	.word	0x1fff7a10
 800df3c:	1fff7a14 	.word	0x1fff7a14
 800df40:	1fff7a18 	.word	0x1fff7a18
 800df44:	200000ea 	.word	0x200000ea
 800df48:	200000fa 	.word	0x200000fa

0800df4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4613      	mov	r3, r2
 800df58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df5e:	2300      	movs	r3, #0
 800df60:	75fb      	strb	r3, [r7, #23]
 800df62:	e027      	b.n	800dfb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	0f1b      	lsrs	r3, r3, #28
 800df68:	2b09      	cmp	r3, #9
 800df6a:	d80b      	bhi.n	800df84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	0f1b      	lsrs	r3, r3, #28
 800df70:	b2da      	uxtb	r2, r3
 800df72:	7dfb      	ldrb	r3, [r7, #23]
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	4619      	mov	r1, r3
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	440b      	add	r3, r1
 800df7c:	3230      	adds	r2, #48	@ 0x30
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	701a      	strb	r2, [r3, #0]
 800df82:	e00a      	b.n	800df9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	0f1b      	lsrs	r3, r3, #28
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	7dfb      	ldrb	r3, [r7, #23]
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	4619      	mov	r1, r3
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	440b      	add	r3, r1
 800df94:	3237      	adds	r2, #55	@ 0x37
 800df96:	b2d2      	uxtb	r2, r2
 800df98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	011b      	lsls	r3, r3, #4
 800df9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dfa0:	7dfb      	ldrb	r3, [r7, #23]
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	2200      	movs	r2, #0
 800dfac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfae:	7dfb      	ldrb	r3, [r7, #23]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	75fb      	strb	r3, [r7, #23]
 800dfb4:	7dfa      	ldrb	r2, [r7, #23]
 800dfb6:	79fb      	ldrb	r3, [r7, #7]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d3d3      	bcc.n	800df64 <IntToUnicode+0x18>
  }
}
 800dfbc:	bf00      	nop
 800dfbe:	bf00      	nop
 800dfc0:	371c      	adds	r7, #28
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
	...

0800dfcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08a      	sub	sp, #40	@ 0x28
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfd4:	f107 0314 	add.w	r3, r7, #20
 800dfd8:	2200      	movs	r2, #0
 800dfda:	601a      	str	r2, [r3, #0]
 800dfdc:	605a      	str	r2, [r3, #4]
 800dfde:	609a      	str	r2, [r3, #8]
 800dfe0:	60da      	str	r2, [r3, #12]
 800dfe2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dfec:	d147      	bne.n	800e07e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfee:	2300      	movs	r3, #0
 800dff0:	613b      	str	r3, [r7, #16]
 800dff2:	4b25      	ldr	r3, [pc, #148]	@ (800e088 <HAL_PCD_MspInit+0xbc>)
 800dff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dff6:	4a24      	ldr	r2, [pc, #144]	@ (800e088 <HAL_PCD_MspInit+0xbc>)
 800dff8:	f043 0301 	orr.w	r3, r3, #1
 800dffc:	6313      	str	r3, [r2, #48]	@ 0x30
 800dffe:	4b22      	ldr	r3, [pc, #136]	@ (800e088 <HAL_PCD_MspInit+0xbc>)
 800e000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e002:	f003 0301 	and.w	r3, r3, #1
 800e006:	613b      	str	r3, [r7, #16]
 800e008:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e00a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e00e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e010:	2300      	movs	r3, #0
 800e012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e014:	2300      	movs	r3, #0
 800e016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e018:	f107 0314 	add.w	r3, r7, #20
 800e01c:	4619      	mov	r1, r3
 800e01e:	481b      	ldr	r0, [pc, #108]	@ (800e08c <HAL_PCD_MspInit+0xc0>)
 800e020:	f7f3 fdc0 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e024:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800e028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e02a:	2302      	movs	r3, #2
 800e02c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e02e:	2300      	movs	r3, #0
 800e030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e032:	2303      	movs	r3, #3
 800e034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e036:	230a      	movs	r3, #10
 800e038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e03a:	f107 0314 	add.w	r3, r7, #20
 800e03e:	4619      	mov	r1, r3
 800e040:	4812      	ldr	r0, [pc, #72]	@ (800e08c <HAL_PCD_MspInit+0xc0>)
 800e042:	f7f3 fdaf 	bl	8001ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e046:	4b10      	ldr	r3, [pc, #64]	@ (800e088 <HAL_PCD_MspInit+0xbc>)
 800e048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e04a:	4a0f      	ldr	r2, [pc, #60]	@ (800e088 <HAL_PCD_MspInit+0xbc>)
 800e04c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e050:	6353      	str	r3, [r2, #52]	@ 0x34
 800e052:	2300      	movs	r3, #0
 800e054:	60fb      	str	r3, [r7, #12]
 800e056:	4b0c      	ldr	r3, [pc, #48]	@ (800e088 <HAL_PCD_MspInit+0xbc>)
 800e058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e05a:	4a0b      	ldr	r2, [pc, #44]	@ (800e088 <HAL_PCD_MspInit+0xbc>)
 800e05c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e060:	6453      	str	r3, [r2, #68]	@ 0x44
 800e062:	4b09      	ldr	r3, [pc, #36]	@ (800e088 <HAL_PCD_MspInit+0xbc>)
 800e064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e06e:	2200      	movs	r2, #0
 800e070:	2100      	movs	r1, #0
 800e072:	2043      	movs	r0, #67	@ 0x43
 800e074:	f7f3 fd6c 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e078:	2043      	movs	r0, #67	@ 0x43
 800e07a:	f7f3 fd85 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e07e:	bf00      	nop
 800e080:	3728      	adds	r7, #40	@ 0x28
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	40023800 	.word	0x40023800
 800e08c:	40020000 	.word	0x40020000

0800e090 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	f7fe faa3 	bl	800c5f2 <USBD_LL_SetupStage>
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e0c6:	78fa      	ldrb	r2, [r7, #3]
 800e0c8:	6879      	ldr	r1, [r7, #4]
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	00db      	lsls	r3, r3, #3
 800e0ce:	4413      	add	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	440b      	add	r3, r1
 800e0d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	78fb      	ldrb	r3, [r7, #3]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	f7fe fadd 	bl	800c69c <USBD_LL_DataOutStage>
}
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b082      	sub	sp, #8
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e0fc:	78fa      	ldrb	r2, [r7, #3]
 800e0fe:	6879      	ldr	r1, [r7, #4]
 800e100:	4613      	mov	r3, r2
 800e102:	00db      	lsls	r3, r3, #3
 800e104:	4413      	add	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	440b      	add	r3, r1
 800e10a:	3320      	adds	r3, #32
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	78fb      	ldrb	r3, [r7, #3]
 800e110:	4619      	mov	r1, r3
 800e112:	f7fe fb76 	bl	800c802 <USBD_LL_DataInStage>
}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b082      	sub	sp, #8
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe fcb0 	bl	800ca92 <USBD_LL_SOF>
}
 800e132:	bf00      	nop
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e142:	2301      	movs	r3, #1
 800e144:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	79db      	ldrb	r3, [r3, #7]
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	d001      	beq.n	800e152 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e14e:	f7f3 f911 	bl	8001374 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e158:	7bfa      	ldrb	r2, [r7, #15]
 800e15a:	4611      	mov	r1, r2
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fe fc54 	bl	800ca0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fe fbfc 	bl	800c966 <USBD_LL_Reset>
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e186:	4618      	mov	r0, r3
 800e188:	f7fe fc4f 	bl	800ca2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	6812      	ldr	r2, [r2, #0]
 800e19a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e19e:	f043 0301 	orr.w	r3, r3, #1
 800e1a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	7adb      	ldrb	r3, [r3, #11]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d005      	beq.n	800e1b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1ac:	4b04      	ldr	r3, [pc, #16]	@ (800e1c0 <HAL_PCD_SuspendCallback+0x48>)
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	4a03      	ldr	r2, [pc, #12]	@ (800e1c0 <HAL_PCD_SuspendCallback+0x48>)
 800e1b2:	f043 0306 	orr.w	r3, r3, #6
 800e1b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1b8:	bf00      	nop
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	e000ed00 	.word	0xe000ed00

0800e1c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe fc45 	bl	800ca62 <USBD_LL_Resume>
}
 800e1d8:	bf00      	nop
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1f2:	78fa      	ldrb	r2, [r7, #3]
 800e1f4:	4611      	mov	r1, r2
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fe fc9d 	bl	800cb36 <USBD_LL_IsoOUTIncomplete>
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	460b      	mov	r3, r1
 800e20e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e216:	78fa      	ldrb	r2, [r7, #3]
 800e218:	4611      	mov	r1, r2
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fe fc59 	bl	800cad2 <USBD_LL_IsoINIncomplete>
}
 800e220:	bf00      	nop
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e236:	4618      	mov	r0, r3
 800e238:	f7fe fcaf 	bl	800cb9a <USBD_LL_DevConnected>
}
 800e23c:	bf00      	nop
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e252:	4618      	mov	r0, r3
 800e254:	f7fe fcac 	bl	800cbb0 <USBD_LL_DevDisconnected>
}
 800e258:	bf00      	nop
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d13c      	bne.n	800e2ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e270:	4a20      	ldr	r2, [pc, #128]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4a1e      	ldr	r2, [pc, #120]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e27c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e280:	4b1c      	ldr	r3, [pc, #112]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e282:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e286:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e288:	4b1a      	ldr	r3, [pc, #104]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e28a:	2204      	movs	r2, #4
 800e28c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e28e:	4b19      	ldr	r3, [pc, #100]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e290:	2202      	movs	r2, #2
 800e292:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e294:	4b17      	ldr	r3, [pc, #92]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e296:	2200      	movs	r2, #0
 800e298:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e29a:	4b16      	ldr	r3, [pc, #88]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e29c:	2202      	movs	r2, #2
 800e29e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e2a0:	4b14      	ldr	r3, [pc, #80]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e2a6:	4b13      	ldr	r3, [pc, #76]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e2ac:	4b11      	ldr	r3, [pc, #68]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e2b2:	4b10      	ldr	r3, [pc, #64]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e2b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2be:	480d      	ldr	r0, [pc, #52]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2c0:	f7f5 faea 	bl	8003898 <HAL_PCD_Init>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d001      	beq.n	800e2ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e2ca:	f7f3 f853 	bl	8001374 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e2ce:	2180      	movs	r1, #128	@ 0x80
 800e2d0:	4808      	ldr	r0, [pc, #32]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2d2:	f7f6 fd16 	bl	8004d02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e2d6:	2240      	movs	r2, #64	@ 0x40
 800e2d8:	2100      	movs	r1, #0
 800e2da:	4806      	ldr	r0, [pc, #24]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2dc:	f7f6 fcca 	bl	8004c74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e2e0:	2280      	movs	r2, #128	@ 0x80
 800e2e2:	2101      	movs	r1, #1
 800e2e4:	4803      	ldr	r0, [pc, #12]	@ (800e2f4 <USBD_LL_Init+0x94>)
 800e2e6:	f7f6 fcc5 	bl	8004c74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	200145a8 	.word	0x200145a8

0800e2f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e304:	2300      	movs	r3, #0
 800e306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e30e:	4618      	mov	r0, r3
 800e310:	f7f5 fbd1 	bl	8003ab6 <HAL_PCD_Start>
 800e314:	4603      	mov	r3, r0
 800e316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e318:	7bfb      	ldrb	r3, [r7, #15]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 f942 	bl	800e5a4 <USBD_Get_USB_Status>
 800e320:	4603      	mov	r3, r0
 800e322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e324:	7bbb      	ldrb	r3, [r7, #14]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	4608      	mov	r0, r1
 800e338:	4611      	mov	r1, r2
 800e33a:	461a      	mov	r2, r3
 800e33c:	4603      	mov	r3, r0
 800e33e:	70fb      	strb	r3, [r7, #3]
 800e340:	460b      	mov	r3, r1
 800e342:	70bb      	strb	r3, [r7, #2]
 800e344:	4613      	mov	r3, r2
 800e346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e356:	78bb      	ldrb	r3, [r7, #2]
 800e358:	883a      	ldrh	r2, [r7, #0]
 800e35a:	78f9      	ldrb	r1, [r7, #3]
 800e35c:	f7f6 f8a5 	bl	80044aa <HAL_PCD_EP_Open>
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	4618      	mov	r0, r3
 800e368:	f000 f91c 	bl	800e5a4 <USBD_Get_USB_Status>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e370:	7bbb      	ldrb	r3, [r7, #14]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b084      	sub	sp, #16
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	460b      	mov	r3, r1
 800e384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e394:	78fa      	ldrb	r2, [r7, #3]
 800e396:	4611      	mov	r1, r2
 800e398:	4618      	mov	r0, r3
 800e39a:	f7f6 f8f0 	bl	800457e <HAL_PCD_EP_Close>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a2:	7bfb      	ldrb	r3, [r7, #15]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 f8fd 	bl	800e5a4 <USBD_Get_USB_Status>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3d2:	78fa      	ldrb	r2, [r7, #3]
 800e3d4:	4611      	mov	r1, r2
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7f6 f9a8 	bl	800472c <HAL_PCD_EP_SetStall>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3e0:	7bfb      	ldrb	r3, [r7, #15]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 f8de 	bl	800e5a4 <USBD_Get_USB_Status>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b084      	sub	sp, #16
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
 800e3fe:	460b      	mov	r3, r1
 800e400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e406:	2300      	movs	r3, #0
 800e408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e410:	78fa      	ldrb	r2, [r7, #3]
 800e412:	4611      	mov	r1, r2
 800e414:	4618      	mov	r0, r3
 800e416:	f7f6 f9ec 	bl	80047f2 <HAL_PCD_EP_ClrStall>
 800e41a:	4603      	mov	r3, r0
 800e41c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e41e:	7bfb      	ldrb	r3, [r7, #15]
 800e420:	4618      	mov	r0, r3
 800e422:	f000 f8bf 	bl	800e5a4 <USBD_Get_USB_Status>
 800e426:	4603      	mov	r3, r0
 800e428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e42a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	460b      	mov	r3, r1
 800e43e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	da0b      	bge.n	800e468 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	4613      	mov	r3, r2
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	4413      	add	r3, r2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	440b      	add	r3, r1
 800e462:	3316      	adds	r3, #22
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	e00b      	b.n	800e480 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e468:	78fb      	ldrb	r3, [r7, #3]
 800e46a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e46e:	68f9      	ldr	r1, [r7, #12]
 800e470:	4613      	mov	r3, r2
 800e472:	00db      	lsls	r3, r3, #3
 800e474:	4413      	add	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	440b      	add	r3, r1
 800e47a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e47e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e480:	4618      	mov	r0, r3
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4a6:	78fa      	ldrb	r2, [r7, #3]
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7f5 ffd9 	bl	8004462 <HAL_PCD_SetAddress>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 f874 	bl	800e5a4 <USBD_Get_USB_Status>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b086      	sub	sp, #24
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	60f8      	str	r0, [r7, #12]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	603b      	str	r3, [r7, #0]
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4e8:	7af9      	ldrb	r1, [r7, #11]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	f7f6 f8e3 	bl	80046b8 <HAL_PCD_EP_Transmit>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4f6:	7dfb      	ldrb	r3, [r7, #23]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 f853 	bl	800e5a4 <USBD_Get_USB_Status>
 800e4fe:	4603      	mov	r3, r0
 800e500:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e502:	7dbb      	ldrb	r3, [r7, #22]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3718      	adds	r7, #24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b086      	sub	sp, #24
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	607a      	str	r2, [r7, #4]
 800e516:	603b      	str	r3, [r7, #0]
 800e518:	460b      	mov	r3, r1
 800e51a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e520:	2300      	movs	r3, #0
 800e522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e52a:	7af9      	ldrb	r1, [r7, #11]
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	f7f6 f86f 	bl	8004612 <HAL_PCD_EP_Receive>
 800e534:	4603      	mov	r3, r0
 800e536:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e538:	7dfb      	ldrb	r3, [r7, #23]
 800e53a:	4618      	mov	r0, r3
 800e53c:	f000 f832 	bl	800e5a4 <USBD_Get_USB_Status>
 800e540:	4603      	mov	r3, r0
 800e542:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e544:	7dbb      	ldrb	r3, [r7, #22]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b082      	sub	sp, #8
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
 800e556:	460b      	mov	r3, r1
 800e558:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e560:	78fa      	ldrb	r2, [r7, #3]
 800e562:	4611      	mov	r1, r2
 800e564:	4618      	mov	r0, r3
 800e566:	f7f6 f88f 	bl	8004688 <HAL_PCD_EP_GetRxCount>
 800e56a:	4603      	mov	r3, r0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e57c:	4b03      	ldr	r3, [pc, #12]	@ (800e58c <USBD_static_malloc+0x18>)
}
 800e57e:	4618      	mov	r0, r3
 800e580:	370c      	adds	r7, #12
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	20014a8c 	.word	0x20014a8c

0800e590 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]

}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5b2:	79fb      	ldrb	r3, [r7, #7]
 800e5b4:	2b03      	cmp	r3, #3
 800e5b6:	d817      	bhi.n	800e5e8 <USBD_Get_USB_Status+0x44>
 800e5b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c0 <USBD_Get_USB_Status+0x1c>)
 800e5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5be:	bf00      	nop
 800e5c0:	0800e5d1 	.word	0x0800e5d1
 800e5c4:	0800e5d7 	.word	0x0800e5d7
 800e5c8:	0800e5dd 	.word	0x0800e5dd
 800e5cc:	0800e5e3 	.word	0x0800e5e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e5d4:	e00b      	b.n	800e5ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e5da:	e008      	b.n	800e5ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e0:	e005      	b.n	800e5ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e6:	e002      	b.n	800e5ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ec:	bf00      	nop
  }
  return usb_status;
 800e5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3714      	adds	r7, #20
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <memset>:
 800e5fc:	4402      	add	r2, r0
 800e5fe:	4603      	mov	r3, r0
 800e600:	4293      	cmp	r3, r2
 800e602:	d100      	bne.n	800e606 <memset+0xa>
 800e604:	4770      	bx	lr
 800e606:	f803 1b01 	strb.w	r1, [r3], #1
 800e60a:	e7f9      	b.n	800e600 <memset+0x4>

0800e60c <__libc_init_array>:
 800e60c:	b570      	push	{r4, r5, r6, lr}
 800e60e:	4d0d      	ldr	r5, [pc, #52]	@ (800e644 <__libc_init_array+0x38>)
 800e610:	4c0d      	ldr	r4, [pc, #52]	@ (800e648 <__libc_init_array+0x3c>)
 800e612:	1b64      	subs	r4, r4, r5
 800e614:	10a4      	asrs	r4, r4, #2
 800e616:	2600      	movs	r6, #0
 800e618:	42a6      	cmp	r6, r4
 800e61a:	d109      	bne.n	800e630 <__libc_init_array+0x24>
 800e61c:	4d0b      	ldr	r5, [pc, #44]	@ (800e64c <__libc_init_array+0x40>)
 800e61e:	4c0c      	ldr	r4, [pc, #48]	@ (800e650 <__libc_init_array+0x44>)
 800e620:	f000 f826 	bl	800e670 <_init>
 800e624:	1b64      	subs	r4, r4, r5
 800e626:	10a4      	asrs	r4, r4, #2
 800e628:	2600      	movs	r6, #0
 800e62a:	42a6      	cmp	r6, r4
 800e62c:	d105      	bne.n	800e63a <__libc_init_array+0x2e>
 800e62e:	bd70      	pop	{r4, r5, r6, pc}
 800e630:	f855 3b04 	ldr.w	r3, [r5], #4
 800e634:	4798      	blx	r3
 800e636:	3601      	adds	r6, #1
 800e638:	e7ee      	b.n	800e618 <__libc_init_array+0xc>
 800e63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e63e:	4798      	blx	r3
 800e640:	3601      	adds	r6, #1
 800e642:	e7f2      	b.n	800e62a <__libc_init_array+0x1e>
 800e644:	0800e770 	.word	0x0800e770
 800e648:	0800e770 	.word	0x0800e770
 800e64c:	0800e770 	.word	0x0800e770
 800e650:	0800e774 	.word	0x0800e774

0800e654 <memcpy>:
 800e654:	440a      	add	r2, r1
 800e656:	4291      	cmp	r1, r2
 800e658:	f100 33ff 	add.w	r3, r0, #4294967295
 800e65c:	d100      	bne.n	800e660 <memcpy+0xc>
 800e65e:	4770      	bx	lr
 800e660:	b510      	push	{r4, lr}
 800e662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e66a:	4291      	cmp	r1, r2
 800e66c:	d1f9      	bne.n	800e662 <memcpy+0xe>
 800e66e:	bd10      	pop	{r4, pc}

0800e670 <_init>:
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e672:	bf00      	nop
 800e674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e676:	bc08      	pop	{r3}
 800e678:	469e      	mov	lr, r3
 800e67a:	4770      	bx	lr

0800e67c <_fini>:
 800e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67e:	bf00      	nop
 800e680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e682:	bc08      	pop	{r3}
 800e684:	469e      	mov	lr, r3
 800e686:	4770      	bx	lr
